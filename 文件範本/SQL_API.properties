AA_TEXT=SELECT A.CODE_ID,B.CODE_ID,* \nFROM JH_WS02_CODE_LIST AS A WITH(NOLOCK) \nLEFT JOIN \nJHDFM_DB_118.DBO.JH_WS02_CODE_LIST AS B WITH(NOLOCK) ON A.CODE_ID \= B.CODE_ID
aaa=select *  from  sam.test1
AAA=SELECT * FROM TEST
AD_CHECK=PLUGINS/AD_CHECK/AD_MAIN.kjb
AD_LOGIN=SELECT TOP 1 CW_IDX, WEB_SERVICE_IP, WEB_SERVICE_CODE, WEB_SERVICE_NAME, WEB_SERVICE_DOMAIN, WEB_SERVICE_SUB_DOMAIN FROM JH_WS02_WEBSERVICE_INFO WHERE IS_DOING \= ?
ADDNEW_IP_WS_CODE=/*刪除目的資料*/\nDELETE FROM JH_WS02_CODE_IP_RELATION\nDELETE FROM JH_WS02_CODE_WS_RELATION\n\n/*新增四組IP*/\nINSERT INTO JH_WS02_CODE_IP_RELATION( CODE_ID_PK,ACCESSED_IP,ACCESSED_DESC,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,DEL_USER_ID,DEL_USER_COMPANY_ID,DEL_DT,DATA_STATUS ) SELECT PK AS 'CODE_ID_PK',IP,NULL,'root','MLI',CONVERT(VARCHAR(19), GETDATE(),120),NULL,NULL,NULL,NULL,NULL,NULL,'0' AS 'DATA_STATUS' FROM JH_WS02_CODE_LIST AS M LEFT JOIN ($$WHERE$$) AS D ON 1\=1 ORDER BY PK\n\n/*新增兩台主機*/\nINSERT INTO JH_WS02_CODE_WS_RELATION( CODE_ID_PK,CLASS_NUM,WEB_SERVICE_CODE,CODE_URL,IS_DOING,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,DEL_USER_ID,DEL_USER_COMPANY_ID,DEL_DT,COMPANY_ID,DATA_STATUS) SELECT PK AS 'CODE_ID_PK', CLASS_NUM,WEB_SERVICE_CODE,NULL,'Y','root','MLI',CONVERT(VARCHAR(19), GETDATE(),120),NULL,NULL,NULL,NULL,NULL,NULL,'MLI','0' AS 'DATA_STATUS' FROM JH_WS02_CODE_LIST AS M LEFT JOIN ($$WHERE2$$) AS D  ON 1\=1 ORDER BY PK\n
AMO_Fn02A001_CUD=DECLARE @PROC_TARGET AS VARCHAR(50); SET @PROC_TARGET \= 'JH_AMO_USERS'; IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD' BEGIN INSERT INTO JH_AMO_USERS(USER_ID, USER_FUNC, USER_AUTH, USER_STATUS, ADD_USER_ID, ADD_USER_COMPANY_ID, ADD_DT) VALUES ('$$USER_ID$$', '1', '$$FUNC_ITEM1$$', '$$USER_STATUS$$', 'root', '$$COMPANY_ID$$', CONVERT(VARCHAR(19), GETDATE(), 120)); INSERT INTO JH_AMO_USERS(USER_ID, USER_FUNC, USER_AUTH, USER_STATUS, ADD_USER_ID, ADD_USER_COMPANY_ID, ADD_DT) VALUES ('$$USER_ID$$', '2', '$$FUNC_ITEM2$$', '$$USER_STATUS$$', 'root', '$$COMPANY_ID$$', CONVERT(VARCHAR(19), GETDATE(), 120)); INSERT INTO JH_AMO_USERS(USER_ID, USER_FUNC, USER_AUTH, USER_STATUS, ADD_USER_ID, ADD_USER_COMPANY_ID, ADD_DT) VALUES ('$$USER_ID$$', '3', '$$FUNC_ITEM3$$', '$$USER_STATUS$$', 'root', '$$COMPANY_ID$$', CONVERT(VARCHAR(19), GETDATE(), 120)); INSERT INTO JH_AMO_USERS(USER_ID, USER_FUNC, USER_AUTH, USER_STATUS, ADD_USER_ID, ADD_USER_COMPANY_ID, ADD_DT) VALUES ('$$USER_ID$$', '4', '$$FUNC_ITEM4$$', '$$USER_STATUS$$', 'root', '$$COMPANY_ID$$', CONVERT(VARCHAR(19), GETDATE(), 120)); INSERT INTO JH_AMO_USERS(USER_ID, USER_FUNC, USER_AUTH, USER_STATUS, ADD_USER_ID, ADD_USER_COMPANY_ID, ADD_DT) VALUES ('$$USER_ID$$', '5', '$$FUNC_ITEM5$$', '$$USER_STATUS$$', 'root', '$$COMPANY_ID$$', CONVERT(VARCHAR(19), GETDATE(), 120)); INSERT INTO JH_AMO_USERS(USER_ID, USER_FUNC, USER_AUTH, USER_STATUS, ADD_USER_ID, ADD_USER_COMPANY_ID, ADD_DT) VALUES ('$$USER_ID$$', '6', '$$FUNC_ITEM6$$', '$$USER_STATUS$$', 'root', '$$COMPANY_ID$$', CONVERT(VARCHAR(19), GETDATE(), 120));; INSERT INTO JH_AMO_USERS(USER_ID, USER_FUNC, USER_AUTH, USER_STATUS, ADD_USER_ID, ADD_USER_COMPANY_ID, ADD_DT) VALUES ('$$USER_ID$$', '7', '$$FUNC_ITEM7$$', '$$USER_STATUS$$', 'root', '$$COMPANY_ID$$', CONVERT(VARCHAR(19), GETDATE(), 120)); INSERT INTO JH_AMO_USERS(USER_ID, USER_FUNC, USER_AUTH, USER_STATUS, ADD_USER_ID, ADD_USER_COMPANY_ID, ADD_DT) VALUES ('$$USER_ID$$', '8', '$$FUNC_ITEM8$$', '$$USER_STATUS$$', 'root', '$$COMPANY_ID$$', CONVERT(VARCHAR(19), GETDATE(), 120)); INSERT INTO DATA_CHANGE_LOG(SessionID, ProcPK, FUNC_ID, PROC_TYPE, PROC_TARGET, USER_ID, DATA_NO, EVENT_DT, MEMO) VALUES ('NONESID', '26502', '$$FunctionID$$', 'insert', @PROC_TARGET, 'root', '$$DATA_NO$$', GETDATE(), '$$MEMO$$'); END ELSE IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD' BEGIN UPDATE JH_AMO_USERS SET USER_STATUS \= '$$USER_STATUS$$' WHERE USER_ID \= '$$USER_ID$$'; UPDATE JH_AMO_USERS SET USER_AUTH \= '$$FUNC_ITEM1$$', LAST_MOD_USER_ID \= 'root', LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$', LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120) WHERE USER_ID \= '$$USER_ID$$' AND USER_FUNC \= '1'; UPDATE JH_AMO_USERS SET USER_AUTH \= '$$FUNC_ITEM2$$', LAST_MOD_USER_ID \= 'root', LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$', LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120) WHERE USER_ID \= '$$USER_ID$$' AND USER_FUNC \= '2'; UPDATE JH_AMO_USERS SET USER_AUTH \= '$$FUNC_ITEM3$$', LAST_MOD_USER_ID \= 'root', LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$', LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120) WHERE USER_ID \= '$$USER_ID$$' AND USER_FUNC \= '3'; UPDATE JH_AMO_USERS SET USER_AUTH \= '$$FUNC_ITEM4$$', LAST_MOD_USER_ID \= 'root', LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$', LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120) WHERE USER_ID \= '$$USER_ID$$' AND USER_FUNC \= '4'; UPDATE JH_AMO_USERS SET USER_AUTH \= '$$FUNC_ITEM5$$', LAST_MOD_USER_ID \= 'root', LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$', LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120) WHERE USER_ID \= '$$USER_ID$$' AND USER_FUNC \= '5'; UPDATE JH_AMO_USERS SET USER_AUTH \= '$$FUNC_ITEM6$$', LAST_MOD_USER_ID \= 'root', LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$', LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120) WHERE USER_ID \= '$$USER_ID$$' AND USER_FUNC \= '6'; UPDATE JH_AMO_USERS SET USER_AUTH \= '$$FUNC_ITEM7$$', LAST_MOD_USER_ID \= 'root', LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$', LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120) WHERE USER_ID \= '$$USER_ID$$' AND USER_FUNC \= '7'; UPDATE JH_AMO_USERS SET USER_AUTH \= '$$FUNC_ITEM8$$', LAST_MOD_USER_ID \= 'root', LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$', LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120) WHERE USER_ID \= '$$USER_ID$$' AND USER_FUNC \= '8'; INSERT INTO DATA_CHANGE_LOG(SessionID, ProcPK, FUNC_ID, PROC_TYPE, PROC_TARGET, USER_ID, DATA_NO, EVENT_DT, MEMO) VALUES ('NONESID', '26502', '$$FunctionID$$', 'update', @PROC_TARGET, 'root', '$$DATA_NO$$', GETDATE(), '$$MEMO$$'); END ELSE IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL' BEGIN UPDATE JH_AMO_USERS SET USER_STATUS \= '1', DEL_USER_ID \= 'root', DEL_USER_COMPANY_ID \= '$$COMPANY_ID$$', DEL_DT \= CONVERT(VARCHAR(19), GETDATE(), 120) WHERE USER_ID \= '$$USER_ID$$' INSERT INTO DATA_CHANGE_LOG(SessionID, ProcPK, FUNC_ID, PROC_TYPE, PROC_TARGET, USER_ID, DATA_NO, EVENT_DT, MEMO) VALUES ('NONESID', '26502', '$$FunctionID$$', 'delete', @PROC_TARGET, 'root', '$$DATA_NO$$', GETDATE(), '$$MEMO$$'); END;
AMO_prop_Fn02A001_1=SELECT USER_ID AS PK_COLUMN, * FROM (SELECT ROW_NUMBER() OVER (ORDER BY [USER_ID]) AS RowNum, * FROM (SELECT * FROM (SELECT [USER_ID], 'FUNC_ITEM'+[USER_FUNC] AS [USER_FUNC], [USER_AUTH], [USER_STATUS], [ADD_USER_ID], [ADD_DT], [LAST_MOD_USER_ID], [LAST_MOD_DT] FROM JH_AMO_USERS) AS AAA pivot(max([USER_AUTH]) FOR [USER_FUNC] IN([FUNC_ITEM1], [FUNC_ITEM2], [FUNC_ITEM3], [FUNC_ITEM4], [FUNC_ITEM5], [FUNC_ITEM6], [FUNC_ITEM7], [FUNC_ITEM8]))AS AAA WHERE ([USER_ID] LIKE '%$$USER_ID$$%' OR '$$USER_ID$$' \= 'ALL') AND ((patindex(replace('%[$$USER_STATUS$$]%', ',', ''), USER_STATUS) > \= 1) OR '$$USER_STATUS$$' \= 'ALL') AND ((patindex(replace('%[$$FUNC_ITEM1$$]%', ',', ''), FUNC_ITEM1) > \= 1) OR '$$FUNC_ITEM1$$' \= 'ALL') AND ((patindex(replace('%[$$FUNC_ITEM2$$]%', ',', ''), FUNC_ITEM2) > \= 1) OR '$$FUNC_ITEM2$$' \= 'ALL') AND ((patindex(replace('%[$$FUNC_ITEM3$$]%', ',', ''), FUNC_ITEM3) > \= 1) OR '$$FUNC_ITEM3$$' \= 'ALL') AND ((patindex(replace('%[$$FUNC_ITEM4$$]%', ',', ''), FUNC_ITEM4) > \= 1) OR '$$FUNC_ITEM4$$' \= 'ALL') AND ((patindex(replace('%[$$FUNC_ITEM5$$]%', ',', ''), FUNC_ITEM5) > \= 1) OR '$$FUNC_ITEM5$$' \= 'ALL') AND ((patindex(replace('%[$$FUNC_ITEM6$$]%', ',', ''), FUNC_ITEM6) > \= 1) OR '$$FUNC_ITEM6$$' \= 'ALL') AND ((patindex(replace('%[$$FUNC_ITEM7$$]%', ',', ''), FUNC_ITEM7) > \= 1) OR '$$FUNC_ITEM7$$' \= 'ALL') AND ((patindex(replace('%[$$FUNC_ITEM8$$]%', ',', ''), FUNC_ITEM8) > \= 1) OR '$$FUNC_ITEM8$$' \= 'ALL'))AS BBB) CCC WHERE RowNum > '$$start$$' AND RowNum < \= '$$limit$$'
API_CHECK_DATASTATUS=PLUGINS/CHECK_DATASTATUS/CHECK_DATASTATUS_MAIN.kjb
API_Comm_AUTH_USER=
API_Comm_CodeTable=SELECT *\nFROM\n  (SELECT COUNT(*) OVER() AS totalProperty,\n          ROW_NUMBER() OVER (ORDER BY SORT_ORDER, CODE_VALUE) AS RowNum,\n          CODE_VALUE,\n          CODE_VALUE_DESC,\n          CODE_VALUE + ' - ' + CODE_VALUE_DESC CODE_VALUE_AND_DESC,\n\t\t  APPLY_VARCHAR_01\n   FROM JH_REF_CODE_DETAIL WITH (NOLOCK)\n   WHERE DISABLE_YN \= 'N' \n     AND (CODE_TYPE       \=    '$$CODE_TYPE$$')\n     AND (CODE_VALUE      LIKE '%$$CODE_VALUE$$%'          OR '$$CODE_VALUE$$'      \= 'ALL')  /*為了combobox的模糊查詢*/\n     AND (CODE_VALUE_DESC LIKE '%$$CODE_VALUE_DESC$$%'     OR '$$CODE_VALUE_DESC$$' \= 'ALL')  /*為了combobox的模糊查詢*/\n     AND (CODE_VALUE      LIKE '%$$CODE_VALUE_AND_DESC$$%' OR CODE_VALUE_DESC LIKE '%$$CODE_VALUE_AND_DESC$$%' OR '$$CODE_VALUE_AND_DESC$$' \= 'ALL')  /*為了combobox的模糊查詢*/\n   ) AS new1\nWHERE RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$);
API_Comm_CodeTable_ALL=WHILE @@TRANCOUNT > 0\n\tCOMMIT;\n\nSET IMPLICIT_TRANSACTIONS OFF;\n\nSELECT *\nFROM\n  (SELECT COUNT(*)     OVER() AS totalProperty\n         ,ROW_NUMBER() OVER (ORDER BY SORT_ORDER, CODE_VALUE) AS RowNum\n         , *\n   FROM (SELECT NULL AS CODE_VALUE, 'ALL' AS CODE_VALUE_DESC, 'ALL' AS CODE_VALUE_AND_DESC, 0 AS SORT_ORDER, '' AS APPLY_VARCHAR_01\n         WHERE '$$CODE_VALUE$$'          IN ('', 'ALL')\n\t\t   AND '$$CODE_VALUE_DESC$$'     IN ('', 'ALL')\n           AND '$$CODE_VALUE_AND_DESC$$' IN ('', 'ALL')\n         UNION ALL\n         SELECT CODE_VALUE\n                ,CODE_VALUE_DESC\n                ,CODE_VALUE + ' - ' + CODE_VALUE_DESC CODE_VALUE_AND_DESC\n\t\t\t\t,SORT_ORDER\n\t\t\t\t,APPLY_VARCHAR_01\n         FROM JH_REF_CODE_DETAIL WITH (NOLOCK)\n         WHERE DISABLE_YN \= 'N' \n           AND (CODE_TYPE       \=    '$$CODE_TYPE$$')\n           AND (CODE_VALUE      LIKE '%$$CODE_VALUE$$%'          OR '$$CODE_VALUE$$'      \= 'ALL')  /*為了combobox的模糊查詢*/\n           AND (CODE_VALUE_DESC LIKE '%$$CODE_VALUE_DESC$$%'     OR '$$CODE_VALUE_DESC$$' \= 'ALL')  /*為了combobox的模糊查詢*/\n           AND (CODE_VALUE      LIKE '%$$CODE_VALUE_AND_DESC$$%' OR CODE_VALUE_DESC LIKE '%$$CODE_VALUE_AND_DESC$$%' OR '$$CODE_VALUE_AND_DESC$$' \= 'ALL' )) AS T /*為了combobox的模糊查詢*/\n  ) AS new1\nWHERE RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$);
API_Comm_WF_Process=DECLARE @RETURN_CODE INT,@RETURN_MSG VARCHAR(1000)\nEXEC JHSP_GET_WF_PROCESS '$$FUNC_ID$$', '$$FORM_PK$$', $$start$$, $$limit$$, @RETURN_CODE, @RETURN_MSG
API_Comm_WF_Process_By_SrcTbName=DECLARE @RETURN_CODE INT,@RETURN_MSG VARCHAR(1000)\nEXEC JHSP_GET_WF_PROCESS_BY_SRC_TB_NAME '$$SRC_TB_NAME$$', '$$FORM_PK$$', $$start$$, $$limit$$, @RETURN_CODE, @RETURN_MSG
API_Fn01B001_CD_PROP_TYPE=/* Last Version\tLast Updated by\t\tLast Updated Date   Comment； \n\t\tv2.2.3\t\t\tSteve\t\t\t\t20200720\t\t\t1. 以 COUNT(*) OVER() 方式解決 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2 段子查詢問題\n\t\tv2.2.3\t\t\tMin\t\t\t\t\t20200828\t\t\t1. 增加 @R1_CONDITION 註解說明\n\t\tv2.2.3\t\t\tSteve\t\t\t\t20201016\t\t\t1. 調整註解\n*/\nSELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY SEQ\n\t\t\t) AS RowNum\n\t\t,DATA_TYPE\n\t\t,DATA_DISPLAY\n\t\t,VALUE\n\t\t,SEQ\n\t\t,IS_ENABLED\n\t\t,IS_BINDING\n\tFROM JH_WS02_REF_MAPDATA_TYPE WITH (NOLOCK)\n\tWHERE IS_ENABLED \= 'Y'\n\t\t/* 當條件為數值時 */\n\t\t/* AND (COLUMN1 \= TRY_CONVERT(INT, NULLIF('$$COLUMN1$$','')) OR '$$COLUMN1$$' \= 'ALL') */\n\t\t/* 當條件為日期時 */\n\t\t/* AND (COLUMN1 \= TRY_CONVERT(DATETIME, NULLIF('$$COLUMN1$$','')) OR '$$COLUMN1$$' \= 'ALL') */\n\t\t/* 當條件為數值起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND不易除錯) */\n\t\t/* 請自行依 SA 規格書調整其大於、大於等於、小於、小於等於\n\t\t   AND (COLUMN1 >\= TRY_CONVERT(INT, NULLIF('$$START$$','')) OR '$$START$$' \= 'ALL')\n\t\t   AND (COLUMN1 <\= TRY_CONVERT(INT, NULLIF('$$END$$','')) OR '$$END$$'   \= 'ALL')\n\t\t*/\n\t\t/* 當條件為日期起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND不易除錯) */\n\t\t/* 請自行依 SA 規格書調整其大於、大於等於、小於、小於等於\n\t\t   AND (COLUMN1 >\= TRY_CONVERT(DATETIME, NULLIF('$$START$$','')) OR '$$START$$' \= 'ALL')\n\t\t   AND (COLUMN1 <\= TRY_CONVERT(DATETIME, NULLIF('$$END$$','')) OR '$$END$$'   \= 'ALL')\n\t\t*/\n\t) AS new1
API_FN01B001_CUD_C=/*開始點：此語法請填入【API_Fn01B001_Master_C】(PROP_MASTER)(LS_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$PROP_ID$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='C';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n \n\t\t/*M TABLE 新增*/\n\t\tINSERT INTO PROP_MASTER("PROP_ID","JNDI_NAME","PROP_DESC","PROP_FILE","PROP_TYPE","ENABLED_FLAG","ADD_USER_ID","ADD_USER_COMPANY_ID","ADD_DT","DATA_STATUS")\n\t\tVALUES ('$$PROP_ID$$','$$JNDI_NAME$$','$$PROP_DESC$$','$$PROP_FILE$$','$$PROP_TYPE$$',N'$$ENABLED_FLAG$$',@vPARAM_SOURCE_COMING,@vPARAM_COMPANY,CONVERT(varchar,GETDATE(),120),'$$DATA_STATUS$$')\n\t\tSET @vPK \= CAST(SCOPE_IDENTITY() AS VARCHAR(200))\n\t\tSET @vMASTER_PK \= @vPK;\n \n \n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'INSERT',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'PROP_MASTER' , @i_LOG_IDENT OUTPUT, 'M'\n \n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'C',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn01B001_Master_C】(PROP_MASTER)(LS_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_FN01B001_CUD_D=/*開始點：此語法請填入【API_Fn01B001_Master_D】(PROP_MASTER)(LS_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$PROP_ID$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='D';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK_PROP$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'PROP_MASTER', 'PK_PROP','int', @vPK \n \n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'DELETE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'PROP_MASTER' , @i_LOG_IDENT OUTPUT, 'M'\n \n\t\t/*M-刪除主檔及明細資料檔*/\n\t\t DELETE PROP_DETAIL WHERE PK_PROP\=@vPK; \n\t\tDELETE PROP_MASTER  WHERE PK_PROP\=@vPK;\n \n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'D',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn01B001_Master_D】(PROP_MASTER)(LS_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_FN01B001_CUD_U=/*開始點：此語法請填入【API_Fn01B001_Master_U】(PROP_MASTER)(LS_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$PROP_ID$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='U';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK_PROP$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'PROP_MASTER', 'PK_PROP','int', @vPK \n \n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'UPDATE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'PROP_MASTER' , @i_LOG_IDENT OUTPUT, 'M'\n \n\t\t/*-修改M TABLE*/\n\t\tUPDATE PROP_MASTER SET\n\t\t"PROP_ID"\= CASE WHEN '$$PROP_ID$$'\='\#NO_DATA\#'  THEN "PROP_ID" ELSE '$$PROP_ID$$' END\n\t\t,"JNDI_NAME"\= CASE WHEN '$$JNDI_NAME$$'\='\#NO_DATA\#'  THEN "JNDI_NAME" ELSE '$$JNDI_NAME$$' END\n\t\t,"PROP_DESC"\= CASE WHEN '$$PROP_DESC$$'\='\#NO_DATA\#'  THEN "PROP_DESC" ELSE '$$PROP_DESC$$' END\n\t\t,"PROP_FILE"\= CASE WHEN '$$PROP_FILE$$'\='\#NO_DATA\#'  THEN "PROP_FILE" ELSE '$$PROP_FILE$$' END\n\t\t,"PROP_TYPE"\= CASE WHEN '$$PROP_TYPE$$'\='\#NO_DATA\#'  THEN "PROP_TYPE" ELSE '$$PROP_TYPE$$' END\n\t\t,"ENABLED_FLAG"\= CASE WHEN '$$ENABLED_FLAG$$'\='\#NO_DATA\#'  THEN "ENABLED_FLAG" ELSE N'$$ENABLED_FLAG$$' END\n\t\t,"LAST_MOD_USER_ID"\= @vPARAM_SOURCE_COMING\n\t\t,"LAST_MOD_USER_COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"LAST_MOD_DT"\= CONVERT(varchar,GETDATE(),120)\n\t\t,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE '$$DATA_STATUS$$' END\n\t\tWHERE PK_PROP\=@vPK;\n \n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'U',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn01B001_Master_U】(PROP_MASTER)(LS_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_Fn01B001_D1=/* Last Version\tLast Updated by\t\tLast Updated Date   Comment； \n\tv2.2.3\t\t\tSteve\t\t\t\t20200720\t\t\t1. 以 COUNT(*) OVER() 方式解決 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2 段子查詢問題\n\tv2.2.3\t\t\tMin\t\t\t\t\t20200828\t\t\t1. 增加 @R1_CONDITION 註解說明\n\tv2.2.3\t\t\tSteve\t\t\t\t20201016\t\t\t1. 調整註解\n*/\nSELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY PROP_IDX\n\t\t\t) AS RowNum\n\t\t,PROP_IDX\n\t\t,PK_PROP\n\t\t,COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,SEQ\n\t\t,PROP_KEY\n\t\t,PROP_VALUE\n\t\t,ENCRYPTED\n\t\t,ADD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,ADD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,LAST_MOD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,LAST_MOD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,DEL_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,DEL_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT /*固定欄位必須輸出，不可移除 */\n\t\t,DATA_STATUS /*固定欄位必須輸出，不可移除*/\n\tFROM PROP_DETAIL WITH (NOLOCK)\n\tWHERE (PK_PROP \= '$$PK_PROP$$') /* 當條件為數值時 */\n\t\t/* AND (COLUMN1 \= TRY_CONVERT(INT, NULLIF('$$COLUMN1$$','')) OR '$$COLUMN1$$' \= 'ALL') */\n\t\t/* 當條件為日期時 */\n\t\t/* AND (COLUMN1 \= TRY_CONVERT(DATETIME, NULLIF('$$COLUMN1$$','')) OR '$$COLUMN1$$' \= 'ALL') */\n\t\t/* 當條件為數值起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND不易除錯) */\n\t\t/* 請自行依 SA 規格書調整其大於、大於等於、小於、小於等於\n\t\t   AND (COLUMN1 >\= TRY_CONVERT(INT, NULLIF('$$START$$','')) OR '$$START$$' \= 'ALL')\n\t\t   AND (COLUMN1 <\= TRY_CONVERT(INT, NULLIF('$$END$$','')) OR '$$END$$'   \= 'ALL')\n\t\t*/\n\t\t/* 當條件為日期起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND不易除錯) */\n\t\t/* 請自行依 SA 規格書調整其大於、大於等於、小於、小於等於\n\t\t   AND (COLUMN1 >\= TRY_CONVERT(DATETIME, NULLIF('$$START$$','')) OR '$$START$$' \= 'ALL')\n\t\t   AND (COLUMN1 <\= TRY_CONVERT(DATETIME, NULLIF('$$END$$','')) OR '$$END$$'   \= 'ALL')\n\t\t*/\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
API_FN01B001_D1_CUD_C=/*開始點：此語法請填入【API_Fn01B001_D1_C】(PROP_DETAIL)(D1_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$PROP_KEY$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='C';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n \n\t\t/*D1 TABLE 新增*/\n\t\tINSERT INTO PROP_DETAIL("PK_PROP","SEQ","PROP_KEY","PROP_VALUE","ENCRYPTED","ADD_USER_ID","ADD_USER_COMPANY_ID","ADD_DT","DATA_STATUS")\n\t\tVALUES (ISNULL(@vMASTER_PK ,'$$PK_PROP$$'),NULLIF('$$SEQ$$',''),'$$PROP_KEY$$','$$PROP_VALUE$$','$$ENCRYPTED$$',@vPARAM_SOURCE_COMING,@vPARAM_COMPANY,CONVERT(varchar,GETDATE(),120),'$$DATA_STATUS$$')\n\t\tSET @vPK \= CAST(SCOPE_IDENTITY() AS VARCHAR(200))\n \n \n \n\t\t/*D1-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'INSERT',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'PROP_DETAIL' , @i_LOG_IDENT OUTPUT, 'D1'\n \n\t\t/*D1-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'C',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn01B001_D1_C】(PROP_DETAIL)(D1_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_FN01B001_D1_CUD_D=/*開始點：此語法請填入【API_Fn01B001_D1_D】(PROP_DETAIL)(D1_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$PROP_KEY$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='D';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PROP_IDX$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'PROP_DETAIL', 'PROP_IDX','int', @vPK \n \n\t\t/*D1-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'DELETE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'PROP_DETAIL' , @i_LOG_IDENT OUTPUT, 'D1'\n \n\t\t/*D1-刪除主檔及明細資料檔*/\n\t\tDELETE PROP_DETAIL  WHERE PROP_IDX\=@vPK;\n \n\t\t/*D1-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'D',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn01B001_D1_D】(PROP_DETAIL)(D1_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_FN01B001_D1_CUD_U=/*開始點：此語法請填入【API_Fn01B001_D1_U】(PROP_DETAIL)(D1_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$PROP_KEY$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='U';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PROP_IDX$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'PROP_DETAIL', 'PROP_IDX','int', @vPK \n \n\t\t/*D1-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'UPDATE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'PROP_DETAIL' , @i_LOG_IDENT OUTPUT, 'D1'\n \n\t\t/*-修改D1 TABLE*/\n\t\tUPDATE PROP_DETAIL SET\n\t\t"SEQ"\= CASE WHEN '$$SEQ$$'\='\#NO_DATA\#'  THEN "SEQ" ELSE NULLIF('$$SEQ$$','') END\n\t\t,"PROP_KEY"\= CASE WHEN '$$PROP_KEY$$'\='\#NO_DATA\#'  THEN "PROP_KEY" ELSE '$$PROP_KEY$$' END\n\t\t,"PROP_VALUE"\= CASE WHEN '$$PROP_VALUE$$'\='\#NO_DATA\#'  THEN "PROP_VALUE" ELSE '$$PROP_VALUE$$' END\n\t\t,"ENCRYPTED"\= CASE WHEN '$$ENCRYPTED$$'\='\#NO_DATA\#'  THEN "ENCRYPTED" ELSE '$$ENCRYPTED$$' END\n\t\t,"LAST_MOD_USER_ID"\= @vPARAM_SOURCE_COMING\n\t\t,"LAST_MOD_USER_COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"LAST_MOD_DT"\= CONVERT(varchar,GETDATE(),120)\n\t\t,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE '$$DATA_STATUS$$' END\n\t\tWHERE PROP_IDX\=@vPK;\n \n\t\t/*D1-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'U',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn01B001_D1_U】(PROP_DETAIL)(D1_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_Fn01B001_DS=/* Last Version\tLast Updated by\t\tLast Updated Date   Comment； \n\t\tv2.2.3\t\t\tSteve\t\t\t\t20200720\t\t\t1. 以 COUNT(*) OVER() 方式解決 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2 段子查詢問題\n\t\tv2.2.3\t\t\tMin\t\t\t\t\t20200828\t\t\t1. 增加 @R1_CONDITION 註解說明\n\t\tv2.2.3\t\t\tSteve\t\t\t\t20201016\t\t\t1. 調整註解\n*/\nSELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_PROP\n\t\t\t) AS RowNum\n\t\t,PK_PROP\n\t\t,COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,PROP_ID\n\t\t,JNDI_NAME\n\t\t,PROP_DESC\n\t\t,PROP_FILE\n\t\t,PROP_TYPE\n\t\t,ENABLED_FLAG\n\t\t,ADD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,ADD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,LAST_MOD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,LAST_MOD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,DEL_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,DEL_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT /*固定欄位必須輸出，不可移除 */\n\t\t,DATA_STATUS /*固定欄位必須輸出，不可移除*/\n\tFROM PROP_MASTER WITH (NOLOCK)\n\tWHERE (\n\t\t\tDATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t\t\t)\n\t\tAND (\n\t\t\tPROP_ID \= '$$PROP_ID$$' OR '$$PROP_ID$$' \= 'ALL'\n\t\t)\n\t\tAND (\n\t\t\tPROP_TYPE \= '$$PROP_TYPE$$' OR '$$PROP_TYPE$$' \= 'ALL'\n\t\t)\n\t\t\t\n\t\t\t /* 當條件為數值時 */\n\t\t/* AND (COLUMN1 \= TRY_CONVERT(INT, NULLIF('$$COLUMN1$$','')) OR '$$COLUMN1$$' \= 'ALL') */\n\t\t/* 當條件為日期時 */\n\t\t/* AND (COLUMN1 \= TRY_CONVERT(DATETIME, NULLIF('$$COLUMN1$$','')) OR '$$COLUMN1$$' \= 'ALL') */\n\t\t/* 當條件為數值起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND不易除錯) */\n\t\t/* 請自行依 SA 規格書調整其大於、大於等於、小於、小於等於\n\t\t   AND (COLUMN1 >\= TRY_CONVERT(INT, NULLIF('$$START$$','')) OR '$$START$$' \= 'ALL')\n\t\t   AND (COLUMN1 <\= TRY_CONVERT(INT, NULLIF('$$END$$','')) OR '$$END$$'   \= 'ALL')\n\t\t*/\n\t\t/* 當條件為日期起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND不易除錯) */\n\t\t/* 請自行依 SA 規格書調整其大於、大於等於、小於、小於等於\n\t\t   AND (COLUMN1 >\= TRY_CONVERT(DATETIME, NULLIF('$$START$$','')) OR '$$START$$' \= 'ALL')\n\t\t   AND (COLUMN1 <\= TRY_CONVERT(DATETIME, NULLIF('$$END$$','')) OR '$$END$$'   \= 'ALL')\n\t\t*/\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
API_Fn01B003_C=/* 要複製到別的地方執行前, 要移除最前和最後的雙引號 */\n/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Noli\n * Last Updated Date \:    20200609\n * 修正：\n *         1. 將LS_ADD/LS_MOD/LS_DEL拆為三段IF判斷式\n */\nBEGIN TRY\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n/* 1.1 功能主要異動 MASTER_TABLE_NAME */\nInsert into JH_WS02_WEBSERVICE_INFO_TEST /* WITH (ROWLOCK) */\n(\nWEB_SERVICE_CODE\n,WEB_SERVICE_NAME\n,WEB_SERVICE_IP\n,IS_DOING\n,WEB_SERVICE_EFFECT\n,WEB_SERVICE_ORDERBY\n,WEB_SERVICE_DOMAIN\n,WEB_SERVICE_SUB_DOMAIN\n,ADD_USER_ID\n,ADD_USER_COMPANY_ID\n,ADD_DT\n,COMPANY_ID\n,DATA_STATUS\n) \nVALUES(\nN'$$WEB_SERVICE_CODE$$'\n,N'$$WEB_SERVICE_NAME$$'\n,N'$$WEB_SERVICE_IP$$'\n,N'$$IS_DOING$$'\n,LTRIM(RTRIM('$$WEB_SERVICE_EFFECT_ALIAS$$'))\n,LTRIM(RTRIM('$$WEB_SERVICE_ORDERBY_ALIAS$$'))\n,'$$WEB_SERVICE_DOMAIN$$'\n,'$$WEB_SERVICE_SUB_DOMAIN$$'\n,'${PARAM_SOURCE_COMING}'\n,'${PARAM_COMPANY}'\n,CONVERT(VARCHAR(20), GETDATE(), 120)\n,'$$COMPANY_ID$$'\n,'$$DATA_STATUS$$'\n);\n/* 1.2 DATA_CHANGE_LOG for Master Table */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'insert'\n       ,'${PARAM_SOURCE_COMING}'\n       ,IDENT_CURRENT('JH_WS02_WEBSERVICE_INFO_TEST')\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_WS02_WEBSERVICE_INFO_TEST'\n);\n/*注意：\n   1.依需求判斷是否使用1.3語法 \n   2. LOG_MASTER_TABLE 創建方式，以下前三個欄位的schema固定要新增，再加上LOG_MASTER_TABLE(主TABLE)的欄位\n        [DATA_CHANGE_LOG_ID] [bigint] NOT NULL,\n        [FUNC_ID] [varchar](50) NULL,\n        [CRUD_STATE] [char](1) NULL\n*/\n/* 1.3 DATA Detail LOG for Master Table(before modified) */\n  INSERT INTO LOG_JH_WS02_WEBSERVICE_INFO_TEST  --WITH (ROWLOCK) \n         ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID \n          ,CRUD_STATE \n          ,CW_IDX\n          ,WEB_SERVICE_CODE\n          ,WEB_SERVICE_NAME\n          ,WEB_SERVICE_IP\n          ,IS_DOING\n          ,WEB_SERVICE_EFFECT\n          ,WEB_SERVICE_ORDERBY\n          ,WEB_SERVICE_DOMAIN\n          ,WEB_SERVICE_SUB_DOMAIN\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,DATA_STATUS\n           )\nVALUES(\n          IDENT_CURRENT('DATA_CHANGE_LOG')\n          ,'${PARAM_FUNC_ID}'\n          ,'C'\n          ,IDENT_CURRENT('JH_WS02_WEBSERVICE_INFO_TEST')\n          ,N'$$WEB_SERVICE_CODE$$'\n          ,N'$$WEB_SERVICE_NAME$$'\n          ,N'$$WEB_SERVICE_IP$$'\n          ,N'$$IS_DOING$$'\n          ,LTRIM(RTRIM('$$WEB_SERVICE_EFFECT_ALIAS$$'))\n          ,LTRIM(RTRIM('$$WEB_SERVICE_ORDERBY_ALIAS$$'))\n          ,'$$WEB_SERVICE_DOMAIN$$'\n          ,'$$WEB_SERVICE_SUB_DOMAIN$$'\n          ,'${PARAM_SOURCE_COMING}'\n          ,'${PARAM_COMPANY}'\n          ,CONVERT(VARCHAR(20), GETDATE(), 120)\n          ,'$$COMPANY_ID$$'\n          ,'$$DATA_STATUS$$'\n          ); \n/* 1.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES (        \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0'\n        ,'SUCCESS'\n        ,IDENT_CURRENT('JH_WS02_WEBSERVICE_INFO_TEST')\n        ,'C' \n        ,'$$MEMO$$');\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$CW_IDX$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
API_Fn01B003_CUD=/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Steve\n * Last Updated Date \:    20200512\n * 修正：\n *         1. DATA_STATUS 變數化\n *         2. DATA_CHANGE_LOG_ID 位置移至最前\n */\nBEGIN TRY\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n\t/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\tInsert into JH_WS02_WEBSERVICE_INFO_TEST /* WITH (ROWLOCK) */\n\t(\n\tWEB_SERVICE_CODE\n\t,WEB_SERVICE_NAME\n\t,WEB_SERVICE_IP\n\t,IS_DOING\n\t,WEB_SERVICE_EFFECT\n\t,WEB_SERVICE_ORDERBY\n\t,WEB_SERVICE_DOMAIN\n\t,WEB_SERVICE_SUB_DOMAIN\n\t,ADD_USER_ID\n\t,ADD_USER_COMPANY_ID\n\t,ADD_DT\n\t,COMPANY_ID\n\t,DATA_STATUS\n\t) \n\tVALUES(\n\tN'$$WEB_SERVICE_CODE$$'\n\t,N'$$WEB_SERVICE_NAME$$'\n\t,N'$$WEB_SERVICE_IP$$'\n\t,N'$$IS_DOING$$'\n\t,'$$WEB_SERVICE_EFFECT$$'\n\t,'$$WEB_SERVICE_ORDERBY$$'\n\t,'$$WEB_SERVICE_DOMAIN$$'\n\t,'$$WEB_SERVICE_SUB_DOMAIN$$'\n\t,'${PARAM_SOURCE_COMING}'\n\t,'${PARAM_COMPANY}'\n\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t,'$$COMPANY_ID$$'\n\t,'$$DATA_STATUS$$'\n\t);\n\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t(\n\t\t\tFUNC_ID\n\t\t   ,PROC_TYPE\n\t\t   ,USER_ID\n\t\t   ,DATA_NO\n\t\t   ,EVENT_DT\n\t\t   ,MEMO\n\t\t   ,SessionID\n\t\t   ,ProcPK\n\t\t   ,PROC_TARGET\n\t)\n\tVALUES(\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t   ,'insert'\n\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t   ,IDENT_CURRENT('JH_WS02_WEBSERVICE_INFO_TEST')\n\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t   ,'$$MEMO$$'\n\t\t   ,'${PARAM_SESSION_ID}'\n\t\t   ,'${LOGPK}'\n\t\t   ,'JH_WS02_WEBSERVICE_INFO_TEST'\n\t);\n\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\n\tINSERT INTO LOG_JH_WS02_WEBSERVICE_INFO_TEST  /* WITH (ROWLOCK) */ \n\t\t\t ( DATA_CHANGE_LOG_ID\n\t\t\t  ,FUNC_ID \n\t\t\t  ,CRUD_STATE \n\t\t\t  ,CW_IDX\n\t\t\t  ,WEB_SERVICE_CODE\n\t\t\t  ,WEB_SERVICE_NAME\n\t\t\t  ,WEB_SERVICE_IP\n\t\t\t  ,IS_DOING\n\t\t\t  ,WEB_SERVICE_EFFECT\n\t\t\t  ,WEB_SERVICE_ORDERBY\n\t\t\t  ,WEB_SERVICE_DOMAIN\n\t\t\t  ,WEB_SERVICE_SUB_DOMAIN\n\t\t\t  ,ADD_USER_ID\n\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t  ,ADD_DT\n\t\t\t  ,COMPANY_ID\n\t\t\t  ,DATA_STATUS\n\t\t\t   )\n\tVALUES(\n\t\t\t  IDENT_CURRENT('DATA_CHANGE_LOG')\n\t\t\t  ,'${PARAM_FUNC_ID}'\n\t\t\t  ,'C'\n\t\t\t  ,IDENT_CURRENT('JH_WS02_WEBSERVICE_INFO_TEST')\n\t\t\t  ,N'$$WEB_SERVICE_CODE$$'\n\t\t\t  ,N'$$WEB_SERVICE_NAME$$'\n\t\t\t  ,N'$$WEB_SERVICE_IP$$'\n\t\t\t  ,N'$$IS_DOING$$'\n\t\t\t  ,'$$WEB_SERVICE_EFFECT$$'\n\t\t\t  ,'$$WEB_SERVICE_ORDERBY$$'\n\t\t\t  ,'$$WEB_SERVICE_DOMAIN$$'\n\t\t\t  ,'$$WEB_SERVICE_SUB_DOMAIN$$'\n\t\t\t  ,'${PARAM_SOURCE_COMING}'\n\t\t\t  ,'${PARAM_COMPANY}'\n\t\t\t  ,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t  ,'$$COMPANY_ID$$'\n\t\t\t  ,'$$DATA_STATUS$$'\n\t\t\t  );\n\t/* 1.4 Action Return */\n\t   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t  ( ProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE \n\t\t\t,RETURN_MSG \n\t\t\t,DATA_UNIQUE_KEY \n\t\t\t,DATA_ACTION_TYPE \n\t\t\t,MEMO)\n\t   VALUES (        \n\t\t\t'${LOGPK}' \n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,IDENT_CURRENT('JH_WS02_WEBSERVICE_INFO_TEST')\n\t\t\t,'C' \n\t\t\t,'$$MEMO$$');\nEND\n\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\nBEGIN\n\t/* 2.1 DATA_CHANGE_LOG */\n\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t(\n\t\t\tFUNC_ID\n\t\t   ,PROC_TYPE\n\t\t   ,USER_ID\n\t\t   ,DATA_NO\n\t\t   ,EVENT_DT\n\t\t   ,MEMO\n\t\t   ,SessionID\n\t\t   ,ProcPK\n\t\t   ,PROC_TARGET\n\t)\n\tVALUES(\n\t\t\t'$$FunctionID$$'\n\t\t   ,'delete'\n\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t   ,'$$CW_IDX$$'\n\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t   ,'$$MEMO$$'\n\t\t   ,'${PARAM_SESSION_ID}'\n\t\t   ,'${LOGPK}'\n\t\t   ,'JH_WS02_WEBSERVICE_INFO_TEST'\n\t);\n\tIF EXISTS (\n\n\t\tSELECT * FROM JH_WS02_WEBSERVICE_INFO_TEST WITH (NOLOCK) WHERE CW_IDX \= '$$CW_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\n\tBEGIN\n\t/* 2.2 DATA Detail LOG (before modified) */\n\t   INSERT INTO LOG_JH_WS02_WEBSERVICE_INFO_TEST /* WITH (ROWLOCK) */\n\t\t\t( DATA_CHANGE_LOG_ID\n\t\t\t  ,FUNC_ID\n\t\t\t  ,CRUD_STATE\n\t\t\t  ,CW_IDX\n\t\t\t  ,WEB_SERVICE_CODE\n\t\t\t  ,WEB_SERVICE_NAME\n\t\t\t  ,WEB_SERVICE_IP\n\t\t\t  ,IS_DOING\n\t\t\t  ,WEB_SERVICE_EFFECT\n\t\t\t  ,WEB_SERVICE_ORDERBY\n\t\t\t  ,WEB_SERVICE_DOMAIN\n\t\t\t  ,WEB_SERVICE_SUB_DOMAIN\n\t\t\t  ,ADD_USER_ID\n\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t  ,ADD_DT\n\t\t\t  ,LAST_MOD_USER_ID\n\t\t\t  ,LAST_MOD_USER_COMPANY_ID\n\t\t\t  ,LAST_MOD_DT\n\t\t\t  ,DEL_USER_ID\n\t\t\t  ,DEL_USER_COMPANY_ID\n\t\t\t  ,DEL_DT\n\t\t\t  ,COMPANY_ID\n\t\t\t  ,DATA_STATUS\n\t\t\t  )\n\t   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t  ,'$$FunctionID$$' AS FUNC_ID\n\t\t\t  ,'D' AS CRUD_STATE\n\t\t\t  ,CW_IDX\n\t\t\t  ,WEB_SERVICE_CODE\n\t\t\t  ,WEB_SERVICE_NAME\n\t\t\t  ,WEB_SERVICE_IP\n\t\t\t  ,IS_DOING\n\t\t\t  ,WEB_SERVICE_EFFECT\n\t\t\t  ,WEB_SERVICE_ORDERBY\n\t\t\t  ,WEB_SERVICE_DOMAIN\n\t\t\t  ,WEB_SERVICE_SUB_DOMAIN\n\t\t\t  ,ADD_USER_ID\n\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t  ,ADD_DT\n\t\t\t  ,LAST_MOD_USER_ID\n\t\t\t  ,LAST_MOD_USER_COMPANY_ID\n\t\t\t  ,LAST_MOD_DT\n\t\t\t  ,DEL_USER_ID\n\t\t\t  ,DEL_USER_COMPANY_ID\n\t\t\t  ,DEL_DT\n\t\t\t  ,COMPANY_ID\n\t\t\t  ,DATA_STATUS\n\t\t FROM JH_WS02_WEBSERVICE_INFO_TEST  WITH (NOLOCK)\n\t   WHERE CW_IDX \= '$$CW_IDX$$';\n\n\t/* 2.3 功能主要異動 Table */\n\t   DELETE  JH_WS02_WEBSERVICE_INFO_TEST WITH (ROWLOCK)\n\t   WHERE CW_IDX \= '$$CW_IDX$$';\n\n\t/* 2.4 Action Return */\n\t   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t  ( ProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE \n\t\t\t,RETURN_MSG \n\t\t\t,DATA_UNIQUE_KEY \n\t\t\t,DATA_ACTION_TYPE \n\t\t\t,MEMO)\n\t   VALUES ( \n\t\t\t '${LOGPK}' \n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0' \n\t\t\t,'SUCCESS' \n\t\t\t,'$$CW_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,'D' \n\t\t\t,'$$MEMO$$');\n\tEND\n\tELSE\n\tBEGIN\n\t/* 2.5 Action Return */\n\t   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n\t\t  ( ProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE \n\t\t\t,MEMO)\n\t   VALUES ( \n\t\t\t'${LOGPK}' \n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'-1'\n\t\t\t,'資料正在審核流程中，無法刪除'\n\t\t\t,'$$CW_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,'D' \n\t\t\t,'$$MEMO$$');\n\tEND\nEND\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\nBEGIN\n\t/* 3.1 DATA_CHANGE_LOG */\n\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t(\n\t\t\tFUNC_ID\n\t\t   ,PROC_TYPE\n\t\t   ,USER_ID\n\t\t   ,DATA_NO\n\t\t   ,EVENT_DT\n\t\t   ,MEMO\n\t\t   ,SessionID\n\t\t   ,ProcPK\n\t\t   ,PROC_TARGET\n\t)\n\tVALUES(\n\t\t\t'$$FunctionID$$'\n\t\t   ,'update'\n\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t   ,'$$CW_IDX$$'\n\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t   ,'$$MEMO$$'\n\t\t   ,'${PARAM_SESSION_ID}'\n\t\t   ,'${LOGPK}'\n\t\t   ,'JH_WS02_WEBSERVICE_INFO_TEST'\n\t);\n\tIF EXISTS (\n\tSELECT * FROM JH_WS02_WEBSERVICE_INFO_TEST WITH (NOLOCK) WHERE CW_IDX \= '$$CW_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\tBEGIN\n\t/* 3.2 DATA Detail LOG (before modified) */\n\n\t   INSERT INTO LOG_JH_WS02_WEBSERVICE_INFO_TEST /* WITH (ROWLOCK) */\n\t\t\t( DATA_CHANGE_LOG_ID\n\t\t\t  ,FUNC_ID\n\t\t\t  ,CRUD_STATE\n\t\t\t  ,CW_IDX\n\t\t\t  ,WEB_SERVICE_CODE\n\t\t\t  ,WEB_SERVICE_NAME\n\t\t\t  ,WEB_SERVICE_IP\n\t\t\t  ,IS_DOING\n\t\t\t  ,WEB_SERVICE_EFFECT\n\t\t\t  ,WEB_SERVICE_ORDERBY\n\t\t\t  ,WEB_SERVICE_DOMAIN\n\t\t\t  ,WEB_SERVICE_SUB_DOMAIN\n\t\t\t  ,ADD_USER_ID\n\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t  ,ADD_DT\n\t\t\t  ,LAST_MOD_USER_ID\n\t\t\t  ,LAST_MOD_USER_COMPANY_ID\n\t\t\t  ,LAST_MOD_DT\n\t\t\t  ,DEL_USER_ID\n\t\t\t  ,DEL_USER_COMPANY_ID\n\t\t\t  ,DEL_DT\n\t\t\t  ,COMPANY_ID\n\t\t\t  ,DATA_STATUS\n\t\t\t  )\n\t   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t  ,'$$FunctionID$$' AS FUNC_ID\n\t\t\t  ,'U' AS CRUD_STATE\n\t\t\t  ,CW_IDX\n\t\t\t  ,WEB_SERVICE_CODE\n\t\t\t  ,WEB_SERVICE_NAME\n\t\t\t  ,WEB_SERVICE_IP\n\t\t\t  ,IS_DOING\n\t\t\t  ,WEB_SERVICE_EFFECT\n\t\t\t  ,WEB_SERVICE_ORDERBY\n\t\t\t  ,WEB_SERVICE_DOMAIN\n\t\t\t  ,WEB_SERVICE_SUB_DOMAIN\n\t\t\t  ,ADD_USER_ID\n\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t  ,ADD_DT\n\t\t\t  ,LAST_MOD_USER_ID\n\t\t\t  ,LAST_MOD_USER_COMPANY_ID\n\t\t\t  ,LAST_MOD_DT\n\t\t\t  ,DEL_USER_ID\n\t\t\t  ,DEL_USER_COMPANY_ID\n\t\t\t  ,DEL_DT\n\t\t\t  ,COMPANY_ID\n\t\t\t  ,DATA_STATUS\n\t\t FROM JH_WS02_WEBSERVICE_INFO_TEST WITH (NOLOCK)\n\t   WHERE CW_IDX \= '$$CW_IDX$$';\n\n\t\t/* 3.3 功能主要異動 Table */\n\t\tUPDATE JH_WS02_WEBSERVICE_INFO_TEST WITH (ROWLOCK)\n\t\t\tSET WEB_SERVICE_CODE\=(CASE WHEN SUBSTRING(N'$$WEB_SERVICE_CODE$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN WEB_SERVICE_CODE ELSE SUBSTRING(N'$$WEB_SERVICE_CODE$$',1,100) END)\n\t\t\t,WEB_SERVICE_NAME\=(CASE WHEN SUBSTRING(N'$$WEB_SERVICE_NAME$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN WEB_SERVICE_NAME ELSE SUBSTRING(N'$$WEB_SERVICE_NAME$$',1,100) END)\n\t\t\t,WEB_SERVICE_IP\=(CASE WHEN SUBSTRING(N'$$WEB_SERVICE_IP$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN WEB_SERVICE_IP ELSE SUBSTRING(N'$$WEB_SERVICE_IP$$',1,100) END)\n\t\t\t,IS_DOING\=(CASE WHEN SUBSTRING(N'$$IS_DOING$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN IS_DOING ELSE SUBSTRING(N'$$IS_DOING$$',1,10) END)\n\t\t\t,WEB_SERVICE_EFFECT\=(CASE WHEN SUBSTRING('$$WEB_SERVICE_EFFECT$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN WEB_SERVICE_EFFECT ELSE SUBSTRING('$$WEB_SERVICE_EFFECT$$',1,50) END)\n\t\t\t,WEB_SERVICE_ORDERBY\=(CASE WHEN SUBSTRING('$$WEB_SERVICE_ORDERBY$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN WEB_SERVICE_ORDERBY ELSE SUBSTRING('$$WEB_SERVICE_ORDERBY$$',1,50) END)\n\t\t\t,WEB_SERVICE_DOMAIN\=(CASE WHEN SUBSTRING('$$WEB_SERVICE_DOMAIN$$',1,200)\=SUBSTRING('\#NO_DATA\#',1,200) THEN WEB_SERVICE_DOMAIN ELSE SUBSTRING('$$WEB_SERVICE_DOMAIN$$',1,200) END)\n\t\t\t,WEB_SERVICE_SUB_DOMAIN\=(CASE WHEN SUBSTRING('$$WEB_SERVICE_SUB_DOMAIN$$',1,200)\=SUBSTRING('\#NO_DATA\#',1,200) THEN WEB_SERVICE_SUB_DOMAIN ELSE SUBSTRING('$$WEB_SERVICE_SUB_DOMAIN$$',1,200) END)\n\t\t\t,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n\t\t\t,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n\t\t\t,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,COMPANY_ID\=(CASE WHEN SUBSTRING('$$COMPANY_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$',1,50) END)\n\t\t\t,DATA_STATUS\=(CASE WHEN SUBSTRING('$$DATA_STATUS$$',1,2)\=SUBSTRING('\#NO_DATA\#',1,2) THEN DATA_STATUS ELSE SUBSTRING('$$DATA_STATUS$$',1,2) END)\n\t\tWHERE CW_IDX\='$$CW_IDX$$' ;\n\n\t\t/* 3.4 Action Return */\n\t\tINSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n\t\t   ( ProcPK\n\t\t\t ,hashValues\n\t\t\t ,RETURN_CODE\n\t\t\t ,RETURN_MSG\n\t\t\t ,DATA_UNIQUE_KEY\n\t\t\t ,DATA_ACTION_TYPE \n\t\t\t ,MEMO)\n\t\tVALUES ( \n\t\t\t '${LOGPK}' \n\t\t\t ,@FROM_OUTSIDE\n\t\t\t ,'0'\n\t\t\t ,'SUCCESS'\n\t\t\t ,'$$CW_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t ,'U' \n\t\t\t ,'$$MEMO$$');\n\tEND\n\tELSE\n\tBEGIN\n\t/* 3.5 Action Return */\n\t   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t  ( ProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE \n\t\t\t,RETURN_MSG \n\t\t\t,DATA_UNIQUE_KEY \n\t\t\t,DATA_ACTION_TYPE \n\t\t\t,MEMO)\n\t   VALUES ( \n\t\t\t'${LOGPK}' \n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'-1'\n\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t,'$$CW_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,'U' \n\t\t\t,'$$MEMO$$');\n\tEND\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$CW_IDX$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
API_Fn01B003_D=/* 要複製到別的地方執行前, 要移除最前和最後的雙引號 */\n/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Noli\n * Last Updated Date \:    20200609\n * 修正：\n *         1. 將LS_ADD/LS_MOD/LS_DEL拆為三段IF判斷式\n */\nBEGIN TRY\n\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\nIF EXISTS (\n\nSELECT * FROM JH_WS02_WEBSERVICE_INFO_TEST WITH (NOLOCK) WHERE CW_IDX \= '$$CW_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$CW_IDX$$'\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_WS02_WEBSERVICE_INFO_TEST'\n);\n/*注意：\n   1.依需求判斷是否使用2.2語法 \n   2. LOG_MASTER_TABLE 創建方式，以下前三個欄位的schema固定要新增，再加上LOG_MASTER_TABLE(主TABLE)的欄位\n        [DATA_CHANGE_LOG_ID] [bigint] NOT NULL,\n        [FUNC_ID] [varchar](50) NULL,\n        [CRUD_STATE] [char](1) NULL\n*/\n/* 2.2 DATA Detail LOG (before modified) */\n  INSERT INTO LOG_JH_WS02_WEBSERVICE_INFO_TEST -- WITH (ROWLOCK)\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,CW_IDX\n          ,WEB_SERVICE_CODE\n          ,WEB_SERVICE_NAME\n          ,WEB_SERVICE_IP\n          ,IS_DOING\n          ,WEB_SERVICE_EFFECT\n          ,WEB_SERVICE_ORDERBY\n          ,WEB_SERVICE_DOMAIN\n          ,WEB_SERVICE_SUB_DOMAIN\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,COMPANY_ID\n          ,DATA_STATUS\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,CW_IDX\n          ,WEB_SERVICE_CODE\n          ,WEB_SERVICE_NAME\n          ,WEB_SERVICE_IP\n          ,IS_DOING\n          ,WEB_SERVICE_EFFECT\n          ,WEB_SERVICE_ORDERBY\n          ,WEB_SERVICE_DOMAIN\n          ,WEB_SERVICE_SUB_DOMAIN\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,COMPANY_ID\n          ,DATA_STATUS\n     FROM JH_WS02_WEBSERVICE_INFO_TEST  WITH (NOLOCK)\n   WHERE CW_IDX \= '$$CW_IDX$$'; \n\n/* 2.3 功能主要異動 Table */\n   DELETE  JH_WS02_WEBSERVICE_INFO_TEST WITH (ROWLOCK)\n   WHERE CW_IDX \= '$$CW_IDX$$';\n\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$CW_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 2.5 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$CW_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\n   END\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$CW_IDX$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
API_Fn01B003_DS=SELECT *\n ,(\n  SELECT COUNT(*)\n  FROM JH_WS02_WEBSERVICE_INFO_TEST WITH (NOLOCK)\n  WHERE (DATA_STATUS \= '$$DATA_STATUS$$'\n   OR '$$DATA_STATUS$$' \= 'ALL'\n   )\n   AND (\n   WEB_SERVICE_CODE LIKE '%$$WS_CODE$$%'\n   OR '$$WS_CODE$$' \= 'ALL'\n   )\n   AND (\n   WEB_SERVICE_NAME LIKE '%$$WS_NAME$$%'\n   OR '$$WS_NAME$$' \= 'ALL')\n   ) AS totalProperty\nFROM (\nSELECT ROW_NUMBER() OVER (\n   ORDER BY CW_IDX) AS RowNum\n,CW_IDX\n,WEB_SERVICE_CODE\n,WEB_SERVICE_NAME\n,WEB_SERVICE_IP\n,IS_DOING\n,WEB_SERVICE_EFFECT AS WEB_SERVICE_EFFECT_ALIAS\n,WEB_SERVICE_ORDERBY AS WEB_SERVICE_ORDERBY_ALIAS\n,WEB_SERVICE_DOMAIN\n,WEB_SERVICE_SUB_DOMAIN\n,ADD_USER_ID\n,ADD_USER_COMPANY_ID\n,ADD_DT\n,LAST_MOD_USER_ID\n,LAST_MOD_USER_COMPANY_ID\n,LAST_MOD_DT\n,DEL_USER_ID\n,DEL_USER_COMPANY_ID\n,DEL_DT\n,COMPANY_ID\n,DATA_STATUS\nFROM JH_WS02_WEBSERVICE_INFO_TEST WITH (NOLOCK)\nWHERE (\n   DATA_STATUS \= '$$DATA_STATUS$$'\n   OR '$$DATA_STATUS$$' \= 'ALL'\n   )\n   AND (\n   WEB_SERVICE_CODE LIKE '%$$WS_CODE$$%'\n   OR '$$WS_CODE$$' \= 'ALL'\n   )\n   AND (\n   WEB_SERVICE_NAME LIKE '%$$WS_NAME$$%'\n   OR '$$WS_NAME$$' \= 'ALL'\n   )\n) AS new1\nWHERE RowNum > $$start$$\n AND RowNum <\= ($$start$$ + $$limit$$);
API_Fn01B003_U=/* 要複製到別的地方執行前, 要移除最前和最後的雙引號 */\n/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Noli\n * Last Updated Date \:    20200609\n * 修正：\n *         1. 將LS_ADD/LS_MOD/LS_DEL拆為三段IF判斷式\n */\nBEGIN TRY\n\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\nBEGIN\nIF EXISTS (\nSELECT * FROM JH_WS02_WEBSERVICE_INFO_TEST WITH (NOLOCK) WHERE CW_IDX \= '$$CW_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$CW_IDX$$'\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_WS02_WEBSERVICE_INFO_TEST'\n);\n/*注意：\n   1.依需求判斷是否使用3.2語法 \n   2. LOG_MASTER_TABLE 創建方式，以下前三個欄位的schema固定要新增，再加上LOG_MASTER_TABLE(主TABLE)的欄位\n        [DATA_CHANGE_LOG_ID] [bigint] NOT NULL,\n        [FUNC_ID] [varchar](50) NULL,\n        [CRUD_STATE] [char](1) NULL\n*/\n/* 3.2 DATA Detail LOG (before modified) */\n\n    INSERT INTO LOG_JH_WS02_WEBSERVICE_INFO_TEST -- WITH (ROWLOCK)\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,CW_IDX\n          ,WEB_SERVICE_CODE\n          ,WEB_SERVICE_NAME\n          ,WEB_SERVICE_IP\n          ,IS_DOING\n          ,WEB_SERVICE_EFFECT\n          ,WEB_SERVICE_ORDERBY\n          ,WEB_SERVICE_DOMAIN\n          ,WEB_SERVICE_SUB_DOMAIN\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,COMPANY_ID\n          ,DATA_STATUS\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,CW_IDX\n          ,WEB_SERVICE_CODE\n          ,WEB_SERVICE_NAME\n          ,WEB_SERVICE_IP\n          ,IS_DOING\n          ,WEB_SERVICE_EFFECT\n          ,WEB_SERVICE_ORDERBY\n          ,WEB_SERVICE_DOMAIN\n          ,WEB_SERVICE_SUB_DOMAIN\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,COMPANY_ID\n          ,DATA_STATUS\n     FROM JH_WS02_WEBSERVICE_INFO_TEST WITH (NOLOCK)\n   WHERE CW_IDX \= '$$CW_IDX$$';  \n\n/* 3.3 功能主要異動 Table */\nUPDATE JH_WS02_WEBSERVICE_INFO_TEST WITH (ROWLOCK)\n    SET WEB_SERVICE_CODE\=(CASE WHEN SUBSTRING(N'$$WEB_SERVICE_CODE$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN WEB_SERVICE_CODE ELSE SUBSTRING(N'$$WEB_SERVICE_CODE$$',1,100) END)\n    ,WEB_SERVICE_NAME\=(CASE WHEN SUBSTRING(N'$$WEB_SERVICE_NAME$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN WEB_SERVICE_NAME ELSE SUBSTRING(N'$$WEB_SERVICE_NAME$$',1,100) END)\n    ,WEB_SERVICE_IP\=(CASE WHEN SUBSTRING(N'$$WEB_SERVICE_IP$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN WEB_SERVICE_IP ELSE SUBSTRING(N'$$WEB_SERVICE_IP$$',1,100) END)\n    ,IS_DOING\=(CASE WHEN SUBSTRING(N'$$IS_DOING$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN IS_DOING ELSE SUBSTRING(N'$$IS_DOING$$',1,10) END)\n    ,WEB_SERVICE_EFFECT\=(CASE WHEN SUBSTRING(LTRIM(RTRIM('$$WEB_SERVICE_EFFECT_ALIAS$$')),1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN WEB_SERVICE_EFFECT ELSE SUBSTRING(LTRIM(RTRIM('$$WEB_SERVICE_EFFECT_ALIAS$$')),1,50) END)\n    ,WEB_SERVICE_ORDERBY\=(CASE WHEN SUBSTRING(LTRIM(RTRIM('$$WEB_SERVICE_ORDERBY_ALIAS$$')),1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN WEB_SERVICE_ORDERBY ELSE SUBSTRING(LTRIM(RTRIM('$$WEB_SERVICE_ORDERBY_ALIAS$$')),1,50) END)\n    ,WEB_SERVICE_DOMAIN\=(CASE WHEN SUBSTRING('$$WEB_SERVICE_DOMAIN$$',1,200)\=SUBSTRING('\#NO_DATA\#',1,200) THEN WEB_SERVICE_DOMAIN ELSE SUBSTRING('$$WEB_SERVICE_DOMAIN$$',1,200) END)\n    ,WEB_SERVICE_SUB_DOMAIN\=(CASE WHEN SUBSTRING('$$WEB_SERVICE_SUB_DOMAIN$$',1,200)\=SUBSTRING('\#NO_DATA\#',1,200) THEN WEB_SERVICE_SUB_DOMAIN ELSE SUBSTRING('$$WEB_SERVICE_SUB_DOMAIN$$',1,200) END)\n    ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n    ,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n    ,COMPANY_ID\=(CASE WHEN SUBSTRING('$$COMPANY_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$',1,50) END)\n    ,DATA_STATUS\=(CASE WHEN SUBSTRING('$$DATA_STATUS$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN DATA_STATUS ELSE SUBSTRING('$$DATA_STATUS$$',1,1) END)\nWHERE CW_IDX\='$$CW_IDX$$' ;\n\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n         ,'$$CW_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 3.5 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$CW_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$CW_IDX$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
API_FN02A001_Q_AIMS=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT DISTINCT AOID\n\t\t\t\t,AIMSID\n\t\t\t\t,AIMSCMPY\n\t\t\tFROM INV_FUND_AIMS\n\t\t\tWHERE AOID \= '$$LOGIN_ID$$'\n\t\t\t\tAND (\n\t\t\t\t\tAIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t\t)\n\t\t\t\tAND AIMSEVLFLAG IN (\n\t\t\t\t\t'2'\n\t\t\t\t\t,'4'\n\t\t\t\t\t)\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSID\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT DISTINCT AOID\n\t\t\t,AIMSID\n\t\t\t,AIMSCMPY\n\t\tFROM INV_FUND_AIMS\n\t\tWHERE AOID \= '$$LOGIN_ID$$'\n\t\t\tAND (\n\t\t\t\tAIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t)\n\t\t\tAND AIMSEVLFLAG IN (\n\t\t\t\t'2'\n\t\t\t\t,'4'\n\t\t\t\t)\n\t\t) A\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$' + $$limit$$);
API_FN02A001_Q_COMPARE=SELECT *,\n\n  (SELECT COUNT(*)\n   FROM INV_FUND_COMPARE S1\n   INNER JOIN\n     (SELECT AIMSID,\n             COMPAREIDNO,\n             MAX(FUNDYEAR+FUNDPER) FUNDDT\n      FROM INV_FUND_COMPARE\n      GROUP BY AIMSID,\n               COMPAREIDNO) S2 ON S1.AIMSID \= S2.AIMSID\n   AND S1.COMPAREIDNO \= S2.COMPAREIDNO\n   AND S1.FUNDYEAR \= LEFT(S2.FUNDDT, 4)\n   AND S1.FUNDPER \= RIGHT(S2.FUNDDT, 2)\n   WHERE S1.AOID \= '$$AOID$$'\n     AND S1.AIMSID \= '$$AIMSID$$' ) AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY S1.COMPAREIDNO) AS RowNum,\n                            S1.AOID,\n                            S1.AIMSID,\n                            S1.AIMSCMPY,\n                            S1.COMPAREIDNO,\n                            S1.COMPARECMPY,\n                            S1.FUNDYEAR,\n                            S1.FUNDPER,\n                            S1.TALASSETS/1000 TALASSETS,\n                            S1.TALLIAB/1000 TALLIAB,\n                            S1.NETASSETS/1000 NETASSETS,\n                            S1.SALESINCOME/1000 SALESINCOME,\n                            S1.GROM,\n                            S1.PROM,\n                            S1.NETINCOME/1000 NETINCOME,\n                            S1.GROSSPRO/1000 GROSSPRO,\n                            S1.EBIT/1000 EBIT,\n                            S1.EBITDA/1000 EBITDA,\n                            S1.TALEQUITY/1000 TALEQUITY,\n                            S1.BASEDATESTK,\n                            S1.BASEDATEOS/1000 BASEDATEOS,\n                            S1.DEPRAMORT/1000 DEPRAMORT,\n                            S1.COMMONSTO/1000 COMMONSTO,\n                            S1.NUMTSTO/ 1000 NUMTSTO\n   FROM INV_FUND_COMPARE S1\n   INNER JOIN\n     (SELECT AIMSID,\n             COMPAREIDNO,\n             MAX(FUNDYEAR+FUNDPER) FUNDDT\n      FROM INV_FUND_COMPARE\n      GROUP BY AIMSID,\n               COMPAREIDNO) S2 ON S1.AIMSID \= S2.AIMSID\n   AND S1.COMPAREIDNO \= S2.COMPAREIDNO\n   AND S1.FUNDYEAR \= LEFT(S2.FUNDDT, 4)\n   AND S1.FUNDPER \= RIGHT(S2.FUNDDT, 2)\n   WHERE S1.AOID \= '$$AOID$$'\n     AND S1.AIMSID \= '$$AIMSID$$') AS new1\nWHERE RowNum > $$start$$\n  AND RowNum < \= ($$start$$+$$limit$$);
API_FN02A001_Q_MAPPING=SELECT *,\n\n  (SELECT COUNT(*)\n   FROM INV_FUND_COMPARE\n   WHERE AOID \= '$$AOID$$'\n     AND AIMSID \= '$$AIMSID$$') AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY COMPAREIDNO) AS RowNum,\n                            AOID,\n                            AIMSID,\n                            AIMSCMPY,\n                            USEFLAG,\n                            COMPARECMPY,\n                            COMPAREIDNO,\n                            ADD_DT,\n                            ADD_USER_ID,\n                            LAST_MOD_DT,\n                            LAST_MOD_USER_ID\n   FROM INV_FUND_COMPARE\n   WHERE AOID \= '$$AOID$$'\n     AND AIMSID \= '$$AIMSID$$') AS new1\nWHERE RowNum > $$start$$\n  AND RowNum < \= ($$start$$+$$limit$$);
API_FN02A002_Q_ACNO0=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM INV_MAINTAIN_ACNO\n\t\tWHERE ACNOLEVEL \= '0'\n\t\t\tAND ACNOTYPE \= 'BS'\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'ACNO'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ACNO\n\t\t\t) AS RowNum\n\t\t,ACNO\n\tFROM INV_MAINTAIN_ACNO\n\tWHERE ACNOLEVEL \= '0'\n\t\tAND ACNOTYPE \= 'BS'\n\t) AS new1 /* WHERE RowNum > \= $$start$$ AND RowNum < ($$start$$+$$limit$$);*/\n
API_FN02A002_Q_ACNO1=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM INV_MAINTAIN_ACNO\n\t\tWHERE ACNOLEVEL \= '1'\n\t\t\tAND SUBSTRING(ACNO, 1, 1) \= SUBSTRING('$$ACNO0$$', 1, 1)\n\t\t\tAND ACNOTYPE \= 'BS'\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'ACNO'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ACNO\n\t\t\t) AS RowNum\n\t\t,ACNO\n\tFROM INV_MAINTAIN_ACNO\n\tWHERE ACNOLEVEL \= '1'\n\t\tAND SUBSTRING(ACNO, 1, 1) \= SUBSTRING('$$ACNO0$$', 1, 1)\n\t\tAND ACNOTYPE \= 'BS'\n\t) AS new1\n
API_FN02A002_Q_ACNO2=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM INV_MAINTAIN_ACNO\n\t\tWHERE ACNOLEVEL \= '2'\n\t\t\tAND SUBSTRING(ACNO, 1, 2) \= SUBSTRING('$$ACNO1$$', 1, 2)\n\t\t\tAND ACNOTYPE \= 'BS'\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'ACNO'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ACNO\n\t\t\t) AS RowNum\n\t\t,ACNO\n\tFROM INV_MAINTAIN_ACNO\n\tWHERE ACNOLEVEL \= '2'\n\t\tAND SUBSTRING(ACNO, 1, 2) \= SUBSTRING('$$ACNO1$$', 1, 2)\n\t\tAND ACNOTYPE \= 'BS'\n\t) AS new1\n
API_FN02A002_Q_ACNO=SELECT *,\n\n  (SELECT COUNT(*)\n   FROM INV_MAINTAIN_ACNO\n   WHERE ACNONAME IS NOT NULL\n     AND ACNOTYPE \= 'BS'\n     AND (LEFT(ACNO, 1) \= LEFT('$$ACNO0$$', 1)\n          OR 'ALL' \= '$$ACNO0$$')\n     AND (LEFT(ACNO, 2) \= LEFT('$$ACNO1$$', 2)\n          OR 'ALL' \= '$$ACNO1$$')\n     AND (LEFT(ACNO, 3) \= LEFT('$$ACNO2$$', 3)\n          OR 'ALL' \= '$$ACNO2$$')\n     AND (ACNO \= '$$ACNO$$'\n          OR 'ALL' \= '$$ACNO$$')\n     AND (USEFLAG \= '$$USEFLAG$$'\n          OR 'ALL' \= '$$USEFLAG$$')) AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY ACNO) AS RowNum,\n                            *\n   FROM\n     (SELECT CASE\n                 WHEN [0] IS NOT NULL THEN [0]\n                 WHEN [1] IS NOT NULL THEN [1]\n                 WHEN [2] IS NOT NULL THEN [2]\n                 WHEN [3] IS NOT NULL THEN [3]\n             END AS 'ACNO',\n             CASE\n                 WHEN [0] IS NOT NULL THEN '0'\n                 WHEN [1] IS NOT NULL THEN '1'\n                 WHEN [2] IS NOT NULL THEN '2'\n                 WHEN [3] IS NOT NULL THEN '3'\n             END AS 'ACNOLEVEL',\n             [0] ACNO0,\n             [1] ACNO1,\n             [2] ACNO2,\n             [3] ACNO3,\n             ACNONAME,\n             CASE ACNOFLAG\n                 WHEN '0' THEN '0'\n                 WHEN '1' THEN '1'\n                 ELSE '2'\n             END AS 'ACNOFLAG',\n             CASE ACNOFLAG\n                 WHEN '0' THEN '借方'\n                 WHEN '1' THEN '貸方'\n                 ELSE '借/貸方'\n             END AS 'ACNOFLAG_DESC',\n             CASE USEFLAG\n                 WHEN 1 THEN '1'\n                 ELSE '0'\n             END AS 'USEFLAG',\n             CASE USEFLAG\n                 WHEN 1 THEN '是'\n                 ELSE '否'\n             END AS 'USEFLAG_DESC',\n             CASE\n                 WHEN [0] IS NOT NULL THEN [0]\n                 WHEN [1] IS NOT NULL THEN [1]\n                 WHEN [2] IS NOT NULL THEN [2]\n                 WHEN [3] IS NOT NULL THEN [3]\n             END AS 'OLD_ACNO',\n             CASE\n                 WHEN [0] IS NOT NULL THEN '0'\n                 WHEN [1] IS NOT NULL THEN '1'\n                 WHEN [2] IS NOT NULL THEN '2'\n                 WHEN [3] IS NOT NULL THEN '3'\n             END AS 'OLD_ACNOLEVEL',\n             ADD_DT,\n             ADD_USER_ID,\n             ADD_USER_COMPANY_ID,\n             LAST_MOD_DT,\n             LAST_MOD_USER_ID,\n             LAST_MOD_USER_COMPANY_ID\n      FROM\n        (SELECT RANK() OVER (\n                             ORDER BY ACNO,\n                                      ACNOLEVEL) AS 'SEQ',\n                            ACNO,\n                            ACNOLEVEL,\n                            ACNOFLAG,\n                            ACNONAME,\n                            ACNOTYPE,\n                            USEFLAG,\n                            ADD_DT,\n                            ADD_USER_ID,\n                            ADD_USER_COMPANY_ID,\n                            LAST_MOD_DT,\n                            LAST_MOD_USER_ID,\n                            LAST_MOD_USER_COMPANY_ID\n         FROM INV_MAINTAIN_ACNO) AS P PIVOT (MAX(ACNO)\n                                             FOR ACNOLEVEL IN ([0], [1], [2], [3])) AS PT\n      WHERE ACNONAME IS NOT NULL\n        AND ACNOTYPE \= 'BS') AS NEW1\n   WHERE (LEFT(ACNO, 1) \= LEFT('$$ACNO0$$', 1)\n          OR 'ALL' \= '$$ACNO0$$')\n     AND (LEFT(ACNO, 2) \= LEFT('$$ACNO1$$', 2)\n          OR 'ALL' \= '$$ACNO1$$')\n     AND (LEFT(ACNO, 3) \= LEFT('$$ACNO2$$', 3)\n          OR 'ALL' \= '$$ACNO2$$')\n     AND (ACNO \= '$$ACNO$$'\n          OR 'ALL' \= '$$ACNO$$')\n     AND (USEFLAG \= '$$USEFLAG$$'\n          OR 'ALL' \= '$$USEFLAG$$'))AS NEW2\nWHERE RowNum > $$start$$\n  AND RowNum < \= ($$start$$+$$limit$$);
API_FN02A003_5_CHART22=select ProcType,count(*)as 'count'  from PROCESS_LOG   GROUP BY ProcType
API_FN02A003_5_CHART3=select   convert(numeric(18,0),count(*)) AS count,convert(numeric(18,0),count(COMPANY_ID))/3 AS  cont2,ProcType from PROCESS_LOG  GROUP BY ProcType
API_FN02A003_5_CHART4=select convert(numeric(18,0),count(*)) AS count,convert(numeric(18,0),count(*))/6 AS count2,$$CHARTTYPE$$ AS ProcType from PROCESS_LOG  GROUP BY $$CHARTTYPE$$
API_FN02A003_5_CHART5=select ProcType, COUNT(*) as CNT\n, Convert(numeric(5, 0), COUNT(*)* 100.0/sum(count(*)) over () ) as Rate\nfrom PROCESS_LOG\nGROUP BY ProcType
API_FN02A003_5_CHART=select top(5) CODE_ID AS 'FuncID' , convert(numeric(18,0),count(*)) AS 'count' from PROCESS_LOG where LoginID\='$$USERID$$'  GROUP BY CODE_ID
API_FN02A003_Q_ACNO0=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM INV_MAINTAIN_ACNO\n\t\tWHERE ACNOLEVEL \= '0'\n\t\t\tAND ACNOTYPE \= 'PL'\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'ACNO'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ACNO\n\t\t\t) AS RowNum\n\t\t,ACNO\n\tFROM INV_MAINTAIN_ACNO\n\tWHERE ACNOLEVEL \= '0'\n\t\tAND ACNOTYPE \= 'PL'\n\t) AS new1 /* WHERE RowNum > \= $$start$$ AND RowNum < ($$start$$+$$limit$$);*/\n
API_FN02A003_Q_ACNO1=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM INV_MAINTAIN_ACNO\n\t\tWHERE ACNOLEVEL \= '1'\n\t\t\tAND SUBSTRING(ACNO, 1, 1) \= SUBSTRING('$$ACNO0$$', 1, 1)\n\t\t\tAND ACNOTYPE \= 'PL'\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'ACNO'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ACNO\n\t\t\t) AS RowNum\n\t\t,ACNO\n\tFROM INV_MAINTAIN_ACNO\n\tWHERE ACNOLEVEL \= '1'\n\t\tAND SUBSTRING(ACNO, 1, 1) \= SUBSTRING('$$ACNO0$$', 1, 1)\n\t\tAND ACNOTYPE \= 'PL'\n\t) AS new1\n
API_FN02A003_Q_ACNO2=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM INV_MAINTAIN_ACNO\n\t\tWHERE ACNOLEVEL \= '2'\n\t\t\tAND SUBSTRING(ACNO, 1, 2) \= SUBSTRING('$$ACNO1$$', 1, 2)\n\t\t\tAND ACNOTYPE \= 'PL'\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'ACNO'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ACNO\n\t\t\t) AS RowNum\n\t\t,ACNO\n\tFROM INV_MAINTAIN_ACNO\n\tWHERE ACNOLEVEL \= '2'\n\t\tAND SUBSTRING(ACNO, 1, 2) \= SUBSTRING('$$ACNO1$$', 1, 2)\n\t\tAND ACNOTYPE \= 'PL'\n\t) AS new1\n
API_FN02A003_Q_ACNO=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM INV_MAINTAIN_ACNO\n\t\tWHERE ACNONAME IS NOT NULL\n\t\t\tAND ACNOTYPE \= 'PL'\n\t\t\tAND (\n\t\t\t\tLEFT(ACNO, 1) \= LEFT('$$ACNO0$$', 1)\n\t\t\t\tOR 'ALL' \= '$$ACNO0$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tLEFT(ACNO, 2) \= LEFT('$$ACNO1$$', 2)\n\t\t\t\tOR 'ALL' \= '$$ACNO1$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tLEFT(ACNO, 3) \= LEFT('$$ACNO2$$', 3)\n\t\t\t\tOR 'ALL' \= '$$ACNO2$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tACNO \= '$$ACNO$$'\n\t\t\t\tOR 'ALL' \= '$$ACNO$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tUSEFLAG \= '$$USEFLAG$$'\n\t\t\t\tOR 'ALL' \= '$$USEFLAG$$'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ACNO\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT CASE \n\t\t\t\tWHEN [0] IS NOT NULL\n\t\t\t\t\tTHEN [0]\n\t\t\t\tWHEN [1] IS NOT NULL\n\t\t\t\t\tTHEN [1]\n\t\t\t\tWHEN [2] IS NOT NULL\n\t\t\t\t\tTHEN [2]\n\t\t\t\tWHEN [3] IS NOT NULL\n\t\t\t\t\tTHEN [3]\n\t\t\t\tEND AS 'ACNO'\n\t\t\t,CASE \n\t\t\t\tWHEN [0] IS NOT NULL\n\t\t\t\t\tTHEN '0'\n\t\t\t\tWHEN [1] IS NOT NULL\n\t\t\t\t\tTHEN '1'\n\t\t\t\tWHEN [2] IS NOT NULL\n\t\t\t\t\tTHEN '2'\n\t\t\t\tWHEN [3] IS NOT NULL\n\t\t\t\t\tTHEN '3'\n\t\t\t\tEND AS 'ACNOLEVEL'\n\t\t\t,[0] ACNO0\n\t\t\t,[1] ACNO1\n\t\t\t,[2] ACNO2\n\t\t\t,[3] ACNO3\n\t\t\t,ACNONAME\n\t\t\t,CASE ACNOFLAG\n\t\t\t\tWHEN '0'\n\t\t\t\t\tTHEN '0'\n\t\t\t\tWHEN '1'\n\t\t\t\t\tTHEN '1'\n\t\t\t\tELSE '2'\n\t\t\t\tEND AS 'ACNOFLAG'\n\t\t\t,CASE ACNOFLAG\n\t\t\t\tWHEN '0'\n\t\t\t\t\tTHEN '借方'\n\t\t\t\tWHEN '1'\n\t\t\t\t\tTHEN '貸方'\n\t\t\t\tELSE '借/貸方'\n\t\t\t\tEND AS 'ACNOFLAG_DESC'\n\t\t\t,CASE USEFLAG\n\t\t\t\tWHEN 1\n\t\t\t\t\tTHEN '1'\n\t\t\t\tELSE '0'\n\t\t\t\tEND AS 'USEFLAG'\n\t\t\t,CASE USEFLAG\n\t\t\t\tWHEN 1\n\t\t\t\t\tTHEN '是'\n\t\t\t\tELSE '否'\n\t\t\t\tEND AS 'USEFLAG_DESC'\n\t\t\t,CASE \n\t\t\t\tWHEN [0] IS NOT NULL\n\t\t\t\t\tTHEN [0]\n\t\t\t\tWHEN [1] IS NOT NULL\n\t\t\t\t\tTHEN [1]\n\t\t\t\tWHEN [2] IS NOT NULL\n\t\t\t\t\tTHEN [2]\n\t\t\t\tWHEN [3] IS NOT NULL\n\t\t\t\t\tTHEN [3]\n\t\t\t\tEND AS 'OLD_ACNO'\n\t\t\t,CASE \n\t\t\t\tWHEN [0] IS NOT NULL\n\t\t\t\t\tTHEN '0'\n\t\t\t\tWHEN [1] IS NOT NULL\n\t\t\t\t\tTHEN '1'\n\t\t\t\tWHEN [2] IS NOT NULL\n\t\t\t\t\tTHEN '2'\n\t\t\t\tWHEN [3] IS NOT NULL\n\t\t\t\t\tTHEN '3'\n\t\t\t\tEND AS 'OLD_ACNOLEVEL'\n\t\t\t,ADD_DT\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\tFROM (\n\t\t\tSELECT RANK() OVER (\n\t\t\t\t\tORDER BY ACNO\n\t\t\t\t\t\t,ACNOLEVEL\n\t\t\t\t\t) AS 'SEQ'\n\t\t\t\t,ACNO\n\t\t\t\t,ACNOLEVEL\n\t\t\t\t,ACNOFLAG\n\t\t\t\t,ACNONAME\n\t\t\t\t,ACNOTYPE\n\t\t\t\t,USEFLAG\n\t\t\t\t,ADD_DT\n\t\t\t\t,ADD_USER_ID\n\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t,LAST_MOD_DT\n\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\tFROM INV_MAINTAIN_ACNO\n\t\t\t) AS P\n\t\tPIVOT(MAX(ACNO) FOR ACNOLEVEL IN (\n\t\t\t\t\t[0]\n\t\t\t\t\t,[1]\n\t\t\t\t\t,[2]\n\t\t\t\t\t,[3]\n\t\t\t\t\t)) AS PT\n\t\tWHERE ACNONAME IS NOT NULL\n\t\t\tAND ACNOTYPE \= 'PL'\n\t\t) AS NEW1\n\tWHERE (\n\t\t\tLEFT(ACNO, 1) \= LEFT('$$ACNO0$$', 1)\n\t\t\tOR 'ALL' \= '$$ACNO0$$'\n\t\t\t)\n\t\tAND (\n\t\t\tLEFT(ACNO, 2) \= LEFT('$$ACNO1$$', 2)\n\t\t\tOR 'ALL' \= '$$ACNO1$$'\n\t\t\t)\n\t\tAND (\n\t\t\tLEFT(ACNO, 3) \= LEFT('$$ACNO2$$', 3)\n\t\t\tOR 'ALL' \= '$$ACNO2$$'\n\t\t\t)\n\t\tAND (\n\t\t\tACNO \= '$$ACNO$$'\n\t\t\tOR 'ALL' \= '$$ACNO$$'\n\t\t\t)\n\t\tAND (\n\t\t\tUSEFLAG \= '$$USEFLAG$$'\n\t\t\tOR 'ALL' \= '$$USEFLAG$$'\n\t\t\t)\n\t) AS NEW2\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$ limit$$);\n
API_FN02A004_Q_ACNO0=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM INV_MAINTAIN_ACNO\n\t\tWHERE ACNOLEVEL \= '0'\n\t\t\tAND ACNOTYPE \= 'CS'\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'ACNO'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ACNO\n\t\t\t) AS RowNum\n\t\t,ACNO\n\tFROM INV_MAINTAIN_ACNO\n\tWHERE ACNOLEVEL \= '0'\n\t\tAND ACNOTYPE \= 'CS'\n\t) AS new1\n
API_FN02A004_Q_ACNO1=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM INV_MAINTAIN_ACNO\n\t\tWHERE ACNOLEVEL \= '1'\n\t\t\tAND SUBSTRING(ACNO, 1, 1) \= SUBSTRING('$$ACNO0$$', 1, 1)\n\t\t\tAND ACNOTYPE \= 'CS'\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'ACNO'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ACNO\n\t\t\t) AS RowNum\n\t\t,ACNO\n\tFROM INV_MAINTAIN_ACNO\n\tWHERE ACNOLEVEL \= '1'\n\t\tAND SUBSTRING(ACNO, 1, 1) \= SUBSTRING('$$ACNO0$$', 1, 1)\n\t\tAND ACNOTYPE \= 'CS'\n\t) AS new1\n
API_FN02A004_Q_ACNO2=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM INV_MAINTAIN_ACNO\n\t\tWHERE ACNOLEVEL \= '2'\n\t\t\tAND SUBSTRING(ACNO, 1, 2) \= SUBSTRING('$$ACNO1$$', 1, 2)\n\t\t\tAND ACNOTYPE \= 'CS'\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'ACNO'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ACNO\n\t\t\t) AS RowNum\n\t\t,ACNO\n\tFROM INV_MAINTAIN_ACNO\n\tWHERE ACNOLEVEL \= '2'\n\t\tAND SUBSTRING(ACNO, 1, 2) \= SUBSTRING('$$ACNO1$$', 1, 2)\n\t\tAND ACNOTYPE \= 'CS'\n\t) AS new1\n
API_FN02A004_Q_ACNO=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM INV_MAINTAIN_ACNO\n\t\tWHERE ACNONAME IS NOT NULL\n\t\t\tAND ACNOTYPE \= 'CS'\n\t\t\tAND (\n\t\t\t\tLEFT(ACNO, 1) \= LEFT('$$ACNO0$$', 1)\n\t\t\t\tOR 'ALL' \= '$$ACNO0$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tLEFT(ACNO, 2) \= LEFT('$$ACNO1$$', 2)\n\t\t\t\tOR 'ALL' \= '$$ACNO1$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tLEFT(ACNO, 3) \= LEFT('$$ACNO2$$', 3)\n\t\t\t\tOR 'ALL' \= '$$ACNO2$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tACNO \= '$$ACNO$$'\n\t\t\t\tOR 'ALL' \= '$$ACNO$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tUSEFLAG \= '$$USEFLAG$$'\n\t\t\t\tOR 'ALL' \= '$$USEFLAG$$'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ACNO\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT CASE \n\t\t\t\tWHEN [0] IS NOT NULL\n\t\t\t\t\tTHEN [0]\n\t\t\t\tWHEN [1] IS NOT NULL\n\t\t\t\t\tTHEN [1]\n\t\t\t\tWHEN [2] IS NOT NULL\n\t\t\t\t\tTHEN [2]\n\t\t\t\tWHEN [3] IS NOT NULL\n\t\t\t\t\tTHEN [3]\n\t\t\t\tEND AS 'ACNO'\n\t\t\t,CASE \n\t\t\t\tWHEN [0] IS NOT NULL\n\t\t\t\t\tTHEN '0'\n\t\t\t\tWHEN [1] IS NOT NULL\n\t\t\t\t\tTHEN '1'\n\t\t\t\tWHEN [2] IS NOT NULL\n\t\t\t\t\tTHEN '2'\n\t\t\t\tWHEN [3] IS NOT NULL\n\t\t\t\t\tTHEN '3'\n\t\t\t\tEND AS 'ACNOLEVEL'\n\t\t\t,[0] ACNO0\n\t\t\t,[1] ACNO1\n\t\t\t,[2] ACNO2\n\t\t\t,[3] ACNO3\n\t\t\t,ACNONAME\n\t\t\t,CASE ACNOFLAG\n\t\t\t\tWHEN '0'\n\t\t\t\t\tTHEN '0'\n\t\t\t\tWHEN '1'\n\t\t\t\t\tTHEN '1'\n\t\t\t\tELSE '2'\n\t\t\t\tEND AS 'ACNOFLAG'\n\t\t\t,CASE ACNOFLAG\n\t\t\t\tWHEN '0'\n\t\t\t\t\tTHEN '借方'\n\t\t\t\tWHEN '1'\n\t\t\t\t\tTHEN '貸方'\n\t\t\t\tELSE '借/貸方'\n\t\t\t\tEND AS 'ACNOFLAG_DESC'\n\t\t\t,CASE USEFLAG\n\t\t\t\tWHEN 1\n\t\t\t\t\tTHEN '1'\n\t\t\t\tELSE '0'\n\t\t\t\tEND AS 'USEFLAG'\n\t\t\t,CASE USEFLAG\n\t\t\t\tWHEN 1\n\t\t\t\t\tTHEN '是'\n\t\t\t\tELSE '否'\n\t\t\t\tEND AS 'USEFLAG_DESC'\n\t\t\t,CASE \n\t\t\t\tWHEN [0] IS NOT NULL\n\t\t\t\t\tTHEN [0]\n\t\t\t\tWHEN [1] IS NOT NULL\n\t\t\t\t\tTHEN [1]\n\t\t\t\tWHEN [2] IS NOT NULL\n\t\t\t\t\tTHEN [2]\n\t\t\t\tWHEN [3] IS NOT NULL\n\t\t\t\t\tTHEN [3]\n\t\t\t\tEND AS 'OLD_ACNO'\n\t\t\t,CASE \n\t\t\t\tWHEN [0] IS NOT NULL\n\t\t\t\t\tTHEN '0'\n\t\t\t\tWHEN [1] IS NOT NULL\n\t\t\t\t\tTHEN '1'\n\t\t\t\tWHEN [2] IS NOT NULL\n\t\t\t\t\tTHEN '2'\n\t\t\t\tWHEN [3] IS NOT NULL\n\t\t\t\t\tTHEN '3'\n\t\t\t\tEND AS 'OLD_ACNOLEVEL'\n\t\t\t,ADD_DT\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\tFROM (\n\t\t\tSELECT RANK() OVER (\n\t\t\t\t\tORDER BY ACNO\n\t\t\t\t\t\t,ACNOLEVEL\n\t\t\t\t\t) AS 'SEQ'\n\t\t\t\t,ACNO\n\t\t\t\t,ACNOLEVEL\n\t\t\t\t,ACNOFLAG\n\t\t\t\t,ACNONAME\n\t\t\t\t,ACNOTYPE\n\t\t\t\t,USEFLAG\n\t\t\t\t,ADD_DT\n\t\t\t\t,ADD_USER_ID\n\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t,LAST_MOD_DT\n\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\tFROM INV_MAINTAIN_ACNO\n\t\t\t) AS P\n\t\tPIVOT(MAX(ACNO) FOR ACNOLEVEL IN (\n\t\t\t\t\t[0]\n\t\t\t\t\t,[1]\n\t\t\t\t\t,[2]\n\t\t\t\t\t,[3]\n\t\t\t\t\t)) AS PT\n\t\tWHERE ACNONAME IS NOT NULL\n\t\t\tAND ACNOTYPE \= 'CS'\n\t\t) AS NEW1\n\tWHERE (\n\t\t\tLEFT(ACNO, 1) \= LEFT('$$ACNO0$$', 1)\n\t\t\tOR 'ALL' \= '$$ACNO0$$'\n\t\t\t)\n\t\tAND (\n\t\t\tLEFT(ACNO, 2) \= LEFT('$$ACNO1$$', 2)\n\t\t\tOR 'ALL' \= '$$ACNO1$$'\n\t\t\t)\n\t\tAND (\n\t\t\tLEFT(ACNO, 3) \= LEFT('$$ACNO2$$', 3)\n\t\t\tOR 'ALL' \= '$$ACNO2$$'\n\t\t\t)\n\t\tAND (\n\t\t\tACNO \= '$$ACNO$$'\n\t\t\tOR 'ALL' \= '$$ACNO$$'\n\t\t\t)\n\t\tAND (\n\t\t\tUSEFLAG \= '$$USEFLAG$$'\n\t\t\tOR 'ALL' \= '$$USEFLAG$$'\n\t\t\t)\n\t) AS NEW2\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN02A005_Q_AIMS=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT A.AOID\n\t\t\t\t,A.AONAME\n\t\t\t\t,A.AIMSID\n\t\t\t\t,A.AIMSCMPY\n\t\t\t\t,A.MAXFUNDYEAR\n\t\t\t\t,A.MAXFUNDPER\n\t\t\t\t,A.ACCOUNTFIRMS\n\t\t\t\t,A.ACCOUNT\n\t\t\t\t,A.ACT_VISA\n\t\t\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, T1.ADD_DT), 20) AS 'ADD_DT'\n\t\t\t\t,(\n\t\t\t\t\tSELECT TOP 1 ADD_USER_ID\n\t\t\t\t\tFROM INV_MAINTAIN_FINRPT\n\t\t\t\t\tWHERE AIMSID \= A.AIMSID\n\t\t\t\t\t\tAND FUNDYEAR \= A.MAXFUNDYEAR\n\t\t\t\t\t\tAND FUNDPER \= A.MAXFUNDPER\n\t\t\t\t\t\tAND ADD_DT \= T1.ADD_DT\n\t\t\t\t\t) AS 'ADD_USER_ID'\n\t\t\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, T2.LAST_MOD_DT), 20) AS 'LAST_MOD_DT'\n\t\t\t\t,(\n\t\t\t\t\tSELECT TOP 1 LAST_MOD_USER_ID\n\t\t\t\t\tFROM INV_MAINTAIN_FINRPT\n\t\t\t\t\tWHERE AIMSID \= A.AIMSID\n\t\t\t\t\t\tAND FUNDYEAR \= A.MAXFUNDYEAR\n\t\t\t\t\t\tAND FUNDPER \= A.MAXFUNDPER\n\t\t\t\t\t\tAND LAST_MOD_DT \= T2.LAST_MOD_DT\n\t\t\t\t\t) AS 'LAST_MOD_USER_ID'\n\t\t\tFROM (\n\t\t\t\tSELECT DS.AOID\n\t\t\t\t\t,DS.AONAME\n\t\t\t\t\t,DS.AIMSID\n\t\t\t\t\t,DS.AIMSCMPY\n\t\t\t\t\t,DS.MAXFUNDYEAR\n\t\t\t\t\t,DS.MAXFUNDPER\n\t\t\t\t\t,ISNULL(DA.ACCOUNTFIRMS, '') AS ACCOUNTFIRMS\n\t\t\t\t\t,ISNULL(DA.ACCOUNT, '') AS ACCOUNT\n\t\t\t\t\t,ISNULL(DA.ACT_VISA, '') AS ACT_VISA\n\t\t\t\tFROM INV_MAINTAIN_FINRPT DA\n\t\t\t\tRIGHT JOIN (\n\t\t\t\t\tSELECT S1.AOID\n\t\t\t\t\t\t,S1.AONAME\n\t\t\t\t\t\t,S1.AIMSID\n\t\t\t\t\t\t,S1.AIMSCMPY\n\t\t\t\t\t\t,CASE \n\t\t\t\t\t\t\tWHEN (S2.FUNDYEAR + S2.FUNDPER) IS NULL\n\t\t\t\t\t\t\t\tTHEN YEAR(GETDATE())\n\t\t\t\t\t\t\tELSE LEFT((S2.FUNDYEAR + S2.FUNDPER), 4)\n\t\t\t\t\t\t\tEND MAXFUNDYEAR\n\t\t\t\t\t\t,CASE \n\t\t\t\t\t\t\tWHEN (S2.FUNDYEAR + S2.FUNDPER) IS NULL\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\t\t\t\t\t\t\t,2\n\t\t\t\t\t\t\t\t\t\t\t\t\t,3\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN 'Q1'\n\t\t\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\t\t\t\t\t\t,5\n\t\t\t\t\t\t\t\t\t\t\t\t\t,6\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN 'Q2'\n\t\t\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t7\n\t\t\t\t\t\t\t\t\t\t\t\t\t,8\n\t\t\t\t\t\t\t\t\t\t\t\t\t,9\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN 'Q3'\n\t\t\t\t\t\t\t\t\t\t\tELSE 'Q4'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE RIGHT((S2.FUNDYEAR + S2.FUNDPER), 2)\n\t\t\t\t\t\t\tEND MAXFUNDPER\n\t\t\t\t\tFROM INV_FUND_AIMS S1\n\t\t\t\t\tLEFT JOIN INV_MAINTAIN_FINRPT S2 ON S1.AIMSID \= S2.AIMSID\n\t\t\t\t\tWHERE S1.AIMSEVLFLAG <> '1'\n\t\t\t\t\t\tAND S1.AIMSTYPEFLAG <> '5'\n\t\t\t\t\t\tAND S1.AOID \= '$$LOGIN_ID$$'\n\t\t\t\t\t\tAND (\n\t\t\t\t\t\t\tS1.AIMSID LIKE '%$$AIMSID$$%'\n\t\t\t\t\t\t\tOR 'ALL' \= '$$AIMSID$$'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\tAND (\n\t\t\t\t\t\t\tS1.AIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\t\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t) DS ON DA.AOID \= DS.AOID\n\t\t\t\t\tAND DA.AIMSID \= DS.AIMSID\n\t\t\t\t\tAND DA.FUNDYEAR \= DS.MAXFUNDYEAR\n\t\t\t\t\tAND DA.FUNDPER \= DS.MAXFUNDPER\n\t\t\t\tGROUP BY DS.AOID\n\t\t\t\t\t,DS.AONAME\n\t\t\t\t\t,DS.AIMSID\n\t\t\t\t\t,DS.AIMSCMPY\n\t\t\t\t\t,DS.MAXFUNDYEAR\n\t\t\t\t\t,DS.MAXFUNDPER\n\t\t\t\t\t,ISNULL(DA.ACCOUNTFIRMS, '')\n\t\t\t\t\t,ISNULL(DA.ACCOUNT, '')\n\t\t\t\t\t,ISNULL(DA.ACT_VISA, '')\n\t\t\t\t) A\n\t\t\tLEFT JOIN (\n\t\t\t\tSELECT AOID\n\t\t\t\t\t,AIMSID\n\t\t\t\t\t,FUNDYEAR\n\t\t\t\t\t,FUNDPER\n\t\t\t\t\t,MAX(ADD_DT) AS 'ADD_DT'\n\t\t\t\tFROM INV_MAINTAIN_FINRPT\n\t\t\t\tGROUP BY AOID\n\t\t\t\t\t,AIMSID\n\t\t\t\t\t,FUNDYEAR\n\t\t\t\t\t,FUNDPER\n\t\t\t\t) T1 ON A.AOID \= T1.AOID\n\t\t\t\tAND A.AIMSID \= T1.AIMSID\n\t\t\t\tAND A.MAXFUNDYEAR \= T1.FUNDYEAR\n\t\t\t\tAND A.MAXFUNDPER \= T1.FUNDPER\n\t\t\tLEFT JOIN (\n\t\t\t\tSELECT AOID\n\t\t\t\t\t,AIMSID\n\t\t\t\t\t,FUNDYEAR\n\t\t\t\t\t,FUNDPER\n\t\t\t\t\t,MAX(LAST_MOD_DT) AS 'LAST_MOD_DT'\n\t\t\t\tFROM INV_MAINTAIN_FINRPT\n\t\t\t\tGROUP BY AOID\n\t\t\t\t\t,AIMSID\n\t\t\t\t\t,FUNDYEAR\n\t\t\t\t\t,FUNDPER\n\t\t\t\t) T2 ON A.AOID \= T2.AOID\n\t\t\t\tAND A.AIMSID \= T2.AIMSID\n\t\t\t\tAND A.MAXFUNDYEAR \= T2.FUNDYEAR\n\t\t\t\tAND A.MAXFUNDPER \= T2.FUNDPER\n\t\t\t) AS N1\n\t\tWHERE (\n\t\t\t\tN1.AIMSID LIKE '%$$AIMSID$$%'\n\t\t\t\tOR 'ALL' \= '$$AIMSID$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tN1.AIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tCONVERT(VARCHAR(100), N1.MAXFUNDYEAR) + N1.MAXFUNDPER \= CASE \n\t\t\t\t\tWHEN 'ALL' \= '$$AIMSID$$'\n\t\t\t\t\t\tAND 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\tSELECT CASE \n\t\t\t\t\t\t\t\t\t\tWHEN MAX(FUNDYEAR + FUNDPER) IS NULL\n\t\t\t\t\t\t\t\t\t\t\tTHEN CONVERT(VARCHAR(4), YEAR(GETDATE())) + (\n\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,3\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN 'Q1'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,5\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,6\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN 'Q2'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t7\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,8\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,9\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN 'Q3'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE 'Q4'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tELSE MAX(FUNDYEAR + FUNDPER)\n\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\tFROM INV_MAINTAIN_FINRPT N2\n\t\t\t\t\t\t\t\tWHERE N2.AOID \= N1.AOID\n\t\t\t\t\t\t\t\t\tAND N2.AIMSID \= N1.AIMSID\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\tWHEN 'ALL' \= '$$FUNDYDATE$$'\n\t\t\t\t\t\tTHEN CONVERT(VARCHAR(4), N1.MAXFUNDYEAR) + N1.MAXFUNDPER\n\t\t\t\t\tELSE '$$FUNDYDATE$$'\n\t\t\t\t\tEND\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY N1.AIMSID\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT A.AOID\n\t\t\t,A.AONAME\n\t\t\t,A.AIMSID\n\t\t\t,A.AIMSCMPY\n\t\t\t,A.MAXFUNDYEAR\n\t\t\t,A.MAXFUNDPER\n\t\t\t,A.ACCOUNTFIRMS\n\t\t\t,A.ACCOUNT\n\t\t\t,A.ACT_VISA\n\t\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, T1.ADD_DT), 20) AS 'ADD_DT'\n\t\t\t,(\n\t\t\t\tSELECT TOP 1 ADD_USER_ID\n\t\t\t\tFROM INV_MAINTAIN_FINRPT\n\t\t\t\tWHERE AIMSID \= A.AIMSID\n\t\t\t\t\tAND FUNDYEAR \= A.MAXFUNDYEAR\n\t\t\t\t\tAND FUNDPER \= A.MAXFUNDPER\n\t\t\t\t\tAND ADD_DT \= T1.ADD_DT\n\t\t\t\t) AS 'ADD_USER_ID'\n\t\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, T2.LAST_MOD_DT), 20) AS 'LAST_MOD_DT'\n\t\t\t,(\n\t\t\t\tSELECT TOP 1 LAST_MOD_USER_ID\n\t\t\t\tFROM INV_MAINTAIN_FINRPT\n\t\t\t\tWHERE AIMSID \= A.AIMSID\n\t\t\t\t\tAND FUNDYEAR \= A.MAXFUNDYEAR\n\t\t\t\t\tAND FUNDPER \= A.MAXFUNDPER\n\t\t\t\t\tAND LAST_MOD_DT \= T2.LAST_MOD_DT\n\t\t\t\t) AS 'LAST_MOD_USER_ID'\n\t\tFROM (\n\t\t\tSELECT DS.AOID\n\t\t\t\t,DS.AONAME\n\t\t\t\t,DS.AIMSID\n\t\t\t\t,DS.AIMSCMPY\n\t\t\t\t,DS.MAXFUNDYEAR\n\t\t\t\t,DS.MAXFUNDPER\n\t\t\t\t,ISNULL(DA.ACCOUNTFIRMS, '') AS ACCOUNTFIRMS\n\t\t\t\t,ISNULL(DA.ACCOUNT, '') AS ACCOUNT\n\t\t\t\t,ISNULL(DA.ACT_VISA, '') AS ACT_VISA\n\t\t\tFROM INV_MAINTAIN_FINRPT DA\n\t\t\tRIGHT JOIN (\n\t\t\t\tSELECT S1.AOID\n\t\t\t\t\t,S1.AONAME\n\t\t\t\t\t,S1.AIMSID\n\t\t\t\t\t,S1.AIMSCMPY\n\t\t\t\t\t,CASE \n\t\t\t\t\t\tWHEN (S2.FUNDYEAR + S2.FUNDPER) IS NULL\n\t\t\t\t\t\t\tTHEN YEAR(GETDATE())\n\t\t\t\t\t\tELSE LEFT((S2.FUNDYEAR + S2.FUNDPER), 4)\n\t\t\t\t\t\tEND MAXFUNDYEAR\n\t\t\t\t\t,CASE \n\t\t\t\t\t\tWHEN (S2.FUNDYEAR + S2.FUNDPER) IS NULL\n\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\t\t\t\t\t\t,2\n\t\t\t\t\t\t\t\t\t\t\t\t,3\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tTHEN 'Q1'\n\t\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\t\t\t\t\t,5\n\t\t\t\t\t\t\t\t\t\t\t\t,6\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tTHEN 'Q2'\n\t\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t\t7\n\t\t\t\t\t\t\t\t\t\t\t\t,8\n\t\t\t\t\t\t\t\t\t\t\t\t,9\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tTHEN 'Q3'\n\t\t\t\t\t\t\t\t\t\tELSE 'Q4'\n\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\tELSE RIGHT((S2.FUNDYEAR + S2.FUNDPER), 2)\n\t\t\t\t\t\tEND MAXFUNDPER\n\t\t\t\tFROM INV_FUND_AIMS S1\n\t\t\t\tLEFT JOIN INV_MAINTAIN_FINRPT S2 ON S1.AIMSID \= S2.AIMSID\n\t\t\t\tWHERE S1.AIMSEVLFLAG <> '1'\n\t\t\t\t\tAND S1.AIMSTYPEFLAG <> '5'\n\t\t\t\t\tAND S1.AOID \= '$$LOGIN_ID$$'\n\t\t\t\t\tAND (\n\t\t\t\t\t\tS1.AIMSID LIKE '%$$AIMSID$$%'\n\t\t\t\t\t\tOR 'ALL' \= '$$AIMSID$$'\n\t\t\t\t\t\t)\n\t\t\t\t\tAND (\n\t\t\t\t\t\tS1.AIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t\t\t)\n\t\t\t\t) DS ON DA.AOID \= DS.AOID\n\t\t\t\tAND DA.AIMSID \= DS.AIMSID\n\t\t\t\tAND DA.FUNDYEAR \= DS.MAXFUNDYEAR\n\t\t\t\tAND DA.FUNDPER \= DS.MAXFUNDPER\n\t\t\tGROUP BY DS.AOID\n\t\t\t\t,DS.AONAME\n\t\t\t\t,DS.AIMSID\n\t\t\t\t,DS.AIMSCMPY\n\t\t\t\t,DS.MAXFUNDYEAR\n\t\t\t\t,DS.MAXFUNDPER\n\t\t\t\t,ISNULL(DA.ACCOUNTFIRMS, '')\n\t\t\t\t,ISNULL(DA.ACCOUNT, '')\n\t\t\t\t,ISNULL(DA.ACT_VISA, '')\n\t\t\t) A\n\t\tLEFT JOIN (\n\t\t\tSELECT AOID\n\t\t\t\t,AIMSID\n\t\t\t\t,FUNDYEAR\n\t\t\t\t,FUNDPER\n\t\t\t\t,MAX(ADD_DT) AS 'ADD_DT'\n\t\t\tFROM INV_MAINTAIN_FINRPT\n\t\t\tGROUP BY AOID\n\t\t\t\t,AIMSID\n\t\t\t\t,FUNDYEAR\n\t\t\t\t,FUNDPER\n\t\t\t) T1 ON A.AOID \= T1.AOID\n\t\t\tAND A.AIMSID \= T1.AIMSID\n\t\t\tAND A.MAXFUNDYEAR \= T1.FUNDYEAR\n\t\t\tAND A.MAXFUNDPER \= T1.FUNDPER\n\t\tLEFT JOIN (\n\t\t\tSELECT AOID\n\t\t\t\t,AIMSID\n\t\t\t\t,FUNDYEAR\n\t\t\t\t,FUNDPER\n\t\t\t\t,MAX(LAST_MOD_DT) AS 'LAST_MOD_DT'\n\t\t\tFROM INV_MAINTAIN_FINRPT\n\t\t\tGROUP BY AOID\n\t\t\t\t,AIMSID\n\t\t\t\t,FUNDYEAR\n\t\t\t\t,FUNDPER\n\t\t\t) T2 ON A.AOID \= T2.AOID\n\t\t\tAND A.AIMSID \= T2.AIMSID\n\t\t\tAND A.MAXFUNDYEAR \= T2.FUNDYEAR\n\t\t\tAND A.MAXFUNDPER \= T2.FUNDPER\n\t\t) AS N1\n\tWHERE (\n\t\t\tN1.AIMSID LIKE '%$$AIMSID$$%'\n\t\t\tOR 'ALL' \= '$$AIMSID$$'\n\t\t\t)\n\t\tAND (\n\t\t\tN1.AIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t)\n\t\tAND (\n\t\t\tCONVERT(VARCHAR(100), N1.MAXFUNDYEAR) + N1.MAXFUNDPER \= CASE \n\t\t\t\tWHEN 'ALL' \= '$$AIMSID$$'\n\t\t\t\t\tAND 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\tSELECT CASE \n\t\t\t\t\t\t\t\t\tWHEN MAX(FUNDYEAR + FUNDPER) IS NULL\n\t\t\t\t\t\t\t\t\t\tTHEN CONVERT(VARCHAR(4), YEAR(GETDATE())) + (\n\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,3\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN 'Q1'\n\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,5\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,6\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN 'Q2'\n\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t7\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,8\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,9\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN 'Q3'\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSE 'Q4'\n\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tELSE MAX(FUNDYEAR + FUNDPER)\n\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\tFROM INV_MAINTAIN_FINRPT N2\n\t\t\t\t\t\t\tWHERE N2.AOID \= N1.AOID\n\t\t\t\t\t\t\t\tAND N2.AIMSID \= N1.AIMSID\n\t\t\t\t\t\t\t)\n\t\t\t\tWHEN 'ALL' \= '$$FUNDYDATE$$'\n\t\t\t\t\tTHEN CONVERT(VARCHAR(4), N1.MAXFUNDYEAR) + N1.MAXFUNDPER\n\t\t\t\tELSE '$$FUNDYDATE$$'\n\t\t\t\tEND\n\t\t\t)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN02A005_Q_AIMSCMPY=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM INV_FUND_AIMS\n\t\tWHERE AIMSCMPY LIKE '%$$query$$%'\n\t\t\tAND AOID \= 'root'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSCMPY\n\t\t\t) AS RowNum\n\t\t,AIMSCMPY\n\tFROM INV_FUND_AIMS\n\tWHERE AIMSCMPY LIKE '%$$query$$%'\n\t\tAND AOID \= 'root'\n\t) AS new1\n
API_FN02A005_Q_AIMSID=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM INV_FUND_AIMS\n\t\tWHERE AIMSID LIKE '%$$query$$%'\n\t\t\tAND AOID \= 'root'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSID\n\t\t\t) AS RowNum\n\t\t,AIMSID\n\tFROM INV_FUND_AIMS\n\tWHERE AIMSID LIKE '%$$query$$%'\n\t\tAND AOID \= 'root'\n\t) AS new1\n
API_FN02A005_Q_FINRPTBS1=SELECT RowNum\n\t,AIMSID\n\t,FUNDYEAR\n\t,FUNDPER\n\t,ACNO\n\t,ACNOLEVEL\n\t,ACNONAME\n\t,ACNOFLAG\n\t,ACNOTYPE\n\t,PRINCAL_BAL\n\t,ADD_DT\n\t,ADD_USER_ID\n\t,LAST_MOD_DT\n\t,LAST_MOD_USER_ID\n\t,CCYFIN\n\t,CASE \n\t\tWHEN ACNO IN (\n\t\t\t\t'1000'\n\t\t\t\t,'1100'\n\t\t\t\t,'1500'\n\t\t\t\t,'2000'\n\t\t\t\t,'2100'\n\t\t\t\t,'2500'\n\t\t\t\t,'3000'\n\t\t\t\t,'3100'\n\t\t\t\t,'5900'\n\t\t\t\t,'6500'\n\t\t\t\t,'7900'\n\t\t\t\t,'8200'\n\t\t\t\t,'8300'\n\t\t\t\t,'8500'\n\t\t\t\t)\n\t\t\tTHEN 'Y'\n\t\tELSE 'N'\n\t\tEND AS 'ISBOLD'\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT AIMSID\n\t\t\t\t,FUNDYEAR\n\t\t\t\t,FUNDPER\n\t\t\t\t,ACNO\n\t\t\t\t,ACNOLEVEL\n\t\t\t\t,(\n\t\t\t\t\tCASE ACNOLEVEL\n\t\t\t\t\t\tWHEN 1\n\t\t\t\t\t\t\tTHEN '　'\n\t\t\t\t\t\tWHEN 2\n\t\t\t\t\t\t\tTHEN '　　'\n\t\t\t\t\t\tWHEN 3\n\t\t\t\t\t\t\tTHEN '　　　'\n\t\t\t\t\t\tELSE ''\n\t\t\t\t\t\tEND + ACNONAME\n\t\t\t\t\t) ACNONAME\n\t\t\t\t,ACNOFLAG\n\t\t\t\t,ACNOTYPE\n\t\t\t\t,ISNULL(PRINCAL_BAL, 0) PRINCAL_BAL\n\t\t\t\t,CCYFIN\n\t\t\tFROM INV_MAINTAIN_FINRPT\n\t\t\tWHERE AIMSID \= '$$AIMSID$$'\n\t\t\t\tAND ACNOTYPE \= 'BS'\n\t\t\t\tAND ACNO < 2000\n\t\t\t\tAND FUNDYEAR + FUNDPER \= '$$MAXFUNDYEAR$$' + '$$MAXFUNDPER$$'\n\t\t\t) A\n\t\tLEFT JOIN INV_MAINTAIN_FINRPT B ON B.AIMSID \= A.AIMSID\n\t\t\tAND B.FUNDYEAR \= A.FUNDYEAR\n\t\t\tAND B.FUNDPER \= A.FUNDPER\n\t\t\tAND B.ACNO \= A.ACNO\n\t\t\tAND B.ACNOLEVEL \= A.ACNOLEVEL\n\t\t\tAND B.ACNOFLAG \= A.ACNOFLAG\n\t\t\tAND B.ACNOTYPE \= A.ACNOTYPE\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY A.ACNO\n\t\t\t) AS RowNum\n\t\t,A.AIMSID\n\t\t,A.FUNDYEAR\n\t\t,A.FUNDPER\n\t\t,A.ACNO\n\t\t,A.ACNOLEVEL\n\t\t,A.ACNONAME\n\t\t,A.ACNOFLAG\n\t\t,A.ACNOTYPE\n\t\t,A.PRINCAL_BAL\n\t\t,A.CCYFIN\n\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, B.ADD_DT), 20) AS 'ADD_DT'\n\t\t,B.ADD_USER_ID\n\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, B.LAST_MOD_DT), 20) AS 'LAST_MOD_DT'\n\t\t,B.LAST_MOD_USER_ID\n\tFROM (\n\t\tSELECT AIMSID\n\t\t\t,FUNDYEAR\n\t\t\t,FUNDPER\n\t\t\t,ACNO\n\t\t\t,ACNOLEVEL\n\t\t\t,(\n\t\t\t\tCASE ACNOLEVEL\n\t\t\t\t\tWHEN 1\n\t\t\t\t\t\tTHEN '　'\n\t\t\t\t\tWHEN 2\n\t\t\t\t\t\tTHEN '　　'\n\t\t\t\t\tWHEN 3\n\t\t\t\t\t\tTHEN '　　　'\n\t\t\t\t\tELSE ''\n\t\t\t\t\tEND + ACNONAME\n\t\t\t\t) ACNONAME\n\t\t\t,ACNOFLAG\n\t\t\t,ACNOTYPE\n\t\t\t,ISNULL(PRINCAL_BAL, 0) / 1000 PRINCAL_BAL\n\t\t\t,CCYFIN\n\t\tFROM INV_MAINTAIN_FINRPT\n\t\tWHERE AIMSID \= '$$AIMSID$$'\n\t\t\tAND ACNOTYPE \= 'BS'\n\t\t\tAND ACNO < 2000\n\t\t\tAND FUNDYEAR + FUNDPER \= '$$MAXFUNDYEAR$$' + '$$MAXFUNDPER$$'\n\t\t) A\n\tLEFT JOIN INV_MAINTAIN_FINRPT B ON B.AIMSID \= A.AIMSID\n\t\tAND B.FUNDYEAR \= A.FUNDYEAR\n\t\tAND B.FUNDPER \= A.FUNDPER\n\t\tAND B.ACNO \= A.ACNO\n\t\tAND B.ACNOLEVEL \= A.ACNOLEVEL\n\t\tAND B.ACNOFLAG \= A.ACNOFLAG\n\t\tAND B.ACNOTYPE \= A.ACNOTYPE\n\t) AS new1\n
API_FN02A005_Q_FINRPTBS2=SELECT RowNum\n\t,AIMSID\n\t,FUNDYEAR\n\t,FUNDPER\n\t,ACNO\n\t,ACNOLEVEL\n\t,ACNONAME\n\t,ACNOFLAG\n\t,ACNOTYPE\n\t,PRINCAL_BAL\n\t,ADD_DT\n\t,ADD_USER_ID\n\t,LAST_MOD_DT\n\t,LAST_MOD_USER_ID\n\t,CCYFIN\n\t,CASE \n\t\tWHEN ACNO IN (\n\t\t\t\t'1000'\n\t\t\t\t,'1100'\n\t\t\t\t,'1500'\n\t\t\t\t,'2000'\n\t\t\t\t,'2100'\n\t\t\t\t,'2500'\n\t\t\t\t,'3000'\n\t\t\t\t,'3100'\n\t\t\t\t,'5900'\n\t\t\t\t,'6500'\n\t\t\t\t,'7900'\n\t\t\t\t,'8200'\n\t\t\t\t,'8300'\n\t\t\t\t,'8500'\n\t\t\t\t)\n\t\t\tTHEN 'Y'\n\t\tELSE 'N'\n\t\tEND AS 'ISBOLD'\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT AIMSID\n\t\t\t\t,FUNDYEAR\n\t\t\t\t,FUNDPER\n\t\t\t\t,ACNO\n\t\t\t\t,ACNOLEVEL\n\t\t\t\t,(\n\t\t\t\t\tCASE ACNOLEVEL\n\t\t\t\t\t\tWHEN 1\n\t\t\t\t\t\t\tTHEN '　'\n\t\t\t\t\t\tWHEN 2\n\t\t\t\t\t\t\tTHEN '　　'\n\t\t\t\t\t\tWHEN 3\n\t\t\t\t\t\t\tTHEN '　　　'\n\t\t\t\t\t\tELSE ''\n\t\t\t\t\t\tEND + ACNONAME\n\t\t\t\t\t) ACNONAME\n\t\t\t\t,ACNOFLAG\n\t\t\t\t,ACNOTYPE\n\t\t\t\t,ISNULL(PRINCAL_BAL, 0) PRINCAL_BAL\n\t\t\t\t,CCYFIN\n\t\t\tFROM INV_MAINTAIN_FINRPT\n\t\t\tWHERE AIMSID \= '$$AIMSID$$'\n\t\t\t\tAND ACNOTYPE \= 'BS'\n\t\t\t\tAND (\n\t\t\t\t\tACNO > \= 2000\n\t\t\t\t\tAND ACNO < 3000\n\t\t\t\t\t)\n\t\t\t\tAND FUNDYEAR + FUNDPER \= '$$MAXFUNDYEAR$$' + '$$MAXFUNDPER$$'\n\t\t\t) A\n\t\tLEFT JOIN INV_MAINTAIN_FINRPT B ON B.AIMSID \= A.AIMSID\n\t\t\tAND B.FUNDYEAR \= A.FUNDYEAR\n\t\t\tAND B.FUNDPER \= A.FUNDPER\n\t\t\tAND B.ACNO \= A.ACNO\n\t\t\tAND B.ACNOLEVEL \= A.ACNOLEVEL\n\t\t\tAND B.ACNOFLAG \= A.ACNOFLAG\n\t\t\tAND B.ACNOTYPE \= A.ACNOTYPE\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY A.ACNO\n\t\t\t) AS RowNum\n\t\t,A.AIMSID\n\t\t,A.FUNDYEAR\n\t\t,A.FUNDPER\n\t\t,A.ACNO\n\t\t,A.ACNOLEVEL\n\t\t,A.ACNONAME\n\t\t,A.ACNOFLAG\n\t\t,A.ACNOTYPE\n\t\t,A.PRINCAL_BAL\n\t\t,A.CCYFIN\n\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, B.ADD_DT), 20) AS 'ADD_DT'\n\t\t,B.ADD_USER_ID\n\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, B.LAST_MOD_DT), 20) AS 'LAST_MOD_DT'\n\t\t,B.LAST_MOD_USER_ID\n\tFROM (\n\t\tSELECT AIMSID\n\t\t\t,FUNDYEAR\n\t\t\t,FUNDPER\n\t\t\t,ACNO\n\t\t\t,ACNOLEVEL\n\t\t\t,(\n\t\t\t\tCASE ACNOLEVEL\n\t\t\t\t\tWHEN 1\n\t\t\t\t\t\tTHEN '　'\n\t\t\t\t\tWHEN 2\n\t\t\t\t\t\tTHEN '　　'\n\t\t\t\t\tWHEN 3\n\t\t\t\t\t\tTHEN '　　　'\n\t\t\t\t\tELSE ''\n\t\t\t\t\tEND + ACNONAME\n\t\t\t\t) ACNONAME\n\t\t\t,ACNOFLAG\n\t\t\t,ACNOTYPE\n\t\t\t,ISNULL(PRINCAL_BAL, 0) / 1000 PRINCAL_BAL\n\t\t\t,CCYFIN\n\t\tFROM INV_MAINTAIN_FINRPT\n\t\tWHERE AIMSID \= '$$AIMSID$$'\n\t\t\tAND ACNOTYPE \= 'BS'\n\t\t\tAND (\n\t\t\t\tACNO > \= 2000\n\t\t\t\tAND ACNO < 3000\n\t\t\t\t)\n\t\t\tAND FUNDYEAR + FUNDPER \= '$$MAXFUNDYEAR$$' + '$$MAXFUNDPER$$'\n\t\t) A\n\tLEFT JOIN INV_MAINTAIN_FINRPT B ON B.AIMSID \= A.AIMSID\n\t\tAND B.FUNDYEAR \= A.FUNDYEAR\n\t\tAND B.FUNDPER \= A.FUNDPER\n\t\tAND B.ACNO \= A.ACNO\n\t\tAND B.ACNOLEVEL \= A.ACNOLEVEL\n\t\tAND B.ACNOFLAG \= A.ACNOFLAG\n\t\tAND B.ACNOTYPE \= A.ACNOTYPE\n\t) AS new1\n
API_FN02A005_Q_FINRPTBS3=SELECT RowNum\n\t,AIMSID\n\t,FUNDYEAR\n\t,FUNDPER\n\t,ACNO\n\t,ACNOLEVEL\n\t,ACNONAME\n\t,ACNOFLAG\n\t,ACNOTYPE\n\t,PRINCAL_BAL\n\t,ADD_DT\n\t,ADD_USER_ID\n\t,LAST_MOD_DT\n\t,LAST_MOD_USER_ID\n\t,CCYFIN\n\t,CASE \n\t\tWHEN ACNO IN (\n\t\t\t\t'1000'\n\t\t\t\t,'1100'\n\t\t\t\t,'1500'\n\t\t\t\t,'2000'\n\t\t\t\t,'2100'\n\t\t\t\t,'2500'\n\t\t\t\t,'3000'\n\t\t\t\t,'3100'\n\t\t\t\t,'5900'\n\t\t\t\t,'6500'\n\t\t\t\t,'7900'\n\t\t\t\t,'8200'\n\t\t\t\t,'8300'\n\t\t\t\t,'8500'\n\t\t\t\t)\n\t\t\tTHEN 'Y'\n\t\tELSE 'N'\n\t\tEND AS 'ISBOLD'\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT AIMSID\n\t\t\t\t,FUNDYEAR\n\t\t\t\t,FUNDPER\n\t\t\t\t,ACNO\n\t\t\t\t,ACNOLEVEL\n\t\t\t\t,(\n\t\t\t\t\tCASE ACNOLEVEL\n\t\t\t\t\t\tWHEN 1\n\t\t\t\t\t\t\tTHEN '　'\n\t\t\t\t\t\tWHEN 2\n\t\t\t\t\t\t\tTHEN '　　'\n\t\t\t\t\t\tWHEN 3\n\t\t\t\t\t\t\tTHEN '　　　'\n\t\t\t\t\t\tELSE ''\n\t\t\t\t\t\tEND + ACNONAME\n\t\t\t\t\t) ACNONAME\n\t\t\t\t,ACNOFLAG\n\t\t\t\t,ACNOTYPE\n\t\t\t\t,ISNULL(PRINCAL_BAL, 0) PRINCAL_BAL\n\t\t\t\t,CCYFIN\n\t\t\tFROM INV_MAINTAIN_FINRPT\n\t\t\tWHERE AIMSID \= '$$AIMSID$$'\n\t\t\t\tAND ACNOTYPE \= 'BS'\n\t\t\t\tAND ACNO > 2999\n\t\t\t\tAND FUNDYEAR + FUNDPER \= '$$MAXFUNDYEAR$$' + '$$MAXFUNDPER$$'\n\t\t\t) A\n\t\tLEFT JOIN INV_MAINTAIN_FINRPT B ON B.AIMSID \= A.AIMSID\n\t\t\tAND B.FUNDYEAR \= A.FUNDYEAR\n\t\t\tAND B.FUNDPER \= A.FUNDPER\n\t\t\tAND B.ACNO \= A.ACNO\n\t\t\tAND B.ACNOLEVEL \= A.ACNOLEVEL\n\t\t\tAND B.ACNOFLAG \= A.ACNOFLAG\n\t\t\tAND B.ACNOTYPE \= A.ACNOTYPE\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY A.ACNO\n\t\t\t) AS RowNum\n\t\t,A.AIMSID\n\t\t,A.FUNDYEAR\n\t\t,A.FUNDPER\n\t\t,A.ACNO\n\t\t,A.ACNOLEVEL\n\t\t,A.ACNONAME\n\t\t,A.ACNOFLAG\n\t\t,A.ACNOTYPE\n\t\t,A.PRINCAL_BAL\n\t\t,A.CCYFIN\n\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, B.ADD_DT), 20) AS 'ADD_DT'\n\t\t,B.ADD_USER_ID\n\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, B.LAST_MOD_DT), 20) AS 'LAST_MOD_DT'\n\t\t,B.LAST_MOD_USER_ID\n\tFROM (\n\t\tSELECT AIMSID\n\t\t\t,FUNDYEAR\n\t\t\t,FUNDPER\n\t\t\t,ACNO\n\t\t\t,ACNOLEVEL\n\t\t\t,(\n\t\t\t\tCASE ACNOLEVEL\n\t\t\t\t\tWHEN 1\n\t\t\t\t\t\tTHEN '　'\n\t\t\t\t\tWHEN 2\n\t\t\t\t\t\tTHEN '　　'\n\t\t\t\t\tWHEN 3\n\t\t\t\t\t\tTHEN '　　　'\n\t\t\t\t\tELSE ''\n\t\t\t\t\tEND + ACNONAME\n\t\t\t\t) ACNONAME\n\t\t\t,ACNOFLAG\n\t\t\t,ACNOTYPE\n\t\t\t,ISNULL(PRINCAL_BAL, 0) / 1000 PRINCAL_BAL\n\t\t\t,CCYFIN\n\t\tFROM INV_MAINTAIN_FINRPT\n\t\tWHERE AIMSID \= '$$AIMSID$$'\n\t\t\tAND ACNOTYPE \= 'BS'\n\t\t\tAND ACNO > 2999\n\t\t\tAND FUNDYEAR + FUNDPER \= '$$MAXFUNDYEAR$$' + '$$MAXFUNDPER$$'\n\t\t) A\n\tLEFT JOIN INV_MAINTAIN_FINRPT B ON B.AIMSID \= A.AIMSID\n\t\tAND B.FUNDYEAR \= A.FUNDYEAR\n\t\tAND B.FUNDPER \= A.FUNDPER\n\t\tAND B.ACNO \= A.ACNO\n\t\tAND B.ACNOLEVEL \= A.ACNOLEVEL\n\t\tAND B.ACNOFLAG \= A.ACNOFLAG\n\t\tAND B.ACNOTYPE \= A.ACNOTYPE\n\t) AS new1\n
API_FN02A005_Q_FINRPTCS=SELECT RowNum\n\t,AIMSID\n\t,FUNDYEAR\n\t,FUNDPER\n\t,ACNO\n\t,ACNOLEVEL\n\t,ACNONAME\n\t,ACNOFLAG\n\t,ACNOTYPE\n\t,PRINCAL_BAL\n\t,ADD_DT\n\t,ADD_USER_ID\n\t,LAST_MOD_DT\n\t,LAST_MOD_USER_ID\n\t,CCYFIN\n\t,CASE \n\t\tWHEN ACNO IN (\n\t\t\t\t'1000'\n\t\t\t\t,'1100'\n\t\t\t\t,'1500'\n\t\t\t\t,'2000'\n\t\t\t\t,'2100'\n\t\t\t\t,'2500'\n\t\t\t\t,'3000'\n\t\t\t\t,'3100'\n\t\t\t\t,'5900'\n\t\t\t\t,'6500'\n\t\t\t\t,'7900'\n\t\t\t\t,'8200'\n\t\t\t\t,'8300'\n\t\t\t\t,'8500'\n\t\t\t\t)\n\t\t\tTHEN 'Y'\n\t\tELSE 'N'\n\t\tEND AS 'ISBOLD'\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT AIMSID\n\t\t\t\t,FUNDYEAR\n\t\t\t\t,FUNDPER\n\t\t\t\t,ACNO\n\t\t\t\t,ACNOLEVEL\n\t\t\t\t,(\n\t\t\t\t\tCASE ACNOLEVEL\n\t\t\t\t\t\tWHEN 1\n\t\t\t\t\t\t\tTHEN '　'\n\t\t\t\t\t\tWHEN 2\n\t\t\t\t\t\t\tTHEN '　　'\n\t\t\t\t\t\tWHEN 3\n\t\t\t\t\t\t\tTHEN '　　　'\n\t\t\t\t\t\tELSE ''\n\t\t\t\t\t\tEND + ACNONAME\n\t\t\t\t\t) ACNONAME\n\t\t\t\t,ACNOFLAG\n\t\t\t\t,ACNOTYPE\n\t\t\t\t,PRINCAL_BAL / 1000 PRINCAL_BAL\n\t\t\t\t,CCYFIN\n\t\t\tFROM INV_MAINTAIN_FINRPT\n\t\t\tWHERE AIMSID \= '$$AIMSID$$'\n\t\t\t\tAND ACNOTYPE \= 'CS'\n\t\t\t\tAND FUNDYEAR + FUNDPER \= '$$MAXFUNDYEAR$$' + '$$MAXFUNDPER$$'\n\t\t\t) A\n\t\tLEFT JOIN INV_MAINTAIN_FINRPT B ON B.AIMSID \= A.AIMSID\n\t\t\tAND B.FUNDYEAR \= A.FUNDYEAR\n\t\t\tAND B.FUNDPER \= A.FUNDPER\n\t\t\tAND B.ACNO \= A.ACNO\n\t\t\tAND B.ACNOLEVEL \= A.ACNOLEVEL\n\t\t\tAND B.ACNOFLAG \= A.ACNOFLAG\n\t\t\tAND B.ACNOTYPE \= A.ACNOTYPE\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY A.ACNO\n\t\t\t) AS RowNum\n\t\t,A.AIMSID\n\t\t,A.FUNDYEAR\n\t\t,A.FUNDPER\n\t\t,A.ACNO\n\t\t,A.ACNOLEVEL\n\t\t,A.ACNONAME\n\t\t,A.ACNOFLAG\n\t\t,A.ACNOTYPE\n\t\t,A.PRINCAL_BAL\n\t\t,A.CCYFIN\n\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, B.ADD_DT), 20) AS 'ADD_DT'\n\t\t,B.ADD_USER_ID\n\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, B.LAST_MOD_DT), 20) AS 'LAST_MOD_DT'\n\t\t,B.LAST_MOD_USER_ID\n\tFROM (\n\t\tSELECT AIMSID\n\t\t\t,FUNDYEAR\n\t\t\t,FUNDPER\n\t\t\t,ACNO\n\t\t\t,ACNOLEVEL\n\t\t\t,(\n\t\t\t\tCASE ACNOLEVEL\n\t\t\t\t\tWHEN 1\n\t\t\t\t\t\tTHEN '　'\n\t\t\t\t\tWHEN 2\n\t\t\t\t\t\tTHEN '　　'\n\t\t\t\t\tWHEN 3\n\t\t\t\t\t\tTHEN '　　　'\n\t\t\t\t\tELSE ''\n\t\t\t\t\tEND + ACNONAME\n\t\t\t\t) ACNONAME\n\t\t\t,ACNOFLAG\n\t\t\t,ACNOTYPE\n\t\t\t,PRINCAL_BAL / 1000 PRINCAL_BAL\n\t\t\t,CCYFIN\n\t\tFROM INV_MAINTAIN_FINRPT\n\t\tWHERE AIMSID \= '$$AIMSID$$'\n\t\t\tAND ACNOTYPE \= 'CS'\n\t\t\tAND FUNDYEAR + FUNDPER \= '$$MAXFUNDYEAR$$' + '$$MAXFUNDPER$$'\n\t\t) A\n\tLEFT JOIN INV_MAINTAIN_FINRPT B ON B.AIMSID \= A.AIMSID\n\t\tAND B.FUNDYEAR \= A.FUNDYEAR\n\t\tAND B.FUNDPER \= A.FUNDPER\n\t\tAND B.ACNO \= A.ACNO\n\t\tAND B.ACNOLEVEL \= A.ACNOLEVEL\n\t\tAND B.ACNOFLAG \= A.ACNOFLAG\n\t\tAND B.ACNOTYPE \= A.ACNOTYPE\n\t) AS new1\n
API_FN02A005_Q_FINRPTPL=SELECT RowNum\n\t,AIMSID\n\t,FUNDYEAR\n\t,FUNDPER\n\t,ACNO\n\t,ACNOLEVEL\n\t,ACNONAME\n\t,ACNOFLAG\n\t,ACNOTYPE\n\t,PRINCAL_BAL\n\t,ADD_DT\n\t,ADD_USER_ID\n\t,LAST_MOD_DT\n\t,LAST_MOD_USER_ID\n\t,CCYFIN\n\t,CASE \n\t\tWHEN ACNO IN (\n\t\t\t\t'1000'\n\t\t\t\t,'1100'\n\t\t\t\t,'1500'\n\t\t\t\t,'2000'\n\t\t\t\t,'2100'\n\t\t\t\t,'2500'\n\t\t\t\t,'3000'\n\t\t\t\t,'3100'\n\t\t\t\t,'5900'\n\t\t\t\t,'6500'\n\t\t\t\t,'7900'\n\t\t\t\t,'8200'\n\t\t\t\t,'8300'\n\t\t\t\t,'8500'\n\t\t\t\t)\n\t\t\tTHEN 'Y'\n\t\tELSE 'N'\n\t\tEND AS 'ISBOLD'\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT AIMSID\n\t\t\t\t,FUNDYEAR\n\t\t\t\t,FUNDPER\n\t\t\t\t,ACNO\n\t\t\t\t,ACNOLEVEL\n\t\t\t\t,(\n\t\t\t\t\tCASE ACNOLEVEL\n\t\t\t\t\t\tWHEN 1\n\t\t\t\t\t\t\tTHEN '　'\n\t\t\t\t\t\tWHEN 2\n\t\t\t\t\t\t\tTHEN '　　'\n\t\t\t\t\t\tWHEN 3\n\t\t\t\t\t\t\tTHEN '　　　'\n\t\t\t\t\t\tELSE ''\n\t\t\t\t\t\tEND + ACNONAME\n\t\t\t\t\t) ACNONAME\n\t\t\t\t,ACNOFLAG\n\t\t\t\t,ACNOTYPE\n\t\t\t\t,ISNULL(PRINCAL_BAL, 0) PRINCAL_BAL\n\t\t\t\t,CCYFIN\n\t\t\tFROM INV_MAINTAIN_FINRPT\n\t\t\tWHERE AIMSID \= '$$AIMSID$$'\n\t\t\t\tAND ACNOTYPE \= 'PL'\n\t\t\t\tAND FUNDYEAR + FUNDPER \= '$$MAXFUNDYEAR$$' + '$$MAXFUNDPER$$'\n\t\t\t) A\n\t\tLEFT JOIN INV_MAINTAIN_FINRPT B ON B.AIMSID \= A.AIMSID\n\t\t\tAND B.FUNDYEAR \= A.FUNDYEAR\n\t\t\tAND B.FUNDPER \= A.FUNDPER\n\t\t\tAND B.ACNO \= A.ACNO\n\t\t\tAND B.ACNOLEVEL \= A.ACNOLEVEL\n\t\t\tAND B.ACNOFLAG \= A.ACNOFLAG\n\t\t\tAND B.ACNOTYPE \= A.ACNOTYPE\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY A.ACNO\n\t\t\t) AS RowNum\n\t\t,A.AIMSID\n\t\t,A.FUNDYEAR\n\t\t,A.FUNDPER\n\t\t,A.ACNO\n\t\t,A.ACNOLEVEL\n\t\t,A.ACNONAME\n\t\t,A.ACNOFLAG\n\t\t,A.ACNOTYPE\n\t\t,A.PRINCAL_BAL\n\t\t,A.CCYFIN\n\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, B.ADD_DT), 20) AS 'ADD_DT'\n\t\t,B.ADD_USER_ID\n\t\t,CONVERT(VARCHAR(100), CONVERT(DATETIME, B.LAST_MOD_DT), 20) AS 'LAST_MOD_DT'\n\t\t,B.LAST_MOD_USER_ID\n\tFROM (\n\t\tSELECT AIMSID\n\t\t\t,FUNDYEAR\n\t\t\t,FUNDPER\n\t\t\t,ACNO\n\t\t\t,ACNOLEVEL\n\t\t\t,(\n\t\t\t\tCASE ACNOLEVEL\n\t\t\t\t\tWHEN 1\n\t\t\t\t\t\tTHEN '　'\n\t\t\t\t\tWHEN 2\n\t\t\t\t\t\tTHEN '　　'\n\t\t\t\t\tWHEN 3\n\t\t\t\t\t\tTHEN '　　　'\n\t\t\t\t\tELSE ''\n\t\t\t\t\tEND + ACNONAME\n\t\t\t\t) ACNONAME\n\t\t\t,ACNOFLAG\n\t\t\t,ACNOTYPE\n\t\t\t,ISNULL(PRINCAL_BAL, 0) / 1000 PRINCAL_BAL\n\t\t\t,CCYFIN\n\t\tFROM INV_MAINTAIN_FINRPT\n\t\tWHERE AIMSID \= '$$AIMSID$$'\n\t\t\tAND ACNOTYPE \= 'PL'\n\t\t\tAND FUNDYEAR + FUNDPER \= '$$MAXFUNDYEAR$$' + '$$MAXFUNDPER$$'\n\t\t) A\n\tLEFT JOIN INV_MAINTAIN_FINRPT B ON B.AIMSID \= A.AIMSID\n\t\tAND B.FUNDYEAR \= A.FUNDYEAR\n\t\tAND B.FUNDPER \= A.FUNDPER\n\t\tAND B.ACNO \= A.ACNO\n\t\tAND B.ACNOLEVEL \= A.ACNOLEVEL\n\t\tAND B.ACNOFLAG \= A.ACNOFLAG\n\t\tAND B.ACNOTYPE \= A.ACNOTYPE\n\t) AS new1\n
API_FN02A005_Q_FUNDYDATE=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM (\n\t\t\tSELECT DISTINCT CASE \n\t\t\t\t\tWHEN S2.FUNDYEAR IS NULL\n\t\t\t\t\t\tOR S2.FUNDPER IS NULL\n\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\tCONVERT(VARCHAR(4), YEAR(GETDATE())) + CASE \n\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\t\t\t\t\t,2\n\t\t\t\t\t\t\t\t\t\t\t,3\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tTHEN 'Q1'\n\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\t\t\t\t,5\n\t\t\t\t\t\t\t\t\t\t\t,6\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tTHEN 'Q2'\n\t\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t\t7\n\t\t\t\t\t\t\t\t\t\t\t,8\n\t\t\t\t\t\t\t\t\t\t\t,9\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tTHEN 'Q3'\n\t\t\t\t\t\t\t\t\tELSE 'Q4'\n\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\tELSE CONVERT(VARCHAR(4), S2.FUNDYEAR) + S2.FUNDPER\n\t\t\t\t\tEND AS 'FUNDYDATE'\n\t\t\tFROM INV_FUND_AIMS S1\n\t\t\tLEFT JOIN INV_MAINTAIN_FINRPT S2 ON S1.AIMSID \= S2.AIMSID\n\t\t\tWHERE S1.AIMSEVLFLAG <> '1'\n\t\t\t\tAND S1.AIMSTYPEFLAG <> '5'\n\t\t\t\tAND S1.AOID \= '$$LOGIN_ID$$'\n\t\t\t\tAND (\n\t\t\t\t\tS1.AIMSID LIKE '%$$AIMSID$$%'\n\t\t\t\t\tOR 'ALL' \= '$$AIMSID$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tS1.AIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\t'ALL' <> '$$AIMSID$$'\n\t\t\t\t\tOR 'ALL' <> '$$AIMSCMPY$$'\n\t\t\t\t\t)\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'FUNDYDATE'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY A.FUNDYDATE\n\t\t\t) AS RowNum\n\t\t,FUNDYDATE\n\tFROM (\n\t\tSELECT DISTINCT CASE \n\t\t\t\tWHEN S2.FUNDYEAR IS NULL\n\t\t\t\t\tOR S2.FUNDPER IS NULL\n\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\tCONVERT(VARCHAR(4), YEAR(GETDATE())) + CASE \n\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\t\t\t\t,2\n\t\t\t\t\t\t\t\t\t\t,3\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tTHEN 'Q1'\n\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t\t\t\t,5\n\t\t\t\t\t\t\t\t\t\t,6\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tTHEN 'Q2'\n\t\t\t\t\t\t\t\tWHEN MONTH(GETDATE()) IN (\n\t\t\t\t\t\t\t\t\t\t7\n\t\t\t\t\t\t\t\t\t\t,8\n\t\t\t\t\t\t\t\t\t\t,9\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tTHEN 'Q3'\n\t\t\t\t\t\t\t\tELSE 'Q4'\n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t)\n\t\t\t\tELSE CONVERT(VARCHAR(4), S2.FUNDYEAR) + S2.FUNDPER\n\t\t\t\tEND AS 'FUNDYDATE'\n\t\tFROM INV_FUND_AIMS S1\n\t\tLEFT JOIN INV_MAINTAIN_FINRPT S2 ON S1.AIMSID \= S2.AIMSID\n\t\tWHERE S1.AIMSEVLFLAG <> '1'\n\t\t\tAND S1.AIMSTYPEFLAG <> '5'\n\t\t\tAND S1.AOID \= '$$LOGIN_ID$$'\n\t\t\tAND (\n\t\t\t\tS1.AIMSID LIKE '%$$AIMSID$$%'\n\t\t\t\tOR 'ALL' \= '$$AIMSID$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tS1.AIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\t'ALL' <> '$$AIMSID$$'\n\t\t\t\tOR 'ALL' <> '$$AIMSCMPY$$'\n\t\t\t\t)\n\t\t) A\n\t) AS new1\n
API_FN02A005_U_FINRPT=EXEC('DECLARE @RETURN_CODE INT, @RETURN_MSG VARCHAR(1000) EXEC [INVSP_FN02A005_U_FINRPT] @RETURN_CODE \= @RETURN_CODE OUTPUT, @RETURN_MSG \= @RETURN_MSG OUTPUT;')
API_FN02A005_UPD_SENDER=UPDATE INV_MAIL_LIST\nSET SENDERFLAG \= 'Y'\nWHERE CONVERT(varchar(6), EVALUATIONDT, 112) \=\n    (SELECT MAX(DATA_YMD)\n     FROM INV_SYS_CONFIG)\n  AND AOID \= '$$LOGIN_ID$$'
API_FN02A006_Q_AIMS=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM INV_FUND_AIMSMAP\n\t\tWHERE (\n\t\t\t\tAOID \= '$$LOGIN_ID$$'\n\t\t\t\tOR '$$LOGIN_ID$$' LIKE '%ALL%'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tAIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\tOR '$$AIMSCMPY$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tAIMSID \= '$$AIMSID$$'\n\t\t\t\tOR '$$AIMSID$$' \= 'ALL'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSID\n\t\t\t) AS RowNum\n\t\t,AOID\n\t\t,AIMSID\n\t\t,AIMSCMPY\n\t\t,AOID AS 'PARAM_AOID'\n\t\t,AIMSID AS 'PARAM_AIMSID'\n\t\t,AIMSCMPY AS 'PARAM_AIMSCMPY'\n\t\t,STKNO\n\t\t,CONVERT(VARCHAR(100), TRANSINVDATE, 111) AS 'TRANSINVDATE'\n\t\t,BCODENAME\n\t\t,AIMSTYPE\n\t\t,IFRSFLAG\n\t\t,IFRSFLAGNAME\n\t\t,IFRSACNO\n\t\t,AIMSEVLFLAGNAME\n\t\t,AIMSEVLFLAG\n\t\t,RPTCNTNAME\n\t\t,ISNULL(WEB_IPO, 0) / 1000 AS 'WEB_IPO'\n\t\t,ISNULL(WEB_TSTO, 0) / 1000 AS 'WEB_TSTO'\n\t\t,ISNULL(OUTINVENTORY, 0) / 1000 AS 'OUTINVENTORY'\n\t\t,CCY\n\t\t,CCYFIN\n\t\t,FORMAT(LAWDIFF * 100, 'F2') AS LAWDIFF\n\t\t,FORMAT(STKDIFF * 100, 'F2') AS STKDIFF\n\t\t,OCIFLAG\n\tFROM INV_FUND_AIMSMAP\n\tWHERE (\n\t\t\tAOID \= '$$LOGIN_ID$$'\n\t\t\tOR '$$LOGIN_ID$$' LIKE '%ALL%'\n\t\t\t)\n\t\tAND (\n\t\t\tAIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\tOR '$$AIMSCMPY$$' \= 'ALL'\n\t\t\t)\n\t\tAND (\n\t\t\tAIMSID \= '$$AIMSID$$'\n\t\t\tOR '$$AIMSID$$' \= 'ALL'\n\t\t\t)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN02A006_Q_AIMSEVLFLAG=\ SELECT *, (SELECT COUNT(*) FROM (SELECT AIMSEVLFLAGNAME, AIMSEVLFLAG FROM INV_FUND_AIMSMAP GROUP BY AIMSEVLFLAGNAME, AIMSEVLFLAG)A) AS totalProperty FROM (SELECT ROW_NUMBER() OVER (ORDER BY AIMSEVLFLAG) AS RowNum, AIMSEVLFLAGNAME, AIMSEVLFLAG FROM INV_FUND_AIMSMAP GROUP BY AIMSEVLFLAGNAME, AIMSEVLFLAG) AS new1 WHERE RowNum > $$start$$ AND RowNum < \= ($$start$$+$$limit$$);
API_FN02A006_Q_CCY=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM INV_SYS_CCY\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY CCY\n\t\t\t) AS RowNum\n\t\t,CCY\n\tFROM INV_SYS_CCY\n\t) AS new1\n
API_FN02A014_1_DEMO=select top(5) A.CODE_ID AS 'FuncID' ,count(*)as 'count'from PROCESS_LOG AS A FULL OUTER JOIN JH_WS02_CODE_LIST AS B  WITH(NOLOCK) ON A.CODE_ID\=B.CODE_ID  where A.OuterReturnCode\='0' AND B.CODE_TYPE\='$$CODE_TYPE$$'   AND DateDiff(dd, convert(datetime, SUBSTRING(A.ADD_DT, 0,11), 120),getdate()) <\=7 GROUP BY A.CODE_ID order by count desc
API_FN02A014_2_COMBO=select distinct LoginID from PROCESS_LOG with(nolock)
API_FN02A014_2_DEMO=SELECT top(30) FuncID,ProcStartDt,ProcEndDt,HostIP,ACTION_TYPE,SubReturnMsg FROM PROCESS_LOG where ADD_USER_ID\='${PARAM_SOURCE_COMING}' AND FuncID\='$$FuncID$$' order by ProcStartDt DESC
API_FN02A014_3_DEMO=select  \n\n*,\n  (SELECT COUNT(*)\n   FROM PROCESS_LOG WITH(NOLOCK) where\n( \t(\n\t\t\t\tDateDiff(dd, convert(datetime, SUBSTRING(ADD_DT, 0,11), 120),getdate()) <\=7 \n\t\t\t\t\t) AND (CODE_ID\='$$FuncID$$' OR '$$FuncID$$' \= 'ALL') AND (ADD_USER_ID\='$$USERID$$' OR '$$USERID$$' \= 'ALL') )AND (OuterReturnCode\='$$OuterReturnCode$$')  ) AS totalProperty\n\n\t\t\t\tfrom \n\n\t\t\t\t(\n\t\t\t\t\n\t\t\t\tselect  \n ROW_NUMBER() OVER (\n                             ORDER BY CODE_ID) AS RowNum,\n\n\t\t\tCODE_ID AS 'FuncID',\n\t\t\tADD_DT,\n\t\t\tADD_USER_ID,\n\t\t\t\tLOGINID\n\t\t\t\t,ACTION_TYPE\n\t\t\t\t,HOSTIP\n\t\t\t\t,(\n\t\t\t\t\tCASE \n\t\t\t\t\t\tWHEN PROCTYPE LIKE '%WS%'\n\t\t\t\t\t\t\tTHEN PROCTYPE + '_API'\n\t\t\t\t\t\tELSE 'LOCAL'\n\t\t\t\t\t\tEND\n\t\t\t\t\t) AS PROCTYPE\n\t\t\t\t,PROCTARGET AS PROCTARGET_CODE\n\t\t\t\t,CASE PROCTARGET\n\t\t\t\t\tWHEN '0'\n\t\t\t\t\t\tTHEN '成功'\n\t\t\t\t\tWHEN '-1'\n\t\t\t\t\t\tTHEN '失敗'\n\t\t\t\t\tEND AS PROCTARGET\n\t\t\t\t,SUBMITVALUE\n\t\t\t\t,OuterReturnCode\n\t\t\t\t,OuterReturnMsg\n\t\t\t\t,SubReturnCode\n\t\t\t\t,SubReturnMsg\n\t\t\t\t,SubReturnUrl\n\t\t\t\t,LogUrl\n\t\t\t\t/*,FIELDBEFORE*/\n\t\t\t\t/*,FIELDAFTER*/\n\t\t\t\t,PROCSTARTDT\n\t\t\t\t,PROCENDDT\n\t\t\t\t,CAST((\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNULL(PROCENDDT, 0) \= '1900-01-01 00\:00\:00.000'\n\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\tELSE CAST(ABS(DATEDIFF(SECOND, PROCSTARTDT, ISNULL(PROCENDDT, '2019-12-20' + ' ' + '23\:59\:59'))) AS NVARCHAR(10)) + N'.' + RIGHT('000' + CAST(ABS(DATEDIFF(MILLISECOND, PROCSTARTDT, ISNULL(PROCENDDT, '2019-12-20' + ' ' + '23\:59\:59')) % 1000) AS NVARCHAR(3)), 3)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t) AS NUMERIC(8, 3)) AS EXEC_PERIOD\n\t\t\t\t,DATA_STATUS\n\t\t\t\t,PARAM_VALUE\n\t\t\t\tfrom PROCESS_LOG WITH(NOLOCK)\nwhere\n( \t(\n\t\t\t\tDateDiff(dd, convert(datetime, SUBSTRING(ADD_DT, 0,11), 120),getdate()) <\=7 \n\t\t\t\t\t)AND (CODE_ID\='$$FuncID$$' OR '$$FuncID$$' \= 'ALL') AND (ADD_USER_ID\='$$USERID$$' OR '$$USERID$$' \= 'ALL') AND (OuterReturnCode\='$$OuterReturnCode$$') )\n) AS B\nwhere  (RowNum > $$start$$ AND RowNum <\= ($$start$$+$$limit$$));
API_FN02A014_4_DEMO=select top(10) LoginID, convert(numeric(18,0),count(*)) AS count from PROCESS_LOG WITH(NOLOCK)  GROUP BY LoginID order by count DESC
API_FN02A014_5_DEMO=select top(5)  CODE_ID AS 'FuncID' , convert(numeric(18,0),count(*)) AS 'count' from PROCESS_LOG with(nolock) where LoginID\='$$USERID$$'  GROUP BY CODE_ID
API_FN02A014_6_DEMO=select top(5) A.CODE_ID AS 'FuncID' ,count(*)as 'count'from PROCESS_LOG AS A FULL OUTER JOIN JH_WS02_CODE_LIST AS B  WITH(NOLOCK) ON A.CODE_ID\=B.CODE_ID  where A.OuterReturnCode\='-1' AND B.CODE_TYPE\='$$CODE_TYPE$$'  AND DateDiff(dd, convert(datetime, SUBSTRING(A.ADD_DT, 0,11), 120),getdate()) <\=7 GROUP BY A.CODE_ID order by count desc
API_FN02A014_7_DEMO=select * from (\n\n\nSELECT C.YEAR\n\t,C.DATE\n\t,ISNULL(A.CODE_ID,'SysTREE')as 'CODE_ID'\n\t, CAST(C.hour  AS int) AS'hour'\n\t,count(A.ProcStartDt) AS 'count'\nFROM (\n\tSELECT *\n\tFROM DFM_DATE AS A\n\t\t,DFM_HOUR AS B \n\t) AS C\n FULL JOIN (  selecT * from  PROCESS_LOG where CODE_ID in('SysTREE'))  A ON DatePart(year, A.ProcStartDt) \= C.YEAR AND DatePart(month, A.ProcStartDt) \= C.MONTH AND DatePart(day, A.ProcStartDt) \= C.DAY AND DatePart(hour, A.ProcStartDt) \= C.lower_limit_hour \nWHERE DATE \= '2020/2/19'  \nGROUP BY C.YEAR\n\t,C.DATE\n\t,C.hour\n\t,A.CODE_ID\n\n\n)A \nFULL JOIN\n\n\n\t(SELECT C.YEAR\n\t\n\t,ISNULL(A.CODE_ID,'AD_CHECK')as 'CODE_ID2'\n\t, CAST(C.hour  AS int) AS'hour2'\n\t,count(A.ProcStartDt) AS 'count2'\nFROM (\n\tSELECT *\n\tFROM DFM_DATE AS A\n\t\t,DFM_HOUR AS B \n\t) AS C\n FULL JOIN (  selecT * from  PROCESS_LOG where CODE_ID in('AD_CHECK'))  A ON DatePart(year, A.ProcStartDt) \= C.YEAR AND DatePart(month, A.ProcStartDt) \= C.MONTH AND DatePart(day, A.ProcStartDt) \= C.DAY AND DatePart(hour, A.ProcStartDt) \= C.lower_limit_hour \nWHERE DATE \= '2020/2/19'  \nGROUP BY C.YEAR\n\t,C.DATE\n\t,C.hour\n\t,A.CODE_ID)B ON A.hour\=B.hour2\n\n\n\tFULL JOIN\n\n\n\t(SELECT C.YEAR\n\t\n\t,ISNULL(A.CODE_ID,'prop_Fn06B001_1')as 'CODE_ID3'\n\t, CAST(C.hour  AS int) AS'hour3'\n\t,count(A.ProcStartDt) AS 'count3'\nFROM (\n\tSELECT *\n\tFROM DFM_DATE AS A\n\t\t,DFM_HOUR AS B \n\t) AS C\n FULL JOIN (  selecT * from  PROCESS_LOG where CODE_ID in('prop_Fn06B001_1'))  A ON DatePart(year, A.ProcStartDt) \= C.YEAR AND DatePart(month, A.ProcStartDt) \= C.MONTH AND DatePart(day, A.ProcStartDt) \= C.DAY AND DatePart(hour, A.ProcStartDt) \= C.lower_limit_hour \nWHERE DATE \= '2020/2/19'  \nGROUP BY C.YEAR\n\t,C.DATE\n\t,C.hour\n\t,A.CODE_ID)C ON A.hour\=C.hour3\n\n\n\nORDER BY\n\thour asc\n
API_FN02A014_8_DEMO=BEGIN TRY\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'IS_DATE'\n\tBEGIN\n\t\tSELECT isnull(A.Y_YEAR, YEAR('$$D_DATE$$')) AS 'Y_YEAR'\n\t\t\t,isnull(A.D_DATE, '$$D_DATE$$') AS 'D_DATE'\n\t\t\t,isnull(A.OuterReturnCode, - 1) AS 'OuterReturnCode'\n\t\t\t,isnull(A.count, 0) AS 'count'\n\t\t\t,L.hour AS 'unit'\n\t\t\t,isnull(B.OuterReturnCode, 0) AS 'OuterReturnCode_true'\n\t\t\t,ISNULL(B.count, 0) AS 'count_true'\n\t\tFROM (\n\t\t\tSELECT C.Y_YEAR\n\t\t\t\t,C.D_DATE\n\t\t\t\t,A.OuterReturnCode\n\t\t\t\t,CAST(C.hour AS INT) AS 'hour'\n\t\t\t\t,count(A.ProcStartDt) AS 'count'\n\t\t\tFROM (\n\t\t\t\tSELECT *\n\t\t\t\tFROM DFM_DATE AS A\n\t\t\t\t\t,DFM_HOUR AS B\n\t\t\t\t) AS C\n\t\t\tLEFT OUTER JOIN (\n\t\t\t\tSELECT *\n\t\t\t\tFROM PROCESS_LOG\n\t\t\t\t) A ON DatePart(YEAR, A.ProcStartDt) \= C.Y_YEAR AND DatePart(MONTH, A.ProcStartDt) \= C.M_MONTH AND DatePart(DAY, A.ProcStartDt) \= C.D_DAY AND DatePart(HOUR, A.ProcStartDt) \= C.lower_limit_hour\n\t\t\tWHERE (D_DATE \= '$$D_DATE$$') AND CODE_ID \= '$$CODE_ID$$' AND OuterReturnCode \!\= '0'\n\t\t\tGROUP BY C.Y_YEAR\n\t\t\t\t,C.D_DATE\n\t\t\t\t,C.hour\n\t\t\t\t,A.OuterReturnCode\n\t\t\t) A\n\t\tFULL JOIN DFM_HOUR Q ON A.hour \= Q.hour\n\t\tINNER JOIN (\n\t\t\tSELECT C.Y_YEAR\n\t\t\t\t,C.D_DATE\n\t\t\t\t,A.OuterReturnCode\n\t\t\t\t,CAST(C.hour AS INT) AS 'hour'\n\t\t\t\t,count(A.ProcStartDt) AS 'count'\n\t\t\tFROM (\n\t\t\t\tSELECT *\n\t\t\t\tFROM DFM_DATE AS A\n\t\t\t\t\t,DFM_HOUR AS B\n\t\t\t\t) AS C\n\t\t\tLEFT OUTER JOIN (\n\t\t\t\tSELECT *\n\t\t\t\tFROM PROCESS_LOG\n\t\t\t\t) A ON DatePart(YEAR, A.ProcStartDt) \= C.Y_YEAR AND DatePart(DAY, A.ProcStartDt) \= C.D_DAY AND DatePart(HOUR, A.ProcStartDt) \= C.lower_limit_hour\n\t\t\tWHERE (D_DATE \= '$$D_DATE$$') AND CODE_ID \= '$$CODE_ID$$' AND OuterReturnCode \= '0'\n\t\t\tGROUP BY C.Y_YEAR\n\t\t\t\t,C.D_DATE\n\t\t\t\t,C.hour\n\t\t\t\t,A.OuterReturnCode\n\t\t\t) B\n\t\tRIGHT JOIN DFM_HOUR L ON B.hour \= L.hour ON Q.hour \= L.hour END ELSE\n\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'IS_MINUTE'\n\t\tBEGIN\n\t\t\tSELECT isnull(A.Y_YEAR,  YEAR('$$D_DATE$$')) AS 'Y_YEAR'\n\t\t\t\t,isnull(A.D_DATE, '$$D_DATE$$') AS 'D_DATE'\n\t\t\t\t,isnull(A.OuterReturnCode, - 1) AS 'OuterReturnCode'\n\t\t\t\t,isnull(A.count, 0) AS 'count'\n\t\t\t\t,L.minutes AS 'unit'\n\t\t\t\t,isnull(B.OuterReturnCode, 0) AS 'OuterReturnCode_true'\n\t\t\t\t,ISNULL(B.count, 0) AS 'count_true'\n\t\t\tFROM (\n\t\t\t\tSELECT C.Y_YEAR\n\t\t\t\t\t,C.D_DATE\n\t\t\t\t\t,A.OuterReturnCode\n\t\t\t\t\t,CAST(C.hour AS INT) AS 'hour'\n\t\t\t\t\t,CAST(C.minutes AS INT) AS 'minutes'\n\t\t\t\t\t,count(A.ProcStartDt) AS 'count'\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM DFM_DATE AS A\n\t\t\t\t\t\t,DFM_HOUR AS B\n\t\t\t\t\t\t,DFM_MINUTES AS C\n\t\t\t\t\t) AS C\n\t\t\t\tLEFT OUTER JOIN (\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM PROCESS_LOG\n\t\t\t\t\t) A ON DatePart(YEAR, A.ProcStartDt) \= C.Y_YEAR AND DatePart(MONTH, A.ProcStartDt) \= C.M_MONTH AND DatePart(DAY, A.ProcStartDt) \= C.D_DAY AND DatePart(HOUR, A.ProcStartDt) >\= C.lower_limit_hour AND DatePart(HOUR, A.ProcStartDt) < C.upper_limit_hour AND DatePart(MINUTE, A.ProcStartDt) \= C.lower_limit_minutes\n\t\t\t\tWHERE (D_DATE \= '$$D_DATE$$') AND (lower_limit_hour \= '$$lower_limit_hour$$') AND CODE_ID \= 'API_FN02A014_5_DEMO' AND OuterReturnCode \!\= '0'\n\t\t\t\tGROUP BY C.Y_YEAR\n\t\t\t\t\t,C.D_DATE\n\t\t\t\t\t,C.hour\n\t\t\t\t\t,C.minutes\n\t\t\t\t\t,A.OuterReturnCode\n\t\t\t\t) A\n\t\t\tFULL JOIN DFM_MINUTES Q ON A.minutes \= Q.minutes\n\t\t\tINNER JOIN (\n\t\t\t\tSELECT C.Y_YEAR\n\t\t\t\t\t,C.D_DATE\n\t\t\t\t\t,A.OuterReturnCode\n\t\t\t\t\t,CAST(C.hour AS INT) AS 'hour'\n\t\t\t\t\t,CAST(C.minutes AS INT) AS 'minutes'\n\t\t\t\t\t,count(A.ProcStartDt) AS 'count'\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM DFM_DATE AS A\n\t\t\t\t\t\t,DFM_HOUR AS B\n\t\t\t\t\t\t,DFM_MINUTES AS C\n\t\t\t\t\t) AS C\n\t\t\t\tLEFT OUTER JOIN (\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM PROCESS_LOG\n\t\t\t\t\t) A ON DatePart(YEAR, A.ProcStartDt) \= C.Y_YEAR AND DatePart(MONTH, A.ProcStartDt) \= C.M_MONTH AND DatePart(DAY, A.ProcStartDt) \= C.D_DAY AND DatePart(HOUR, A.ProcStartDt) \= C.lower_limit_hour AND DatePart(MINUTE, A.ProcStartDt) \= C.lower_limit_minutes\n\t\t\t\tWHERE (D_DATE \= '$$D_DATE$$') AND (lower_limit_hour \= '$$lower_limit_hour$$') AND CODE_ID \= 'API_FN02A014_5_DEMO' AND OuterReturnCode \= '0'\n\t\t\t\tGROUP BY C.Y_YEAR\n\t\t\t\t\t,C.D_DATE\n\t\t\t\t\t,C.hour\n\t\t\t\t\t,C.minutes\n\t\t\t\t\t,A.OuterReturnCode\n\t\t\t\t) B\n\t\t\tRIGHT JOIN DFM_MINUTES L ON B.minutes \= L.minutes ON Q.minutes \= L.minutes END;END TRY\n\n\t\t\tBEGIN CATCH\n\t\t\t\tSELECT ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\tEND CATCH
API_FN02B001_Q_AIMS=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT AIMSCMPY\n\t\t\t\t,AIMSID\n\t\t\t\t,BASEEVADATEYY\n\t\t\t\t,BASEEVADATEMM\n\t\t\tFROM (\n\t\t\t\tSELECT AIMSCMPY\n\t\t\t\t\t,AIMSID\n\t\t\t\t\t,YEAR(BASEEVADATE) BASEEVADATEYY\n\t\t\t\t\t,MONTH(BASEEVADATE) BASEEVADATEMM\n\t\t\t\tFROM INV_FUND_AIMS\n\t\t\t\tWHERE AIMSEVLFLAG IN (\n\t\t\t\t\t\t'2'\n\t\t\t\t\t\t,'4'\n\t\t\t\t\t\t)\n\t\t\t\t\tAND AOID \= '$$LOGIN_ID$$'\n\t\t\t\t\tAND (\n\t\t\t\t\t\tAIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t\t\t)\n\t\t\t\t\tAND (\n\t\t\t\t\t\tYEAR(BASEEVADATE) \= '$$BASEEVADATEYY$$'\n\t\t\t\t\t\tOR 'ALL' \= '$$BASEEVADATEYY$$'\n\t\t\t\t\t\t)\n\t\t\t\t\tAND (\n\t\t\t\t\t\tMONTH(BASEEVADATE) \= '$$BASEEVADATEMM$$'\n\t\t\t\t\t\tOR 'ALL' \= '$$BASEEVADATEMM$$'\n\t\t\t\t\t\t)\n\t\t\t\tGROUP BY AIMSCMPY\n\t\t\t\t\t,AIMSID\n\t\t\t\t\t,BASEEVADATE\n\t\t\t\t\n\t\t\t\tUNION\n\t\t\t\t\n\t\t\t\tSELECT AIMSCMPY\n\t\t\t\t\t,AIMSID\n\t\t\t\t\t,YEAR(BASEEVADATE) BASEEVADATEYY\n\t\t\t\t\t,MONTH(BASEEVADATE) BASEEVADATEMM\n\t\t\t\tFROM INV_HIS_FUND_AIMS\n\t\t\t\tWHERE AIMSEVLFLAG IN (\n\t\t\t\t\t\t'2'\n\t\t\t\t\t\t,'4'\n\t\t\t\t\t\t)\n\t\t\t\t\tAND AOID \= '$$LOGIN_ID$$'\n\t\t\t\t\tAND (\n\t\t\t\t\t\tAIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t\t\t)\n\t\t\t\t\tAND (\n\t\t\t\t\t\tYEAR(BASEEVADATE) \= '$$BASEEVADATEYY$$'\n\t\t\t\t\t\tOR 'ALL' \= '$$BASEEVADATEYY$$'\n\t\t\t\t\t\t)\n\t\t\t\t\tAND (\n\t\t\t\t\t\tMONTH(BASEEVADATE) \= '$$BASEEVADATEMM$$'\n\t\t\t\t\t\tOR 'ALL' \= '$$BASEEVADATEMM$$'\n\t\t\t\t\t\t)\n\t\t\t\tGROUP BY AIMSCMPY\n\t\t\t\t\t,AIMSID\n\t\t\t\t\t,BASEEVADATE\n\t\t\t\t) S\n\t\t\tWHERE BASEEVADATEYY IS NOT NULL\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSID\n\t\t\t\t,BASEEVADATEYY\n\t\t\t\t,BASEEVADATEMM\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT AIMSCMPY\n\t\t\t,AIMSID\n\t\t\t,BASEEVADATEYY\n\t\t\t,BASEEVADATEMM\n\t\tFROM (\n\t\t\tSELECT AIMSCMPY\n\t\t\t\t,AIMSID\n\t\t\t\t,YEAR(BASEEVADATE) BASEEVADATEYY\n\t\t\t\t,MONTH(BASEEVADATE) BASEEVADATEMM\n\t\t\tFROM INV_FUND_AIMS\n\t\t\tWHERE AIMSEVLFLAG IN (\n\t\t\t\t\t'2'\n\t\t\t\t\t,'4'\n\t\t\t\t\t)\n\t\t\t\tAND AOID \= '$$LOGIN_ID$$'\n\t\t\t\tAND (\n\t\t\t\t\tAIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tYEAR(BASEEVADATE) \= '$$BASEEVADATEYY$$'\n\t\t\t\t\tOR 'ALL' \= '$$BASEEVADATEYY$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tMONTH(BASEEVADATE) \= '$$BASEEVADATEMM$$'\n\t\t\t\t\tOR 'ALL' \= '$$BASEEVADATEMM$$'\n\t\t\t\t\t)\n\t\t\tGROUP BY AIMSCMPY\n\t\t\t\t,AIMSID\n\t\t\t\t,BASEEVADATE\n\t\t\t\n\t\t\tUNION\n\t\t\t\n\t\t\tSELECT AIMSCMPY\n\t\t\t\t,AIMSID\n\t\t\t\t,YEAR(BASEEVADATE) BASEEVADATEYY\n\t\t\t\t,MONTH(BASEEVADATE) BASEEVADATEMM\n\t\t\tFROM INV_HIS_FUND_AIMS\n\t\t\tWHERE AIMSEVLFLAG IN (\n\t\t\t\t\t'2'\n\t\t\t\t\t,'4'\n\t\t\t\t\t)\n\t\t\t\tAND AOID \= '$$LOGIN_ID$$'\n\t\t\t\tAND (\n\t\t\t\t\tAIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tYEAR(BASEEVADATE) \= '$$BASEEVADATEYY$$'\n\t\t\t\t\tOR 'ALL' \= '$$BASEEVADATEYY$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tMONTH(BASEEVADATE) \= '$$BASEEVADATEMM$$'\n\t\t\t\t\tOR 'ALL' \= '$$BASEEVADATEMM$$'\n\t\t\t\t\t)\n\t\t\tGROUP BY AIMSCMPY\n\t\t\t\t,AIMSID\n\t\t\t\t,BASEEVADATE\n\t\t\t) S\n\t\tWHERE BASEEVADATEYY IS NOT NULL\n\t\t) A\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN02B001_Q_CMPYPERYEAR=SELECT TOP 4 *,\n             4 AS totalProperty\nFROM\n  (SELECT S1.*\n   FROM\n     (SELECT ROW_NUMBER() OVER (\n                                ORDER BY (FUNDYEAR+FUNDPER) DESC) AS RowNum,\n                               COMPARECMPY,\n                               FUNDYEAR,\n                               FUNDPER,\n                               TALASSETS/1000 TALASSETS,\n                               TALLIAB/1000 TALLIAB,\n                               NETASSETS/1000 NETASSETS,\n                               SALESINCOME/ 1000 SALESINCOME,\n                               GROM,\n                               PROM,\n                               NETINCOME/1000 NETINCOME,\n                               GROSSPRO/1000 GROSSPRO,\n                               EBIT/1000 EBIT,\n                               EBITDA/1000 EBITDA,\n                               TALEQUITY/1000 TALEQUITY,\n                               BASEDATESTK,\n                               BASEDATEOS/1000 BASEDATEOS,\n                               DEPRAMORT/1000 DEPRAMORT,\n                               COMMONSTO/1000 COMMONSTO,\n                               NUMTSTO/1000 NUMTSTO,\n                               AIMSID,\n                               COMPAREIDNO\n      FROM INV_HIS_FUND_COMPARE_SINGLE\n      WHERE AOID \= '$$LOGIN_ID$$'\n        AND COMPAREIDNO \= '$$COMPAREIDNO$$') S1\n   INNER JOIN\n     (SELECT AIMSID,\n             COMPAREIDNO,\n             FUNDYEAR,\n             FUNDPER\n      FROM INV_RPT_FN08A006_COMPARESUM\n      WHERE YEAR(BASEEVADATE) \= '$$BASEEVADATEYY$$'\n        AND MONTH(BASEEVADATE)\='$$BASEEVADATEMM$$'\n        AND FUNDYEAR <> ''\n        AND FUNDPER <> '年化' ) S2 ON S1.AIMSID \= S2.AIMSID\n   AND S1.COMPAREIDNO\=S2.COMPAREIDNO\n   AND S1.FUNDYEAR\=S2.FUNDYEAR\n   AND S1.FUNDPER\=S2.FUNDPER) AS new1
API_FN02B001_Q_COMPARE=SELECT '$$BASEEVADATEYY$$' AS 'BASEEVADATEYY'\n\t,'$$BASEEVADATEMM$$' AS 'BASEEVADATEMM'\n\t,*\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT USEFLAG\n\t\t\t\t,COMPAREIDNO\n\t\t\t\t,COMPARECMPY\n\t\t\t\t,FUNDYEAR\n\t\t\t\t,FUNDPER\n\t\t\t\t,TALASSETS\n\t\t\t\t,TALLIAB\n\t\t\t\t,NETASSETS\n\t\t\t\t,SALESINCOME\n\t\t\t\t,GROM\n\t\t\t\t,PROM\n\t\t\t\t,NETINCOME\n\t\t\t\t,GROSSPRO\n\t\t\t\t,EBIT\n\t\t\t\t,EBITDA\n\t\t\t\t,TALEQUITY\n\t\t\t\t,BASEDATESTK\n\t\t\t\t,BASEDATEOS\n\t\t\t\t,DEPRAMORT\n\t\t\t\t,COMMONSTO\n\t\t\t\t,NUMTSTO\n\t\t\tFROM (\n\t\t\t\tSELECT USEFLAG\n\t\t\t\t\t,COMPAREIDNO\n\t\t\t\t\t,COMPARECMPY\n\t\t\t\t\t,FUNDYEAR\n\t\t\t\t\t,FUNDPER\n\t\t\t\t\t,TALASSETS / 1000 TALASSETS\n\t\t\t\t\t,TALLIAB / 1000 TALLIAB\n\t\t\t\t\t,NETASSETS / 1000 NETASSETS\n\t\t\t\t\t,SALESINCOME / 1000 SALESINCOME\n\t\t\t\t\t,GROM\n\t\t\t\t\t,PROM\n\t\t\t\t\t,NETINCOME / 1000 NETINCOME\n\t\t\t\t\t,GROSSPRO / 1000 GROSSPRO\n\t\t\t\t\t,EBIT / 1000 EBIT\n\t\t\t\t\t,EBITDA / 1000 EBITDA\n\t\t\t\t\t,TALEQUITY / 1000 TALEQUITY\n\t\t\t\t\t,BASEDATESTK\n\t\t\t\t\t,BASEDATEOS / 1000 BASEDATEOS\n\t\t\t\t\t,DEPRAMORT / 1000 DEPRAMORT\n\t\t\t\t\t,COMMONSTO / 1000 COMMONSTO\n\t\t\t\t\t,NUMTSTO / 1000 NUMTSTO\n\t\t\t\tFROM INV_FUND_COMPARE\n\t\t\t\tWHERE AOID \= '$$LOGIN_ID$$'\n\t\t\t\t\tAND AIMSID \= '$$AIMSID$$'\n\t\t\t\t\tAND YEAR(BASEEVADATE) \= '$$BASEEVADATEYY$$'\n\t\t\t\t\tAND MONTH(BASEEVADATE) \= '$$BASEEVADATEMM$$'\n\t\t\t\t\n\t\t\t\tUNION\n\t\t\t\t\n\t\t\t\tSELECT USEFLAG\n\t\t\t\t\t,COMPAREIDNO\n\t\t\t\t\t,COMPARECMPY\n\t\t\t\t\t,FUNDYEAR\n\t\t\t\t\t,FUNDPER\n\t\t\t\t\t,TALASSETS / 1000 TALASSETS\n\t\t\t\t\t,TALLIAB / 1000 TALLIAB\n\t\t\t\t\t,NETASSETS / 1000 NETASSETS\n\t\t\t\t\t,SALESINCOME / 1000 SALESINCOME\n\t\t\t\t\t,GROM\n\t\t\t\t\t,PROM\n\t\t\t\t\t,NETINCOME / 1000 NETINCOME\n\t\t\t\t\t,GROSSPRO / 1000 GROSSPRO\n\t\t\t\t\t,EBIT / 1000 EBIT\n\t\t\t\t\t,EBITDA / 1000 EBITDA\n\t\t\t\t\t,TALEQUITY / 1000 TALEQUITY\n\t\t\t\t\t,BASEDATESTK\n\t\t\t\t\t,BASEDATEOS / 1000 BASEDATEOS\n\t\t\t\t\t,DEPRAMORT / 1000 DEPRAMORT\n\t\t\t\t\t,COMMONSTO / 1000 COMMONSTO\n\t\t\t\t\t,NUMTSTO / 1000 NUMTSTO\n\t\t\t\tFROM INV_HIS_FUND_COMPARE\n\t\t\t\tWHERE AOID \= '$$LOGIN_ID$$'\n\t\t\t\t\tAND AIMSID \= '$$AIMSID$$'\n\t\t\t\t\tAND YEAR(BASEEVADATE) \= '$$BASEEVADATEYY$$'\n\t\t\t\t\tAND MONTH(BASEEVADATE) \= '$$BASEEVADATEMM$$'\n\t\t\t\t) SV\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY COMPAREIDNO\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT USEFLAG\n\t\t\t,COMPAREIDNO\n\t\t\t,COMPARECMPY\n\t\t\t,FUNDYEAR\n\t\t\t,FUNDPER\n\t\t\t,TALASSETS\n\t\t\t,TALLIAB\n\t\t\t,NETASSETS\n\t\t\t,SALESINCOME\n\t\t\t,GROM\n\t\t\t,PROM\n\t\t\t,NETINCOME\n\t\t\t,GROSSPRO\n\t\t\t,EBIT\n\t\t\t,EBITDA\n\t\t\t,TALEQUITY\n\t\t\t,BASEDATESTK\n\t\t\t,BASEDATEOS\n\t\t\t,DEPRAMORT\n\t\t\t,COMMONSTO\n\t\t\t,NUMTSTO\n\t\tFROM (\n\t\t\tSELECT USEFLAG\n\t\t\t\t,COMPAREIDNO\n\t\t\t\t,COMPARECMPY\n\t\t\t\t,FUNDYEAR\n\t\t\t\t,FUNDPER\n\t\t\t\t,TALASSETS / 1000 TALASSETS\n\t\t\t\t,TALLIAB / 1000 TALLIAB\n\t\t\t\t,NETASSETS / 1000 NETASSETS\n\t\t\t\t,SALESINCOME / 1000 SALESINCOME\n\t\t\t\t,GROM\n\t\t\t\t,PROM\n\t\t\t\t,NETINCOME / 1000 NETINCOME\n\t\t\t\t,GROSSPRO / 1000 GROSSPRO\n\t\t\t\t,EBIT / 1000 EBIT\n\t\t\t\t,EBITDA / 1000 EBITDA\n\t\t\t\t,TALEQUITY / 1000 TALEQUITY\n\t\t\t\t,BASEDATESTK\n\t\t\t\t,BASEDATEOS / 1000 BASEDATEOS\n\t\t\t\t,DEPRAMORT / 1000 DEPRAMORT\n\t\t\t\t,COMMONSTO / 1000 COMMONSTO\n\t\t\t\t,NUMTSTO / 1000 NUMTSTO\n\t\t\tFROM INV_FUND_COMPARE\n\t\t\tWHERE AOID \= '$$LOGIN_ID$$'\n\t\t\t\tAND AIMSID \= '$$AIMSID$$'\n\t\t\t\tAND YEAR(BASEEVADATE) \= '$$BASEEVADATEYY$$'\n\t\t\t\tAND MONTH(BASEEVADATE) \= '$$BASEEVADATEMM$$'\n\t\t\t\n\t\t\tUNION\n\t\t\t\n\t\t\tSELECT USEFLAG\n\t\t\t\t,COMPAREIDNO\n\t\t\t\t,COMPARECMPY\n\t\t\t\t,FUNDYEAR\n\t\t\t\t,FUNDPER\n\t\t\t\t,TALASSETS / 1000 TALASSETS\n\t\t\t\t,TALLIAB / 1000 TALLIAB\n\t\t\t\t,NETASSETS / 1000 NETASSETS\n\t\t\t\t,SALESINCOME / 1000 SALESINCOME\n\t\t\t\t,GROM\n\t\t\t\t,PROM\n\t\t\t\t,NETINCOME / 1000 NETINCOME\n\t\t\t\t,GROSSPRO / 1000 GROSSPRO\n\t\t\t\t,EBIT / 1000 EBIT\n\t\t\t\t,EBITDA / 1000 EBITDA\n\t\t\t\t,TALEQUITY / 1000 TALEQUITY\n\t\t\t\t,BASEDATESTK\n\t\t\t\t,BASEDATEOS / 1000 BASEDATEOS\n\t\t\t\t,DEPRAMORT / 1000 DEPRAMORT\n\t\t\t\t,COMMONSTO / 1000 COMMONSTO\n\t\t\t\t,NUMTSTO / 1000 NUMTSTO\n\t\t\tFROM INV_HIS_FUND_COMPARE\n\t\t\tWHERE AOID \= '$$LOGIN_ID$$'\n\t\t\t\tAND AIMSID \= '$$AIMSID$$'\n\t\t\t\tAND YEAR(BASEEVADATE) \= '$$BASEEVADATEYY$$'\n\t\t\t\tAND MONTH(BASEEVADATE) \= '$$BASEEVADATEMM$$'\n\t\t\t) SV\n\t\t) A\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN02B002_Q_ASSETSBASE=SELECT RowNum\n\t,AOID\n\t,AIMSCMPY\n\t,AIMSID\n\t,NUMERICAL_TYPE1\n\t,NUMERICAL_TYPE2\n\t,EDITOR\n\t,COLOUR\n\t,LEVELNAME\n\t,CASE \n\t\tWHEN NUMERICAL_TYPE1 \= 'PERCENTAGE'\n\t\t\tTHEN CONVERT(VARCHAR(100), CONVERT(DECIMAL(25, 2), (CONVERT(DECIMAL(25, 15), RTRIM(DAYNOW)) * 100)))\n\t\tELSE RTRIM(DAYNOW)\n\t\tEND AS 'DAYNOW'\n\t,CASE \n\t\tWHEN NUMERICAL_TYPE2 \= 'PERCENTAGE'\n\t\t\tTHEN CONVERT(VARCHAR(100), CONVERT(DECIMAL(25, 2), (CONVERT(DECIMAL(25, 15), RTRIM(DAYLAST)) * 100)))\n\t\tELSE RTRIM(DAYLAST)\n\t\tEND AS 'DAYLAST'\n\t,UPDMEMO\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM INV_WEB_MARKET\n\t\tWHERE AOID \= '$$LOGIN_ID$$'\n\t\t\tAND (\n\t\t\t\tAIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tAIMSID \= '$$AIMSID$$'\n\t\t\t\tOR 'ALL' \= '$$AIMSID$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tIFRSFLAG \= '$$IFRSFLAG$$'\n\t\t\t\tOR 'ALL' \= '$$IFRSFLAG$$'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSID\n\t\t\t\t,ITEMSEQ\n\t\t\t) AS RowNum\n\t\t,AOID\n\t\t,AIMSCMPY\n\t\t,AIMSID\n\t\t,CASE \n\t\t\tWHEN LEVELNAME \= '　　　　調整後─投資標的持有比率(E)'\n\t\t\t\tTHEN 'PERCENTAGE'\n\t\t\tWHEN LEVELNAME \= '投資標的持有比率'\n\t\t\t\tTHEN 'PERCENTAGE'\n\t\t\tWHEN isNumeric(RTRIM(DAYNOW)) \= 1\n\t\t\t\tTHEN 'DECIMAL'\n\t\t\tELSE 'N'\n\t\t\tEND AS 'NUMERICAL_TYPE1'\n\t\t,CASE \n\t\t\tWHEN LEVELNAME \= '　　　　調整後─投資標的持有比率(E)'\n\t\t\t\tTHEN 'PERCENTAGE'\n\t\t\tWHEN LEVELNAME \= '投資標的持有比率'\n\t\t\t\tTHEN 'PERCENTAGE'\n\t\t\tWHEN isNumeric(RTRIM(DAYLAST)) \= 1\n\t\t\t\tTHEN 'DECIMAL'\n\t\t\tELSE 'N'\n\t\t\tEND AS 'NUMERICAL_TYPE2'\n\t\t,CASE \n\t\t\tWHEN LEVELNAME \= '　　　　調整後─投資標的持有比率(E)'\n\t\t\t\tOR LEVELNAME \= '　　　　調整後─投資標的評價成本(原幣)(G)'\n\t\t\t\tTHEN 'Y'\n\t\t\tELSE 'N'\n\t\t\tEND AS 'EDITOR'\n\t\t,CASE \n\t\t\tWHEN LEVELNAME \= '　　　　調整後─投資標的持有比率(E)'\n\t\t\t\tOR LEVELNAME \= '　　　　調整後─投資標的評價成本(原幣)(G)'\n\t\t\t\tTHEN 'yellow'\n\t\t\tWHEN LEVELNAME \= '投資標的總(損)益-新台幣(M\=(F-I)+(A/H-G)*(J-H))'\n\t\t\t\tTHEN 'gray'\n\t\t\tELSE ''\n\t\t\tEND AS 'COLOUR'\n\t\t,LEVELNAME\n\t\t,DAYNOW\n\t\t,DAYLAST\n\t\t,UPDMEMO\n\tFROM INV_WEB_MARKET\n\tWHERE AOID \= '$$LOGIN_ID$$'\n\t\tAND (\n\t\t\tAIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\tOR 'ALL' \= '$$AIMSCMPY$$'\n\t\t\t)\n\t\tAND (\n\t\t\tAIMSID \= '$$AIMSID$$'\n\t\t\tOR 'ALL' \= '$$AIMSID$$'\n\t\t\t)\n\t\tAND (\n\t\t\tIFRSFLAG \= '$$IFRSFLAG$$'\n\t\t\tOR 'ALL' \= '$$IFRSFLAG$$'\n\t\t\t)\n\t) AS new1\n
API_FN02B002_Q_MARKET=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM INV_WEB_MARKET_DETAIL\n\t\tWHERE AOID \= '$$LOGIN_ID$$'\n\t\t\tAND GROUP_AIMSCMPY \= '$$AIMSCMPY$$'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSIDSEQ\n\t\t\t) AS RowNum\n\t\t,AOID\n\t\t,AIMSIDSEQ\n\t\t,CASE \n\t\t\tWHEN AIMSIDSEQ \= '3'\n\t\t\t\tTHEN 'Y'\n\t\t\tELSE 'N'\n\t\t\tEND AS 'EDITOR'\n\t\t,CASE \n\t\t\tWHEN AIMSIDSEQ \= '3'\n\t\t\t\tTHEN 'yellow'\n\t\t\tWHEN AIMSIDSEQ \= '4'\n\t\t\t\tTHEN 'gray'\n\t\t\tELSE ''\n\t\t\tEND AS 'COLOUR'\n\t\t,CASE \n\t\t\tWHEN AIMSIDSEQ IN (\n\t\t\t\t\t'1'\n\t\t\t\t\t,'2'\n\t\t\t\t\t,'3'\n\t\t\t\t\t)\n\t\t\t\tTHEN AIMSCMPY\n\t\t\tELSE ''\n\t\t\tEND AS 'AIMSCMPY'\n\t\t,CASE \n\t\t\tWHEN AIMSIDSEQ IN (\n\t\t\t\t\t'1'\n\t\t\t\t\t,'3'\n\t\t\t\t\t)\n\t\t\t\tTHEN AIMSID\n\t\t\tELSE ''\n\t\t\tEND AS 'AIMSID'\n\t\t,CASE \n\t\t\tWHEN AIMSIDSEQ IN (\n\t\t\t\t\t'1'\n\t\t\t\t\t,'3'\n\t\t\t\t\t)\n\t\t\t\tTHEN BASEEVADATE\n\t\t\tELSE ''\n\t\t\tEND AS 'BASEEVADATE'\n\t\t,SALESINCOME\n\t\t,NETINCOME1\n\t\t,NETINCOME2\n\t\t,NETINCOME3\n\t\t,TALEQUITY\n\t\t,CLOSEPRICE\n\t\t,OUTINVENTORY\n\t\t,TALEQUITY2\n\t\t,CASE FLAG_PB\n\t\t\tWHEN '1'\n\t\t\t\tTHEN 'TRUE'\n\t\t\tELSE NULL\n\t\t\tEND AS 'FLAG_PB'\n\t\t,CNT_PB\n\t\t,CASE FLAG_PS\n\t\t\tWHEN '1'\n\t\t\t\tTHEN 'TRUE'\n\t\t\tELSE NULL\n\t\t\tEND AS 'FLAG_PS'\n\t\t,CNT_PS\n\t\t,CASE FLAG_PE\n\t\t\tWHEN '1'\n\t\t\t\tTHEN 'TRUE'\n\t\t\tELSE NULL\n\t\t\tEND AS 'FLAG_PE'\n\t\t,CNT_PE\n\t\t,CASE FLAG_PEBIT\n\t\t\tWHEN '1'\n\t\t\t\tTHEN 'TRUE'\n\t\t\tELSE NULL\n\t\t\tEND AS 'FLAG_PEBIT'\n\t\t,CNT_PEBIT\n\t\t,CASE FLAG_PEBITDA\n\t\t\tWHEN '1'\n\t\t\t\tTHEN 'TRUE'\n\t\t\tELSE NULL\n\t\t\tEND AS 'FLAG_PEBITDA'\n\t\t,CNT_PEBITDA\n\t\t,UPDMEMO\n\t\t,GROUP_AIMSID\n\t\t,GROUP_AIMSCMPY\n\tFROM INV_WEB_MARKET_DETAIL\n\tWHERE AOID \= '$$LOGIN_ID$$'\n\t\tAND GROUP_AIMSCMPY \= '$$AIMSCMPY$$'\n\t) AS new1\n
API_FN02B002_U_MARKET=EXEC('DECLARE @RETURN_CODE INT, @RETURN_MSG VARCHAR(1000) EXEC [INVSP_FN02B002_U_MARKET] @RETURN_CODE \= @RETURN_CODE OUTPUT, @RETURN_MSG \= @RETURN_MSG OUTPUT;')
API_FN02B002_UPD_SENDER=UPDATE INV_MAIL_LIST\nSET SENDERFLAG \= 'Y'\nWHERE CONVERT(varchar(6), EVALUATIONDT, 112) \=\n    (SELECT MAX(DATA_YMD)\n     FROM INV_SYS_CONFIG)\n  AND AOID \= '$$LOGIN_ID$$'
API_FN02B003_Q_ASSETS=SELECT RowNum, CCY, LAWDIFF, AOID, AIMSID, ACNO, ACNOLEVEL, FUNDYEAR, FUNDPER, ITEMSEQ, ACNONAME, PRINCAL_BAL, EACHLAWDIFF*100.0 AS 'EACHLAWDIFF', PRINCAL_ADJ, PRINCAL_SUM, UPDMEMO, CASE WHEN ITEMSEQ NOT IN ('A10', 'A12', 'A22', 'A30', 'B10', 'B12', 'B22', 'B30', 'C10', 'C11', 'C30') THEN 'Y' ELSE 'N' END AS 'EDITOR', CASE WHEN ITEMSEQ IN ('A30', 'B30', 'C30', 'C11') THEN 'GRAY' ELSE '' END AS 'COLOUR', (SELECT COUNT(*) FROM (SELECT S2.CCY, S2.LAWDIFF, S1.* FROM (SELECT AOID, AIMSID, ACNO, ACNOLEVEL, FUNDYEAR, FUNDPER, CASE ACNO WHEN '1000' THEN 'A10' WHEN '2000' THEN 'B10' WHEN '3000' THEN 'C10' END ITEMSEQ, ACNONAME, NULL PRINCAL_BAL, NULL EACHLAWDIFF, NULL PRINCAL_ADJ, NULL PRINCAL_SUM, NULL UPDMEMO FROM INV_MAINTAIN_FINRPT WHERE AIMSCMPY \= '$$AIMSCMPY$$' AND ACNOTYPE \= 'BS' AND FUNDYEAR+FUNDPER IN (SELECT MAX(FUNDYEAR+FUNDPER) FROM INV_MAINTAIN_FINRPT WHERE AIMSCMPY \= '$$AIMSCMPY$$') AND ACNO IN ('1000', '2000', '3000') AND ACNOLEVEL \= 0 UNION ALL SELECT AOID, AIMSID, ACNO, ACNOLEVEL, FUNDYEAR, FUNDPER, CASE WHEN ACNO \= '1100' AND ACNOLEVEL \= 1 THEN 'A12' WHEN ACNO \= '1500' AND ACNOLEVEL \= 1 THEN 'A22' WHEN ACNO \= '1000' AND ACNOLEVEL \= 0 THEN 'A30' WHEN ACNO \= '2100' AND ACNOLEVEL \= 1 THEN 'B12' WHEN ACNO \= '2500' AND ACNOLEVEL \= 1 THEN 'B22' WHEN ACNO \= '2000' AND ACNOLEVEL \= 0 THEN 'B30' WHEN ACNO \= '3000' AND ACNOLEVEL \= 0 THEN 'C30' WHEN (ACNO BETWEEN 1000 AND 1499) AND ACNOLEVEL IN (1, 2, 3) THEN 'A11' WHEN (ACNO BETWEEN 1500 AND 1999) AND ACNOLEVEL IN (1, 2, 3) THEN 'A21' WHEN (ACNO BETWEEN 2000 AND 2499) AND ACNOLEVEL IN (1, 2, 3) THEN 'B11' WHEN (ACNO BETWEEN 2500 AND 2999) AND ACNOLEVEL IN (1, 2, 3) THEN 'B21' WHEN ((ACNO BETWEEN 3000 AND 3009) AND ACNOLEVEL IN (1, 2, 3)) OR ACNO IN ('3100','3110') THEN 'C11' WHEN ((ACNO BETWEEN 3100 AND 3999) AND ACNOLEVEL IN (1, 2, 3)) AND ACNO NOT IN ('3100','3110') THEN 'C21' END ITEMSEQ, CASE WHEN ACNOLEVEL \= '0' THEN ACNONAME+'合計' WHEN ACNOLEVEL \= '1' THEN '　'+ACNONAME+'合計' WHEN ACNOLEVEL \= '2' THEN '　　'+ACNONAME WHEN ACNOLEVEL \= '3' THEN '　　　'+ACNONAME ELSE ACNONAME END ACNONAME, ISNULL(PRINCAL_BAL, 0) PRINCAL_BAL, ISNULL(EACHLAWDIFF, 0) EACHLAWDIFF, ISNULL(PRINCAL_ADJ, 0) PRINCAL_ADJ, ISNULL(PRINCAL_SUM, 0) PRINCAL_SUM, UPDMEMO FROM INV_MAINTAIN_FINRPT WHERE AIMSCMPY \= '$$AIMSCMPY$$' AND ACNOTYPE \= 'BS' AND FUNDYEAR+FUNDPER IN (SELECT MAX(FUNDYEAR+FUNDPER) FROM INV_MAINTAIN_FINRPT WHERE AIMSCMPY \= '$$AIMSCMPY$$')) S1 INNER JOIN INV_FUND_AIMS S2 ON S1.AIMSID \= S2.AIMSID) A) AS totalProperty FROM (SELECT ROW_NUMBER() OVER (ORDER BY A.ITEMSEQ, A.ACNO DESC) AS RowNum, * FROM (SELECT S2.CCY, S2.LAWDIFF, S1.* FROM (SELECT AOID, AIMSID, ACNO, ACNOLEVEL, FUNDYEAR, FUNDPER, CASE ACNO WHEN '1000' THEN 'A10' WHEN '2000' THEN 'B10' WHEN '3000' THEN 'C10' END ITEMSEQ, ACNONAME, NULL PRINCAL_BAL, NULL EACHLAWDIFF, NULL PRINCAL_ADJ, NULL PRINCAL_SUM, NULL UPDMEMO FROM INV_MAINTAIN_FINRPT WHERE AIMSCMPY \= '$$AIMSCMPY$$' AND ACNOTYPE \= 'BS' AND FUNDYEAR+FUNDPER IN (SELECT MAX(FUNDYEAR+FUNDPER) FROM INV_MAINTAIN_FINRPT WHERE AIMSCMPY \= '$$AIMSCMPY$$') AND ACNO IN ('1000', '2000', '3000') AND ACNOLEVEL \= 0 UNION ALL SELECT AOID, AIMSID, ACNO, ACNOLEVEL, FUNDYEAR, FUNDPER, CASE WHEN ACNO \= '1100' AND ACNOLEVEL \= 1 THEN 'A12' WHEN ACNO \= '1500' AND ACNOLEVEL \= 1 THEN 'A22' WHEN ACNO \= '1000' AND ACNOLEVEL \= 0 THEN 'A30' WHEN ACNO \= '2100' AND ACNOLEVEL \= 1 THEN 'B12' WHEN ACNO \= '2500' AND ACNOLEVEL \= 1 THEN 'B22' WHEN ACNO \= '2000' AND ACNOLEVEL \= 0 THEN 'B30' WHEN ACNO \= '3000' AND ACNOLEVEL \= 0 THEN 'C30' WHEN (ACNO BETWEEN 1000 AND 1499) AND ACNOLEVEL IN (1, 2, 3) THEN 'A11' WHEN (ACNO BETWEEN 1500 AND 1999) AND ACNOLEVEL IN (1, 2, 3) THEN 'A21' WHEN (ACNO BETWEEN 2000 AND 2499) AND ACNOLEVEL IN (1, 2, 3) THEN 'B11' WHEN (ACNO BETWEEN 2500 AND 2999) AND ACNOLEVEL IN (1, 2, 3) THEN 'B21' WHEN ((ACNO BETWEEN 3000 AND 3009) AND ACNOLEVEL IN (1, 2, 3)) OR ACNO IN ('3100', '3110') THEN 'C11' WHEN ((ACNO BETWEEN 3100 AND 3999) AND ACNOLEVEL IN (1, 2, 3)) AND ACNO NOT IN ('3100', '3110') THEN 'C21' END ITEMSEQ, CASE WHEN ACNOLEVEL \= '0' THEN ACNONAME+'合計' WHEN ACNOLEVEL \= '1' THEN '　'+ACNONAME+'合計' WHEN ACNOLEVEL \= '2' THEN '　　'+ACNONAME WHEN ACNOLEVEL \= '3' THEN '　　　'+ACNONAME ELSE ACNONAME END ACNONAME, ISNULL(PRINCAL_BAL, 0)/1000 PRINCAL_BAL, ISNULL(EACHLAWDIFF, 0) EACHLAWDIFF, ISNULL(PRINCAL_ADJ, 0)/1000 PRINCAL_ADJ, ISNULL(PRINCAL_SUM, 0)/1000 PRINCAL_SUM, UPDMEMO FROM INV_MAINTAIN_FINRPT WHERE AIMSCMPY \= '$$AIMSCMPY$$' AND ACNOTYPE \= 'BS' AND FUNDYEAR+FUNDPER IN (SELECT MAX(FUNDYEAR+FUNDPER) FROM INV_MAINTAIN_FINRPT WHERE AIMSCMPY \= '$$AIMSCMPY$$')) S1 INNER JOIN INV_FUND_AIMS S2 ON S1.AIMSID \= S2.AIMSID) A) AS new1 ORDER BY ITEMSEQ,ACNO
API_FN02B003_Q_ASSETSBASE=SELECT RowNum, AOID,\n               AIMSCMPY,\n               AIMSID,\n               NUMERICAL_TYPE1,\n               NUMERICAL_TYPE2,\n               EDITOR,\n               COLOUR,\n               LEVELNAME,\n               CASE\n                   WHEN NUMERICAL_TYPE1 \= 'PERCENTAGE' THEN CONVERT(VARCHAR(100), CONVERT(DECIMAL(25, 2), (CONVERT(DECIMAL(25, 15), RTRIM(DAYNOW))*100)))\n                   ELSE RTRIM(DAYNOW)\n               END AS 'DAYNOW',\n               CASE\n                   WHEN NUMERICAL_TYPE2 \= 'PERCENTAGE' THEN CONVERT(VARCHAR(100), CONVERT(DECIMAL(25, 2), (CONVERT(DECIMAL(25, 15), RTRIM(DAYLAST))*100)))\n                   ELSE RTRIM(DAYLAST)\n               END AS 'DAYLAST',\n               UPDMEMO,\n\n  (SELECT COUNT(*)\n   FROM INV_WEB_ASSETS\n   WHERE AOID \= '$$LOGIN_ID$$'\n     AND (AIMSCMPY \= '$$AIMSCMPY$$'\n          OR 'ALL' \= '$$AIMSCMPY$$')\n     AND (AIMSID \= '$$AIMSID$$'\n          OR 'ALL' \= '$$AIMSID$$')\n     AND (IFRSFLAG \= '$$IFRSFLAG$$'\n          OR 'ALL' \= '$$IFRSFLAG$$')) AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY AIMSID,\n                                      ITEMSEQ) AS RowNum,\n                            AOID,\n                            AIMSCMPY,\n                            AIMSID,\n                            CASE\n                                WHEN LEVELNAME \= '　　　　調整後─投資標的持有比率(E)' THEN 'PERCENTAGE'\n                                WHEN LEVELNAME \= '投資標的持有比率'                    THEN 'PERCENTAGE'\n                                WHEN isNumeric(RTRIM(DAYNOW)) \= 1 THEN 'DECIMAL'\n                                ELSE 'N'\n                            END AS 'NUMERICAL_TYPE1',\n                            CASE\n                                WHEN LEVELNAME \= '　　　　調整後─投資標的持有比率(E)' THEN 'PERCENTAGE'\n                                WHEN LEVELNAME \= '投資標的持有比率'                    THEN 'PERCENTAGE'\n                                WHEN isNumeric(RTRIM(DAYLAST)) \= 1 THEN 'DECIMAL'\n                                ELSE 'N'\n                            END AS 'NUMERICAL_TYPE2',\n                            CASE\n                                WHEN LEVELNAME \= '　　　　調整後─投資標的持有比率(E)'\n                                     OR LEVELNAME \= '　　　　調整後─投資標的評價成本(原幣)(G)' THEN 'Y'\n                                ELSE 'N'\n                            END AS 'EDITOR',\n                            CASE\n                                WHEN LEVELNAME \= '　　　　調整後─投資標的持有比率(E)'\n                                     OR LEVELNAME \= '　　　　調整後─投資標的評價成本(原幣)(G)' THEN 'yellow'\n                                WHEN LEVELNAME \= '投資標的總(損)益-新台幣(M\=(F-I)+(A/H-G)*(J-H))' THEN 'gray'\n                                ELSE ''\n                            END AS 'COLOUR',\n                            LEVELNAME,\n                            DAYNOW,\n                            DAYLAST,\n                            UPDMEMO\n   FROM INV_WEB_ASSETS\n   WHERE AOID \= '$$LOGIN_ID$$'\n     AND (AIMSCMPY LIKE '%$$AIMSCMPY$$%'\n          OR 'ALL' \= '$$AIMSCMPY$$')\n     AND (AIMSID \= '$$AIMSID$$'\n          OR 'ALL' \= '$$AIMSID$$')\n     AND (IFRSFLAG \= '$$IFRSFLAG$$'\n          OR 'ALL' \= '$$IFRSFLAG$$')) AS new1
API_FN02B003_U_ASSETS=SET QUOTED_IDENTIFIER OFF; EXEC("DECLARE @RETURN_CODE INT, @RETURN_MSG VARCHAR(1000) ; EXEC [INVSP_FN02B003_U_ASSETS] '$$AIMSID$$' ,'$$FUNDYEAR$$','$$FUNDPER$$', @RETURN_CODE \= @RETURN_CODE OUTPUT, @RETURN_MSG \= @RETURN_MSG OUTPUT;"); SET QUOTED_IDENTIFIER ON;
API_FN02B004_Q_AIMSTYPE=SELECT *, (SELECT COUNT(*)+1 FROM (SELECT AIMSTYPE FROM INV_DAY_AIMSOTC GROUP BY AIMSTYPE) A) AS totalProperty FROM (SELECT '0' AS RowNum, 'ALL' AS 'AIMSTYPE' UNION ALL SELECT ROW_NUMBER() OVER (ORDER BY AIMSTYPE) AS RowNum, AIMSTYPE FROM INV_DAY_AIMSOTC GROUP BY AIMSTYPE) AS new1 WHERE RowNum > \= $$start$$ AND RowNum < ($$start$$+$$limit$$);
API_FN02B004_Q_AIMSVALUE=SELECT RowNum\n\t,AIMSID\n\t,AIMSCMPY\n\t,STKNO\n\t,AIMSTYPE\n\t,CCY\n\t,LIVEFLAG\n\t,OWNDAY_OVER\n\t,TRANSTWD AS 'TRANSTWD_NUMBER'\n\t,FUNDINVENTORY AS 'FUNDINVENTORY_NUMBER'\n\t,FUNDCOSTSRC AS 'FUNDCOSTSRC_NUMBER'\n\t,CLOSEPRICE AS 'CLOSEPRICE_NUMBER'\n\t,EQUITY AS 'EQUITY_NUMBER'\n\t,COSTRATE_AMT AS 'COSTRATE_AMT_NUMBER'\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM INV_DAY_AIMSOTC\n\t\tWHERE (\n\t\t\t\tTURNDATE \= '$$TURNDATE$$'\n\t\t\t\tOR 'ALL' \= '$$TURNDATE$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tAIMSTYPE \= '$$AIMSTYPE$$'\n\t\t\t\tOR 'ALL' \= '$$AIMSTYPE$$'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSID\n\t\t\t) AS RowNum\n\t\t,AIMSID\n\t\t,AIMSCMPY\n\t\t,STKNO\n\t\t,AIMSTYPE\n\t\t,CCY\n\t\t,LIVEFLAG\n\t\t,OWNDAY_OVER\n\t\t,TRANSTWD / 1000 TRANSTWD\n\t\t,FUNDINVENTORY / 1000 FUNDINVENTORY\n\t\t,FUNDCOSTSRC\n\t\t,CLOSEPRICE\n\t\t,EQUITY / 1000 EQUITY\n\t\t,COSTRATE_AMT / 1000 COSTRATE_AMT\n\tFROM INV_DAY_AIMSOTC\n\tWHERE (\n\t\t\tTURNDATE \= '$$TURNDATE$$'\n\t\t\tOR 'ALL' \= '$$TURNDATE$$'\n\t\t\t)\n\t\tAND (\n\t\t\tAIMSTYPE \= '$$AIMSTYPE$$'\n\t\t\tOR 'ALL' \= '$$AIMSTYPE$$'\n\t\t\t)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN02B004_Q_TURNDATE=SELECT *, (SELECT COUNT(*) FROM (SELECT CONVERT(CHAR(8), TURNDATE, 112) TURNDATE FROM INV_DAY_AIMSOTC GROUP BY TURNDATE) A) AS totalProperty FROM (SELECT ROW_NUMBER() OVER (ORDER BY TURNDATE DESC) AS RowNum, CONVERT(CHAR(8), TURNDATE, 112) TURNDATE FROM INV_DAY_AIMSOTC GROUP BY TURNDATE) AS new1
API_Fn02C001_CD_CB1=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM ES_REF_CODE_MASTER AS M\n\t\tLEFT JOIN ES_REF_CODE_DETAIL AS D ON M.CODE_TYPE \= D.CODE_TYPE\n\t\tWHERE M.CODE_TYPE \= 'CHK_TYPE'\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'CODE_TYPE_DESC'\n\t\t,'ALL' AS 'CODE_TYPE'\n\t\t,'ALL' AS 'CODE_VALUE'\n\t\t,'ALL' AS 'CODE_VALUE_DESC'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY CODE_VALUE\n\t\t\t) AS RowNum\n\t\t,M.CODE_TYPE_DESC AS CODE_TYPE_DESC\n\t\t,D.CODE_TYPE AS CODE_TYPE\n\t\t,D.CODE_VALUE AS CODE_VALUE\n\t\t,D.CODE_VALUE + '_' + D.CODE_VALUE_DESC AS CODE_VALUE_DESC\n\tFROM ES_REF_CODE_MASTER AS M\n\tLEFT JOIN ES_REF_CODE_DETAIL AS D ON M.CODE_TYPE \= D.CODE_TYPE\n\tWHERE M.CODE_TYPE \= 'CHK_TYPE'\n\t) AS new1\nWHERE RowNum >\= $$start$$\n\tAND RowNum < ($$start$$ + $$limit$$);\n
API_Fn02C001_CD_CB2=
API_Fn02C001_D1_WIN=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM ES_REF_CODE_MASTER AS M\n\t\tLEFT JOIN ES_REF_CODE_DETAIL AS D ON M.CODE_TYPE \= D.CODE_TYPE\n\t\tWHERE M.CODE_TYPE \= 'CHK_TYPE'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY CODE_VALUE\n\t\t\t) AS RowNum\n\t\t,M.CODE_TYPE_DESC AS CODE_TYPE_DESC\n\t\t,D.CODE_TYPE AS CODE_TYPE\n\t\t,D.CODE_VALUE AS CODE_VALUE\n\t\t,D.CODE_VALUE + '_' + D.CODE_VALUE_DESC AS CODE_VALUE_DESC\n\tFROM ES_REF_CODE_MASTER AS M\n\tLEFT JOIN ES_REF_CODE_DETAIL AS D ON M.CODE_TYPE \= D.CODE_TYPE\n\tWHERE M.CODE_TYPE \= 'CHK_TYPE'\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)\n
API_Fn02C001_DS2=SELECT *,\n\t(\n\t\tSELECT COUNT(*)\t\t\t\n\t\tFROM JH_TABLEDEAL_LIST2\n\t\tWHERE (\n\t\t\t\tWORK_DBNAME LIKE '%$$WORK_DBNAME$$%'\n\t\t\t\tOR '$$WORK_DBNAME$$' \= 'ALL'\n\t\t\t  )\n\t\t\tAND (\n\t\t\t\tTB_NAME LIKE '%$$TB_NAME$$%'\n\t\t\t\tOR '$$TB_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tTB_DESC LIKE '%$$TB_DESC$$%'\n\t\t\t\tOR '$$TB_DESC$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (BACKUP_FLAG LIKE '%$$BACKUP_FLAG$$%'\n\t\t\t\tOR '$$BACKUP_FLAG$$' \= 'ALL'\t\t\t\n\t\t\t\t)\n\t\t\tAND (RESET_FLAG LIKE '%$$RESET_FLAG$$%'\n\t\t\t\tOR '$$RESET_FLAG$$' \= 'ALL'\t\t\t\n\t\t\t\t)\n\t\t\tAND (DEL_FLAG LIKE '%$$DEL_FLAG$$%'\n\t\t\t\tOR '$$DEL_FLAG$$' \= 'ALL'\t\t\t\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_TABLEDEAL_LIST\n\t\t\t) AS RowNum\n\t\t,PK_TABLEDEAL_LIST\n\t\t,WORK_DBNAME\n\t\t,TB_NAME\n\t\t,TB_DESC\n\t\t,BACKUP_FLAG\n\t\t,BACKUP_ORDER\n\t\t,DATA_KEEP_MONTH\n\t\t,RESET_FLAG\n\t\t,RESET_COMMAND\n\t\t,RESET_ORDER\n\t\t,DEL_FLAG\n\tFROM JH_TABLEDEAL_LIST2\n\tWHERE (\n\t\t\t\tWORK_DBNAME LIKE '%$$WORK_DBNAME$$%'\n\t\t\t\tOR '$$WORK_DBNAME$$' \= 'ALL'\n\t\t\t  )\n\t\t\tAND (\n\t\t\t\tTB_NAME LIKE '%$$TB_NAME$$%'\n\t\t\t\tOR '$$TB_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tTB_DESC LIKE '%$$TB_DESC$$%'\n\t\t\t\tOR '$$TB_DESC$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (BACKUP_FLAG LIKE '%$$BACKUP_FLAG$$%'\n\t\t\t\tOR '$$BACKUP_FLAG$$' \= 'ALL'\t\t\t\n\t\t\t\t)\n\t\t\tAND (RESET_FLAG LIKE '%$$RESET_FLAG$$%'\n\t\t\t\tOR '$$RESET_FLAG$$' \= 'ALL'\t\t\t\n\t\t\t\t)\n\t\t\tAND (DEL_FLAG LIKE '%$$DEL_FLAG$$%'\n\t\t\t\tOR '$$DEL_FLAG$$' \= 'ALL'\t\t\t\n\t\t\t\t)\n\t\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
API_Fn02C001_DS3=SELECT \n\t\tS0001\n\t\t,S0002\n\t\t,S0003\n\t\t,S0004\n\t\t,S0005\n\t\t,S0006\n\t\t,S0007\n\t\t,S0008\n\t\t,S0009\n\t\t,S0010\n\t\t,S0090\n                ,S0091\n                ,S0094\n                ,S0096\n                ,S0097\n\tFROM  IS00PF\n\t
API_Fn02C001_DS=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM ES_CDE_ACCOUNT CDE\n\t\tLEFT JOIN (\n\t\t\tSELECT M.CODE_TYPE_DESC\n\t\t\t\t,D.CODE_TYPE\n\t\t\t\t,D.CODE_VALUE\n\t\t\t\t,D.CODE_VALUE_DESC\n\t\t\tFROM ES_REF_CODE_MASTER AS M\n\t\t\tLEFT JOIN ES_REF_CODE_DETAIL AS D ON M.CODE_TYPE \= D.CODE_TYPE\n\t\t\tWHERE M.CODE_TYPE \= 'CHK_TYPE'\n\t\t\t) AS G ON CDE.CHK_TYPE \= G.CODE_VALUE\n\t\tWHERE (\n\t\t\t\tACC_SUB_CDE LIKE '%$$ACC_SUB_CDE$$%'\n\t\t\t\tOR '$$ACC_SUB_CDE$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tCHK_TYPE \= '$$CHK_TYPE$$'\n\t\t\t\tOR '$$CHK_TYPE$$' \= 'ALL'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ACC_SUB_CDE\n\t\t\t) AS RowNum\n\t\t,PK_CDE_ACCOUNT\n\t\t,ACC_SUB_CDE\n\t\t,ACC_SUB_DESC\n\t\t,CHK_TYPE\n\t\t,G.CODE_VALUE + '_' + CODE_VALUE_DESC AS CHK_TYPE_DESC\n\t\t,PC_CDE\n\t\t,ACCOUNT_GROUP\n\t\t,ACC_LEVEL\n\t\t,UPD_DATETIME\n\t\t,DEL_USER_COMPANY_ID\n\t\t,LAST_MOD_DT\n\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t,DEL_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,ADD_USER_ID\n\t\t,DATA_STATUS\n\t\t,DEL_USER_ID\n\t\t,COMPANY_ID\n\t\t,ADD_DT\n\tFROM ES_CDE_ACCOUNT CDE\n\tLEFT JOIN (\n\t\tSELECT M.CODE_TYPE_DESC\n\t\t\t,D.CODE_TYPE\n\t\t\t,D.CODE_VALUE\n\t\t\t,D.CODE_VALUE_DESC\n\t\tFROM ES_REF_CODE_MASTER AS M\n\t\tLEFT JOIN ES_REF_CODE_DETAIL AS D ON M.CODE_TYPE \= D.CODE_TYPE\n\t\tWHERE M.CODE_TYPE \= 'CHK_TYPE'\n\t\t) AS G ON CDE.CHK_TYPE \= G.CODE_VALUE\n\tWHERE (\n\t\t\tACC_SUB_CDE LIKE '%$$ACC_SUB_CDE$$%'\n\t\t\tOR '$$ACC_SUB_CDE$$' \= 'ALL'\n\t\t\t)\n\t\tAND (\n\t\t\tCHK_TYPE \= '$$CHK_TYPE$$'\n\t\t\tOR '$$CHK_TYPE$$' \= 'ALL'\n\t\t\t)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)
API_Fn02C004_CD_CB1=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM ES_REF_CODE_MASTER\n\t\tWHERE CODE_TYPE IN (\n\t\t\t\t'WHITE_LIST_RT'\n\t\t\t\t,'WHITE_LIST_RT4'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY CODE_TYPE\n\t\t\t) AS RowNum\n\t\t,CODE_TYPE\n\t\t,CODE_TYPE_DESC\n\tFROM ES_REF_CODE_MASTER\n\tWHERE CODE_TYPE IN (\n\t\t\t'WHITE_LIST_RT'\n\t\t\t,'WHITE_LIST_RT4'\n\t\t\t)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)\n
API_Fn02C004_DS=SELECT RowNum\n\t,SEQ\n\t,APPLY_NUMERIC_01\n\t,CODE_TYPE\n\t,CODE_TYPE_DESC\n\t,PK_REF_CODE_DETAIL\n\t,CODE_VALUE\n\t,CODE_VALUE_DESC\n\t,APPLY_VARCHAR_01\n\t,APPLY_INT_01\n\t,APPLY_VARCHAR_02\n\t,APPLY_NUMERIC_02\n\t,APPLY_INT_02\n\t,APPLY_VARCHAR_03\n\t,APPLY_NUMERIC_03\n\t,APPLY_INT_03\n\t,totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY B.CODE_VALUE\n\t\t\t) AS RowNum\n\t\t,ROW_NUMBER() OVER (\n\t\t\tPARTITION BY B.CODE_TYPE ORDER BY B.CODE_VALUE\n\t\t\t) AS 'SEQ'\n\t\t,A.CODE_TYPE\n\t\t,A.CODE_TYPE_DESC\n\t\t,B.PK_REF_CODE_DETAIL\n\t\t,B.CODE_VALUE\n\t\t,--介面欄位名稱：代碼值           varchar(100)\n\t\tB.CODE_VALUE_DESC\n\t\t,--介面欄位名稱：代碼說明         varchar(200)\n\t\tB.APPLY_VARCHAR_01\n\t\t,--介面欄位名稱：備用字串欄位01   varchar(100)\n\t\tB.APPLY_INT_01\n\t\t,--介面欄位名稱：備用整數欄位01   numeric(18,6)\n\t\tB.APPLY_NUMERIC_01\n\t\t,--介面欄位名稱：備用數值欄位01   int\n\t\tAPPLY_VARCHAR_02\n\t\t,APPLY_NUMERIC_02\n\t\t,APPLY_INT_02\n\t\t,APPLY_VARCHAR_03\n\t\t,APPLY_NUMERIC_03\n\t\t,APPLY_INT_03\n\t\t,(\n\t\t\tSELECT COUNT(*)\n\t\t\tFROM ES_REF_CODE_MASTER A\n\t\t\tLEFT JOIN ES_REF_CODE_DETAIL B ON A.CODE_TYPE \= B.CODE_TYPE\n\t\t\tWHERE A.CODE_TYPE \= '$$CODE_TYPE_DESC$$'\n\t\t\t) AS totalProperty\n\tFROM ES_REF_CODE_MASTER A\n\tLEFT JOIN ES_REF_CODE_DETAIL B ON A.CODE_TYPE \= B.CODE_TYPE\n\tWHERE A.CODE_TYPE \= '$$CODE_TYPE_DESC$$'\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= $$start$$ + $$limit$$\nORDER BY CODE_VALUE\n
API_Fn02C005_CD_ITEM_CLASSIFY=SELECT 0 AS RowNum\n\t,'ALL' AS ITEM_CLASSIFY\n\nUNION ALL\n\nSELECT ROW_NUMBER() OVER (\n\t\tORDER BY ITEM_CLASSIFY\n\t\t) AS RowNum\n\t,ITEM_CLASSIFY\t\t/* 帶入DS變數'$$ITEM_CLASSIFY$$' */\nFROM ES_ETLDATA_INFORMATION\nGROUP BY ITEM_CLASSIFY\nORDER BY ITEM_CLASSIFY
API_Fn02C005_DS=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM ES_ETLDATA_INFORMATION WITH (NOLOCK)\n\t\tWHERE (\n\t\t\t\tITEM_CLASSIFY \= '$$ITEM_CLASSIFY$$'\n\t\t\t\tOR '$$ITEM_CLASSIFY$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tETL_TMP_API LIKE '%$$API_NAME$$%'\n\t\t\t\tOR '$$API_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tETL_STG_API LIKE '%$$API_NAME$$%'\n\t\t\t\tOR '$$API_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tOTHER_API LIKE '%$$API_NAME$$%'\n\t\t\t\tOR '$$API_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ITEM_CLASSIFY\n\t\t\t) AS 'RowNum'\n\t\t,PK_ETLDATA_INFO \t\t  /*                                      int\t\t\t*/\n\t\t,ITEM_CLASSIFY \t\t\t  /* 介面欄位名稱：分類                   nvarchar(50)  */\n\t\t,ITEM_DESC \t\t\t  \t  /* 介面欄位名稱：資料內容               nvarchar(50)  */\n\t\t,PROVIDE_FREQUENCY \t\t  /* 介面欄位名稱：收檔頻率               nvarchar(50)  */\n\t\t,PROVIDE_TYPE \t\t\t  /* 介面欄位名稱：提供方式               nvarchar(50)  */\n\t\t,PROVIDE_SYSTEM \t\t  /* 介面欄位名稱：來源系統               nvarchar(50)  */\n\t\t,STORAGE_TYPE \t\t\t  /* 介面欄位名稱：資料區間               nvarchar(50)  */\n\t\t,ETL_TMP_API              /* 介面欄位名稱：TMP層_API名稱          nvarchar(100) */\n\t\t,ETL_TMP_API_CtmJobID_RT  /* 介面欄位名稱：TMP層_CTM工作名稱(T)   nvarchar(50)  */\n\t\t,ETL_TMP_API_CtmJobID_RT4 /* 介面欄位名稱：TMP層_CTM工作名稱(T4)  nvarchar(50)  */\n\t\t,ETL_TMP_TABLE \t\t\t  /* 介面欄位名稱：TMP層_目標資料表       nvarchar(50)  */\n\t\t,ETL_STG_API \t\t\t  /* 介面欄位名稱：STG層_API名稱          nvarchar(100) */\n\t\t,ETL_STG_API_CtmJobID_RT  /* 介面欄位名稱：STG層_CTM工作名稱(T)   nvarchar(50)  */\n\t\t,ETL_STG_API_CtmJobID_RT4 /* 介面欄位名稱：STG層_CTM工作名稱(T4)  nvarchar(50)  */\n\t\t,ETL_STG_TABLE \t\t\t  /* 介面欄位名稱：STG層_目標資料表       nvarchar(50)  */\n\t\t,OTHER_API \t\t\t\t  /* 介面欄位名稱：OTHER_API名稱          nvarchar(100) */\n\t\t,OTHER_API_CtmJobID_RT \t  /* 介面欄位名稱：OTHER_CTM工作名稱(T)   nvarchar(50)  */\n\t\t,OTHER_API_CtmJobID_RT4   /* 介面欄位名稱：OTHER_CTM工作名稱(T4)  nvarchar(50)  */\n\t\t,WHERE_CMD_TMP\n\t\t,WHERE_CMD_STG\n\tFROM ES_ETLDATA_INFORMATION\n\tWHERE (\n\t\t\tITEM_CLASSIFY \= '$$ITEM_CLASSIFY$$'\n\t\t\tOR '$$ITEM_CLASSIFY$$' \= 'ALL'\n\t\t\t)\n\t\tAND (\n\t\t\t(\n\t\t\t\tETL_TMP_API LIKE '%$$API_NAME$$%'\n\t\t\t\tOR '$$API_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tOR (\n\t\t\t\tETL_STG_API LIKE '%$$API_NAME$$%'\n\t\t\t\tOR '$$API_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tOR (\n\t\t\t\tOTHER_API LIKE '%$$API_NAME$$%'\n\t\t\t\tOR '$$API_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\t)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)
API_Fn02C005_DS_ETL_STG_API=/* 以JH_WS02_FLOW_SCHEDULE_LIST為主，找出ES_ETLDATA_INFORMATION缺漏者 */\nIF EXISTS (\n\t\tSELECT DISTINCT b.CALL_CODE_ID AS 'STG_API'\n\t\tFROM JH_WS02_FLOW_LIST a\n\t\tINNER JOIN JH_WS02_FLOW_SCHEDULE_LIST b ON a.PK \= b.FLOW_ID_PK\n\t\tLEFT JOIN ES_ETLDATA_INFORMATION c ON b.CALL_CODE_ID \= c.ETL_STG_API\n\t\tWHERE a.FLOW_ID IN (\n\t\t\t\t'ESUN_FLOW_RT'\n\t\t\t\t,'ESUN_FLOW_RT4'\n\t\t\t\t)\n\t\t\tAND LEFT(b.CALL_CODE_ID, 7) \= 'EXEC_SP'\n\t\t\tAND c.ETL_STG_API IS NULL\n\t\t)\nBEGIN\n\tSELECT DISTINCT b.CALL_CODE_ID AS 'STG_API'\n\tFROM JH_WS02_FLOW_LIST a\n\tINNER JOIN JH_WS02_FLOW_SCHEDULE_LIST b ON a.PK \= b.FLOW_ID_PK\n\tLEFT JOIN ES_ETLDATA_INFORMATION c ON b.CALL_CODE_ID \= c.ETL_STG_API\n\tWHERE a.FLOW_ID IN (\n\t\t\t'ESUN_FLOW_RT'\n\t\t\t,'ESUN_FLOW_RT4'\n\t\t\t)\n\t\tAND LEFT(b.CALL_CODE_ID, 7) \= 'EXEC_SP'\n\t\tAND c.ETL_STG_API IS NULL\nEND\nELSE\nBEGIN\n\tSELECT '無缺漏項目' AS 'STG_API'\nEND\n
API_Fn02C005_DS_ETL_STG_TABLE=/* 檢核使用者輸入的table名稱，必須存在DB */\nBEGIN\n\n    DECLARE  @RETURN_CODE      INT\n\t\t    ,@RETURN_MSG       VARCHAR(1000)\n\n    IF NOT EXISTS (\n\t\t    SELECT *\n\t\t    FROM sys.tables\n\t\t   WHERE NAME \='$$ETL_STG_TABLE$$' /* 'ES_STG_CPTAM' */\n/*WHERE NAME \='$$ES_STG_TABLE$$' /* 'ES_STG_CPTAM' */*/\n\t\t    )\n        BEGIN\n            SELECT  @RETURN_CODE \= -1\n                   ,@RETURN_MSG  \='您輸入的STG資料表不存在，請修改。'\n        END\n    ELSE\n        BEGIN\n            SELECT  @RETURN_CODE \= 0            \n        END\n\n    IF (@RETURN_CODE <> 0)\n\tBEGIN\n\t\tRAISERROR (\n\t\t\t\t@RETURN_MSG\n\t\t\t\t,16\n\t\t\t\t,1\n\t\t\t\t)\n\tEND\nEND
API_Fn02C005_DS_ETL_TMP_API=/* 以JH_WS02_FLOW_SCHEDULE_LIST為主，找出ES_ETLDATA_INFORMATION缺漏者 */\nIF EXISTS (\n\t\tSELECT DISTINCT b.CALL_CODE_ID AS 'TMP_API'\n\t\tFROM JH_WS02_FLOW_LIST a\n\t\tINNER JOIN JH_WS02_FLOW_SCHEDULE_LIST b ON a.PK \= b.FLOW_ID_PK\n\t\tLEFT JOIN ES_ETLDATA_INFORMATION c ON b.CALL_CODE_ID \= c.ETL_TMP_API\n\t\tWHERE a.FLOW_ID IN (\n\t\t\t\t'ESUN_FLOW_RT'\n\t\t\t\t,'ESUN_FLOW_RT4'\n\t\t\t\t)\n\t\t\tAND LEFT(b.CALL_CODE_ID, 6) IN (\n\t\t\t\t'DW_TB_'\n\t\t\t\t,'AUTORN'\n\t\t\t\t)\n\t\t\tAND c.ETL_TMP_API IS NULL\n\t\t)\nBEGIN\n\tSELECT DISTINCT b.CALL_CODE_ID AS 'TMP_API'\n\tFROM JH_WS02_FLOW_LIST a\n\tINNER JOIN JH_WS02_FLOW_SCHEDULE_LIST b ON a.PK \= b.FLOW_ID_PK\n\tLEFT JOIN ES_ETLDATA_INFORMATION c ON b.CALL_CODE_ID \= c.ETL_TMP_API\n\tWHERE a.FLOW_ID IN (\n\t\t\t'ESUN_FLOW_RT'\n\t\t\t,'ESUN_FLOW_RT4'\n\t\t\t)\n\t\tAND LEFT(b.CALL_CODE_ID, 6) IN (\n\t\t\t'DW_TB_'\n\t\t\t,'AUTORN'\n\t\t\t)\n\t\tAND c.ETL_TMP_API IS NULL\nEND\nELSE\nBEGIN\n\tSELECT '無缺漏項目' AS 'TMP_API'\nEND
API_Fn02C005_DS_ETL_TMP_TABLE=BEGIN\n\tDECLARE @RETURN_CODE INT\n\t\t,@RETURN_MSG VARCHAR(1000)\n\n\tIF NOT EXISTS (\n\t\t\tSELECT *\n\t\t\tFROM sys.tables\n\t\t\tWHERE NAME \= '$$ETL_TMP_TABLE$$' -- '$$ETL_TMP_TABLE$$' /* 'TB_TMP_CPTAM' */\n\t\t\t)\n\tBEGIN\n\t\tSELECT @RETURN_CODE \= - 1\n\t\t\t,@RETURN_MSG \= '您輸入的TMP資料表不存在，請修改。'\n\tEND\n\tELSE\n\tBEGIN\n\t\tSELECT @RETURN_CODE \= 0\n\tEND\n\n\tIF (@RETURN_CODE <> 0)\n\tBEGIN\n\t\tRAISERROR (\n\t\t\t\t@RETURN_MSG\n\t\t\t\t,16\n\t\t\t\t,1\n\t\t\t\t)\n\tEND\nEND\n
API_Fn02C005_DS_ITEM_CLASSIFY=SELECT ITEM_CLASSIFY\nFROM ES_ETLDATA_INFORMATION\nGROUP BY ITEM_CLASSIFY\nORDER BY ITEM_CLASSIFY
API_Fn02C005_DS_OTHER_API=IF EXISTS (\n\t\tSELECT DISTINCT b.CALL_CODE_ID AS 'OTHER_API'\n\t\tFROM JH_WS02_FLOW_LIST a\n\t\tINNER JOIN JH_WS02_FLOW_SCHEDULE_LIST b ON a.PK \= b.FLOW_ID_PK\n\t\tLEFT JOIN ES_ETLDATA_INFORMATION c ON b.CALL_CODE_ID \= c.OTHER_API\n\t\tWHERE a.FLOW_ID IN (\n\t\t\t\t'ESUN_FLOW_CAL_RT'\n\t\t\t\t,'ESUN_FLOW_CAL_RT4'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tLEFT(b.CALL_CODE_ID, 7) <> 'EXEC_SP'\n\t\t\t\tOR LEFT(b.CALL_CODE_ID, 6) <> 'AUTORN'\n\t\t\t\tOR LEFT(b.CALL_CODE_ID, 6) <> 'DW_TB_'\n\t\t\t\t)\n\t\t\tAND c.OTHER_API IS NULL\n\t\t)\nBEGIN\n\tSELECT DISTINCT b.CALL_CODE_ID AS 'OTHER_API'\n\tFROM JH_WS02_FLOW_LIST a\n\tINNER JOIN JH_WS02_FLOW_SCHEDULE_LIST b ON a.PK \= b.FLOW_ID_PK\n\tLEFT JOIN ES_ETLDATA_INFORMATION c ON b.CALL_CODE_ID \= c.OTHER_API\n\tWHERE a.FLOW_ID IN (\n\t\t\t'ESUN_FLOW_CAL_RT'\n\t\t\t,'ESUN_FLOW_CAL_RT4'\n\t\t\t)\n\t\tAND (\n\t\t\tLEFT(b.CALL_CODE_ID, 7) <> 'EXEC_SP'\n\t\t\tOR LEFT(b.CALL_CODE_ID, 6) <> 'AUTORN'\n\t\t\tOR LEFT(b.CALL_CODE_ID, 6) <> 'DW_TB_'\n\t\t\t)\n\t\tAND c.OTHER_API IS NULL \nEND\nELSE\nBEGIN\n\tSELECT '無缺漏項目' AS 'OTHER_API'\nEND
API_Fn02C005_DS_PROVIDE_FREQUENCY=SELECT DISTINCT PROVIDE_FREQUENCY   \nFROM ES_ETLDATA_INFORMATION \nWHERE (PROVIDE_FREQUENCY <> '-')\n       OR (ISNULL(PROVIDE_FREQUENCY,'')\='')
API_Fn02C005_DS_PROVIDE_TYPE=SELECT DISTINCT PROVIDE_TYPE\nFROM ES_ETLDATA_INFORMATION\nWHERE (PROVIDE_TYPE <> '-')\n\tOR (ISNULL(PROVIDE_TYPE, '') \= '')
API_Fn02C005_DS_STORAGE_TYPE=SELECT DISTINCT STORAGE_TYPE\nFROM ES_ETLDATA_INFORMATION\nWHERE (STORAGE_TYPE <> '-')\n\tOR (ISNULL(STORAGE_TYPE, '') \= '')
API_Fn02C006_CD_CB1=SELECT DISTINCT S0004\nFROM IS00PF\nORDER BY S0004 DESC
API_Fn02C006_D1_WIN=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM ES_REF_CODE_MASTER AS M\n\t\tLEFT JOIN ES_REF_CODE_DETAIL AS D ON M.CODE_TYPE \= D.CODE_TYPE\n\t\tWHERE M.CODE_TYPE \= 'CHK_TYPE'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY CODE_VALUE\n\t\t\t) AS RowNum\n\t\t,M.CODE_TYPE_DESC AS CODE_TYPE_DESC\n\t\t,D.CODE_TYPE AS CODE_TYPE\n\t\t,D.CODE_VALUE AS CODE_VALUE\n\t\t,D.CODE_VALUE + '_' + D.CODE_VALUE_DESC AS CODE_VALUE_DESC\n\tFROM ES_REF_CODE_MASTER AS M\n\tLEFT JOIN ES_REF_CODE_DETAIL AS D ON M.CODE_TYPE \= D.CODE_TYPE\n\tWHERE M.CODE_TYPE \= 'CHK_TYPE'\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)
API_Fn02C006_DS=SELECT \n    S0001,\n    S0002,\n    S0003,\n    S0004,\n    S0005,\n    S0006,\n    S0007,\n    S0008,\n    S0009,\n    S0010,\n    S0090,\n    S0091,\n    S0094,\n    S0096,\n    S0097\nFROM IS00PF\nWHERE  ( S0004 \= $$S0004$$ OR $$S0004$$ \= 0 )\n ORDER BY S0003 DESC
API_FN03A003_UPLOAD=SELECT *,\n\n  (SELECT COUNT(*)\n   FROM\n     (SELECT PK,\n             CODE_ID,\n             CODE_HELP\n      FROM JH_WS02_CODE_LIST\n      WHERE CODE_ID LIKE '%MANUAL_UPLOAD%') A\n   LEFT JOIN\n     (SELECT CODE_ID_PK,\n             INPUT_DEFAULT_VAL AS 'FunctionID'\n      FROM JH_WS02_CODE_RANGE_ANALYSIS\n      WHERE INPUT_FIELD \= 'FunctionID') A2 ON A.PK \= A2.CODE_ID_PK\n   WHERE A2.FunctionID \= '$$FunctionID$$') AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY A.CODE_HELP) AS RowNum,\n                            A.PK,\n                            A.CODE_ID,\n                            A.CODE_HELP,\n                            A2.FunctionID,\n                            B.ProcPK,\n                            C.ProcTarget,\n                            CASE C.ProcTarget\n                                WHEN '0' THEN '成功'\n                                WHEN '-1' THEN '失敗'\n                            END AS RESULT,\n                            C.ProcStartDt,\n                            C.SubmitValue,\n                            C.SubReturnMsg\n   FROM\n     (SELECT PK,\n             CODE_ID,\n             CODE_HELP\n      FROM JH_WS02_CODE_LIST\n      WHERE CODE_ID LIKE '%MANUAL_UPLOAD%') A\n   LEFT JOIN\n     (SELECT CODE_ID_PK,\n             INPUT_DEFAULT_VAL AS 'FunctionID'\n      FROM JH_WS02_CODE_RANGE_ANALYSIS\n      WHERE INPUT_FIELD \= 'FunctionID') A2 ON A.PK \= A2.CODE_ID_PK\n   LEFT JOIN\n     (SELECT FuncID,\n             MAX(ProcPK) AS ProcPK\n      FROM PROCESS_LOG\n      GROUP BY FuncID) B ON A.CODE_ID \= B.FuncID\n   LEFT JOIN\n     (SELECT ProcPK,\n             ProcTarget,\n             CONVERT(VARCHAR, ProcStartDt, 120) AS 'ProcStartDt',\n             SubmitValue,\n             SubReturnMsg\n      FROM PROCESS_LOG) C ON B.ProcPK \= C.ProcPK\n   WHERE A2.FunctionID \= '$$FunctionID$$') AS new1
API_FN03A003_UPLOAD_LOG=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM PROCESS_LOG\n\t\tWHERE FuncID \= '$$CODE_ID$$'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ProcPK DESC\n\t\t\t) AS RowNum\n\t\t,ProcPK\n\t\t,ADD_USER_ID\n\t\t,CONVERT(VARCHAR, ProcStartDt, 120) AS 'ProcStartDt'\n\t\t,CASE \n\t\t\tWHEN SubReturnCode <> '0'\n\t\t\t\tTHEN '失敗'\n\t\t\tELSE '成功'\n\t\t\tEND AS RESULT\n\t\t,SubReturnMsg\n\tFROM PROCESS_LOG\n\tWHERE FuncID \= '$$CODE_ID$$'\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_Fn03A005_CD_CB1=SELECT *,\n   (20) AS totalProperty\nFROM\n   (SELECT \n\t  ROW_NUMBER() over (order by FLOW_ID) AS RowNum,\n\t  FLOW_ID AS 'CLASSIFY',\n\t  FLOW_HELP AS 'PROPERTY_TYPE_DESC'\n\tFROM JH_WS02_FLOW_LIST\n\tWHERE left(FLOW_ID, 3 ) \= 'FI_'\n\t) a\nORDER BY PROPERTY_TYPE_DESC ASC
API_FN03A005_CD_CB1=SELECT *,\n\n  (SELECT COUNT(*)\n   FROM JH_WS02_FLOW_LIST\n   WHERE FLOW_ID LIKE 'FLOW_%') AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY FLOW_ID) AS RowNum,\n                            FLOW_ID AS 'CLASSIFY',\n                            API_DESC AS 'PROPERTY_TYPE_DESC'\n   FROM JH_WS02_FLOW_LIST\n   WHERE FLOW_ID LIKE '%FLOW%') AS new1\n/*\n   WHERE FLOW_ID LIKE 'FLOW_%') AS new1*/
API_FN03A005_CD_CB2=/**************************************************************************\n設定變數值\n(1)@PK_SYS取開帳期別者，如關帳則取最大PK_SYS\n(2)@DATA_YMD 儲存於B_SYS_CONFIG的DATA_YMD僅到YYYYMM，加上'01'使格式為YYYYMMDD，\n以便依據@DATA_YMD計算出一年內期別。\n**************************************************************************/\n\nDECLARE @PK_SYS   INT\nDECLARE @DATA_YMD VARCHAR(8)\nDECLARE @FLOW_ID  VARCHAR(100) \nDECLARE @ACC_TYPE VARCHAR(2)--値域：T4 ,T ,T/T4\n\nSET @FLOW_ID\= '$$CLASSIFY$$'\n\nSET @PK_SYS\n\= CASE \n    WHEN EXISTS (SELECT * FROM B_SYS_CONFIG WHERE PK_SYS \= DBO.FN_get_pk_sys_from_sys_config())\n         THEN DBO.FN_get_pk_sys_from_sys_config()\n    ELSE (SELECT MAX(PK_SYS) FROM B_SYS_CONFIG)\n  END\n  \nSET @DATA_YMD \n\= (SELECT DATA_YMD + '01' FROM B_SYS_CONFIG WHERE PK_SYS \= @PK_SYS )\n\nSET @ACC_TYPE\n\= (SELECT    /*a.CODE_TYPE,CODE_TYPE_DESC,MODIFY_FLAG,CODE_VALUE AS 'FLOW_ID',*/\n   APPLY_VARCHAR_01 AS 'ACC_TYPE'\n   FROM ES_REF_CODE_MASTER a\n   INNER JOIN ES_REF_CODE_DETAIL b\n   ON a.CODE_TYPE \= b.CODE_TYPE\n   WHERE a.CODE_TYPE \= 'FLOW_MAPPING' AND CODE_VALUE \= @FLOW_ID)\n\t\n/**************************************************************************\n判斷邏輯：ACC_TYPE \= T,T4 的FLOW 需要顯示 T,T4 對應的期別，其餘顯示所有期別\n**************************************************************************/\nIF @ACC_TYPE IN ('T','T4')\n  BEGIN\n    SELECT *,(SELECT COUNT(*) FROM B_SYS_CONFIG \n              WHERE CONVERT(DATE, DATA_YMD + '01', 112) >\= DATEADD(MM, - 12, CONVERT(DATE, @DATA_YMD, 112))\n              AND OPEN_ACC_TYPE  \= @ACC_TYPE\n              ) AS totalProperty\n    FROM \n    ( SELECT ROW_NUMBER() OVER (ORDER BY PK_SYS DESC) AS RowNum\n      ,CAL_ALIAS\n      ,DATA_YMD\n      ,PK_SYS\n      FROM B_SYS_CONFIG\n      WHERE CONVERT(DATE, DATA_YMD + '01', 112) >\= DATEADD(MM, - 12, CONVERT(DATE, @DATA_YMD, 112))--僅取一年內期別\n      AND OPEN_ACC_TYPE  \= @ACC_TYPE \n    ) AS new1\n  END\nELSE\n  BEGIN\n    SELECT *,(SELECT COUNT(*) FROM B_SYS_CONFIG\n              WHERE CONVERT(DATE, DATA_YMD + '01', 112) >\= DATEADD(MM, - 12, CONVERT(DATE, @DATA_YMD, 112))\n             ) AS totalProperty\n    FROM \n    ( SELECT ROW_NUMBER() OVER (ORDER BY PK_SYS DESC) AS RowNum\n      ,CAL_ALIAS\n      ,DATA_YMD\n      ,PK_SYS\n      FROM B_SYS_CONFIG\n      WHERE CONVERT(DATE, DATA_YMD + '01', 112) >\= DATEADD(MM, - 12, CONVERT(DATE, @DATA_YMD, 112))--僅取一年內期別\n    ) AS new1\nEND
API_Fn03A005_CD_CB2=SELECT ROW_NUMBER() OVER (ORDER BY PK_SYS DESC) AS RowNum\n      ,CAL_ALIAS\n      ,DATA_YMD\n      ,PK_SYS\n      ,(1) AS totalProperty\n      FROM B_SYS_CONFIG\n      WHERE OPEN_STATUS \= 'A' and NOW_FLAG \= 'Y'
API_Fn03A005_DS=DECLARE @OPEN_ACC_TYPE VARCHAR(2)\n\nSET @OPEN_ACC_TYPE \= (\n\t\tSELECT OPEN_ACC_TYPE\n\t\tFROM B_SYS_CONFIG\n\t\tWHERE CAL_ALIAS \= '$$CAL_ALIAS$$'\n\t\t)\n\nSELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM JH_WS02_FLOW_LIST FM\n\t\tLEFT JOIN JH_WS02_FLOW_SCHEDULE_LIST FD ON FM.PK \= FD.FLOW_ID_PK\n\t\tLEFT JOIN JH_WS02_CODE_LIST CM ON FD.CALL_CODE_ID \= CM.CODE_ID\n\t\tLEFT JOIN (\n\t\t\tSELECT CODE_ID_PK\n\t\t\t\t,INPUT_DEFAULT_VAL AS 'PARAM_FILE_NAME'\n\t\t\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\t\t\tWHERE INPUT_FIELD \= 'PARAM_FILE_NAME'\n\t\t\t) F ON F.CODE_ID_PK \= CM.PK\n\t\tLEFT JOIN (\n\t\t\tSELECT CODE_ID_PK\n\t\t\t\t,INPUT_DEFAULT_VAL AS 'PARAM_MUST_DATE'\n\t\t\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\t\t\tWHERE INPUT_FIELD \= 'PARAM_MUST_DATE'\n\t\t\t) M ON M.CODE_ID_PK \= CM.PK\n\t\tLEFT JOIN (\n\t\t\tSELECT CODE_ID_PK\n\t\t\t\t,INPUT_DEFAULT_VAL AS 'PARAM_USE_MUST_DATE'\n\t\t\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\t\t\tWHERE INPUT_FIELD \= 'PARAM_USE_MUST_DATE'\n\t\t\t) U ON U.CODE_ID_PK \= CM.PK\n\t\tLEFT JOIN (\n\t\t\tSELECT CODE_ID_PK\n\t\t\t\t,INPUT_DEFAULT_VAL AS 'PARAM_FILE_EXTENSION'\n\t\t\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\t\t\tWHERE INPUT_FIELD \= 'PARAM_FILE_EXTENSION'\n\t\t\t) E ON E.CODE_ID_PK \= CM.PK\n\t\tLEFT JOIN (\n\t\t\tSELECT ETL_TMP_API AS 'API_NAME'\n\t\t\t\t,ETL_TMP_TABLE AS 'TARGET_TABLE'\n\t\t\t\t,ETL_TMP_API_CtmJobID_RT AS 'CTM_JobID_RT'\n\t\t\t\t,ETL_TMP_API_CtmJobID_RT4 AS 'CTM_JobID_RT4'\n\t\t\tFROM ES_ETLDATA_INFORMATION\n\t\t\tGROUP BY ETL_TMP_API\n\t\t\t\t,ETL_TMP_TABLE\n\t\t\t\t,ETL_TMP_API_CtmJobID_RT\n\t\t\t\t,ETL_TMP_API_CtmJobID_RT4\n\t\t\t\n\t\t\tUNION ALL\n\t\t\t\n\t\t\tSELECT ETL_STG_API AS 'API_NAME'\n\t\t\t\t,ETL_STG_TABLE AS 'TARGET_TABLE'\n\t\t\t\t,ETL_STG_API_CtmJobID_RT AS 'CTM_JobID_RT'\n\t\t\t\t,ETL_STG_API_CtmJobID_RT4 AS 'CTM_JobID_RT4'\n\t\t\tFROM ES_ETLDATA_INFORMATION\n\t\t\t\n\t\t\tUNION ALL\n\t\t\t\n\t\t\tSELECT OTHER_API AS 'API_NAME'\n\t\t\t\t,'-' AS 'TARGET_TABLE'\n\t\t\t\t,OTHER_API_CtmJobID_RT AS 'CTM_JobID_RT'\n\t\t\t\t,OTHER_API_CtmJobID_RT4 AS 'CTM_JobID_RT4'\n\t\t\tFROM ES_ETLDATA_INFORMATION\n\t\t\t) INFO ON FD.CALL_CODE_ID \= INFO.API_NAME\n\t\tLEFT JOIN (\n\t\t\tSELECT CAL_ALIAS\n\t\t\t\t,API_NAME\n\t\t\t\t,MAX(PK_ID) AS 'PK_ID'\n\t\t\tFROM ES_API_LOG a\n\t\t\tLEFT JOIN B_SYS_CONFIG b ON a.PK_SYS \= b.PK_SYS\n\t\t\tWHERE CAL_ALIAS \= '$$CAL_ALIAS$$'\n\t\t\tGROUP BY CAL_ALIAS\n\t\t\t\t,API_NAME\n\t\t\t) LOGPK ON FD.CALL_CODE_ID \= LOGPK.API_NAME\n\t\tLEFT JOIN ES_API_LOG ESLOG ON LOGPK.PK_ID \= ESLOG.PK_ID\n\t\tWHERE FM.FLOW_ID \= '$$CLASSIFY$$'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY FD.CLASS_NUM\n\t\t\t) AS RowNum\n\t\t,FM.FLOW_ID\n\t\t,FD.CLASS_NUM\t\t\t\t\t\t\t\t\t\t\t\t/*介面顯示：工作順序*/\n\t\t,FD.CALL_CODE_ID\t\t\t\t\t\t\t\t\t\t\t/*介面顯示：工作代碼*/\n\t\t,CM.CODE_HELP\t\t\t\t\t\t\t\t\t\t\t\t/*介面顯示：工作項目*/\n\t\t,LOGPK.CAL_ALIAS\n\t\t,ESLOG.PK_ID\n\t\t,CONVERT(VARCHAR(100), ESLOG.STR_DT, 121) AS 'ProcStartDt'\t/*介面顯示：執行開始時間*/\n\t\t,CONVERT(VARCHAR(100), ESLOG.END_DT, 121) AS 'ProcEndDt'\t/*介面顯示：執行結束時間*/\n\t\t,CASE ESLOG.RETURN_CODE\n\t\t\tWHEN 0\n\t\t\t\tTHEN '成功'\n\t\t\tWHEN - 1\n\t\t\t\tTHEN '失敗'\n\t\t\tEND AS 'ProcTarget'\t\t\t\t\t\t\t\t\t\t/*介面顯示：執行結果*/\n\t\t,ESLOG.RETURN_MSG AS 'SubmitValue'\t\t\t\t\t\t\t/*介面顯示：執行訊息*/\n\t\t,CASE \n\t\t\tWHEN ESLOG.RETURN_CODE \= '0'\n\t\t\t\tTHEN '成功'\n\t\t\tWHEN ESLOG.RETURN_CODE IS NULL\n\t\t\t\tTHEN '尚未執行'\n\t\t\tELSE ESLOG.RETURN_MSG\n\t\t\tEND AS '執行結果'\n\t\t,CASE U.PARAM_USE_MUST_DATE\n\t\t\tWHEN 'Y'\n\t\t\t\tTHEN F.PARAM_FILE_NAME + M.PARAM_MUST_DATE + PARAM_FILE_EXTENSION\n\t\t\tWHEN 'N'\n\t\t\t\tTHEN F.PARAM_FILE_NAME\n\t\t\tELSE '-'\n\t\t\tEND AS 'FILE_NAME'\t\t\t\t\t\t\t\t\t\t/*介面顯示：檔案名稱*/\n\t\t,CASE @OPEN_ACC_TYPE\n\t\t\tWHEN 'T'\n\t\t\t\tTHEN INFO.CTM_JobID_RT\n\t\t\tWHEN 'T4'\n\t\t\t\tTHEN INFO.CTM_JobID_RT4\n\t\t\tELSE '-'\n\t\t\tEND AS 'CTM_JobID'\t\t\t\t\t\t\t\t\t\t/*介面顯示：CTM_JobID*/\n\t\t,INFO.TARGET_TABLE\t\t\t\t\t\t\t\t\t\t\t/*介面顯示：目標資料表*/\n\tFROM JH_WS02_FLOW_LIST FM\n\tLEFT JOIN JH_WS02_FLOW_SCHEDULE_LIST FD ON FM.PK \= FD.FLOW_ID_PK\n\tLEFT JOIN JH_WS02_CODE_LIST CM ON FD.CALL_CODE_ID \= CM.CODE_ID\n\t/*-----------------------------------------------------------------------------------\n \t\t以下取需要的檔案名稱\n \t\t-----------------------------------------------------------------------------------*/\n\tLEFT JOIN (\n\t\tSELECT CODE_ID_PK\n\t\t\t,INPUT_DEFAULT_VAL AS 'PARAM_FILE_NAME'\n\t\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\t\tWHERE INPUT_FIELD \= 'PARAM_FILE_NAME'\n\t\t) F ON F.CODE_ID_PK \= CM.PK\n\tLEFT JOIN (\n\t\tSELECT CODE_ID_PK\n\t\t\t,INPUT_DEFAULT_VAL AS 'PARAM_MUST_DATE'\n\t\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\t\tWHERE INPUT_FIELD \= 'PARAM_MUST_DATE'\n\t\t) M ON M.CODE_ID_PK \= CM.PK\n\tLEFT JOIN (\n\t\tSELECT CODE_ID_PK\n\t\t\t,INPUT_DEFAULT_VAL AS 'PARAM_USE_MUST_DATE'\n\t\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\t\tWHERE INPUT_FIELD \= 'PARAM_USE_MUST_DATE'\n\t\t) U ON U.CODE_ID_PK \= CM.PK\n\tLEFT JOIN (\n\t\tSELECT CODE_ID_PK\n\t\t\t,INPUT_DEFAULT_VAL AS 'PARAM_FILE_EXTENSION'\n\t\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\t\tWHERE INPUT_FIELD \= 'PARAM_FILE_EXTENSION'\n\t\t) E ON E.CODE_ID_PK \= CM.PK\n\t/*-----------------------------------------------------------------------------------\n \t\t以下取需要的CTM_JOB資訊\n \t\t-----------------------------------------------------------------------------------*/\n\tLEFT JOIN (\n\t\tSELECT ETL_TMP_API AS 'API_NAME'\n\t\t\t,ETL_TMP_TABLE AS 'TARGET_TABLE'\n\t\t\t,ETL_TMP_API_CtmJobID_RT AS 'CTM_JobID_RT'\n\t\t\t,ETL_TMP_API_CtmJobID_RT4 AS 'CTM_JobID_RT4'\n\t\tFROM ES_ETLDATA_INFORMATION\n\t\tGROUP BY ETL_TMP_API\n\t\t\t,ETL_TMP_TABLE\n\t\t\t,ETL_TMP_API_CtmJobID_RT\n\t\t\t,ETL_TMP_API_CtmJobID_RT4\t\t\t\t\t\t\t\t/*因為新核心資料源有TMP多對一STG狀況造成查詢結果虛增，故以GROUP BY 排除重複項。*/\n\t\t\n\t\tUNION ALL\n\t\t\n\t\tSELECT ETL_STG_API AS 'API_NAME'\n\t\t\t,ETL_STG_TABLE AS 'TARGET_TABLE'\n\t\t\t,ETL_STG_API_CtmJobID_RT AS 'CTM_JobID_RT'\n\t\t\t,ETL_STG_API_CtmJobID_RT4 AS 'CTM_JobID_RT4'\n\t\tFROM ES_ETLDATA_INFORMATION\n\t\t\n\t\tUNION ALL\n\t\t\n\t\tSELECT OTHER_API AS 'API_NAME'\n\t\t\t,'-' AS 'TARGET_TABLE'\n\t\t\t,OTHER_API_CtmJobID_RT AS 'CTM_JobID_RT'\n\t\t\t,OTHER_API_CtmJobID_RT4 AS 'CTM_JobID_RT4'\n\t\tFROM ES_ETLDATA_INFORMATION\n\t\t) INFO ON FD.CALL_CODE_ID \= INFO.API_NAME\n\t/*-----------------------------------------------------------------------------------\n \t\t以下取API特定期別的最新一筆LOG PK_ID\n \t\t因為ES_API_LOG有歷史各期別記錄，且同期別可能有多筆；\n \t\t故先篩選出各API在*特定期別的最新一筆LOG ID；\n \t\t*特定期別\=USER於介面選擇的「計算別名」\=變數'201911(T)' \n \t\t-----------------------------------------------------------------------------------*/\n\tLEFT JOIN (\n\t\tSELECT CAL_ALIAS\n\t\t\t,API_NAME\n\t\t\t,MAX(PK_ID) AS 'PK_ID'\n\t\tFROM ES_API_LOG a\n\t\tLEFT JOIN B_SYS_CONFIG b ON a.PK_SYS \= b.PK_SYS\n\t\tWHERE CAL_ALIAS \= '$$CAL_ALIAS$$'\n\t\tGROUP BY CAL_ALIAS\n\t\t\t,API_NAME\n\t\t) LOGPK ON FD.CALL_CODE_ID \= LOGPK.API_NAME\n\t/*-----------------------------------------------------------------------------------\n \t\t透過上段語法取得LOG ID，以下取該筆LOG明細資料\n \t\t-----------------------------------------------------------------------------------*/\n\tLEFT JOIN ES_API_LOG ESLOG ON LOGPK.PK_ID \= ESLOG.PK_ID\n\tWHERE FM.FLOW_ID \= '$$CLASSIFY$$'\n\t) new1\n
API_FN03A005_DS=SELECT *,\n(SELECT COUNT(*) FROM JH_WS02_FLOW_LIST FM \n\tLEFT JOIN JH_WS02_FLOW_SCHEDULE_LIST FD ON FM.PK \= FD.FLOW_ID_PK \n\tLEFT JOIN JH_WS02_CODE_LIST CM  ON FD.CALL_CODE_ID \= CM.CODE_ID \n\tLEFT JOIN ( SELECT MAX(ProcPK) AS 'PK_ID', CODE_ID FROM PROCESS_LOG GROUP BY CODE_ID) LOGPK \n\t\tON FD.CALL_CODE_ID \= LOGPK.CODE_ID \n    LEFT JOIN PROCESS_LOG ESLOG \n\t\tON ESLOG.ProcPK \= LOGPK.PK_ID \n\t\tWHERE FLOW_ID \= '$$CLASSIFY$$') AS totalProperty \nFROM (\n\t\tSELECT ROW_NUMBER() OVER (ORDER BY FD.CLASS_NUM) AS RowNum\n\t\t, FD.CLASS_NUM\n\t\t, FD.CALL_CODE_ID\n\t\t, CM.API_DESC AS 'CODE_HELP'\n\t\t, CONVERT(varchar(100), ESLOG.ProcStartDt, 121) AS 'ProcStartDt'\n\t\t, CONVERT(varchar(100), ESLOG.ProcEndDt, 121) AS 'ProcEndDt'\n\t\t, ESLOG.ProcTarget AS 'ProcTarget'\n\t\t, ESLOG.SubmitValue AS 'SubmitValue'\n\t\t, CASE WHEN ESLOG.ProcTarget \= '0' THEN '成功'\n\t\t\t\tWHEN ESLOG.ProcTarget IS NULL THEN '尚未執行'\n\t\t\t\tELSE ESLOG.SubmitValue END AS '執行結果' \n\t\tFROM JH_WS02_FLOW_LIST FM \n\t\tLEFT JOIN JH_WS02_FLOW_SCHEDULE_LIST FD ON FM.PK \= FD.FLOW_ID_PK \n\t\tLEFT JOIN JH_WS02_CODE_LIST CM ON FD.CALL_CODE_ID \= CM.CODE_ID \n\t\tLEFT JOIN ( SELECT MAX(ProcPK) AS 'PK_ID', CODE_ID FROM PROCESS_LOG GROUP BY CODE_ID\n                  ) LOGPK  ON FD.CALL_CODE_ID \= LOGPK.CODE_ID\n\t\tLEFT JOIN PROCESS_LOG ESLOG \n               ON ESLOG.ProcPK \= LOGPK.PK_ID \n\t\tWHERE FLOW_ID \= '$$CLASSIFY$$'\n) AS new1
API_FN03A005_FILE_IMPORT=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM JH_WS02_FLOW_LIST FM\n\t\tLEFT JOIN JH_WS02_FLOW_SCHEDULE_LIST FD ON FM.PK \= FD.FLOW_ID_PK\n\t\tLEFT JOIN JH_WS02_CODE_LIST CM ON FD.CALL_CODE_ID \= CM.CODE_ID\n\t\tLEFT JOIN (\n\t\t\tSELECT MAX(ProcPK) AS 'ProcPK'\n\t\t\t\t,FuncID\n\t\t\tFROM PROCESS_LOG\n\t\t\tGROUP BY FuncID\n\t\t\t) PLPK ON FD.CALL_CODE_ID \= PLPK.FuncID\n\t\tLEFT JOIN PROCESS_LOG PL ON PLPK.ProcPK \= PL.ProcPK\n\t\tLEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS CR ON CM.PK \= CR.CODE_ID_PK\n\t\tLEFT JOIN (\n\t\t\tSELECT S.NAME AS 'OWN_NAME'\n\t\t\t\t,O.NAME AS 'TABLE_NAME'\n\t\t\t\t,P.ROWS AS 'COUNT'\n\t\t\tFROM SYS.OBJECTS O\n\t\t\tINNER JOIN SYS.SCHEMAS S ON O.SCHEMA_ID \= S.SCHEMA_ID\n\t\t\tINNER JOIN SYS.PARTITIONS P ON O.OBJECT_ID \= P.OBJECT_ID\n\t\t\tWHERE (O.TYPE \= 'U')\n\t\t\t\tAND (\n\t\t\t\t\tP.INDEX_ID IN (\n\t\t\t\t\t\t0\n\t\t\t\t\t\t,1\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t) MM ON MM.TABLE_NAME \= CR.INPUT_DEFAULT_VAL\n\t\tLEFT JOIN (\n\t\t\tSELECT DISTINCT CONVERT(VARCHAR(100), TURNDATE, 111) AS 'ADD_DT'\n\t\t\tFROM INV_SRC_STKVAL\n\t\t\t) ISS ON CR.INPUT_DEFAULT_VAL \= 'INV_SRC_STKVAL'\n\t\tLEFT JOIN (\n\t\t\tSELECT DISTINCT CONVERT(VARCHAR(100), PDATETIME, 111) AS 'ADD_DT'\n\t\t\tFROM INV_SRC_RATE\n\t\t\t) ISR ON CR.INPUT_DEFAULT_VAL \= 'INV_SRC_RATE'\n\t\tWHERE FM.FLOW_ID \= 'API_FN03A005_INTDATA_FLOW'\n\t\t\tAND CR.INPUT_FIELD LIKE '%TABLE_NAME%'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY FD.CLASS_NUM\n\t\t\t) AS RowNum\n\t\t,FD.CLASS_NUM\n\t\t,FD.CALL_CODE_ID\n\t\t,CM.CODE_HELP\n\t\t,CONVERT(VARCHAR(100), PL.ProcStartDt, 121) AS 'ProcStartDt'\n\t\t,CONVERT(VARCHAR(100), PL.ProcEndDt, 121) AS 'ProcEndDt'\n\t\t,PL.ProcTarget\n\t\t,PL.SubmitValue\n\t\t,CR.INPUT_DEFAULT_VAL\n\t\t,MM.COUNT\n\t\t,'總筆數\:' + CONVERT(VARCHAR(100), MM.COUNT) + '筆' AS 'COUNT_DESC'\n\t\t,CASE \n\t\t\tWHEN CR.INPUT_DEFAULT_VAL \= 'INV_SRC_STKVAL'\n\t\t\t\tTHEN ISS.ADD_DT\n\t\t\tWHEN CR.INPUT_DEFAULT_VAL \= 'INV_SRC_RATE'\n\t\t\t\tTHEN ISR.ADD_DT\n\t\t\tEND AS 'ADD_DT'\n\tFROM JH_WS02_FLOW_LIST FM\n\tLEFT JOIN JH_WS02_FLOW_SCHEDULE_LIST FD ON FM.PK \= FD.FLOW_ID_PK\n\tLEFT JOIN JH_WS02_CODE_LIST CM ON FD.CALL_CODE_ID \= CM.CODE_ID\n\tLEFT JOIN (\n\t\tSELECT MAX(ProcPK) AS 'ProcPK'\n\t\t\t,FuncID\n\t\tFROM PROCESS_LOG\n\t\tGROUP BY FuncID\n\t\t) PLPK ON FD.CALL_CODE_ID \= PLPK.FuncID\n\tLEFT JOIN PROCESS_LOG PL ON PLPK.ProcPK \= PL.ProcPK\n\tLEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS CR ON CM.PK \= CR.CODE_ID_PK\n\tLEFT JOIN (\n\t\tSELECT S.NAME AS 'OWN_NAME'\n\t\t\t,O.NAME AS 'TABLE_NAME'\n\t\t\t,P.ROWS AS 'COUNT'\n\t\tFROM SYS.OBJECTS O\n\t\tINNER JOIN SYS.SCHEMAS S ON O.SCHEMA_ID \= S.SCHEMA_ID\n\t\tINNER JOIN SYS.PARTITIONS P ON O.OBJECT_ID \= P.OBJECT_ID\n\t\tWHERE (O.TYPE \= 'U')\n\t\t\tAND (\n\t\t\t\tP.INDEX_ID IN (\n\t\t\t\t\t0\n\t\t\t\t\t,1\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t) MM ON MM.TABLE_NAME \= CR.INPUT_DEFAULT_VAL\n\tLEFT JOIN (\n\t\tSELECT DISTINCT CONVERT(VARCHAR(100), TURNDATE, 111) AS 'ADD_DT'\n\t\tFROM INV_SRC_STKVAL\n\t\t) ISS ON CR.INPUT_DEFAULT_VAL \= 'INV_SRC_STKVAL'\n\tLEFT JOIN (\n\t\tSELECT DISTINCT CONVERT(VARCHAR(100), PDATETIME, 111) AS 'ADD_DT'\n\t\tFROM INV_SRC_RATE\n\t\t) ISR ON CR.INPUT_DEFAULT_VAL \= 'INV_SRC_RATE'\n\tWHERE FM.FLOW_ID \= 'API_FN03A005_INTDATA_FLOW'\n\t\tAND CR.INPUT_FIELD LIKE '%TABLE_NAME%'\n\t) AS new1\n
API_FN03A005_FLOW_EXEC_CHK=/*\n名稱：API_FN03A005_FLOW_EXEC_CHK\n目的：檢核使用者在3a5介面不可執行「ESUN_FLOW_FN02J001」，僅可查看執行結果。\n*/\nBEGIN\n\n    /*USE JHDFM_DB_137*/\n\n    DECLARE  @RETURN_CODE INT\n            ,@RETURN_MSG  VARCHAR(1000)\n            ,@FLOW_ID     VARCHAR(20) \= '$$CLASSIFY$$'  --介面傳入\n \n    SELECT @RETURN_CODE \=\n         CASE WHEN @FLOW_ID \= 'ESUN_FLOW_FN02J001'\n                   THEN '-1' \n              WHEN @FLOW_ID <> 'ESUN_FLOW_FN02J001'\n                   THEN '0' \n         END\n\n    SELECT @RETURN_MSG \= \n         CASE WHEN @RETURN_CODE \= '-1'\n                   THEN '您選擇的項目無法執行，此項目僅可透過「個案評估維護介面」執行。'\n              ELSE '' \n         END\n\n    SELECT @RETURN_CODE AS 'RETURN_CODE',@RETURN_MSG AS 'RETURN_MSG';\nEND
API_Fn03A005_FLOW_EXEC_CHK=/*\n名稱：API_FN03A005_FLOW_EXEC_CHK\n目的：檢核使用者在3a5介面不可執行「ESUN_FLOW_FN02J001」，僅可查看執行結果。\n*/\nBEGIN\n\n    DECLARE  @RETURN_CODE INT\n            ,@RETURN_MSG  VARCHAR(1000)\n            ,@FLOW_ID     VARCHAR(20) \= '$$CLASSIFY$$'  --介面傳入\n \n    SELECT @RETURN_CODE \=\n         CASE WHEN @FLOW_ID \= 'ESUN_FLOW_FN02J001'\n                   THEN '-1' \n              WHEN @FLOW_ID <> 'ESUN_FLOW_FN02J001'\n                   THEN '0' \n         END\n\n    SELECT @RETURN_MSG \= \n         CASE WHEN @RETURN_CODE \= '-1'\n                   THEN '您選擇的項目無法執行，此項目僅可透過「個案評估維護介面」執行。'\n              ELSE '' \n         END\n\n    SELECT @RETURN_CODE AS 'RETURN_CODE',@RETURN_MSG AS 'RETURN_MSG';\nEND
API_Fn03A005_INTDATA_API=PLUGINS/FILE_IMPORT/API_MODE/FILE_IMPORT_API_MAIN.kjb
API_Fn03A005_INTDATA_sFTP=PLUGINS/FILE_IMPORT/sFTP_MODE/FILE_IMPORT_sFTP_MAIN.kjb
API_Fn03A005_UPLOAD_LOG=SELECT *,\n\n  (SELECT COUNT(*)\n   FROM JH_WS02_CODE_LIST CM\n   LEFT JOIN ES_API_LOG ESLOG ON CM.CODE_ID \= ESLOG.API_NAME\n   WHERE CM.CODE_ID \= '$$CALL_CODE_ID$$') AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY ESLOG.STR_DT DESC) AS RowNum,\n                            CM.CODE_ID,\n                            CM.CODE_HELP ,\n                            CONVERT(varchar(100), ESLOG.STR_DT, 121) AS 'ProcStartDt',\n                            CONVERT(varchar(100), ESLOG.END_DT, 121) AS 'ProcEndDt',\n                            ESLOG.RETURN_CODE AS 'ProcTarget',\n                            ESLOG.RETURN_MSG AS 'SubmitValue'\n   FROM JH_WS02_CODE_LIST CM\n   LEFT JOIN ES_API_LOG ESLOG ON CM.CODE_ID \= ESLOG.API_NAME\n   WHERE CM.CODE_ID \= '$$CALL_CODE_ID$$') AS new1\nWHERE RowNum > $$start$$\n  AND RowNum <\= ($$start$$+$$limit$$);
API_FN03A005_UPLOAD_LOG=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM JH_WS02_CODE_LIST CM\n\t\tLEFT JOIN PROCESS_LOG ESLOG ON CM.CODE_ID \= ESLOG.CODE_ID\n\t\tWHERE CM.CODE_ID \= '$$CALL_CODE_ID$$'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ESLOG.ProcStartDt DESC\n\t\t\t) AS RowNum\n\t\t,CM.CODE_ID\n\t\t,CM.CODE_HELP\n\t\t,CONVERT(VARCHAR(100), ESLOG.ProcStartDt, 121) AS 'ProcStartDt'\n\t\t,CONVERT(VARCHAR(100), ESLOG.ProcEndDt, 121) AS 'ProcEndDt'\n\t\t,ESLOG.ProcTarget AS 'ProcTarget'\n\t\t,ESLOG.SubmitValue AS 'SubmitValue'\n\tFROM JH_WS02_CODE_LIST CM\n\tLEFT JOIN PROCESS_LOG ESLOG ON CM.CODE_ID \= ESLOG.CODE_ID\n\tWHERE CM.CODE_ID \= '$$CALL_CODE_ID$$'\n\t) AS new1\nWHERE RowNum > '$$start$$'\n\tAND RowNum <\= ('$$start$$' + '$$limit$$')\n    ORDER BY ProcStartDt DESC
API_FN03A006_UPLOAD=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT *\n\t\t\t\tFROM JH_WS02_CODE_LIST\n\t\t\t\tWHERE CODE_ID LIKE '%MANUAL_UPLOAD%'\n\t\t\t\t) A\n\t\t\tINNER JOIN (\n\t\t\t\tSELECT CODE_ID_PK\n\t\t\t\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\t\t\t\tWHERE INPUT_FIELD \= 'FunctionID'\n\t\t\t\t\tAND INPUT_DEFAULT_VAL \= '$$FunctionID$$'\n\t\t\t\t) B ON A.PK \= B.CODE_ID_PK\n\t\t\tLEFT JOIN (\n\t\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\t\tORDER BY ProcPk DESC\n\t\t\t\t\t\t) AS RowNum\n\t\t\t\t\t,ProcPk\n\t\t\t\t\t,FuncID\n\t\t\t\t\t,SubReturnCode\n\t\t\t\t\t,ProcStartDt\n\t\t\t\t\t,SubReturnMsg\n\t\t\t\tFROM PROCESS_LOG\n\t\t\t\tWHERE ProcPK IN (\n\t\t\t\t\t\tSELECT MAX(ProcPK) AS ProcPK\n\t\t\t\t\t\tFROM PROCESS_LOG\n\t\t\t\t\t\tGROUP BY FuncID\n\t\t\t\t\t\t)\n\t\t\t\t) C ON A.CODE_ID \= C.FuncID\n\t\t\t) CNT\n\t\t) AS totalProperty\nFROM (\n\tSELECT RowNum\n\t\t,C.ProcPk\n\t\t,CASE \n\t\t\tWHEN C.SubReturnCode <> '0'\n\t\t\t\tTHEN '失敗'\n\t\t\tELSE '成功'\n\t\t\tEND AS RESULT\n\t\t,C.ProcStartDt\n\t\t,C.SubReturnMsg\n\t\t,PK\n\t\t,CODE_ID\n\t\t,CODE_HELP\n\tFROM (\n\t\tSELECT *\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE CODE_ID LIKE '%MANUAL_UPLOAD%'\n\t\t) A\n\tINNER JOIN (\n\t\tSELECT CODE_ID_PK\n\t\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\t\tWHERE INPUT_FIELD \= 'FunctionID'\n\t\t\tAND INPUT_DEFAULT_VAL \= '$$FunctionID$$'\n\t\t) B ON A.PK \= B.CODE_ID_PK\n\tLEFT JOIN (\n\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\tORDER BY ProcPk DESC\n\t\t\t\t) AS RowNum\n\t\t\t,ProcPk\n\t\t\t,FuncID\n\t\t\t,SubReturnCode\n\t\t\t,ProcStartDt\n\t\t\t,SubReturnMsg\n\t\tFROM PROCESS_LOG\n\t\tWHERE ProcPK IN (\n\t\t\t\tSELECT MAX(ProcPK) AS ProcPK\n\t\t\t\tFROM PROCESS_LOG\n\t\t\t\tGROUP BY FuncID\n\t\t\t\t)\n\t\t) C ON A.CODE_ID \= C.FuncID\n\t) AS new1\n
API_Fn03A008_CD_CB2=/*-------------------------------------------------------------------------------------------\n宣告變數\n-------------------------------------------------------------------------------------------*/\nDECLARE @PK_SYS INT\nDECLARE @DATA_YMD VARCHAR(8)\n\n/*-------------------------------------------------------------------------------------------\n設定變數值\n(1)@PK_SYS取開帳期別者，如關帳則取最大PK_SYS\n(2)@DATA_YMD 儲存於B_SYS_CONFIG的DATA_YMD僅到YYYYMM，加上'01'使格式為YYYYMMDD，\n以便依據@DATA_YMD計算出一年內期別。\n-------------------------------------------------------------------------------------------*/\nSET @PK_SYS \= CASE \n\t\tWHEN (\n\t\t\t\tSELECT 1\n\t\t\t\tFROM B_SYS_CONFIG\n\t\t\t\tWHERE PK_SYS \= (SELECT DBO.FN_get_pk_sys_from_sys_config())\n\t\t\t\t) \= 1\n\t\t\tTHEN DBO.FN_get_pk_sys_from_sys_config()\n\t\tELSE (\n\t\t\t\tSELECT MAX(PK_SYS)\n\t\t\t\tFROM B_SYS_CONFIG\n\t\t\t\t)\n\t\tEND\n\t\t\nSET @DATA_YMD \= (\n\t\tSELECT DATA_YMD + '01'\n\t\tFROM B_SYS_CONFIG\n\t\tWHERE PK_SYS \= @PK_SYS\n\t\t)\n\t\n/*-------------------------------------------------------------------------------------------\n選到ESUN_FLOW_RT4、ESUN_FLOW_RT 這兩個FLOW，才需要篩選出對應的期別\n-------------------------------------------------------------------------------------------*/\nIF RIGHT('$$OPEN_ACC_TYPE$$',1) IN ('T','4')\n\tBEGIN\n\t\tSELECT *,\n\t\t(SELECT COUNT(*) FROM B_SYS_CONFIG\n\t\tWHERE RIGHT(OPEN_ACC_TYPE, 1) \= RIGHT('$$OPEN_ACC_TYPE$$', 1) \n\t\tAND CONVERT(DATE, DATA_YMD + '01', 112) >\= DATEADD(MM, - 12, CONVERT(DATE, @DATA_YMD, 112))\n\t\t) AS totalProperty\n\t\tFROM \n\t\t\t(SELECT ROW_NUMBER() OVER (ORDER BY PK_SYS DESC) AS RowNum\n\t\t\t,CAL_ALIAS\n\t\t\t,DATA_YMD\n\t\t\t,PK_SYS\n\t\t\tFROM B_SYS_CONFIG\n\t\t\tWHERE RIGHT(OPEN_ACC_TYPE, 1) \= RIGHT('$$OPEN_ACC_TYPE$$', 1)--篩選符合的期別\n\t\t\tAND CONVERT(DATE, DATA_YMD + '01', 112) >\= DATEADD(MM, - 12, CONVERT(DATE, @DATA_YMD, 112))--僅取一年內期別\n\t\t\t) AS new1\n\tEND\t\n/*-------------------------------------------------------------------------------------------\n選到ESUN_FLOW_RT4、ESUN_FLOW_RT 除外的FLOW(eg.ESUN_FLOW_R1_CAL)，\n一律顯示所有開帳期別\n-------------------------------------------------------------------------------------------*/\nELSE\n\tBEGIN\n\t\tSELECT *,\n\t\t(SELECT COUNT(*) FROM B_SYS_CONFIG\n\t\tWHERE CONVERT(DATE, DATA_YMD + '01', 112) >\= DATEADD(MM, - 12, CONVERT(DATE, @DATA_YMD, 112))\n\t\t) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (ORDER BY PK_SYS DESC) AS RowNum\n\t\t\t,CAL_ALIAS\n\t\t\t,DATA_YMD\n\t\t\t,PK_SYS\n\t\t\tFROM B_SYS_CONFIG\n\t\t\tWHERE CONVERT(DATE, DATA_YMD + '01', 112) >\= DATEADD(MM, - 12, CONVERT(DATE, @DATA_YMD, 112))--僅取一年內期別\n\t\t\t) AS new1\n\tEND
API_Fn03A008_DS=/*-----------------------------------------------------------------------------------\n宣告並設定變數\n-----------------------------------------------------------------------------------*/\nDECLARE @OPEN_ACC_TYPE VARCHAR(2)\n\t,@CHK_RESULT CHAR(3)\n\t,@API_NAME VARCHAR(200)\n\t,@CHK_TB VARCHAR(200)\n\t,@PK_SYS INT\n\t,@BATCH_SEQ INT\n\t,@CHK_TYPE VARCHAR(10)\n\n/*設定期別變數，並取得該期別的最大檢查批號*/\nSELECT @PK_SYS \= CF.PK_SYS\n\t,@OPEN_ACC_TYPE \= CF.OPEN_ACC_TYPE\n\t,@BATCH_SEQ \= BQ.BATCH_SEQ\nFROM B_SYS_CONFIG CF\nINNER JOIN (\n\tSELECT PK_SYS\n\t\t,MAX(ISNULL(BATCH_SEQ, 0)) AS 'BATCH_SEQ'\n\tFROM ES_ETLDATA_CHK_RESULT\n\tGROUP BY PK_SYS\n\t) BQ ON CF.PK_SYS \= BQ.PK_SYS\nWHERE CF.CAL_ALIAS \= '$$CAL_ALIAS$$'\n\n/*設定其餘查詢條件變數*/\nSET @CHK_RESULT \= '$$CHK_RESULT$$'\nSET @API_NAME \= '$$API_NAME$$'\nSET @CHK_TB \= '$$CHK_TABLE_NAME$$'\nSET @CHK_TYPE \= '$$CHK_TYPE$$'\n\n/*-----------------------------------------------------------------------------------\n查詢結果\n-----------------------------------------------------------------------------------*/\nSELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM ES_ETLDATA_CHK_RESULT RL\n\t\tLEFT JOIN JH_WS02_CODE_LIST CL ON RL.API_NAME \= CL.CODE_ID\n\t\tWHERE RL.PK_SYS \= @PK_SYS\n\t\t\tAND RL.BATCH_SEQ \= @BATCH_SEQ\n\t\t\tAND (\n\t\t\t\tRL.CHK_RESULT \= @CHK_RESULT\n\t\t\t\tOR @CHK_RESULT \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tRL.API_NAME LIKE '%' + @API_NAME + '%'\n\t\t\t\tOR @API_NAME \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tRL.CHK_TABLE_NAME LIKE '%' + @CHK_TB + '%'\n\t\t\t\tOR @CHK_TB \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tRL.CHK_TYPE \= @CHK_TYPE\n\t\t\t\tOR @CHK_TYPE \= 'ALL'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY RL.PK_ETLDATA_CHK_RESULT\n\t\t\t) AS 'RowNum'\n\t\t,RL.PK_SYS\n\t\t,RL.BATCH_SEQ /*檢查批號*/\n\t\t,CASE RL.CHK_TYPE\n\t\t\tWHEN 'C1'\n\t\t\t\tTHEN 'LOG檢查'\n\t\t\tWHEN 'C2'\n\t\t\t\tTHEN 'TMP筆數'\n\t\t\tWHEN 'C3'\n\t\t\t\tTHEN 'STG筆數'\n\t\t\tELSE CHK_TYPE\n\t\t\tEND AS 'CHK_TYPE' /*檢查類型*/\n\t\t,RL.API_NAME /*工作代碼*/\n\t\t,CL.CODE_HELP /*工作項目*/\n\t\t,RL.CHK_TABLE_NAME /*檢查資料表*/\n\t\t,RL.WHERE_CMD /*資料表條件*/\n\t\t,RL.CHK_CNT /*總筆數*/\n\t\t,RL.WHITE_LIST /*白名單*/\n\t\t,RL.CHK_RESULT /*檢查結果(Y/N)*/\n\t\t,RL.CHK_RESULT_DESC /*檢查結果說明*/\n\tFROM ES_ETLDATA_CHK_RESULT RL\n\tLEFT JOIN JH_WS02_CODE_LIST CL ON RL.API_NAME \= CL.CODE_ID\n\tWHERE RL.PK_SYS \= @PK_SYS\n\t\tAND RL.BATCH_SEQ \= @BATCH_SEQ\n\t\tAND (\n\t\t\tRL.CHK_RESULT \= @CHK_RESULT\n\t\t\tOR @CHK_RESULT \= 'ALL'\n\t\t\t)\n\t\tAND (\n\t\t\tRL.API_NAME LIKE '%' + @API_NAME + '%'\n\t\t\tOR @API_NAME \= 'ALL'\n\t\t\t)\n\t\tAND (\n\t\t\tRL.CHK_TABLE_NAME LIKE '%' + @CHK_TB + '%'\n\t\t\tOR @CHK_TB \= 'ALL'\n\t\t\t)\n\t\tAND (\n\t\t\tRL.CHK_TYPE \= @CHK_TYPE\n\t\t\tOR @CHK_TYPE \= 'ALL'\n\t\t\t)\n\t) new1\n
API_FN04A001_D1=SELECT *, (SELECT COUNT(*) FROM B_SYS_CONFIG_DETAIL WHERE IS_MODIFIABLE \= 'Y' AND PK_SYS \= '$$PK_SYS$$') AS totalProperty FROM (SELECT ROW_NUMBER() OVER (ORDER BY PK_SYS DESC) AS RowNum, * FROM B_SYS_CONFIG_DETAIL WHERE IS_MODIFIABLE \= 'Y' AND PK_SYS \= '$$PK_SYS$$') AS new1
API_Fn04A001_D1=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM B_SYS_CONFIG_DETAIL\n\t\tWHERE IS_MODIFIABLE \= 'Y'\n\t\t\tAND PK_SYS \= '$$PK_SYS$$'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_SYS DESC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM B_SYS_CONFIG_DETAIL\n\tWHERE IS_MODIFIABLE \= 'Y'\n\t\tAND PK_SYS \= '$$PK_SYS$$'\n\t) AS new1
API_FN04A001_LS=SELECT (SELECT MAX(PK_SYS) FROM B_SYS_CONFIG)+1 AS 'ADD_PK_SYS',*,\n\n  (SELECT COUNT(*)\n   FROM B_SYS_CONFIG\n   WHERE PK_SYS NOT IN\n       (SELECT TOP 0 PK_SYS\n        FROM B_SYS_CONFIG\n        ORDER BY PK_SYS DESC)) AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY PK_SYS DESC) AS RowNum,\n                            *\n   FROM B_SYS_CONFIG\n   WHERE PK_SYS NOT IN\n       (SELECT TOP 0 PK_SYS\n        FROM B_SYS_CONFIG\n        ORDER BY PK_SYS DESC)) AS new1\nWHERE RowNum > $$start$$\n  AND RowNum < \= ($$start$$+$$limit$$);
API_Fn04A001_LS=SELECT (SELECT MAX(PK_SYS) FROM B_SYS_CONFIG)+1 AS 'ADD_PK_SYS',*,\n\n  (SELECT COUNT(*)\n   FROM B_SYS_CONFIG\n   WHERE PK_SYS NOT IN\n       (SELECT TOP 0 PK_SYS\n        FROM B_SYS_CONFIG\n        ORDER BY PK_SYS DESC)) AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY PK_SYS DESC) AS RowNum,\n                            *\n   FROM B_SYS_CONFIG\n   WHERE PK_SYS NOT IN\n       (SELECT TOP 0 PK_SYS\n        FROM B_SYS_CONFIG\n        ORDER BY PK_SYS DESC)) AS new1\nWHERE RowNum > $$start$$\n  AND RowNum < \= ($$start$$+$$limit$$);
API_FN04A001_Q_CONFIG=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT COUNT(*) AS a\n\t\t\tFROM INV_FUND_AIMSMAP\n\t\t\tWHERE AOID \= '$$LOGIN_ID$$'\n\t\t\t\tAND (\n\t\t\t\t\tAIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\t\t\tOR '$$AIMSCMPY$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tAIMSID LIKE '%$$AIMSID$$%'\n\t\t\t\t\tOR '$$AIMSID$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\tAND AIMSEVLFLAG IN (\n\t\t\t\t\t'2'\n\t\t\t\t\t,'3'\n\t\t\t\t\t,'4'\n\t\t\t\t\t,'5'\n\t\t\t\t\t)\n\t\t\tGROUP BY AIMSID\n\t\t\t\t,AIMSCMPY\n\t\t\t\t,LAWDIFF\n\t\t\t\t,STKDIFF\n\t\t\t\t,ADD_DT\n\t\t\t\t,ADD_USER_ID\n\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t,LAST_MOD_DT\n\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSID\n\t\t\t) AS RowNum\n\t\t,AIMSID\n\t\t,AIMSCMPY\n\t\t,MAX(FUNDYEAR + FUNDPER) FUNDDT\n\t\t,FORMAT(LAWDIFF * 100, 'F2') AS 'LAWDIFF'\n\t\t,FORMAT(STKDIFF * 100, 'F2') AS 'STKDIFF'\n\t\t,ADD_DT\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,LAST_MOD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_USER_COMPANY_ID\n\tFROM INV_FUND_AIMSMAP\n\tWHERE AOID \= '$$LOGIN_ID$$'\n\t\tAND (\n\t\t\tAIMSCMPY LIKE '%$$AIMSCMPY$$%'\n\t\t\tOR '$$AIMSCMPY$$' \= 'ALL'\n\t\t\t)\n\t\tAND (\n\t\t\tAIMSID LIKE '%$$AIMSID$$%'\n\t\t\tOR '$$AIMSID$$' \= 'ALL'\n\t\t\t)\n\t\tAND AIMSEVLFLAG IN (\n\t\t\t'2'\n\t\t\t,'3'\n\t\t\t,'4'\n\t\t\t,'5'\n\t\t\t)\n\t\tAND AIMSTYPEFLAG <> '5'\n\tGROUP BY AIMSID\n\t\t,AIMSCMPY\n\t\t,LAWDIFF\n\t\t,STKDIFF\n\t\t,ADD_DT\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,LAST_MOD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_USER_COMPANY_ID\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN05A001_LIST=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM JH_WS02_CODE_LIST A\n\t\tLEFT JOIN (\n\t\t\tSELECT MAX(ProcPK) AS 'ProcPK'\n\t\t\t\t,FuncID\n\t\t\tFROM PROCESS_LOG\n\t\t\tGROUP BY FuncID\n\t\t\t) B ON A.CODE_ID \= B.FuncID\n\t\tLEFT JOIN PROCESS_LOG C ON B.ProcPK \= C.ProcPK\n\t\tWHERE A.CODE_ID LIKE '%EXECSP%'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY A.PK\n\t\t\t) AS RowNum\n\t\t,A.PK\n\t\t,A.CODE_ID\n\t\t,A.CODE_HELP\n\t\t,B.ProcPK\n\t\t,B.FuncID\n\t\t,C.ProcTarget\n\t\t,C.SubmitValue\n\t\t,CONVERT(VARCHAR, C.ProcStartDt, 120) AS 'ProcStartDt'\n\t\t,CONVERT(VARCHAR, C.ProcEndDt, 120) AS 'ProcEndDt'\n\t\t,PP.DATA_STATUS\n\t\t,PP.REVIEW_USER_GROUP\n\t\t,PP.REVIEW_USER\n\t\t,PP.STAGES\n\t\t,PP.AUTHORIZER_GROUP\n\t\t,PP.AUTHORIZEE_USER\n\tFROM JH_WS02_CODE_LIST A\n\tLEFT JOIN (\n\t\tSELECT MAX(ProcPK) AS 'ProcPK'\n\t\t\t,FuncID\n\t\tFROM PROCESS_LOG\n\t\tGROUP BY FuncID\n\t\t) B ON A.CODE_ID \= B.FuncID\n\tLEFT JOIN PROCESS_LOG C ON B.ProcPK \= C.ProcPK\n\tLEFT JOIN (\n\t\tSELECT TOP 1 *\n\t\tFROM (\n\t\t\tSELECT DATA_STATUS\n\t\t\t\t,REVIEW_USER_GROUP\n\t\t\t\t,REVIEW_USER\n\t\t\t\t,STAGES\n\t\t\t\t,AUTHORIZER_GROUP\n\t\t\t\t,AUTHORIZEE_USER\n\t\t\t\t,DATA_YMD\n\t\t\tFROM INV_SYS_CONFIG\n\t\t\tWHERE LEFT(DATA_YMD, 6) \= '$$BASEEVADATE$$'\n\t\t\t) P\n\t\t) PP ON 1 \= 1\n\tWHERE A.CODE_ID LIKE '%EXECSP%'\n\t) AS new1\n
API_FN05A001_Q_DT=SELECT *, (SELECT COUNT(*) FROM (SELECT TOP 1 CONVERT(CHAR(6), BASEEVADATE, 112) AS 'BASEEVADATE' FROM INV_FUND_AIMS) A) AS totalProperty FROM (SELECT ROW_NUMBER() OVER (ORDER BY BASEEVADATE) AS RowNum, * FROM (SELECT CONVERT(CHAR(6), MAX(BASEEVADATE), 112) AS 'BASEEVADATE' FROM INV_FUND_AIMS) A) AS new1
API_FN05A001_REVIEW=DECLARE @STAGES INT\n\t,@CHANGE_STAGES INT\n\t,@DATA_STATUS VARCHAR(2);\n\nSET @STAGES \= ISNULL((\n\t\t\tSELECT STAGES\n\t\t\tFROM $$ PROC_TARGET$$\n\t\t\tWHERE LEFT(DATA_YMD, 6) \= '$$BASEEVADATE$$'\n\t\t\t), 0);\nSET @CHANGE_STAGES \= CASE '$$PARAM_SWITCH_VALUE$$'\n\t\tWHEN 'LS_AUT'\n\t\t\tTHEN @STAGES + 1\n\t\tWHEN 'LS_APR'\n\t\t\tTHEN NULL\n\t\tWHEN 'LS_REJ'\n\t\t\tTHEN 0\n\t\tEND;\nSET @DATA_STATUS \= CASE '$$PARAM_SWITCH_VALUE$$'\n\t\tWHEN 'LS_AUT'\n\t\t\tTHEN 'PR'\n\t\tWHEN 'LS_APR'\n\t\t\tTHEN 'PC'\n\t\tWHEN 'LS_REJ'\n\t\t\tTHEN 'PB'\n\t\tEND;\n\nUPDATE Table_A\nSET Table_A.DATA_STATUS \= Table_B.DATA_STATUS\n\t,Table_A.REVIEW_USER_GROUP \= Table_B.REVIEW_USER_GROUP\n\t,Table_A.REVIEW_USER \= Table_B.REVIEW_USER\n\t,Table_A.STAGES \= Table_B.STAGES\n\t,Table_A.AUTHORIZER_GROUP \= Table_B.AUTHORIZER_GROUP\n\t,Table_A.AUTHORIZEE_USER \= Table_B.AUTHORIZEE_USER\nFROM $$ PROC_TARGET$$ AS Table_A\nINNER JOIN (\n\tSELECT @DATA_STATUS AS 'DATA_STATUS'\n\t\t,D1.AUTHORIZER_GROUP AS 'REVIEW_USER_GROUP'\n\t\t,D1.AUTHORIZEE_USER AS 'REVIEW_USER'\n\t\t,D2.STAGES\n\t\t,D2.AUTHORIZER_GROUP\n\t\t,D2.AUTHORIZEE_USER\n\tFROM REVIEW_PROCESS_MASTER M\n\tLEFT JOIN REVIEW_PROCESS_DETAIL D1 ON M.PK \= D1.MASTER_PK\n\t\tAND D1.STAGES \= @STAGES\n\t\tAND M.FUNCTION_ID \= '$$FunctionID$$'\n\tLEFT JOIN REVIEW_PROCESS_DETAIL D2 ON M.PK \= D2.MASTER_PK\n\t\tAND D2.STAGES \= @CHANGE_STAGES\n\t) AS Table_B ON 1 \= 1\nWHERE LEFT(Table_A.DATA_YMD, 6) \= '$$BASEEVADATE$$';\n\nINSERT INTO DATA_CHANGE_LOG (\n\tSessionID\n\t,ProcPK\n\t,FUNC_ID\n\t,PROC_TYPE\n\t,PROC_TARGET\n\t,USER_ID\n\t,DATA_NO\n\t,EVENT_DT\n\t,MEMO\n\t)\nVALUES (\n\t'${PARAM_SESSION_ID}'\n\t,'${LOGPK}'\n\t,'$$FunctionID$$'\n\t,@DATA_STATUS\n\t,'$$PROC_TARGET$$'\n\t,'${PARAM_SOURCE_COMING}'\n\t,'$$BASEEVADATE$$'\n\t,GETDATE()\n\t,'$$MEMO$$'\n\t);\n
API_FN05A001_SHOWNAME=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM INV_MAIL_LIST\n\t\tWHERE CONVERT(VARCHAR(6), EVALUATIONDT, 112) \= (\n\t\t\t\tSELECT MAX(DATA_YMD)\n\t\t\t\tFROM INV_SYS_CONFIG\n\t\t\t\t)\n\t\t\tAND SENDERFLAG \= 'Y'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AONAME\n\t\t\t) AS RowNum\n\t\t,AONAME\n\tFROM INV_MAIL_LIST\n\tWHERE CONVERT(VARCHAR(6), EVALUATIONDT, 112) \= (\n\t\t\tSELECT MAX(DATA_YMD)\n\t\t\tFROM INV_SYS_CONFIG\n\t\t\t)\n\t\tAND SENDERFLAG \= 'Y'\n\t) AS new1\n
API_FN05A002_EXECDATA=EXEC('DECLARE @RETURN_CODE INT \= 0, @RETURN_MSG VARCHAR(1000) EXEC [INVSP_FN05A002_EXECDATA] @RETURN_CODE \= @RETURN_CODE OUTPUT, @RETURN_MSG \= @RETURN_MSG OUTPUT;')
API_FN05A002_Q_AIMS=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tPARTITION BY AIMSTYPE ORDER BY AIMSTYPE DESC\n\t\t\t\t\t) AS ROWID\n\t\t\t\t,AOID\n\t\t\t\t,AIMSTYPE\n\t\t\t\t,AIMSID\n\t\t\t\t,AIMSCMPY\n\t\t\t\t,AIMSEVLFLAGNAME\n\t\t\t\t,CASE \n\t\t\t\t\tWHEN CCY IS NULL\n\t\t\t\t\t\tAND AIMSTYPE IS NOT NULL\n\t\t\t\t\t\tTHEN '小計'\n\t\t\t\t\tWHEN CCY IS NULL\n\t\t\t\t\t\tAND AIMSTYPE IS NULL\n\t\t\t\t\t\tTHEN '總計'\n\t\t\t\t\tELSE CCY\n\t\t\t\t\tEND CCY\n\t\t\t\t,CAST(SUM(ISNULL(FUNDINVENTORY, 0)) / 1000 AS DECIMAL(25, 3)) FUNDINVENTORY\n\t\t\t\t,CAST(SUM(ISNULL(TRANSTWD, 0) / ISNULL(FUNDINVENTORY, 1)) AS DECIMAL(25, 3)) EACHCOST\n\t\t\t\t,CAST(SUM(ISNULL(TRANSTWD, 0)) / 1000 AS DECIMAL(25, 3)) TRANSTWD\n\t\t\t\t,CAST(SUM(ISNULL(EQUITY_OWN, 0) / ISNULL(FUNDINVENTORY, 1)) AS DECIMAL(25, 3)) EACHEVL\n\t\t\t\t,CAST(SUM(ISNULL(EQUITY_OWN, 0)) / 1000 AS DECIMAL(25, 3)) EQUITY_OWN\n\t\t\t\t,CAST(SUM(ISNULL(COSTRATE_ADJ, 0)) / 1000 AS DECIMAL(25, 3)) COSTRATE_ADJ\n\t\t\t\t,CAST(SUM(ISNULL(COSTRATE_EXCHANGE, 0)) / 1000 AS DECIMAL(25, 3)) COSTRATE_EXCHANGE\n\t\t\t\t,CAST(SUM(ISNULL(COSTRATE_AMT, 0)) / 1000 AS DECIMAL(25, 3)) COSTRATE_AMT\n\t\t\tFROM INV_FUND_AIMS\n\t\t\tWHERE EVALUATIONDT IS NULL\n\t\t\t\tAND BASEEVADATE IS NOT NULL\n\t\t\tGROUP BY GROUPING SETS((\n\t\t\t\t\t\tAOID\n\t\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t\t,AIMSID\n\t\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t\t,AIMSEVLFLAGNAME\n\t\t\t\t\t\t,CCY\n\t\t\t\t\t\t), (AIMSTYPE), ())\n\t\t\t) A\n\t\tWHERE '$$BASEEVADATE$$' <> 'ALL'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSTYPE DESC\n\t\t\t\t,ROWID\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\tPARTITION BY AIMSTYPE ORDER BY AIMSTYPE DESC\n\t\t\t\t) AS ROWID\n\t\t\t,AOID\n\t\t\t,AIMSTYPE\n\t\t\t,AIMSID\n\t\t\t,AIMSCMPY\n\t\t\t,AIMSEVLFLAGNAME\n\t\t\t,CASE \n\t\t\t\tWHEN CCY IS NULL\n\t\t\t\t\tAND AIMSTYPE IS NOT NULL\n\t\t\t\t\tTHEN '小計'\n\t\t\t\tWHEN CCY IS NULL\n\t\t\t\t\tAND AIMSTYPE IS NULL\n\t\t\t\t\tTHEN '總計'\n\t\t\t\tELSE CCY\n\t\t\t\tEND CCY\n\t\t\t,CAST(SUM(ISNULL(FUNDINVENTORY, 0)) / 1000 AS DECIMAL(25, 3)) FUNDINVENTORY\n\t\t\t,CAST(SUM(ISNULL(TRANSTWD, 0) / ISNULL(FUNDINVENTORY, 1)) AS DECIMAL(25, 3)) EACHCOST\n\t\t\t,CAST(SUM(ISNULL(TRANSTWD, 0)) / 1000 AS DECIMAL(25, 3)) TRANSTWD\n\t\t\t,CAST(SUM(ISNULL(EQUITY_OWN, 0) / ISNULL(FUNDINVENTORY, 1)) AS DECIMAL(25, 3)) EACHEVL\n\t\t\t,CAST(SUM(ISNULL(EQUITY_OWN, 0)) / 1000 AS DECIMAL(25, 3)) EQUITY_OWN\n\t\t\t,CAST(SUM(ISNULL(COSTRATE_ADJ, 0)) / 1000 AS DECIMAL(25, 3)) COSTRATE_ADJ\n\t\t\t,CAST(SUM(ISNULL(COSTRATE_EXCHANGE, 0)) / 1000 AS DECIMAL(25, 3)) COSTRATE_EXCHANGE\n\t\t\t,CAST(SUM(ISNULL(COSTRATE_AMT, 0)) / 1000 AS DECIMAL(25, 3)) COSTRATE_AMT\n\t\tFROM INV_FUND_AIMS\n\t\tWHERE EVALUATIONDT IS NULL\n\t\t\tAND BASEEVADATE IS NOT NULL\n\t\tGROUP BY GROUPING SETS((\n\t\t\t\t\tAOID\n\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t,AIMSID\n\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t,AIMSEVLFLAGNAME\n\t\t\t\t\t,CCY\n\t\t\t\t\t), (AIMSTYPE), ())\n\t\t) A\n\tLEFT JOIN (\n\t\tSELECT TOP 1 *\n\t\tFROM (\n\t\t\tSELECT DATA_STATUS\n\t\t\t\t,REVIEW_USER_GROUP\n\t\t\t\t,REVIEW_USER\n\t\t\t\t,STAGES\n\t\t\t\t,AUTHORIZER_GROUP\n\t\t\t\t,AUTHORIZEE_USER\n\t\t\t\t,DATA_YMD\n\t\t\tFROM INV_SYS_CONFIG\n\t\t\tWHERE LEFT(DATA_YMD, 6) \= LEFT(CONVERT(VARCHAR(100), CONVERT(DATE, (\n\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\tWHEN '$$BASEEVADATE$$' \= 'ALL'\n\t\t\t\t\t\t\t\t\t\tTHEN ''\n\t\t\t\t\t\t\t\t\tELSE '$$BASEEVADATE$$'\n\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t)), 112), 6)\n\t\t\t) P\n\t\t) PP ON 1 \= 1\n\t) AS new1;\n
API_FN05A002_Q_DT=SELECT *\n\t,1 AS totalProperty\nFROM (\n\tSELECT 1 AS RowNum\n\t\t,CONVERT(VARCHAR(100), MAX(BASEEVADATE), 111) AS 'BASEEVADATE'\n\tFROM INV_FUND_AIMS\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN05A002_REVIEW=DECLARE @STAGES INT\n\t,@CHANGE_STAGES INT\n\t,@DATA_STATUS VARCHAR(2);\n\nSET @STAGES \= ISNULL((\n\t\t\tSELECT STAGES\n\t\t\tFROM $$ PROC_TARGET$$\n\t\t\tWHERE LEFT(DATA_YMD, 6) \= LEFT(CONVERT(VARCHAR(100), CONVERT(DATE, '$$BASEEVADATE$$'), 112), 6)\n\t\t\t), 0);\nSET @CHANGE_STAGES \= CASE '$$PARAM_SWITCH_VALUE$$'\n\t\tWHEN 'LS_AUT'\n\t\t\tTHEN @STAGES + 1\n\t\tWHEN 'LS_APR'\n\t\t\tTHEN NULL\n\t\tWHEN 'LS_REJ'\n\t\t\tTHEN 0\n\t\tEND;\nSET @DATA_STATUS \= CASE '$$PARAM_SWITCH_VALUE$$'\n\t\tWHEN 'LS_AUT'\n\t\t\tTHEN 'PR'\n\t\tWHEN 'LS_APR'\n\t\t\tTHEN 'PC'\n\t\tWHEN 'LS_REJ'\n\t\t\tTHEN 'PB'\n\t\tEND;\n\nUPDATE Table_A\nSET Table_A.DATA_STATUS \= Table_B.DATA_STATUS\n\t,Table_A.REVIEW_USER_GROUP \= Table_B.REVIEW_USER_GROUP\n\t,Table_A.REVIEW_USER \= Table_B.REVIEW_USER\n\t,Table_A.STAGES \= Table_B.STAGES\n\t,Table_A.AUTHORIZER_GROUP \= Table_B.AUTHORIZER_GROUP\n\t,Table_A.AUTHORIZEE_USER \= Table_B.AUTHORIZEE_USER\nFROM $$ PROC_TARGET$$ AS Table_A\nINNER JOIN (\n\tSELECT @DATA_STATUS AS 'DATA_STATUS'\n\t\t,D1.AUTHORIZER_GROUP AS 'REVIEW_USER_GROUP'\n\t\t,D1.AUTHORIZEE_USER AS 'REVIEW_USER'\n\t\t,D2.STAGES\n\t\t,D2.AUTHORIZER_GROUP\n\t\t,D2.AUTHORIZEE_USER\n\tFROM REVIEW_PROCESS_MASTER M\n\tLEFT JOIN REVIEW_PROCESS_DETAIL D1 ON M.PK \= D1.MASTER_PK\n\t\tAND D1.STAGES \= @STAGES\n\t\tAND M.FUNCTION_ID \= '$$FunctionID$$'\n\tLEFT JOIN REVIEW_PROCESS_DETAIL D2 ON M.PK \= D2.MASTER_PK\n\t\tAND D2.STAGES \= @CHANGE_STAGES\n\t) AS Table_B ON 1 \= 1\nWHERE LEFT(Table_A.DATA_YMD, 6) \= LEFT(CONVERT(VARCHAR(100), CONVERT(DATE, '$$BASEEVADATE$$'), 112), 6);\n\nINSERT INTO DATA_CHANGE_LOG (\n\tSessionID\n\t,ProcPK\n\t,FUNC_ID\n\t,PROC_TYPE\n\t,PROC_TARGET\n\t,USER_ID\n\t,DATA_NO\n\t,EVENT_DT\n\t,MEMO\n\t)\nVALUES (\n\t'${PARAM_SESSION_ID}'\n\t,'${LOGPK}'\n\t,'$$FunctionID$$'\n\t,@DATA_STATUS\n\t,'$$PROC_TARGET$$'\n\t,'${PARAM_SOURCE_COMING}'\n\t,'$$BASEEVADATE$$'\n\t,GETDATE()\n\t,'$$MEMO$$'\n\t);\n
API_FN06B002_DSTEST=SELECT *\n ,(\n  SELECT COUNT(*)\n  FROM GROUPS_TEST WITH (NOLOCK)\n  WHERE (DATA_STATUS \= '$$DATA_STATUS$$'\n   OR '$$DATA_STATUS$$' \= 'ALL')AND (\n   GROUPID LIKE '%$$GROUPID$$%'\n   OR '$$GROUPID$$' \= 'ALL'\n   ) AND (\n   GROUPNAME LIKE '%$$GROUPNAME$$%'\n   OR '$$GROUPNAME$$' \= 'ALL'\n   )\n   ) AS totalProperty\nFROM (\nSELECT ROW_NUMBER() OVER (\n   ORDER BY GROUP_IDX ) AS RowNum\n,GROUP_IDX\n,GROUPID\n,GROUPNAME\n,GROUPDESC\n,pos_level\n,DEL_USER_COMPANY_ID\n,DEL_DT\n,LAST_MOD_USER_COMPANY_ID\n,DEL_USER_ID\n,ADD_USER_COMPANY_ID\n,LAST_MOD_DT\n,ADD_USER_ID\n,DATA_STATUS\n,COMPANY_ID\n,LAST_MOD_USER_ID\n,ADD_DT\nFROM GROUPS_TEST WITH (NOLOCK)\nWHERE (\n   DATA_STATUS \= '$$DATA_STATUS$$'\n   OR '$$DATA_STATUS$$' \= 'ALL'\n   ) AND (\n   GROUPID LIKE '%$$GROUPID$$%'\n   OR '$$GROUPID$$' \= 'ALL'\n   ) AND (\n   GROUPNAME LIKE '%$$GROUPNAME$$%'\n   OR '$$GROUPNAME$$' \= 'ALL'\n   )\n) AS new1\nWHERE RowNum > $$start$$\n AND RowNum <\= ($$start$$ + $$limit$$);
API_FN06B002_DSTEST_ADD=/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Steve\n * Last Updated Date \:    20200512\n * 修正：\n *         1. DATA_STATUS 變數化\n *         2. DATA_CHANGE_LOG_ID 位置移至最前\n */\nBEGIN TRY\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n\tBEGIN\n\t\t/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t\tINSERT INTO GROUPS_TEST /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tGROUPID\n\t\t\t,GROUPNAME\n\t\t\t,GROUPDESC\n\t\t\t,pos_level\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,DATA_STATUS\n\t\t\t,COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$GROUPID$$'\n\t\t\t,'$$GROUPNAME$$'\n\t\t\t,'$$GROUPDESC$$'\n\t\t\t,'$$pos_level$$'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DATA_STATUS$$'\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t);\n\n\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'insert'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('GROUPS_TEST')\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'GROUPS_TEST'\n\t\t\t);\n\n\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t/*INSERT INTO LOG_GROUPS_TEST /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tDATA_CHANGE_LOG_ID\n\t\t\t,FUNC_ID\n\t\t\t,CRUD_STATE\n\t\t\t,GROUPID\n\t\t\t,GROUPNAME\n\t\t\t,GROUPDESC\n\t\t\t,pos_level\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,DATA_STATUS\n\t\t\t,COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,GROUP_IDX\n\t\t\t)\n\t\tVALUES (\n\t\t\tIDENT_CURRENT('DATA_CHANGE_LOG')\n\t\t\t,'${PARAM_FUNC_ID}'\n\t\t\t,'C'\n\t\t\t,'$$GROUPID$$'\n\t\t\t,'$$GROUPNAME$$'\n\t\t\t,'$$GROUPDESC$$'\n\t\t\t,'$$pos_level$$'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DATA_STATUS$$'\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,IDENT_CURRENT('GROUPS_TEST')\n\t\t\t);*/\n\n\t\t/* 1.4 Action Return */\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,IDENT_CURRENT('GROUPS_TEST')\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\n\n\n\nSELECT @RETURN_CODE \= RETURN_CODE\n\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\tFROM MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\tFOR JSON AUTO\n\t\t\t)\n\tFROM MEM_API_RESULT\n\tWHERE hashValues \= @FROM_OUTSIDE\nEND TRY\n\nBEGIN CATCH\n\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t,'$$GROUP_IDX$$' AS DATA_UNIQUE_KEY\n\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t) AS A /* WITH (ROWLOCK) */\n\t\t\tFOR JSON AUTO\n\t\t\t)\nEND CATCH
API_FN06B002_DSTEST_CUD=BEGIN TRY\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n/* 1.1 功能主要異動 MASTER_TABLE_NAME */\nInsert into GROUPS_TEST /* WITH (ROWLOCK) */\n(\nGROUPNAME\n,GROUPDESC\n,pos_level\n,ADD_USER_COMPANY_ID\n,ADD_USER_ID\n,DATA_STATUS\n,COMPANY_ID\n,ADD_DT\n) \nVALUES(\n'$$GROUPNAME$$'\n,'$$GROUPDESC$$'\n,'$$pos_level$$'\n,'${PARAM_COMPANY}'\n,'${PARAM_SOURCE_COMING}'\n,'$$DATA_STATUS$$'\n,'$$COMPANY_ID$$'\n,CONVERT(VARCHAR(20), GETDATE(), 120)\n);\n/* 1.2 DATA_CHANGE_LOG for Master Table */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        LOG_ID\n       ,FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,DATA_STATUS\n       ,SessionID\n       ,ProcPK\n)\nVALUES(\n        '$$LOG_ID$$'\n       ,'${PARAM_FUNC_ID}'\n       ,'insert'\n       ,'${PARAM_SOURCE_COMING}'\n       ,IDENT_CURRENT('GROUPS_TEST')\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$DATA_STATUS$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n);\n/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\n\n/* 1.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES (        \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0'\n        ,'SUCCESS'\n        ,IDENT_CURRENT('GROUPS_TEST')\n        ,'C' \n        ,'$$MEMO$$');\nEND\n ELSE\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        LOG_ID\n       ,FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,DATA_STATUS\n       ,SessionID\n       ,ProcPK\n)\nVALUES(\n        '$$LOG_ID$$'\n       ,'${PARAM_FUNC_ID}'\n       ,'insert'\n       ,'${PARAM_SOURCE_COMING}'\n       ,IDENT_CURRENT('GROUPS_TEST')\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$DATA_STATUS$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n);\nIF EXISTS (\n\nSELECT * FROM GROUPS_TEST WITH (NOLOCK) WHERE GROUP_IDX \= '$$GROUP_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/* 2.2 DATA Detail LOG (before modified) */\n \n\n/* 2.3 功能主要異動 Table */\n   DELETE  GROUPS_TEST WITH (ROWLOCK)\n   WHERE GROUP_IDX \= '$$GROUP_IDX$$';\n\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$GROUP_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 2.5 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$GROUP_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\n   END\nEND\nELSE\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\nBEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        GROUPID\n       ,GROUPNAME\n       ,GROUPDESC\n       ,pos_level\n       ,DEL_USER_COMPANY_ID\n       ,DEL_DT\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$GROUPID$$'\n       ,'$$GROUPNAME$$'\n       ,'$$GROUPDESC$$'\n       ,'$$pos_level$$'\n       ,'$$DEL_USER_COMPANY_ID$$'\n       ,'$$DEL_DT$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'GROUPS_TEST'\n);\nIF EXISTS (\nSELECT * FROM GROUPS_TEST WITH (NOLOCK) WHERE GROUP_IDX \= '$$GROUP_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n\n   \n\n/* 3.3 功能主要異動 Table */\nUPDATE GROUPS_TEST WITH (ROWLOCK)\n    SET GROUPID\=(CASE WHEN SUBSTRING('$$GROUPID$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN GROUPID ELSE SUBSTRING('$$GROUPID$$',1,20) END)\n    ,GROUPNAME\=(CASE WHEN SUBSTRING('$$GROUPNAME$$',1,40)\=SUBSTRING('\#NO_DATA\#',1,40) THEN GROUPNAME ELSE SUBSTRING('$$GROUPNAME$$',1,40) END)\n    ,GROUPDESC\=(CASE WHEN SUBSTRING('$$GROUPDESC$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN GROUPDESC ELSE SUBSTRING('$$GROUPDESC$$',1,100) END)\n    ,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n    ,DATA_STATUS\=(CASE WHEN SUBSTRING('$$DATA_STATUS$$',1,2)\=SUBSTRING('\#NO_DATA\#',1,2) THEN DATA_STATUS ELSE SUBSTRING('$$DATA_STATUS$$',1,2) END)\n    ,COMPANY_ID\=(CASE WHEN SUBSTRING('$$COMPANY_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$',1,50) END)\n    ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\nWHERE GROUP_IDX\='$$GROUP_IDX$$' ;\n\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n         ,'$$GROUP_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 3.5 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$GROUP_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$GROUP_IDX$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH\n
API_FN06B002_DSTEST_DEL=BEGIN TRY\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN\n\t\t\t/* 2.1 DATA_CHANGE_LOG */\n\t\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tFUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t,SessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,PROC_TARGET\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'$$FunctionID$$'\n\t\t\t\t,'delete'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'$$GROUP_IDX$$'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'GROUPS_TEST'\n\t\t\t\t);\n\n\t\t\tIF EXISTS (\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM GROUPS_TEST WITH (NOLOCK)\n\t\t\t\t\tWHERE GROUP_IDX \= '$$GROUP_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t\t)\n\t\t\tBEGIN\n\t\t\t\t/* 2.2 DATA Detail LOG (before modified) */\n\t\t\t\t/*INSERT INTO LOG_GROUPS_TEST /* WITH (ROWLOCK) */\n\t\t\t\t\t(\n\t\t\t\t\tDATA_CHANGE_LOG_ID\n\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t,CRUD_STATE\n\t\t\t\t\t,GROUPID\n\t\t\t\t\t,GROUPNAME\n\t\t\t\t\t,GROUPDESC\n\t\t\t\t\t,pos_level\n\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t,DEL_DT\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,GROUP_IDX\n\t\t\t\t\t)*/\n\t\t\t\tSELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t\t\t,'$$FunctionID$$' AS FUNC_ID\n\t\t\t\t\t,'D' AS CRUD_STATE\n\t\t\t\t\t,GROUPID\n\t\t\t\t\t,GROUPNAME\n\t\t\t\t\t,GROUPDESC\n\t\t\t\t\t,pos_level\n\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t,DEL_DT\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,GROUP_IDX\n\t\t\t\tFROM GROUPS_TEST WITH (NOLOCK)\n\t\t\t\tWHERE GROUP_IDX \= '$$GROUP_IDX$$';\n\n\t\t\t\t/* 2.3 功能主要異動 Table */\n\t\t\t\tDELETE GROUPS_TEST\n\t\t\t\tWITH (ROWLOCK)\n\t\t\t\tWHERE GROUP_IDX \= '$$GROUP_IDX$$';\n\n\t\t\t\t/* 2.4 Action Return */\n\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t\t(\n\t\t\t\t\tProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'0'\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t,'$$GROUP_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND\n\t\t\tELSE\n\t\t\tBEGIN\n\t\t\t\t/* 2.5 Action Return */\n\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t\t(\n\t\t\t\t\tProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'-1'\n\t\t\t\t\t,'資料正在審核流程中，無法刪除'\n\t\t\t\t\t,'$$GROUP_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND\n\t\tEND\n\n\nSELECT @RETURN_CODE \= RETURN_CODE\n\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\tFROM MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\tFOR JSON AUTO\n\t\t\t)\n\tFROM MEM_API_RESULT\n\tWHERE hashValues \= @FROM_OUTSIDE\nEND TRY\n\nBEGIN CATCH\n\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t,'$$GROUP_IDX$$' AS DATA_UNIQUE_KEY\n\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t) AS A /* WITH (ROWLOCK) */\n\t\t\tFOR JSON AUTO\n\t\t\t)\nEND CATCH
API_FN06B002_DSTEST_MOD=BEGIN TRY\n\n\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\nBEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$GROUP_IDX$$'\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'GROUPS_TEST'\n);\nIF EXISTS (\nSELECT * FROM GROUPS_TEST WITH (NOLOCK) WHERE GROUP_IDX \= '$$GROUP_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n\n   /*INSERT INTO LOG_GROUPS_TEST /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,GROUPID\n          ,GROUPNAME\n          ,GROUPDESC\n          ,pos_level\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,LAST_MOD_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,ADD_USER_ID\n          ,DATA_STATUS\n          ,COMPANY_ID\n          ,LAST_MOD_USER_ID\n          ,ADD_DT\n          ,GROUP_IDX\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,GROUPID\n          ,GROUPNAME\n          ,GROUPDESC\n          ,pos_level\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,LAST_MOD_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,ADD_USER_ID\n          ,DATA_STATUS\n          ,COMPANY_ID\n          ,LAST_MOD_USER_ID\n          ,ADD_DT\n          ,GROUP_IDX\n     FROM GROUPS_TEST WITH (NOLOCK)\n   WHERE GROUP_IDX \= '$$GROUP_IDX$$';*/\n\n/* 3.3 功能主要異動 Table */\nUPDATE GROUPS_TEST WITH (ROWLOCK)\n    SET GROUPID\=(CASE WHEN SUBSTRING('$$GROUPID$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN GROUPID ELSE SUBSTRING('$$GROUPID$$',1,20) END)\n    ,GROUPNAME\=(CASE WHEN SUBSTRING('$$GROUPNAME$$',1,40)\=SUBSTRING('\#NO_DATA\#',1,40) THEN GROUPNAME ELSE SUBSTRING('$$GROUPNAME$$',1,40) END)\n    ,GROUPDESC\=(CASE WHEN SUBSTRING('$$GROUPDESC$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN GROUPDESC ELSE SUBSTRING('$$GROUPDESC$$',1,100) END)\n    ,pos_level\=(CASE WHEN ISNUMERIC('$$pos_level$$')\=1 THEN (CASE WHEN ISNULL(pos_level,'0')\='$$pos_level$$'  THEN (CASE WHEN '$$pos_level$$'\='0' THEN '0' ELSE pos_level END) ELSE '$$pos_level$$'  END) ELSE pos_level END)\n    ,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n    ,DATA_STATUS\=(CASE WHEN SUBSTRING('$$DATA_STATUS$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN DATA_STATUS ELSE SUBSTRING('$$DATA_STATUS$$',1,1) END)\n    ,COMPANY_ID\=(CASE WHEN SUBSTRING('$$COMPANY_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$',1,50) END)\n    ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\nWHERE GROUP_IDX\='$$GROUP_IDX$$' ;\n\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n         ,'$$GROUP_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 3.5 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$GROUP_IDX$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$GROUP_IDX$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH\n
API_Fn06B003_C=/*Last Version\tLast Updated by\t\tLast Updated Date\tComment；v2.2.1\t\t\tSteve\t\t\t\t20200903\t\t\t1. 調整所有關聯鍵值以 Identity 欄位為主。v2.2.1\t\t\tSteve\t\t\t\t20200911\t\t\t1. 取消 IDENT_CURRENT() 使用方式，以 SCOPE_IDENTITY() 為主 v2.2.1\t\t\tSteve\t\t\t\t20200915\t\t\t1. BEGIN CATCH 增加 IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION; 敘述；v2.2.1\t\t\tSteve\t\t\t\t20201016\t\t\t1. 增加執行異常回傳業務邏輯鍵值設定敘述；2. DATA_UNIQUE_KEY 使用@RETURN_KEY_STR變數；*//*適用情境：1. 僅主檔新增。2. 當主檔、明細檔同時新增。*//*填寫業務邏輯鍵值欄位名稱變數，例：'$$COLUMN1$$,$$COLUMN2$$,...'*/\nSELECT @RETURN_KEY_STR \= '$$USERID$$';\n\nBEGIN TRY\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n\tBEGIN /* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t\tINSERT INTO USERS /* WITH (ROWLOCK) */ (\n\t\t\tUSERID\n\t\t\t,USERNAME\n\t\t\t,PASSWORD\n\t\t\t,COMPANY\n\t\t\t,DEPID\n\t\t\t,EMAIL\n\t\t\t,TEL1\n\t\t\t,TEL2\n\t\t\t,ISLOCK\n\t\t\t,Pre_1_Password\n\t\t\t,Pre_2_Password\n\t\t\t,Pre_3_Password\n\t\t\t,Active_Date\n\t\t\t,Deadline_Date\n\t\t\t,wrong_times\n\t\t\t,LAST_PW_MOD_DT\n\t\t\t,ADD_DT\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,COMPANY_ID\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$USERID$$'\n\t\t\t,'$$USERNAME$$'\n\t\t\t,'$$PASSWORD$$'\n\t\t\t,'$$COMPANY$$'\n\t\t\t,'$$DEPID$$'\n\t\t\t,'$$EMAIL$$'\n\t\t\t,'$$TEL1$$'\n\t\t\t,'$$TEL2$$'\n\t\t\t,'$$ISLOCK$$'\n\t\t\t,'$$Pre_1_Password$$'\n\t\t\t,'$$Pre_2_Password$$'\n\t\t\t,'$$Pre_3_Password$$'\n\t\t\t,'$$Active_Date$$'\n\t\t\t,'$$Deadline_Date$$'\n\t\t\t,'$$wrong_times$$'\n\t\t\t,'$$LAST_PW_MOD_DT$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'$$DATA_STATUS$$'\n\t\t\t);/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得主檔資料表新增時的 IDENTITY 流水號，若無自動 IDENTITY，則改為介面傳遞之欄位變數 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\tSELECT @MASTER_IDENT \= SCOPE_IDENTITY();/* 1.2 DATA_CHANGE_LOG for Master Table */\n\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'INSERT'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,@MASTER_IDENT\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'USERS'\n\t\t\t);/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得主檔寫入 DATA_CHANGE_LOG 的 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\tSELECT @MASTER_LOG_IDENT \= SCOPE_IDENTITY();/* 1.3 DATA Detail LOG for Master Table(before modified) */ /* INSERT INTO LOG_USERS /* WITH (ROWLOCK) */ (DATA_CHANGE_LOG_ID,FUNC_ID,CRUD_STATE,USERID,USERNAME,PASSWORD,COMPANY,DEPID,EMAIL,TEL1,TEL2,ISLOCK,Pre_1_Password,Pre_2_Password,Pre_3_Password,Active_Date,Deadline_Date,wrong_times,ADD_DT,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,DATA_STATUS,LAST_PW_MOD_DT) VALUES (@MASTER_LOG_IDENT,'${PARAM_FUNC_ID}','C','$$USERID$$','$$USERNAME$$','$$PASSWORD$$','$$COMPANY$$','$$DEPID$$','$$EMAIL$$','$$TEL1$$','$$TEL2$$','$$ISLOCK$$','$$Pre_1_Password$$','$$Pre_2_Password$$','$$Pre_3_Password$$','$$Active_Date$$','$$Deadline_Date$$','$$wrong_times$$',CONVERT(VARCHAR(20), GETDATE(), 120),'${PARAM_COMPANY}','${PARAM_SOURCE_COMING}','${PARAM_COMPANY}','$$DATA_STATUS$$','$$LAST_PW_MOD_DT$$');*/ /* 1.4 MEM_API_RESULT Action Return */\n\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */ (\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,@MASTER_IDENT\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND;\n\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_ADD'\n\tBEGIN /* 2.1 功能主要異動 DETAIL TABLE */\n\t\tINSERT INTO USERGROUP /* WITH (ROWLOCK) */ (\n\t\t\tUSERID\n\t\t\t,GROUPID\n\t\t\t,ADD_DT\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,COMPANY_ID\n\t\t\t)\n\t\tVALUES (\n\t\t\t@MASTER_IDENT\n\t\t\t,'$$GROUPID$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t);/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得明細檔資料表新增時的 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\tSELECT @DETAIL_IDENT \= CONCAT (\n\t\t\t\t'$$USERID$$'\n\t\t\t\t,','\n\t\t\t\t,'$$GROUPID$$'\n\t\t\t\t);\n\n\t\t/* 2.2 DATA_CHANGE_LOG 資料表 for Detail Table */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'INSERT'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,@DETAIL_IDENT\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'USERGROUP'\n\t\t\t);/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得明細檔寫入 DATA_CHANGE_LOG 的 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\tSELECT @DETAIL_LOG_IDENT \= SCOPE_IDENTITY();/* 2.3 DATA Detail LOG for Detail Table(before modified) */ /* INSERT INTO LOG_USERGROUP /* WITH (ROWLOCK) */ (DATA_CHANGE_LOG_ID,FUNC_ID,CRUD_STATE,USERID,GROUPID,MAIN_SET,ADD_DT,ADD_USER_COMPANY_ID,COMPANY_ID,ADD_USER_ID,DATA_STATUS) VALUES (@DETAIL_LOG_IDENT,'${PARAM_FUNC_ID}','C',@MASTER_IDENT,'$$GROUPID$$','$$MAIN_SET$$',CONVERT(VARCHAR(20), GETDATE(), 120),'${PARAM_COMPANY}','${PARAM_COMPANY}','${PARAM_SOURCE_COMING}','$$DATA_STATUS$$');*/ /* 2.4 MEM_API_RESULT  Action Return */\n\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */ (\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,@DETAIL_IDENT\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND;\n\n\tIF @RETURN_CODE IS NULL\n\tBEGIN\n\t\tSELECT @RETURN_CODE \= RETURN_CODE\n\t\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t\t,@RETURN_TEST \= (\n\t\t\t\tSELECT ProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t,MEMO\n\t\t\t\tFROM MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\t\tFOR JSON AUTO\n\t\t\t\t)\n\t\tFROM MEM_API_RESULT\n\t\tWHERE hashValues \= @FROM_OUTSIDE;\n\tEND;\nEND TRY\n\nBEGIN CATCH\n\tIF @@TRANCOUNT > 0\n\t\tROLLBACK TRANSACTION;\n\n\tBEGIN\n\t\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t\t,@RETURN_TEST \= (\n\t\t\t\tSELECT *\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t\t,@RETURN_KEY_STR AS DATA_UNIQUE_KEY\n\t\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t\t) AS A /* WITH (ROWLOCK) */\n\t\t\t\tFOR JSON AUTO\n\t\t\t\t);\n\tEND;\nEND CATCH;\n
API_Fn06B003_U=/* Last Version\tLast Updated by\t\tLast Updated Date\tComment；v2.2.1\t\t\tSteve\t\t\t\t20200903\t\t\t1. 調整所有關聯鍵值以 Identity 欄位為主。v2.2.1\t\t\tSteve\t\t\t\t20200911\t\t\t1. 取消 IDENT_CURRENT() 使用方式，以 SCOPE_IDENTITY() 為主v2.2.1\t\t\tSteve\t\t\t\t20200915\t\t\t1. BEGIN CATCH 增加 IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION; 敘述；v2.2.1\t\t\tSteve\t\t\t\t20201016\t\t\t1. 增加執行異常回傳業務邏輯鍵值設定敘述；2. DATA_UNIQUE_KEY 使用@RETURN_KEY_STR變數；*//*適用情境：1. 僅主檔修改、明細檔1與明細檔1新增、刪除、修改。*//*填寫業務邏輯鍵值欄位名稱變數，例：'$$COLUMN1$$,$$COLUMN2$$,...'*/\nSELECT @RETURN_KEY_STR \= '$$USERID$$';\n\nBEGIN TRY\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN /*DATA_STATUS 可異動條件修正，「暫存」、「退回」、空白*/\n\t\tIF EXISTS (\n\t\t\t\t/*以主檔的 DATA_STATUS 判斷是否可異動*/ SELECT *\n\t\t\t\tFROM USERS WITH (NOLOCK)\n\t\t\t\tWHERE USERID \= '$$USERID$$'\n\t\t\t\t\tAND ISNULL(DATA_STATUS, '0') IN (\n\t\t\t\t\t\tSELECT CODE_VALUE\n\t\t\t\t\t\tFROM JH_REF_CODE_DETAIL WITH (NOLOCK)\n\t\t\t\t\t\tWHERE DISABLE_YN \= 'N'\n\t\t\t\t\t\t\tAND CODE_TYPE \= 'DATA_STATUS'\n\t\t\t\t\t\t\tAND APPLY_VARCHAR_01 \= 'Y'\n\t\t\t\t\t\t)\n\t\t\t\t)\n\t\tBEGIN /* 1.1 DATA_CHANGE_LOG for Master Table */\n\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\tFUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t,ADD_USER_ID\n\t\t\t\t,ADD_DT\n\t\t\t\t,SessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,PROC_TARGET\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t,'UPDATE'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'$$USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得主檔資料表 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'USERS'\n\t\t\t\t);/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得主檔寫入 DATA_CHANGE_LOG 的 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\t\tSELECT @MASTER_LOG_IDENT \= SCOPE_IDENTITY();\n\t\t\t\n\t\t\t/* 1.2 DATA Detail LOG for Master Table(before modified) */ /* INSERT INTO LOG_USERS(DATA_CHANGE_LOG_ID,FUNC_ID,CRUD_STATE,USERID,USERNAME,PASSWORD,COMPANY,DEPID,EMAIL,TEL1,TEL2,ISLOCK,Pre_1_Password,Pre_2_Password,Pre_3_Password,Active_Date,Deadline_Date,wrong_times,DEL_DT,DEL_USER_COMPANY_ID,DEL_USER_ID,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,ADD_DT,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,DATA_STATUS,LAST_MOD_DT,LAST_PW_MOD_DT) SELECT @MASTER_LOG_IDENT,'${PARAM_FUNC_ID}','U',USERID,USERNAME,PASSWORD,COMPANY,DEPID,EMAIL,TEL1,TEL2,ISLOCK,Pre_1_Password,Pre_2_Password,Pre_3_Password,Active_Date,Deadline_Date,wrong_times,DEL_DT,DEL_USER_COMPANY_ID,DEL_USER_ID,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,ADD_DT,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,DATA_STATUS,LAST_MOD_DT,LAST_PW_MOD_DT FROM USERS  WITH  (NOLOCK)  WHERE USERID \= '$$USERID$$';*/ /* 1.3 功能主要異動 Table (Master Table) */\n\n\t\t\tUPDATE USERS\n\t\t\tWITH (ROWLOCK)\n\n\t\t\tSET USERID \= (\n\t\t\t\t\tCASE \n\t\t\t\t\t\tWHEN SUBSTRING('$$USERID$$', 1, 20) \= SUBSTRING('\#NO_DATA\#', 1, 20)\n\t\t\t\t\t\t\tTHEN USERID\n\t\t\t\t\t\tELSE SUBSTRING('$$USERID$$', 1, 20)\n\t\t\t\t\t\tEND\n\t\t\t\t\t)\n\t\t\t\t,USERNAME \= (\n\t\t\t\t\tCASE \n\t\t\t\t\t\tWHEN SUBSTRING(N'$$USERNAME$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\tTHEN USERNAME\n\t\t\t\t\t\tELSE SUBSTRING(N'$$USERNAME$$', 1, 50)\n\t\t\t\t\t\tEND\n\t\t\t\t\t)\n\t\t\t\t,DEPID \= (\n\t\t\t\t\tCASE \n\t\t\t\t\t\tWHEN SUBSTRING('$$DEPID$$', 1, 20) \= SUBSTRING('\#NO_DATA\#', 1, 20)\n\t\t\t\t\t\t\tTHEN DEPID\n\t\t\t\t\t\tELSE SUBSTRING('$$DEPID$$', 1, 20)\n\t\t\t\t\t\tEND\n\t\t\t\t\t)\n\t\t\t\t,EMAIL \= (\n\t\t\t\t\tCASE \n\t\t\t\t\t\tWHEN SUBSTRING('$$EMAIL$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\tTHEN EMAIL\n\t\t\t\t\t\tELSE SUBSTRING('$$EMAIL$$', 1, 50)\n\t\t\t\t\t\tEND\n\t\t\t\t\t)\n\t\t\t\t,TEL1 \= (\n\t\t\t\t\tCASE \n\t\t\t\t\t\tWHEN SUBSTRING('$$TEL1$$', 1, 20) \= SUBSTRING('\#NO_DATA\#', 1, 20)\n\t\t\t\t\t\t\tTHEN TEL1\n\t\t\t\t\t\tELSE SUBSTRING('$$TEL1$$', 1, 20)\n\t\t\t\t\t\tEND\n\t\t\t\t\t)\n\t\t\t\t,TEL2 \= (\n\t\t\t\t\tCASE \n\t\t\t\t\t\tWHEN SUBSTRING('$$TEL2$$', 1, 20) \= SUBSTRING('\#NO_DATA\#', 1, 20)\n\t\t\t\t\t\t\tTHEN TEL2\n\t\t\t\t\t\tELSE SUBSTRING('$$TEL2$$', 1, 20)\n\t\t\t\t\t\tEND\n\t\t\t\t\t)\n\t\t\t\t,ISLOCK \= (\n\t\t\t\t\tCASE \n\t\t\t\t\t\tWHEN SUBSTRING('$$ISLOCK$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\tTHEN ISLOCK\n\t\t\t\t\t\tELSE SUBSTRING('$$ISLOCK$$', 1, 1)\n\t\t\t\t\t\tEND\n\t\t\t\t\t)\n\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '${PARAM_COMPANY}'\n\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,LAST_PW_MOD_DT \= (\n\t\t\t\t\tCASE \n\t\t\t\t\t\tWHEN ISDATE('$$LAST_PW_MOD_DT$$') \= 1\n\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(LAST_PW_MOD_DT, CONVERT(DATETIME, '', 23)) \= '$$LAST_PW_MOD_DT$$'\n\t\t\t\t\t\t\t\t\t\t\tTHEN LAST_PW_MOD_DT\n\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$LAST_PW_MOD_DT$$')\n\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\tELSE LAST_PW_MOD_DT\n\t\t\t\t\t\tEND\n\t\t\t\t\t)\n\t\t\tWHERE USERID \= '$$USERID$$';\n\t\t\t\n\t\t\t/* 1.4 Action Return */\n\n\t\t\tINSERT INTO MEM_API_RESULT (\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'0'\n\t\t\t\t,'SUCCESS'\n\t\t\t\t,'$$USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得主檔資料表 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'U'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\t\tELSE\n\t\tBEGIN /* 1.5 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT (\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t\t,'$$USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得主檔資料表 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'U'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\tEND\n\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_ADD'\n\tBEGIN /* 2.1 DETAIL TABLE */\n\t\tINSERT INTO USERGROUP (\n\t\t\tUSERID\n\t\t\t,GROUPID\n\t\t\t,ADD_DT\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得主檔資料表新增時的 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,'$$GROUPID$$'\n\t\t\t,'$$MAIN_SET$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'$$DATA_STATUS$$'\n\t\t\t);/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得明細檔資料表新增時的 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\tSELECT @DETAIL_IDENT \= SCOPE_IDENTITY();/* 2.2 DATA_CHANGE_LOG for Detail Table */\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'INSERT'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,@DETAIL_IDENT\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'USERGROUP'\n\t\t\t);/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得明細檔寫入 DATA_CHANGE_LOG 的 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\tSELECT @DETAIL_LOG_IDENT \= SCOPE_IDENTITY();/* 2.3 DATA Detail LOG for Detail Table(before modified) */ /* INSERT INTO LOG_USERGROUP/* WITH (ROWLOCK) */(DATA_CHANGE_LOG_ID,FUNC_ID,CRUD_STATE,USERID,GROUPID,MAIN_SET,ADD_DT,ADD_USER_COMPANY_ID,COMPANY_ID,ADD_USER_ID,DATA_STATUS) VALUES (@DETAIL_LOG_IDENT,'${PARAM_FUNC_ID}','C','$$USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得主檔資料表 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */,'$$GROUPID$$','$$MAIN_SET$$',CONVERT(VARCHAR(20), GETDATE(), 120),'${PARAM_COMPANY}','${PARAM_COMPANY}','${PARAM_SOURCE_COMING}','$$DATA_STATUS$$');*/ /* 2.4 Action Return */\n\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */ (\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,@DETAIL_IDENT\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_DEL'\n\tBEGIN /* 3.1 DATA_CHANGE_LOG for Detail Table */\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'DELETE'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$GROUPID$$' /*  \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得明細檔資料表新增時的 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'USERGROUP'\n\t\t\t);/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得明細檔寫入 DATA_CHANGE_LOG 的 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\tSELECT @DETAIL_LOG_IDENT \= SCOPE_IDENTITY()\n\t\t\n\t\t;/* 3.2 DATA Detail LOG for Detail Table(before modified) */ /* INSERT INTO LOG_USERGROUP(DATA_CHANGE_LOG_ID,FUNC_ID,CRUD_STATE,USERID,GROUPID,MAIN_SET,DEL_DT,ADD_DT,ADD_USER_COMPANY_ID,COMPANY_ID,DEL_USER_COMPANY_ID,LAST_MOD_USER_COMPANY_ID,DEL_USER_ID,ADD_USER_ID,LAST_MOD_DT,DATA_STATUS,LAST_MOD_USER_ID)SELECT  @DETAIL_LOG_IDENT,'${PARAM_FUNC_ID}','D',USERID,GROUPID,MAIN_SET,DEL_DT,ADD_DT,ADD_USER_COMPANY_ID,COMPANY_ID,DEL_USER_COMPANY_ID,LAST_MOD_USER_COMPANY_ID,DEL_USER_ID,ADD_USER_ID,LAST_MOD_DT,DATA_STATUS,LAST_MOD_USER_ID  FROM  USERGROUP  WITH (NOLOCK) WHERE  GROUPID \= '$$GROUPID$$';*/ /* 3.3 DETAIL */\n\n\t\tDELETE USERGROUP /*WITH (ROWLOCK)*/\n\t\tWHERE GROUPID \= '$$GROUPID$$';\n\t\t\n\t\t/* 3.4 Action Return */\n\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */ (\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,'$$GROUPID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#  取得明細檔資料表 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,'D'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_MOD'\n\tBEGIN \n\t\n\t/* 4.1 DATA_CHANGE_LOG for Detail Table */\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'UPDATE'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$GROUPID$$' /*  \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得明細檔資料表新增時的 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'USERGROUP'\n\t\t\t);/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得明細檔寫入 DATA_CHANGE_LOG 的 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\tSELECT @DETAIL_LOG_IDENT \= SCOPE_IDENTITY();\n\t\t\n\t\t/* 4.2 DATA Detail LOG for Detail Table(before modified) */ /* INSERT INTO LOG_USERGROUP(DATA_CHANGE_LOG_ID,FUNC_ID,CRUD_STATE,USERID,GROUPID,MAIN_SET,DEL_DT,ADD_DT,ADD_USER_COMPANY_ID,COMPANY_ID,DEL_USER_COMPANY_ID,LAST_MOD_USER_COMPANY_ID,DEL_USER_ID,ADD_USER_ID,LAST_MOD_DT,DATA_STATUS,LAST_MOD_USER_ID)SELECT  @DETAIL_LOG_IDENT,'${PARAM_FUNC_ID}','U',USERID,GROUPID,MAIN_SET,DEL_DT,ADD_DT,ADD_USER_COMPANY_ID,COMPANY_ID,DEL_USER_COMPANY_ID,LAST_MOD_USER_COMPANY_ID,DEL_USER_ID,ADD_USER_ID,LAST_MOD_DT,DATA_STATUS,LAST_MOD_USER_ID  FROM  USERGROUP  WITH (NOLOCK) WHERE  GROUPID \= '$$GROUPID$$';*/ /* 4.3 Detail Table */\n\n\t\tUPDATE USERGROUP\n\t\tWITH (ROWLOCK)\n\n\t\tSET USERID \= (\n\t\t\t\tCASE \n\t\t\t\t\tWHEN SUBSTRING('$$USERID$$', 1, 20) \= SUBSTRING('\#NO_DATA\#', 1, 20)\n\t\t\t\t\t\tTHEN USERID\n\t\t\t\t\tELSE SUBSTRING('$$USERID$$', 1, 20)\n\t\t\t\t\tEND\n\t\t\t\t)\n\t\t\t,GROUPID \= (\n\t\t\t\tCASE \n\t\t\t\t\tWHEN SUBSTRING('$$GROUPID$$', 1, 20) \= SUBSTRING('\#NO_DATA\#', 1, 20)\n\t\t\t\t\t\tTHEN GROUPID\n\t\t\t\t\tELSE SUBSTRING('$$GROUPID$$', 1, 20)\n\t\t\t\t\tEND\n\t\t\t\t)\n\t\t\t,LAST_MOD_USER_COMPANY_ID \= '${PARAM_COMPANY}'\n\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\tWHERE GROUPID \= '$$GROUPID$$';\n\t\t\n\t\t/* 4.4 Action Return for Detail Table */\n\n\t\tINSERT INTO MEM_API_RESULT (\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,'$$GROUPID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得明細檔資料表 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,'U'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\n\tIF @RETURN_CODE IS NULL\n\tBEGIN\n\t\tSELECT @RETURN_CODE \= RETURN_CODE\n\t\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t\t,@RETURN_TEST \= (\n\t\t\t\tSELECT ProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t,MEMO\n\t\t\t\tFROM MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\t\tFOR JSON AUTO\n\t\t\t\t)\n\t\tFROM MEM_API_RESULT\n\t\tWHERE hashValues \= @FROM_OUTSIDE;\n\tEND;\nEND TRY\n\nBEGIN CATCH\n\tIF @@TRANCOUNT > 0\n\t\tROLLBACK TRANSACTION;\n\n\tBEGIN\n\t\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t\t,@RETURN_TEST \= (\n\t\t\t\tSELECT *\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t\t,@RETURN_KEY_STR AS DATA_UNIQUE_KEY\n\t\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t\t) AS A /* WITH (ROWLOCK) */\n\t\t\t\tFOR JSON AUTO\n\t\t\t\t);\n\tEND;\nEND CATCH;\n
API_Fn06G004_CD=SELECT *,\n\n  (SELECT COUNT(*)\n   FROM TASK_FLOW_MASTER) AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY TASK_NAME DESC) AS RowNum,\n\t\t\t\t\t\t\tTASK_ID,\n                            TASK_NAME\n   FROM TASK_FLOW_MASTER) AS new1\n
API_FN08A001_Q_EVL=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM (\n\t\t\tSELECT AIMSEVLFLAGNAME\n\t\t\tFROM INV_RPT_FN08A001_EVLDETAIL\n\t\t\tGROUP BY AIMSEVLFLAGNAME\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'AIMSEVLFLAGNAME'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSEVLFLAGNAME\n\t\t\t) AS RowNum\n\t\t,AIMSEVLFLAGNAME\n\tFROM INV_RPT_FN08A001_EVLDETAIL\n\tGROUP BY AIMSEVLFLAGNAME\n\t) AS new1\nWHERE RowNum > \= $$start$$\n\tAND RowNum < ($$start$$ + $$limit$$);\n
API_FN08A001_Q_TYPE=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM (\n\t\t\tSELECT AIMSTYPE\n\t\t\tFROM INV_RPT_FN08A001_EVLDETAIL\n\t\t\tGROUP BY AIMSTYPE\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'AIMSTYPE'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSTYPE\n\t\t\t) AS RowNum\n\t\t,AIMSTYPE\n\tFROM INV_RPT_FN08A001_EVLDETAIL\n\tGROUP BY AIMSTYPE\n\t) AS new1\nWHERE RowNum > \= $$start$$\n\tAND RowNum < ($$start$$ + $$limit$$);\n
API_FN08A001_Q_YMD=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT CONVERT(CHAR(6), BASEEVADATE, 112) YMD\n\t\t\tFROM INV_RPT_FN08A001_EVLDETAIL\n\t\t\tGROUP BY CONVERT(CHAR(6), BASEEVADATE, 112)\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY CONVERT(CHAR(6), BASEEVADATE, 112) DESC\n\t\t\t) AS RowNum\n\t\t,CONVERT(CHAR(6), BASEEVADATE, 112) YMD\n\tFROM INV_RPT_FN08A001_EVLDETAIL\n\tGROUP BY CONVERT(CHAR(6), BASEEVADATE, 112)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN08A002_CMPY=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT AIMSCMPY\n\t\t\tFROM INV_RPT_FN08A002_AIMS\n\t\t\tWHERE AIMSCMPY LIKE '%$$query$$%'\n\t\t\tGROUP BY AIMSCMPY\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSCMPY\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT AIMSCMPY\n\t\tFROM INV_RPT_FN08A002_AIMS\n\t\tWHERE AIMSCMPY LIKE '%$$query$$%'\n\t\tGROUP BY AIMSCMPY\n\t\t) A\n\t) AS new1\n
API_FN08A002_Q_YMD=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT CONVERT(CHAR(6), BASEEVADATE, 112) AS YMD\n\t\t\tFROM INV_RPT_FN08A002_AIMS\n\t\t\tGROUP BY CONVERT(CHAR(6), BASEEVADATE, 112)\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY CONVERT(CHAR(6), BASEEVADATE, 112) DESC\n\t\t\t) AS RowNum\n\t\t,CONVERT(CHAR(6), BASEEVADATE, 112) AS YMD\n\tFROM INV_RPT_FN08A002_AIMS\n\tGROUP BY CONVERT(CHAR(6), BASEEVADATE, 112)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN08A003_CMPY=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT AIMSCMPY\n\t\t\tFROM INV_HIS_FUND_AIMS\n\t\t\tWHERE AIMSCMPY LIKE '%$$query$$%'\n\t\t\t\tAND AIMSEVLFLAG IN (\n\t\t\t\t\t'2'\n\t\t\t\t\t,'4'\n\t\t\t\t\t)\n\t\t\t\tAND AOID \= 'root'\n\t\t\tGROUP BY AIMSCMPY\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSCMPY\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT AIMSCMPY\n\t\tFROM INV_HIS_FUND_AIMS\n\t\tWHERE AIMSCMPY LIKE '%$$query$$%'\n\t\t\tAND AIMSEVLFLAG IN (\n\t\t\t\t'2'\n\t\t\t\t,'4'\n\t\t\t\t)\n\t\t\tAND AOID \= 'root'\n\t\tGROUP BY AIMSCMPY\n\t\t) A\n\t) AS new1\n
API_FN08A003_Q_YMD=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT CONVERT(CHAR(6), BASEEVADATE, 112) YMD\n\t\t\tFROM INV_HIS_FUND_AIMS\n\t\t\tGROUP BY CONVERT(CHAR(6), BASEEVADATE, 112)\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY CONVERT(CHAR(6), BASEEVADATE, 112) DESC\n\t\t\t) AS RowNum\n\t\t,CONVERT(CHAR(6), BASEEVADATE, 112) YMD\n\tFROM INV_HIS_FUND_AIMS\n\tGROUP BY CONVERT(CHAR(6), BASEEVADATE, 112)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN08A004_CMPY=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT AIMSCMPY\n\t\t\tFROM INV_RPT_FN08A004_AIMSBCODE\n\t\t\tWHERE AIMSCMPY LIKE '%$$query$$%'\n\t\t\tGROUP BY AIMSCMPY\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSCMPY\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT AIMSCMPY\n\t\tFROM INV_RPT_FN08A004_AIMSBCODE\n\t\tWHERE AIMSCMPY LIKE '%$$query$$%'\n\t\tGROUP BY AIMSCMPY\n\t\t) A\n\t) AS new1\n
API_FN08A004_Q_BCODE=SELECT *\n\t,(\n\t\tSELECT COUNT(*) + 1\n\t\tFROM (\n\t\t\tSELECT BCODE\n\t\t\tFROM INV_RPT_FN08A004_AIMSBCODE\n\t\t\tGROUP BY BCODE\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT '0' AS RowNum\n\t\t,'ALL' AS 'BCODE'\n\t\n\tUNION ALL\n\t\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY BCODE\n\t\t\t) AS RowNum\n\t\t,BCODE\n\tFROM INV_RPT_FN08A004_AIMSBCODE\n\tGROUP BY BCODE\n\t) AS new1\nWHERE RowNum > \= $$start$$\n\tAND RowNum < ($$start$$ + $$limit$$);\n
API_FN08A004_Q_YMD=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT CONVERT(CHAR(6), BASEEVADATE, 112) YMD\n\t\t\tFROM INV_RPT_FN08A004_AIMSBCODE\n\t\t\tGROUP BY CONVERT(CHAR(6), BASEEVADATE, 112)\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY CONVERT(CHAR(6), BASEEVADATE, 112) DESC\n\t\t\t) AS RowNum\n\t\t,CONVERT(CHAR(6), BASEEVADATE, 112) YMD\n\tFROM INV_RPT_FN08A004_AIMSBCODE\n\tGROUP BY CONVERT(CHAR(6), BASEEVADATE, 112)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN08A005_CMPY=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT AIMSCMPY\n\t\t\tFROM INV_RPT_FN08A005_UNSTKSU\n\t\t\tWHERE AIMSCMPY LIKE '%$$query$$%'\n\t\t\tGROUP BY AIMSCMPY\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY AIMSCMPY\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT AIMSCMPY\n\t\tFROM INV_RPT_FN08A005_UNSTKSU\n\t\tWHERE AIMSCMPY LIKE '%$$query$$%'\n\t\tGROUP BY AIMSCMPY\n\t\t) A\n\t) AS new1\n
API_FN08A005_Q_YMD=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT FUNDYEAR\n\t\t\tFROM INV_RPT_FN08A005_UNSTKSU\n\t\t\tGROUP BY FUNDYEAR\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY FUNDYEAR DESC\n\t\t\t) AS RowNum\n\t\t,FUNDYEAR\n\tFROM INV_RPT_FN08A005_UNSTKSU\n\tGROUP BY FUNDYEAR\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN08A006_Q_CONFIG=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM INV_SYS_CONFIG\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY DATA_YMD DESC\n\t\t\t) AS RowNum\n\t\t,DATA_YMD\n\t\t,LEFT(DATA_YMD, 6) AS 'DATA_YM'\n\tFROM INV_SYS_CONFIG\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN08A006_Q_RPTLIST=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM JOB_REG\n\t\tWHERE FILE_TYPE \= 7\n\t\t\tAND JOB_NAME LIKE '%Fn08A006%'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PARAM_REPORT_NAME\n\t\t\t) AS RowNum\n\t\t,JOB_ID\n\t\t,PARAM_REPORT_NAME\n\t\t,PARAM_SHEET1\n\t\t,PARAM_START_CELL1\n\t\t,PARAM_SHEET2\n\t\t,PARAM_START_CELL2\n\t\t,PARAM_SHEET3\n\t\t,PARAM_START_CELL3\n\t\t,PARAM_SHEET4\n\t\t,PARAM_START_CELL4\n\t\t,PARAM_SHEET5\n\t\t,PARAM_START_CELL5\n\t\t,PARAM_SHEET6\n\t\t,PARAM_START_CELL6\n\t\t,PARAM_SHEET7\n\t\t,PARAM_START_CELL7\n\t\t,PARAM_SHEET8\n\t\t,PARAM_START_CELL8\n\t\t,PARAM_SHEET9\n\t\t,PARAM_START_CELL9\n\t\t,PARAM_SHEET10\n\t\t,PARAM_START_CELL10\n\t\t,PARAM_SHEET11\n\t\t,PARAM_START_CELL11\n\t\t,PARAM_SHEET12\n\t\t,PARAM_START_CELL12\n\t\t,PARAM_SHEET13\n\t\t,PARAM_START_CELL13\n\t\t,PARAM_SHEET14\n\t\t,PARAM_START_CELL14\n\t\t,BASEEVADATE\n\tFROM (\n\t\tSELECT JOB_ID\n\t\t\t,PARAM_KEY\n\t\t\t,PARAM_VAL\n\t\tFROM JOB_PARAM\n\t\tWHERE JOB_ID IN (\n\t\t\t\t645\n\t\t\t\t,649\n\t\t\t\t,650\n\t\t\t\t,648\n\t\t\t\t,646\n\t\t\t\t,651\n\t\t\t\t,652\n\t\t\t\t)\n\t\t\tAND IO_TYPE \= 1\n\t\t\tAND PARAM_TYPE \= 1\n\t\t) A\n\tpivot(max(PARAM_VAL) FOR PARAM_KEY IN (\n\t\t\t\t[PARAM_REPORT_NAME]\n\t\t\t\t,[PARAM_SHEET1]\n\t\t\t\t,[PARAM_START_CELL1]\n\t\t\t\t,[PARAM_SHEET2]\n\t\t\t\t,[PARAM_START_CELL2]\n\t\t\t\t,[PARAM_SHEET3]\n\t\t\t\t,[PARAM_START_CELL3]\n\t\t\t\t,[PARAM_SHEET4]\n\t\t\t\t,[PARAM_START_CELL4]\n\t\t\t\t,[PARAM_SHEET5]\n\t\t\t\t,[PARAM_START_CELL5]\n\t\t\t\t,[PARAM_SHEET6]\n\t\t\t\t,[PARAM_START_CELL6]\n\t\t\t\t,[PARAM_SHEET7]\n\t\t\t\t,[PARAM_START_CELL7]\n\t\t\t\t,[PARAM_SHEET8]\n\t\t\t\t,[PARAM_START_CELL8]\n\t\t\t\t,[PARAM_SHEET9]\n\t\t\t\t,[PARAM_START_CELL9]\n\t\t\t\t,[PARAM_SHEET10]\n\t\t\t\t,[PARAM_START_CELL10]\n\t\t\t\t,[PARAM_SHEET11]\n\t\t\t\t,[PARAM_START_CELL11]\n\t\t\t\t,[PARAM_SHEET12]\n\t\t\t\t,[PARAM_START_CELL12]\n\t\t\t\t,[PARAM_SHEET13]\n\t\t\t\t,[PARAM_START_CELL13]\n\t\t\t\t,[PARAM_SHEET14]\n\t\t\t\t,[PARAM_START_CELL14]\n\t\t\t\t,[BASEEVADATE]\n\t\t\t\t)) AS pivottable\n\t) AS new1\n
API_FN08A007_Q_DS=IF '$$Radio_choiceSQL$$' \= 'AIMSTYPE'\nBEGIN\n\tSELECT *\n\t\t,(\n\t\t\tSELECT COUNT(*)\n\t\t\tFROM (\n\t\t\t\tSELECT CONVERT(VARCHAR(50), (\n\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\tWHEN REPORT_ORDER \= 999\n\t\t\t\t\t\t\t\t\tTHEN '小計'\n\t\t\t\t\t\t\t\tWHEN REPORT_ORDER \= 9999\n\t\t\t\t\t\t\t\t\tTHEN '總計'\n\t\t\t\t\t\t\t\tELSE CONVERT(VARCHAR(50), (REPORT_ORDER))\n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t)) AS 'ROWID'\n\t\t\t\t\t,AIMSID\n\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t,STKNO\n\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t,'123' AS FUNDINVENTORY\n\t\t\t\t\t,TRANSTWD\n\t\t\t\t\t,EQUITY_OWN_MIN\n\t\t\t\t\t,EQUITY_OWN_MAX\n\t\t\t\t\t,FV\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\t\t\tPARTITION BY S1.AIMSTYPE ORDER BY (EQUITY_OWN_MAX - EQUITY_OWN_MIN) DESC\n\t\t\t\t\t\t\t) AS REPORT_ORDER\n\t\t\t\t\t\t,CONVERT(VARCHAR(50), ROW_NUMBER() OVER (\n\t\t\t\t\t\t\t\tPARTITION BY S1.AIMSTYPE ORDER BY (EQUITY_OWN_MAX - EQUITY_OWN_MIN) DESC\n\t\t\t\t\t\t\t\t)) AS 'ROWID'\n\t\t\t\t\t\t,S1.AIMSID\n\t\t\t\t\t\t,S1.AIMSCMPY\n\t\t\t\t\t\t,S1.STKNO\n\t\t\t\t\t\t,S1.AIMSTYPE\n\t\t\t\t\t\t,S1.FUNDINVENTORY\n\t\t\t\t\t\t,S1.TRANSTWD\n\t\t\t\t\t\t,EQUITY_OWN_MIN\n\t\t\t\t\t\t,EQUITY_OWN_MAX\n\t\t\t\t\t\t,EQUITY_OWN_MAX - EQUITY_OWN_MIN AS 'FV'\n\t\t\t\t\tFROM (\n\t\t\t\t\t\tSELECT AIMSID\n\t\t\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t\t\t,STKNO\n\t\t\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t\t\t,FUNDINVENTORY\n\t\t\t\t\t\t\t,TRANSTWD\n\t\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\t\t/*WHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) BETWEEN SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_START$$', 112)), 1, 6) AND SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)*/\n\t\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)\n\t\t\t\t\t\tGROUP BY AIMSID\n\t\t\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t\t\t,STKNO\n\t\t\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t\t\t,FUNDINVENTORY\n\t\t\t\t\t\t\t,TRANSTWD\n\t\t\t\t\t\t) S1\n\t\t\t\t\tLEFT JOIN (\n\t\t\t\t\t\tSELECT BASEEVADATE\n\t\t\t\t\t\t\t,AIMSID\n\t\t\t\t\t\t\t,CLOSEPRICE_MON AS 'CLOSEPRICE_MON_MIN'\n\t\t\t\t\t\t\t,EQUITY_OWN AS 'EQUITY_OWN_MIN'\n\t\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_START$$', 112)), 1, 6)\n\t\t\t\t\t\t) S2 ON S1.AIMSID \= S2.AIMSID\n\t\t\t\t\tLEFT JOIN (\n\t\t\t\t\t\tSELECT BASEEVADATE\n\t\t\t\t\t\t\t,AIMSID\n\t\t\t\t\t\t\t,CLOSEPRICE_MON AS 'CLOSEPRICE_MON_MAX'\n\t\t\t\t\t\t\t,EQUITY_OWN AS 'EQUITY_OWN_MAX'\n\t\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)\n\t\t\t\t\t\t) S3 ON S1.AIMSID \= S3.AIMSID\n\t\t\t\t\t\n\t\t\t\t\tUNION ALL\n\t\t\t\t\t\n\t\t\t\t\tSELECT CASE \n\t\t\t\t\t\t\tWHEN AIMSTYPE IS NOT NULL\n\t\t\t\t\t\t\t\tTHEN '999'\n\t\t\t\t\t\t\tELSE '9999'\n\t\t\t\t\t\t\tEND AS 'REPORT_ORDER'\n\t\t\t\t\t\t,CASE \n\t\t\t\t\t\t\tWHEN (\n\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\tWHEN AIMSTYPE IS NOT NULL\n\t\t\t\t\t\t\t\t\t\t\tTHEN '999'\n\t\t\t\t\t\t\t\t\t\tELSE '9999'\n\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t) \= '999'\n\t\t\t\t\t\t\t\tTHEN '小計'\n\t\t\t\t\t\t\tELSE '總計'\n\t\t\t\t\t\t\tEND AS 'ROWID'\n\t\t\t\t\t\t,NULL AS 'S1.AIMSID'\n\t\t\t\t\t\t,NULL AS 'S1.AIMSCMPY'\n\t\t\t\t\t\t,NULL AS 'S1.STKNO'\n\t\t\t\t\t\t,AIMSTYPE AS 'S1.AIMSTYPE'\n\t\t\t\t\t\t,NULL AS 'S1.FUNDINVENTORY'\n\t\t\t\t\t\t,SUM(S1.TRANSTWD)\n\t\t\t\t\t\t,NULL AS 'EQUITY_OWN_MIN'\n\t\t\t\t\t\t,NULL AS 'EQUITY_OWN_MAX'\n\t\t\t\t\t\t,NULL AS 'FV'\n\t\t\t\t\tFROM (\n\t\t\t\t\t\tSELECT AIMSID\n\t\t\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t\t\t,STKNO\n\t\t\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t\t\t,FUNDINVENTORY\n\t\t\t\t\t\t\t,TRANSTWD\n\t\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\t\t/*WHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) BETWEEN SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_START$$', 112)), 1, 6) AND SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)*/\n\t\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)\n\t\t\t\t\t\tGROUP BY AIMSID\n\t\t\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t\t\t,STKNO\n\t\t\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t\t\t,FUNDINVENTORY\n\t\t\t\t\t\t\t,TRANSTWD\n\t\t\t\t\t\t) S1\n\t\t\t\t\tLEFT JOIN (\n\t\t\t\t\t\tSELECT BASEEVADATE\n\t\t\t\t\t\t\t,AIMSID\n\t\t\t\t\t\t\t,CLOSEPRICE_MON AS 'CLOSEPRICE_MON_MIN'\n\t\t\t\t\t\t\t,EQUITY_OWN AS 'EQUITY_OWN_MIN'\n\t\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_START$$', 112)), 1, 6)\n\t\t\t\t\t\t) S2 ON S1.AIMSID \= S2.AIMSID\n\t\t\t\t\tLEFT JOIN (\n\t\t\t\t\t\tSELECT BASEEVADATE\n\t\t\t\t\t\t\t,AIMSID\n\t\t\t\t\t\t\t,CLOSEPRICE_MON AS 'CLOSEPRICE_MON_MAX'\n\t\t\t\t\t\t\t,EQUITY_OWN AS 'EQUITY_OWN_MAX'\n\t\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)\n\t\t\t\t\t\t) S3 ON S1.AIMSID \= S3.AIMSID\n\t\t\t\t\tGROUP BY ROLLUP(AIMSTYPE)\n\t\t\t\t\t) A\n\t\t\t\t) AA\n\t\t\t) AS totalProperty\n\tFROM (\n\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\tORDER BY AA.AIMSTYPE DESC\n\t\t\t\t\t,AA.REPORT_ORDER\n\t\t\t\t\t,ROWID\n\t\t\t\t) AS RowNum\n\t\t\t,*\n\t\tFROM (\n\t\t\tSELECT CONVERT(VARCHAR(50), (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN REPORT_ORDER \= 999\n\t\t\t\t\t\t\t\tTHEN '小計'\n\t\t\t\t\t\t\tWHEN REPORT_ORDER \= 9999\n\t\t\t\t\t\t\t\tTHEN '總計'\n\t\t\t\t\t\t\tELSE CONVERT(VARCHAR(50), (REPORT_ORDER))\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)) AS 'ROWID'\n\t\t\t\t,AIMSID\n\t\t\t\t,AIMSCMPY\n\t\t\t\t,STKNO\n\t\t\t\t,AIMSTYPE\n\t\t\t\t,FUNDINVENTORY\n\t\t\t\t,TRANSTWD\n\t\t\t\t,EQUITY_OWN_MIN\n\t\t\t\t,EQUITY_OWN_MAX\n\t\t\t\t,REPORT_ORDER\n\t\t\t\t,FV\n\t\t\tFROM (\n\t\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\t\tPARTITION BY S1.AIMSTYPE ORDER BY (EQUITY_OWN_MAX - EQUITY_OWN_MIN) DESC\n\t\t\t\t\t\t) AS REPORT_ORDER\n\t\t\t\t\t,CONVERT(VARCHAR(50), ROW_NUMBER() OVER (\n\t\t\t\t\t\t\tPARTITION BY S1.AIMSTYPE ORDER BY (EQUITY_OWN_MAX - EQUITY_OWN_MIN) DESC\n\t\t\t\t\t\t\t)) AS 'ROWID'\n\t\t\t\t\t,S1.AIMSID\n\t\t\t\t\t,S1.AIMSCMPY\n\t\t\t\t\t,S1.STKNO\n\t\t\t\t\t,S1.AIMSTYPE\n\t\t\t\t\t,S1.FUNDINVENTORY\n\t\t\t\t\t,S1.TRANSTWD\n\t\t\t\t\t,EQUITY_OWN_MIN\n\t\t\t\t\t,EQUITY_OWN_MAX\n\t\t\t\t\t,EQUITY_OWN_MAX - EQUITY_OWN_MIN AS 'FV'\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT AIMSID\n\t\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t\t,STKNO\n\t\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t\t,FUNDINVENTORY\n\t\t\t\t\t\t,TRANSTWD\n\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\t/*WHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) BETWEEN SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_START$$', 112)), 1, 6) AND SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)*/\n\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)\n\t\t\t\t\tGROUP BY AIMSID\n\t\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t\t,STKNO\n\t\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t\t,FUNDINVENTORY\n\t\t\t\t\t\t,TRANSTWD\n\t\t\t\t\t) S1\n\t\t\t\tLEFT JOIN (\n\t\t\t\t\tSELECT BASEEVADATE\n\t\t\t\t\t\t,AIMSID\n\t\t\t\t\t\t,CLOSEPRICE_MON AS 'CLOSEPRICE_MON_MIN'\n\t\t\t\t\t\t,EQUITY_OWN AS 'EQUITY_OWN_MIN'\n\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_START$$', 112)), 1, 6)\n\t\t\t\t\t) S2 ON S1.AIMSID \= S2.AIMSID\n\t\t\t\tLEFT JOIN (\n\t\t\t\t\tSELECT BASEEVADATE\n\t\t\t\t\t\t,AIMSID\n\t\t\t\t\t\t,CLOSEPRICE_MON AS 'CLOSEPRICE_MON_MAX'\n\t\t\t\t\t\t,EQUITY_OWN AS 'EQUITY_OWN_MAX'\n\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)\n\t\t\t\t\t) S3 ON S1.AIMSID \= S3.AIMSID\n\t\t\t\t\n\t\t\t\tUNION ALL\n\t\t\t\t\n\t\t\t\tSELECT CASE \n\t\t\t\t\t\tWHEN AIMSTYPE IS NOT NULL\n\t\t\t\t\t\t\tTHEN '999'\n\t\t\t\t\t\tELSE '9999'\n\t\t\t\t\t\tEND AS 'REPORT_ORDER'\n\t\t\t\t\t,CASE \n\t\t\t\t\t\tWHEN (\n\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\tWHEN AIMSTYPE IS NOT NULL\n\t\t\t\t\t\t\t\t\t\tTHEN '999'\n\t\t\t\t\t\t\t\t\tELSE '9999'\n\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t) \= '999'\n\t\t\t\t\t\t\tTHEN '小計'\n\t\t\t\t\t\tELSE '總計'\n\t\t\t\t\t\tEND AS 'ROWID'\n\t\t\t\t\t,NULL AS 'S1.AIMSID'\n\t\t\t\t\t,NULL AS 'S1.AIMSCMPY'\n\t\t\t\t\t,NULL AS 'S1.STKNO'\n\t\t\t\t\t,AIMSTYPE AS 'S1.AIMSTYPE'\n\t\t\t\t\t,NULL AS 'S1.FUNDINVENTORY'\n\t\t\t\t\t,SUM(S1.TRANSTWD)\n\t\t\t\t\t,NULL AS 'EQUITY_OWN_MIN'\n\t\t\t\t\t,NULL AS 'EQUITY_OWN_MAX'\n\t\t\t\t\t,NULL AS 'FV'\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT AIMSID\n\t\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t\t,STKNO\n\t\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t\t,FUNDINVENTORY\n\t\t\t\t\t\t,TRANSTWD\n\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\t/*WHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) BETWEEN SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_START$$', 112)), 1, 6) AND SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)*/\n\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)\n\t\t\t\t\tGROUP BY AIMSID\n\t\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t\t,STKNO\n\t\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t\t,FUNDINVENTORY\n\t\t\t\t\t\t,TRANSTWD\n\t\t\t\t\t) S1\n\t\t\t\tLEFT JOIN (\n\t\t\t\t\tSELECT BASEEVADATE\n\t\t\t\t\t\t,AIMSID\n\t\t\t\t\t\t,CLOSEPRICE_MON AS 'CLOSEPRICE_MON_MIN'\n\t\t\t\t\t\t,EQUITY_OWN AS 'EQUITY_OWN_MIN'\n\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_START$$', 112)), 1, 6)\n\t\t\t\t\t) S2 ON S1.AIMSID \= S2.AIMSID\n\t\t\t\tLEFT JOIN (\n\t\t\t\t\tSELECT BASEEVADATE\n\t\t\t\t\t\t,AIMSID\n\t\t\t\t\t\t,CLOSEPRICE_MON AS 'CLOSEPRICE_MON_MAX'\n\t\t\t\t\t\t,EQUITY_OWN AS 'EQUITY_OWN_MAX'\n\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)\n\t\t\t\t\t) S3 ON S1.AIMSID \= S3.AIMSID\n\t\t\t\tGROUP BY ROLLUP(AIMSTYPE)\n\t\t\t\t) A\n\t\t\t) AA\n\t\t) AS new1\nEND\nELSE\nBEGIN\n\tSELECT *\n\t\t,(\n\t\t\tSELECT COUNT(*)\n\t\t\tFROM (\n\t\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\t\tPARTITION BY S1.AIMSTYPE ORDER BY (EQUITY_OWN_MAX - EQUITY_OWN_MIN) DESC\n\t\t\t\t\t\t) AS REPORT_ORDER\n\t\t\t\t\t,S1.AIMSID\n\t\t\t\t\t,S1.AIMSCMPY\n\t\t\t\t\t,S1.STKNO\n\t\t\t\t\t,S1.AIMSTYPE\n\t\t\t\t\t,S1.FUNDINVENTORY\n\t\t\t\t\t,S1.TRANSTWD\n\t\t\t\t\t,EQUITY_OWN_MIN\n\t\t\t\t\t,EQUITY_OWN_MAX\n\t\t\t\t\t,EQUITY_OWN_MAX - EQUITY_OWN_MIN AS 'FV'\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT AIMSID\n\t\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t\t,STKNO\n\t\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t\t,FUNDINVENTORY\n\t\t\t\t\t\t,TRANSTWD\n\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\t/*WHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) BETWEEN SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_START$$', 112)), 1, 6) AND SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)*/\n\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)\n\t\t\t\t\tGROUP BY AIMSID\n\t\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t\t,STKNO\n\t\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t\t,FUNDINVENTORY\n\t\t\t\t\t\t,TRANSTWD\n\t\t\t\t\t) S1\n\t\t\t\tLEFT JOIN (\n\t\t\t\t\tSELECT BASEEVADATE\n\t\t\t\t\t\t,AIMSID\n\t\t\t\t\t\t,CLOSEPRICE_MON AS 'CLOSEPRICE_MON_MIN'\n\t\t\t\t\t\t,EQUITY_OWN AS 'EQUITY_OWN_MIN'\n\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_START$$', 112)), 1, 6)\n\t\t\t\t\t) S2 ON S1.AIMSID \= S2.AIMSID\n\t\t\t\tLEFT JOIN (\n\t\t\t\t\tSELECT BASEEVADATE\n\t\t\t\t\t\t,AIMSID\n\t\t\t\t\t\t,CLOSEPRICE_MON AS 'CLOSEPRICE_MON_MAX'\n\t\t\t\t\t\t,EQUITY_OWN AS 'EQUITY_OWN_MAX'\n\t\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)\n\t\t\t\t\t) S3 ON S1.AIMSID \= S3.AIMSID\n\t\t\t\t) AA\n\t\t\t) AS totalProperty\n\tFROM (\n\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\tORDER BY ((AA.EQUITY_OWN_MAX * AA.FUNDINVENTORY) - (AA.EQUITY_OWN_MIN * AA.FUNDINVENTORY)) DESC\n\t\t\t\t) AS RowNum\n\t\t\t,REPORT_ORDER AS 'ROWID'\n\t\t\t,*\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tPARTITION BY S1.AIMSTYPE ORDER BY (EQUITY_OWN_MAX - EQUITY_OWN_MIN) DESC\n\t\t\t\t\t) AS REPORT_ORDER\n\t\t\t\t,S1.AIMSID\n\t\t\t\t,S1.AIMSCMPY\n\t\t\t\t,S1.STKNO\n\t\t\t\t,S1.AIMSTYPE\n\t\t\t\t,S1.FUNDINVENTORY\n\t\t\t\t,S1.TRANSTWD\n\t\t\t\t,EQUITY_OWN_MIN\n\t\t\t\t,EQUITY_OWN_MAX\n\t\t\t\t,EQUITY_OWN_MAX - EQUITY_OWN_MIN AS 'FV'\n\t\t\tFROM (\n\t\t\t\tSELECT AIMSID\n\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t,STKNO\n\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t,FUNDINVENTORY\n\t\t\t\t\t,TRANSTWD\n\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\t/*WHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) BETWEEN SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_START$$', 112)), 1, 6) AND SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)*/\n\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)\n\t\t\t\tGROUP BY AIMSID\n\t\t\t\t\t,AIMSCMPY\n\t\t\t\t\t,STKNO\n\t\t\t\t\t,AIMSTYPE\n\t\t\t\t\t,FUNDINVENTORY\n\t\t\t\t\t,TRANSTWD\n\t\t\t\t) S1\n\t\t\tLEFT JOIN (\n\t\t\t\tSELECT BASEEVADATE\n\t\t\t\t\t,AIMSID\n\t\t\t\t\t,CLOSEPRICE_MON AS 'CLOSEPRICE_MON_MIN'\n\t\t\t\t\t,EQUITY_OWN AS 'EQUITY_OWN_MIN'\n\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_START$$', 112)), 1, 6)\n\t\t\t\t) S2 ON S1.AIMSID \= S2.AIMSID\n\t\t\tLEFT JOIN (\n\t\t\t\tSELECT BASEEVADATE\n\t\t\t\t\t,AIMSID\n\t\t\t\t\t,CLOSEPRICE_MON AS 'CLOSEPRICE_MON_MAX'\n\t\t\t\t\t,EQUITY_OWN AS 'EQUITY_OWN_MAX'\n\t\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\t\tWHERE SUBSTRING((CONVERT(VARCHAR(50), BASEEVADATE, 112)), 1, 6) \= SUBSTRING((CONVERT(VARCHAR(50), '$$BASEEVADATE_END$$', 112)), 1, 6)\n\t\t\t\t) S3 ON S1.AIMSID \= S3.AIMSID\n\t\t\t) AA\n\t\t) AS new1\nEND\n
API_FN08A007_Q_ENDT=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT DATEADD(DAY, - 1, DATEADD(mm, DATEDIFF(mm, '', BASEEVADATE) + 1, '')) ENDDATE\n\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\tGROUP BY DATEADD(DAY, - 1, DATEADD(mm, DATEDIFF(mm, '', BASEEVADATE) + 1, ''))\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY ENDDATE\n\t\t\t) AS RowNum\n\t\t,CONVERT(VARCHAR(100), ENDDATE, 111) AS 'ENDDATE_DESC'\n\t\t,CONVERT(VARCHAR(100), ENDDATE, 112) AS 'ENDDATE'\n\tFROM (\n\t\tSELECT DATEADD(DAY, - 1, DATEADD(mm, DATEDIFF(mm, '', BASEEVADATE) + 1, '')) ENDDATE\n\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\tGROUP BY DATEADD(DAY, - 1, DATEADD(mm, DATEDIFF(mm, '', BASEEVADATE) + 1, ''))\n\t\t) A\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_FN08A007_Q_STDT=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT DATEADD(DAY, - 1, DATEADD(mm, DATEDIFF(mm, '', BASEEVADATE) + 1, '')) STARTDATE\n\t\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\t\tGROUP BY DATEADD(DAY, - 1, DATEADD(mm, DATEDIFF(mm, '', BASEEVADATE) + 1, ''))\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY STARTDATE\n\t\t\t) AS RowNum\n\t\t,CONVERT(VARCHAR(100), STARTDATE, 111) AS 'STARTDATE_DESC'\n\t\t,CONVERT(VARCHAR(100), STARTDATE, 112) AS 'STARTDATE'\n\tFROM (\n\t\tSELECT DATEADD(DAY, - 1, DATEADD(mm, DATEDIFF(mm, '', BASEEVADATE) + 1, '')) STARTDATE\n\t\tFROM INV_RPT_FN08A006_SUMMARY\n\t\tGROUP BY DATEADD(DAY, - 1, DATEADD(mm, DATEDIFF(mm, '', BASEEVADATE) + 1, ''))\n\t\t) A\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
API_Fn08X001_D1_WIN1=SELECT *\n  ,(\n   SELECT COUNT(*)\n   FROM JH_SIGNON WITH (NOLOCK)\n   WHERE (DATA_STATUS \= '$$DATA_STATUS$$'\n    OR '$$DATA_STATUS$$' \= 'ALL')\n    ) AS totalProperty\n FROM (\n SELECT ROW_NUMBER() OVER (\n    ORDER BY SI.PK_USERID) AS RowNum\n ,CONVERT(VARCHAR,SI.WORK_DATE,23) AS WORK_DATE\n ,ISNULL(SI.WORK_TIME,'9\:00') AS WORK_STIME\n ,ISNULL(SIG.WORK_TIME,'18\:00')  AS WORK_ETIME\n ,CONVERT(VARCHAR,\n (CONVERT(NUMERIC,REPLACE(SUBSTRING(SIG.WORK_TIME,1,2),'\:',''))-CONVERT(NUMERIC,REPLACE(SUBSTRING(SI.WORK_TIME,1,2),'\:','')))+\n ((CONVERT(NUMERIC,REPLACE(SUBSTRING(SIG.WORK_TIME,4,2),'\:',''))-CONVERT(NUMERIC,REPLACE(SUBSTRING(SI.WORK_TIME,4,2),'\:','')))/60)) AS WORK_HOURS\n ,ISNULL((select DAYOFF_NAME from DAYOFFCLASS where SI.work_status \= dayoff_id),'') AS LEAVEREASON\n ,SI.DATA_STATUS --固定欄位必需取出\n ,SI.ADD_USER_ID --固定欄位必需取出\n ,SI.ADD_USER_COMPANY_ID --固定欄位必需取出\n ,SI.ADD_DT --固定欄位必需取出\n ,SI.LAST_MOD_USER_ID --固定欄位必需取出\n ,SI.LAST_MOD_USER_COMPANY_ID --固定欄位必需取出\n ,SI.LAST_MOD_DT --固定欄位必需取出\n ,SI.DEL_USER_ID --固定欄位必需取出\n ,SI.DEL_USER_COMPANY_ID --固定欄位必需取出\n ,SI.DEL_DT --固定欄位必需取出\n FROM JH_SIGNON AS SI WITH (NOLOCK)\n INNER JOIN JH_SIGNON AS SIG\n ON SI.USERID \= SIG.USERID\n AND SI.WORK_DATE \= SIG.WORK_DATE\n WHERE (\n    SI.DATA_STATUS \= '$$DATA_STATUS$$'\n    OR '$$DATA_STATUS$$' \= 'ALL'\n    )\n    AND SI.USERID \= '$$USERID$$'\n    AND SIG.WORK_STATUS \= 'OFE'\n    AND SI.WORK_STATUS \='ONS'\n    AND DATEPART(month,convert(varchar,SIG.WORK_DATE,111))\=DATEPART(month,convert(varchar,getdate(),111))\n    AND SI.WORK_DATE \= SIG.WORK_DATE\n ) AS new1\n WHERE RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$);\n ;
API_Fn09A001_CD_CB1=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM JH_WS02_SCHDL_LIST\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK\n\t\t\t) AS RowNum\n\t\t,PK\n\t\t,SCHDL_ID\n\tFROM JH_WS02_SCHDL_LIST\n\t) AS new1\nWHERE (\n\t\tSCHDL_ID LIKE '%$$SCHDL_ID$$%'\n\t\tOR '$$SCHDL_ID$$' \= 'ALL'\n\t\t)\n
API_Fn09A001_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD' BEGIN INSERT JH_WS02_SCHDL_UX_LIST (SCHDL_ID, SCHDL_API_NAME, SCHDL_START_DATE, SCHDL_FREQUENCY_DATE, SCHDL_STOP_RULE, SCHDL_HELP, ADD_USER_ID, ADD_USER_COMPANY_ID, ADD_DT) VALUES('$$SCHDL_ID$$', '$$SCHDL_API_NAME$$', '$$SCHDL_START_DATE$$', '$$SCHDL_FREQUENCY_DATE$$', '$$SCHDL_STOP_RULE$$', '$$SCHDL_HELP$$', '$$LOGIN_ID$$', '$$COMPANY_ID$$', GETDATE()) INSERT INTO DATA_CHANGE_LOG(SessionID, ProcPK, FUNC_ID, PROC_TYPE, PROC_TARGET, USER_ID, DATA_NO, EVENT_DT, MEMO) VALUES ('NONESID', '26502', '$$FunctionID$$', 'insert', 'JH_WS02_SCHDL_UX_LIST', 'root', IDENT_CURRENT('JH_WS02_SCHDL_UX_LIST'), GETDATE(), '$$MEMO$$'); END; ELSE IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL' BEGIN DELETE JH_WS02_SCHDL_UX_LIST WHERE PK \= '$$PK$$' INSERT INTO DATA_CHANGE_LOG(SessionID, ProcPK, FUNC_ID, PROC_TYPE, PROC_TARGET, USER_ID, DATA_NO, EVENT_DT, MEMO) VALUES ('NONESID', '26502', '$$FunctionID$$', 'delete', 'JH_WS02_SCHDL_UX_LIST', 'root', '$$DATA_NO$$', GETDATE(), '$$MEMO$$'); END;
API_Fn09A001_D1=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM JH_WS02_SCHDL_API_LIST A WITH (NOLOCK)\n\t\tLEFT JOIN JH_WS02_MAIL_TEMPLATE_LIST B ON A.MAIL_T_ID \= B.MAIL_T_ID\n\t\tWHERE A.SCHDL_PK \= '$$PK$$'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY A.PK\n\t\t\t) AS RowNum\n\t\t,A.*\n\t\t,B.MAIL_T_NAME\n\tFROM JH_WS02_SCHDL_API_LIST A WITH (NOLOCK)\n\tLEFT JOIN JH_WS02_MAIL_TEMPLATE_LIST B ON A.MAIL_T_ID \= B.MAIL_T_ID\n\tWHERE A.SCHDL_PK \= '$$PK$$'\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n
API_Fn09A001_D1_C=/*開始點：此語法請填入【API_Fn09A001_D1_C】(JH_WS02_SCHDL_TASK)(D1_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR varchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING varchar(50),@vPARAM_COMPANY varchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$TK_NAME$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='C';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n \n\t\t/*D1 TABLE 新增*/\n\t\tINSERT INTO JH_WS02_SCHDL_TASK("SG_PK","TK_NAME","TK_TYPE","TK_HELP","TK_ABORT","TK_PAUSE","TK_SUCCEED_MAIL","TK_FAIL_MAIL","COMPANY_ID","ADD_USER_ID","ADD_USER_COMPANY_ID","ADD_DT","DATA_STATUS")\n\t\tVALUES (ISNULL(@vMASTER_PK ,'$$PK$$'),N'$$TK_NAME$$',N'$$TK_TYPE$$',N'$$TK_HELP$$',N'$$TK_ABORT$$',N'$$TK_PAUSE$$',N'$$TK_SUCCEED_MAIL$$',N'$$TK_FAIL_MAIL$$',@vPARAM_COMPANY,@vPARAM_SOURCE_COMING,@vPARAM_COMPANY,CONVERT(nvarchar,GETDATE(),120),N'$$DATA_STATUS$$')\n\t\tSET @vPK \=CAST(SCOPE_IDENTITY() AS VARCHAR(200))\n\n\t\t/*D1-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'INSERT',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'JH_WS02_SCHDL_TASK' , @i_LOG_IDENT OUTPUT, 'D1'\n \n\t\t/*D1-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'C',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn09A001_D1_C】(JH_WS02_SCHDL_TASK)(D1_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_Fn09A001_D1_D=/*開始點：此語法請填入【API_Fn09A001_D1_D】(JH_WS02_SCHDL_TASK)(D1_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR varchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING varchar(50),@vPARAM_COMPANY varchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\='$$PK$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='D';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'JH_WS02_SCHDL_TASK', 'PK','int', @vPK \n \n\t\t/*D1-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'DELETE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'JH_WS02_SCHDL_TASK' , @i_LOG_IDENT OUTPUT, 'D1'\n \n\t\t/*D1-刪除主檔及明細資料檔*/\n\t\tDELETE JH_WS02_SCHDL_TASK  WHERE PK\=@vPK;\n \n\t\t/*D1-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'D',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn09A001_D1_D】(JH_WS02_SCHDL_TASK)(D1_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_Fn09A001_D1_U=/*開始點：此語法請填入【API_Fn09A001_D1_U】(JH_WS02_SCHDL_TASK)(D1_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR varchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING varchar(50),@vPARAM_COMPANY varchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\='$$TK_NAME$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='U';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'JH_WS02_SCHDL_TASK', 'PK','int', @vPK \n \n\t\t/*D1-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'UPDATE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'JH_WS02_SCHDL_TASK' , @i_LOG_IDENT OUTPUT, 'D1'\n \n\t\t/*-修改D1 TABLE*/\n\t\tUPDATE JH_WS02_SCHDL_TASK SET\n\t\t"TK_NAME"\= CASE WHEN '$$TK_NAME$$'\='\#NO_DATA\#'  THEN "TK_NAME" ELSE N'$$TK_NAME$$' END\n\t\t,"TK_TYPE"\= CASE WHEN '$$TK_TYPE$$'\='\#NO_DATA\#'  THEN "TK_TYPE" ELSE N'$$TK_TYPE$$' END\n\t\t,"TK_HELP"\= CASE WHEN '$$TK_HELP$$'\='\#NO_DATA\#'  THEN "TK_HELP" ELSE N'$$TK_HELP$$' END\n\t\t,"TK_ABORT"\= CASE WHEN '$$TK_ABORT$$'\='\#NO_DATA\#'  THEN "TK_ABORT" ELSE N'$$TK_ABORT$$' END\n\t\t,"TK_PAUSE"\= CASE WHEN '$$TK_PAUSE$$'\='\#NO_DATA\#'  THEN "TK_PAUSE" ELSE N'$$TK_PAUSE$$' END\n\t\t,"TK_SUCCEED_MAIL"\= CASE WHEN '$$TK_SUCCEED_MAIL$$'\='\#NO_DATA\#'  THEN "TK_SUCCEED_MAIL" ELSE N'$$TK_SUCCEED_MAIL$$' END\n\t\t,"TK_FAIL_MAIL"\= CASE WHEN '$$TK_FAIL_MAIL$$'\='\#NO_DATA\#'  THEN "TK_FAIL_MAIL" ELSE N'$$TK_FAIL_MAIL$$' END\n\t\t,"COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"LAST_MOD_USER_ID"\= @vPARAM_SOURCE_COMING\n\t\t,"LAST_MOD_USER_COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"LAST_MOD_DT"\= CONVERT(nvarchar,GETDATE(),120)\n\t\t,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE N'$$DATA_STATUS$$' END\n\t\tWHERE PK\=@vPK;\n \n\t\t/*D1-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'U',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn09A001_D1_U】(JH_WS02_SCHDL_TASK)(D1_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_Fn09A001_D1_WIN_CB1=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT PK\n\t\t\t\t,FLOW_ID AS 'API_NAME'\n\t\t\tFROM JH_WS02_FLOW_LIST\n\t\t\tWHERE (\n\t\t\t\t\tFLOW_ID LIKE '%$$API_NAME$$%'\n\t\t\t\t\tOR '$$API_NAME$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\tAND '$$API_TYPE$$' \= 'FLOW'\n\t\t\t\n\t\t\tUNION ALL\n\t\t\t\n\t\t\tSELECT PK\n\t\t\t\t,CODE_ID AS 'API_NAME'\n\t\t\tFROM JH_WS02_CODE_LIST\n\t\t\tWHERE (\n\t\t\t\t\tCODE_ID LIKE '%$$API_NAME$$%'\n\t\t\t\t\tOR '$$API_NAME$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\tAND '$$API_TYPE$$' \= 'CODE'\n\t\t\t) M\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK\n\t\t\t) AS RowNum\n\t\t,PK\n\t\t,API_NAME\n\tFROM (\n\t\tSELECT PK\n\t\t\t,FLOW_ID AS 'API_NAME'\n\t\tFROM JH_WS02_FLOW_LIST\n\t\tWHERE (\n\t\t\t\tFLOW_ID LIKE '%$$API_NAME$$%'\n\t\t\t\tOR '$$API_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND '$$API_TYPE$$' \= 'FLOW'\n\t\t\n\t\tUNION ALL\n\t\t\n\t\tSELECT PK\n\t\t\t,CODE_ID AS 'API_NAME'\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE (\n\t\t\t\tCODE_ID LIKE '%$$API_NAME$$%'\n\t\t\t\tOR '$$API_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND '$$API_TYPE$$' \= 'CODE'\n\t\t) M\n\t) AS new1\n
API_Fn09A001_D1_WIN_CB2=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM JH_WS02_MAIL_TEMPLATE_LIST\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK\n\t\t\t) AS RowNum\n\t\t,PK\n\t\t,MAIL_T_ID\n\t\t,MAIL_T_NAME\n\tFROM JH_WS02_MAIL_TEMPLATE_LIST\n\t) AS new1\n
API_Fn09A001_D2=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM JH_WS02_SCHDL_RECORD R WITH (NOLOCK)\n\t\tLEFT JOIN (\n\t\t\tSELECT SCHDL_PK\n\t\t\t\t,API_PK\n\t\t\t\t,API_TYPE\n\t\t\t\t,API_NAME\n\t\t\tFROM JH_WS02_SCHDL_LIST M WITH (NOLOCK)\n\t\t\tLEFT JOIN JH_WS02_SCHDL_API_LIST A WITH (NOLOCK) ON M.PK \= A.SCHDL_PK\n\t\t\t) D ON R.SCHDL_PK \= D.SCHDL_PK\n\t\t\tAND R.API_NAME \= D.API_NAME\n\t\tLEFT JOIN JH_WS02_SCHDL_TMP_RECORD TRS WITH (NOLOCK) ON R.SCHDL_PK \= TRS.SCHDL_PK\n\t\t\tAND R.SCHDL_RUN_TIME \= TRS.SCHDL_RUN_TIME\n\t\t\tAND R.SCHDL_NEXT_TIME \= TRS.SCHDL_NEXT_TIME\n\t\t\tAND R.API_PK \= TRS.API_PK\n\t\t\tAND TRS.SCHDL_STATUS \= 'EXECUTING'\n\t\tLEFT JOIN JH_WS02_SCHDL_TMP_RECORD TRE WITH (NOLOCK) ON R.SCHDL_PK \= TRE.SCHDL_PK\n\t\t\tAND R.SCHDL_RUN_TIME \= TRE.SCHDL_RUN_TIME\n\t\t\tAND R.SCHDL_NEXT_TIME \= TRE.SCHDL_NEXT_TIME\n\t\t\tAND R.API_PK \= TRE.API_PK\n\t\t\tAND TRE.SCHDL_STATUS \= 'SCHEDULED'\n\t\tWHERE R.SCHDL_PK \= '31'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY R.PK\n\t\t\t) AS RowNum\n\t\t,D.API_TYPE\n\t\t,R.API_PK\n\t\t,R.API_NAME\n\t\t,REPLACE(R.SCHDL_RUN_TIME, 'T', ' ') AS 'SCHDL_RUN_TIME'\n\t\t,REPLACE(R.SCHDL_NEXT_TIME, 'T', ' ') AS 'SCHDL_NEXT_TIME'\n\t\t,R.SCHDL_STATUS_HELP\n\t\t,TRS.ADD_DT AS SCHDL_START_TIME\n\t\t,TRE.ADD_DT AS SCHDL_END_TIME\n\tFROM JH_WS02_SCHDL_RECORD R WITH (NOLOCK)\n\tLEFT JOIN (\n\t\tSELECT SCHDL_PK\n\t\t\t,API_PK\n\t\t\t,API_TYPE\n\t\t\t,API_NAME\n\t\tFROM JH_WS02_SCHDL_LIST M WITH (NOLOCK)\n\t\tLEFT JOIN JH_WS02_SCHDL_API_LIST A WITH (NOLOCK) ON M.PK \= A.SCHDL_PK\n\t\t) D ON R.SCHDL_PK \= D.SCHDL_PK\n\t\tAND R.API_NAME \= D.API_NAME\n\tLEFT JOIN JH_WS02_SCHDL_TMP_RECORD TRS WITH (NOLOCK) ON R.SCHDL_PK \= TRS.SCHDL_PK\n\t\tAND R.SCHDL_RUN_TIME \= TRS.SCHDL_RUN_TIME\n\t\tAND R.SCHDL_NEXT_TIME \= TRS.SCHDL_NEXT_TIME\n\t\tAND R.API_PK \= TRS.API_PK\n\t\tAND TRS.SCHDL_STATUS \= 'EXECUTING'\n\tLEFT JOIN JH_WS02_SCHDL_TMP_RECORD TRE WITH (NOLOCK) ON R.SCHDL_PK \= TRE.SCHDL_PK\n\t\tAND R.SCHDL_RUN_TIME \= TRE.SCHDL_RUN_TIME\n\t\tAND R.SCHDL_NEXT_TIME \= TRE.SCHDL_NEXT_TIME\n\t\tAND R.API_PK \= TRE.API_PK\n\t\tAND TRE.SCHDL_STATUS \= 'SCHEDULED'\n\tWHERE R.SCHDL_PK \= '31'\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n
API_Fn09A001_DS=/* \n\tLast Version\tLast Updated by\tLast Updated Date Comment；\n\t\tv2.2.3 Steve 20200720 \n\t\t\t1. 以 COUNT(*) OVER() 方式解決 2 段子查詢問題\n\t\tv2.2.3 Min   20200828\n\t\t\t1. 增加 @R1_CONDITION 註解說明\n\t\tv2.2.3 Steve 20201016\n\t\t\t1. 調整註解\n\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t新增排程週期設定表, 給Master串接出排程週期用的\n*/\nSELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY SP.PK\n\t\t\t) AS RowNum\n\t\t,SP.PK\n\t\t,SP.WS_CODE\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*主機代碼*/\n\t\t,SP.PROXY_WS\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*主機代碼(代理)*/\n\t\t,SP.SG_NAME\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*排程名稱*/\n\t\t,SP.SG_HELP\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*排程說明*/\n\t\t,CONCAT (SP.SG_START_YMD,' ',SP.SG_START_HMS) AS SG_START_YMD_HMS\t\t/*執行時間(起)*/\n\t\t,CONCAT (SP.SG_ABORT_YMD,' ',SP.SG_ABORT_HMS) AS SG_ABORT_YMD_HMS\t\t/*執行時間(迄)*/\n\t\t,CONVERT(varchar,SP.SG_START_YMD,23) SG_START_YMD\n\t\t,CONVERT(varchar,SP.SG_START_HMS,24) SG_START_HMS\n\t\t,CONVERT(varchar,SP.SG_ABORT_YMD,23) SG_ABORT_YMD\n\t\t,CONVERT(varchar,SP.SG_ABORT_HMS,24) SG_ABORT_HMS\n\t\t,SP.SG_ABORT\n\t\t,CONVERT(VARCHAR, SP.SG_THIS_DT, 120) AS SG_THIS_DT\n\t\t,CONVERT(VARCHAR, SP.SG_NEXT_DT, 120) AS SG_NEXT_DT\n\t\t,SP.SG_SKIP_CRDATE\n\t\t,SP.SG_TOTAL\n\t\t,SP.SG_STATUS\n\t\t,SP.SG_STATUS_HELP\t\t\t\t\t\t\t\t\t\t\t\t\t/*狀態*/\n\t\t,SP.SG_PROCESS\n\t\t,SP.SG_PROCESS_HELP\t\t\t\t\t\t\t\t\t\t\t\t\t/*流程說明*/\n\t\t,SP.SG_CREATE_NUM\n\t\t,SP.SG_CREATE_UNIT\n\t\t,SP.SG_SUCCEED_MAIL\t\t\t\t\t\t\t\t\t\t\t\t\t/*通知信(成功)*/\n\t\t,SP.SG_FAIL_MAIL\t\t\t\t\t\t\t\t\t\t\t\t\t/*通知信(失敗)*/\n\t\t,SP.SG_SLEEP_NUM\n\t\t,CL.SC_UNIT_A\n\t\t,(CASE WHEN CL.SC_UNIT_A \= 'MONTH'\n\t\t       THEN CL.SC_VALUE_A\n\t\t\t   ELSE\n\t\t\t        ''\n\t\t\t   END) SC_VALUE_MONTH\n\t\t,(CASE WHEN CL.SC_UNIT_A \= 'INTERVAL'\n\t\t       THEN CL.SC_VALUE_A\n\t\t\t   ELSE\n\t\t\t        ''\n\t\t\t   END) SC_VALUE_INTERVAL\n\t\t,(CASE WHEN CL.SC_UNIT_A \= 'HOUR'\n\t\t       THEN CL.SC_VALUE_A\n\t\t\t   ELSE\n\t\t\t        ''\n\t\t\t   END) SC_VALUE_HOUR\n\t\t,(CASE WHEN CL.SC_UNIT_A \= 'MINUTE'\n\t\t       THEN CL.SC_VALUE_A\n\t\t\t   ELSE\n\t\t\t        ''\n\t\t\t   END) SC_VALUE_MINUTE\n\t\t,(CASE WHEN CL.SC_UNIT_A \= 'BOUT'\n\t\t       THEN CL.SC_VALUE_A\n\t\t\t   ELSE\n\t\t\t        ''\n\t\t\t   END) SC_VALUE_BOUT\n\t\t,(CASE WHEN CL.SC_UNIT_A \= 'AUTO'\n\t\t       THEN CL.SC_VALUE_A\n\t\t\t   ELSE\n\t\t\t        ''\n\t\t\t   END) SC_VALUE_AUTO\n\t\t,CL.SC_UNIT_B\n\t\t,(CASE WHEN CL.SC_UNIT_B \= 'DAY'\n\t\t       THEN CL.SC_VALUE_B\n\t\t\t   ELSE \n\t\t\t\t\t''\n\t\t\t   END) SC_VALUE_DAY\n\t\t,(CASE WHEN CL.SC_UNIT_B \= 'WEEKDAY'\n\t\t       THEN CL.SC_VALUE_B\n\t\t\t   ELSE \n\t\t\t\t\t''\n\t\t\t   END) SC_VALUE_WEEKDAY\n\t\t,SP.COMPANY_ID\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,SP.ADD_USER_ID\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,SP.ADD_USER_COMPANY_ID\t\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, SP.ADD_DT, 120) AS ADD_DT\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,SP.LAST_MOD_USER_ID\t\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,SP.LAST_MOD_USER_COMPANY_ID\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, SP.LAST_MOD_DT, 120) AS LAST_MOD_DT\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,SP.DEL_USER_ID\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,SP.DEL_USER_COMPANY_ID\t\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, SP.DEL_DT, 120) AS DEL_DT\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,SP.DATA_STATUS\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\tFROM JH_WS02_SCHDL_GROUP SP WITH (NOLOCK)\n\tINNER JOIN JH_WS02_SCHDL_CYCLE_LIST CL WITH (NOLOCK)\n\t   ON SP.PK \= CL.SG_PK\n\tWHERE SP.PK \= '$$PK$$'\n\t   OR IIF('$$PK$$'\='0','ALL','$$PK$$') \= 'ALL'\n\t) AS new1\nWHERE RowNum > $$start$$ \n  AND RowNum <\= ($$start$$ + $$limit$$)\n
API_FN09A001_DS=SELECT RowNum, PK, SCHDL_ID, SCHDL_API_NAME, SCHDL_START_TYPE, CASE WHEN SCHDL_START_TYPE \= 'DATETIME' THEN LEFT (REPLACE(REPLACE(SCHDL_START_DATE, '-', '/'), 'T', ' '), 10) ELSE '' END AS SCHDL_START_DATE1, CASE WHEN SCHDL_START_TYPE \= 'DATETIME' THEN SUBSTRING (REPLACE(REPLACE(SCHDL_START_DATE, '-', '/'), 'T', ' '), 12, 5) ELSE '' END AS SCHDL_START_DATE2, CASE WHEN SCHDL_START_TYPE \= 'TIME' THEN REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(SCHDL_START_DATE, 'SECONDS', ''), 'MINUTES', ''), 'HOURS', ''), 'WEEKS', ''), 'MONTH', ''), 'YEAR', '') ELSE '' END AS SCHDL_START_DATE3, CASE WHEN CHARINDEX('YEAR', SCHDL_START_DATE) <> 0 THEN 'YEAR' WHEN CHARINDEX('MONTH', SCHDL_START_DATE) <> 0 THEN 'MONTH' WHEN CHARINDEX('WEEKS', SCHDL_START_DATE) <> 0 THEN 'WEEKS' WHEN CHARINDEX('HOURS', SCHDL_START_DATE) <> 0 THEN 'HOURS' WHEN CHARINDEX('MINUTES', SCHDL_START_DATE) <> 0 THEN 'MINUTES' WHEN CHARINDEX('SECONDS', SCHDL_START_DATE) <> 0 THEN 'SECONDS' ELSE '' END AS SCHDL_START_DATE4, CASE WHEN CHARINDEX('AM', SCHDL_START_DATE) <> 0 THEN 'AM' WHEN CHARINDEX('PM', SCHDL_START_DATE) <> 0 THEN 'PM' ELSE '' END AS SCHDL_START_DATE5, CASE WHEN SCHDL_START_TYPE \= 'AM_PM' THEN REPLACE(REPLACE(SCHDL_START_DATE, 'AM', ''), 'PM', '') ELSE '' END AS SCHDL_START_DATE6, SCHDL_START_DATE, SCHDL_FREQUENCY_TYPE, CASE WHEN SCHDL_FREQUENCY_TYPE \= 'DATETIME' THEN LEFT (REPLACE(REPLACE(SCHDL_FREQUENCY_DATE, '-', '/'), 'T', ' '), 10) ELSE '' END AS SCHDL_FREQUENCY_DATE1, CASE WHEN SCHDL_FREQUENCY_TYPE \= 'DATETIME' THEN SUBSTRING (REPLACE(REPLACE(SCHDL_FREQUENCY_DATE, '-', '/'), 'T', ' '), 12, 5) ELSE '' END AS SCHDL_FREQUENCY_DATE2, CASE WHEN SCHDL_FREQUENCY_TYPE \= 'TIME' THEN REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(SCHDL_FREQUENCY_DATE, 'SECONDS', ''), 'MINUTES', ''), 'HOURS', ''), 'WEEKS', ''), 'MONTH', ''), 'YEAR', '') ELSE '' END AS SCHDL_FREQUENCY_DATE3, CASE WHEN CHARINDEX('YEAR', SCHDL_FREQUENCY_DATE) <> 0 THEN 'YEAR' WHEN CHARINDEX('MONTH', SCHDL_FREQUENCY_DATE) <> 0 THEN 'MONTH' WHEN CHARINDEX('WEEKS', SCHDL_FREQUENCY_DATE) <> 0 THEN 'WEEKS' WHEN CHARINDEX('HOURS', SCHDL_FREQUENCY_DATE) <> 0 THEN 'HOURS' WHEN CHARINDEX('MINUTES', SCHDL_FREQUENCY_DATE) <> 0 THEN 'MINUTES' WHEN CHARINDEX('SECONDS', SCHDL_FREQUENCY_DATE) <> 0 THEN 'SECONDS' ELSE '' END AS SCHDL_FREQUENCY_DATE4, CASE WHEN CHARINDEX('AM', SCHDL_FREQUENCY_DATE) <> 0 THEN 'AM' WHEN CHARINDEX('PM', SCHDL_FREQUENCY_DATE) <> 0 THEN 'PM' ELSE '' END AS SCHDL_FREQUENCY_DATE5, CASE WHEN SCHDL_FREQUENCY_TYPE \= 'AM_PM' THEN REPLACE(REPLACE(SCHDL_FREQUENCY_DATE, 'AM', ''), 'PM', '') ELSE '' END AS SCHDL_FREQUENCY_DATE6, SCHDL_FREQUENCY_DATE, SCHDL_STOP_RULE, SCHDL_STOP_RULE_DESC, SCHDL_STOP_RULE_TYPE, CASE WHEN SCHDL_STOP_RULE_TYPE \= '0' THEN LEFT (REPLACE(REPLACE(SCHDL_STOP_RULE, '-', '/'), 'T', ' '), 10) ELSE '' END AS SCHDL_STOP_RULE1, CASE WHEN SCHDL_STOP_RULE_TYPE \= '0' THEN SUBSTRING (REPLACE(REPLACE(SCHDL_FREQUENCY_DATE, '-', '/'), 'T', ' '), 12, 5) ELSE '' END AS SCHDL_STOP_RULE2, CASE WHEN SCHDL_STOP_RULE_TYPE \= '1' THEN SCHDL_STOP_RULE ELSE '' END AS SCHDL_STOP_RULE3, SCHDL_STATUS, SCHDL_STATUS_DESC, SCHDL_BRFORE_STATUS, SCHDL_BRFORE_STATUS_DESC, SCHDL_STATUS_HELP, SCHDL_THIS_RUN_DATE, SCHDL_NEXT_RUN_DATE, SCHDL_HELP, ADD_USER_ID, ADD_USER_COMPANY_ID, ADD_DT, LAST_MOD_USER_ID, LAST_MOD_USER_COMPANY_ID, LAST_MOD_DT, DEL_USER_ID, DEL_USER_COMPANY_ID, DEL_DT, DATA_STATUS, (SELECT COUNT(*) FROM JH_WS02_SCHDL_UX_LIST WHERE (SCHDL_ID \= '$$SCHDL_ID$$' OR '$$SCHDL_ID$$' \= 'ALL') AND (SCHDL_API_NAME \= '$$SCHDL_API_NAME$$' OR '$$SCHDL_API_NAME$$' \= 'ALL') AND (SCHDL_STATUS \= '$$SCHDL_STATUS$$' OR '$$SCHDL_STATUS$$' \= 'ALL')) AS totalProperty FROM (SELECT ROW_NUMBER() OVER (ORDER BY PK) AS RowNum, PK, SCHDL_ID, SCHDL_API_NAME, CASE WHEN CHARINDEX('AM', SCHDL_START_DATE) <> 0 OR CHARINDEX('PM', SCHDL_START_DATE) <> 0 THEN 'AM_PM' WHEN CHARINDEX('YEAR', SCHDL_START_DATE) <> 0 OR CHARINDEX('MONTH', SCHDL_START_DATE) <> 0 OR CHARINDEX('WEEKS', SCHDL_START_DATE) <> 0 OR CHARINDEX('HOURS', SCHDL_START_DATE) <> 0 OR CHARINDEX('MINUTES', SCHDL_START_DATE) <> 0 OR CHARINDEX('SECONDS', SCHDL_START_DATE) <> 0 THEN 'TIME' WHEN ISDATE(REPLACE(REPLACE(SCHDL_START_DATE, '-', '/'), 'T', ' ')) \= 1 THEN 'DATETIME' ELSE '' END AS 'SCHDL_START_TYPE', SCHDL_START_DATE, CASE WHEN CHARINDEX('AM', SCHDL_FREQUENCY_DATE) <> 0 OR CHARINDEX('PM', SCHDL_FREQUENCY_DATE) <> 0 THEN 'AM_PM' WHEN CHARINDEX('YEAR', SCHDL_FREQUENCY_DATE) <> 0 OR CHARINDEX('MONTH', SCHDL_FREQUENCY_DATE) <> 0 OR CHARINDEX('WEEKS', SCHDL_FREQUENCY_DATE) <> 0 OR CHARINDEX('HOURS', SCHDL_FREQUENCY_DATE) <> 0 OR CHARINDEX('MINUTES', SCHDL_FREQUENCY_DATE) <> 0 OR CHARINDEX('SECONDS', SCHDL_FREQUENCY_DATE) <> 0 THEN 'TIME' WHEN ISDATE(REPLACE(REPLACE(SCHDL_START_DATE, '-', '/'), 'T', ' ')) \= 1 THEN 'DATETIME' ELSE '' END AS 'SCHDL_FREQUENCY_TYPE', SCHDL_FREQUENCY_DATE, SCHDL_STOP_RULE, CASE WHEN SCHDL_STOP_RULE \= '-1' THEN '跑到死' WHEN ISDATE(REPLACE(REPLACE(SCHDL_STOP_RULE, '-', '/'), 'T', ' ')) \= 1 THEN '時間\:'+REPLACE(REPLACE(SCHDL_STOP_RULE, '-', '/'), 'T', ' ') WHEN ISNUMERIC(SCHDL_STOP_RULE) \= 1 AND SCHDL_STOP_RULE > 0 THEN '次數\:'+SCHDL_STOP_RULE ELSE '' END AS 'SCHDL_STOP_RULE_DESC', CASE WHEN SCHDL_STOP_RULE \= '-1' THEN '-1' WHEN ISDATE(REPLACE(REPLACE(SCHDL_STOP_RULE, '-', '/'), 'T', ' ')) \= 1 THEN '0' WHEN ISNUMERIC(SCHDL_STOP_RULE) \= 1 AND SCHDL_STOP_RULE > 0 THEN '1' ELSE '' END AS 'SCHDL_STOP_RULE_TYPE', SCHDL_STATUS, CASE WHEN SCHDL_STATUS \= 'NOTSCHEDULE' THEN '不執行' WHEN SCHDL_STATUS \= 'SCHEDULED' THEN '排隊' WHEN SCHDL_STATUS \= 'EXECUTING' THEN '執行中' WHEN SCHDL_STATUS \= 'SUCCEED' THEN '執行完成' WHEN SCHDL_STATUS \= 'ERROR' THEN '執行有錯誤' ELSE '' END AS 'SCHDL_STATUS_DESC', SCHDL_BRFORE_STATUS, CASE WHEN SCHDL_BRFORE_STATUS \= 'NOTSCHEDULE' THEN '不執行' WHEN SCHDL_BRFORE_STATUS \= 'SCHEDULED' THEN '排隊' WHEN SCHDL_BRFORE_STATUS \= 'EXECUTING' THEN '執行中' WHEN SCHDL_BRFORE_STATUS \= 'SUCCEED' THEN '執行完成' WHEN SCHDL_BRFORE_STATUS \= 'ERROR' THEN '執行有錯誤' ELSE '' END AS 'SCHDL_BRFORE_STATUS_DESC', SCHDL_STATUS_HELP, REPLACE(REPLACE(SCHDL_THIS_RUN_DATE, '-', '/'), 'T', ' ') AS 'SCHDL_THIS_RUN_DATE', REPLACE(REPLACE(SCHDL_NEXT_RUN_DATE, '-', '/'), 'T', ' ') AS 'SCHDL_NEXT_RUN_DATE', SCHDL_HELP, ADD_USER_ID, ADD_USER_COMPANY_ID, ADD_DT, LAST_MOD_USER_ID, LAST_MOD_USER_COMPANY_ID, LAST_MOD_DT, DEL_USER_ID, DEL_USER_COMPANY_ID, DEL_DT, DATA_STATUS FROM JH_WS02_SCHDL_UX_LIST WHERE (SCHDL_ID \= '$$SCHDL_ID$$' OR '$$SCHDL_ID$$' \= 'ALL') AND (SCHDL_API_NAME \= '$$SCHDL_API_NAME$$' OR '$$SCHDL_API_NAME$$' \= 'ALL') AND (SCHDL_STATUS \= '$$SCHDL_STATUS$$' OR '$$SCHDL_STATUS$$' \= 'ALL')) AS new1 WHERE RowNum > $$start$$ AND RowNum < \= ($$start$$+$$limit$$);
API_Fn09A001_DS_CB1=SELECT *, (SELECT COUNT(*) FROM ((SELECT CODE_ID AS 'API_NAME' FROM JH_WS02_CODE_LIST EXCEPT SELECT FLOW_ID AS 'API_NAME' FROM JH_WS02_FLOW_LIST) UNION (SELECT FLOW_ID AS 'API_NAME' FROM JH_WS02_FLOW_LIST EXCEPT SELECT CODE_ID AS 'API_NAME' FROM JH_WS02_CODE_LIST))A) AS totalProperty FROM (SELECT ROW_NUMBER() OVER (ORDER BY API_NAME) AS RowNum, * FROM ((SELECT CODE_ID AS 'API_NAME' FROM JH_WS02_CODE_LIST EXCEPT SELECT FLOW_ID AS 'API_NAME' FROM JH_WS02_FLOW_LIST) UNION (SELECT FLOW_ID AS 'API_NAME' FROM JH_WS02_FLOW_LIST EXCEPT SELECT CODE_ID AS 'API_NAME' FROM JH_WS02_CODE_LIST))A) AS new1
API_Fn09A001_LS=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM JH_WS02_SCHDL_LIST WITH (NOLOCK)\n\t\tWHERE (\n\t\t\t\tSCHDL_ID LIKE '%$$SCHDL_ID$$%'\n\t\t\t\tOR '$$SCHDL_ID$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tSCHDL_STATUS \= '$$SCHDL_STATUS$$'\n\t\t\t\tOR '$$SCHDL_STATUS$$' \= 'ALL'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK\n\t\t\t) AS RowNum\n\t\t,PK\n\t\t,SCHDL_ID\n\t\t,SCHDL_STATUS\n\t\t,SCHDL_PASS\n\t\t,SCHDL_STOP\n\t\t,CASE SCHDL_STATUS\n\t\t\tWHEN 'NOTSCHEDULE'\n\t\t\t\tTHEN '不執行'\n\t\t\tWHEN 'EXECUTING'\n\t\t\t\tTHEN '執行中'\n\t\t\tWHEN 'SCHEDULED'\n\t\t\t\tTHEN '執行完但不停止'\n\t\t\tWHEN 'SUCCEED'\n\t\t\t\tTHEN '執行完且停止無錯誤'\n\t\t\tWHEN 'STOP'\n\t\t\t\tTHEN '已停止'\n\t\t\tEND AS 'SCHDL_STATUS_DESC'\n\t\t,SCHDL_STATUS_HELP\n\t\t,REPLACE(SCHDL_RUN_TIME, 'T', ' ') AS 'SCHDL_RUN_TIME'\n\t\t,REPLACE(SCHDL_NEXT_TIME, 'T', ' ') AS 'SCHDL_NEXT_TIME'\n\t\t,SCHDL_HELP\n\t\t,SCHDL_FREQUENCY_DT_UNIT\n\t\t,CASE \n\t\t\tWHEN SCHDL_FREQUENCY_DT_UNIT \= 'ANYDAY'\n\t\t\t\tTHEN SCHDL_FREQUENCY_DT_VALUE1\n\t\t\tEND AS 'ANYDAY_SCHDL_FREQUENCY_DT_VALUE1'\n\t\t,CASE \n\t\t\tWHEN SCHDL_FREQUENCY_DT_UNIT \= 'ANYDAY'\n\t\t\t\tTHEN SCHDL_FREQUENCY_DT_VALUE2\n\t\t\tEND AS 'ANYDAY_SCHDL_FREQUENCY_DT_VALUE2'\n\t\t,CASE \n\t\t\tWHEN SCHDL_FREQUENCY_DT_UNIT \= 'ANYDAY'\n\t\t\t\tTHEN SCHDL_FREQUENCY_DT_VALUE3\n\t\t\tEND AS 'ANYDAY_SCHDL_FREQUENCY_DT_VALUE3'\n\t\t,CASE \n\t\t\tWHEN SCHDL_FREQUENCY_DT_UNIT \= 'ANYDAY'\n\t\t\t\tTHEN SCHDL_FREQUENCY_DT_VALUE4\n\t\t\tEND AS 'ANYDAY_SCHDL_FREQUENCY_DT_VALUE4'\n\t\t,CASE \n\t\t\tWHEN SCHDL_FREQUENCY_DT_UNIT \= 'GAP'\n\t\t\t\tTHEN SCHDL_FREQUENCY_DT_VALUE1\n\t\t\tEND AS 'GAP_SCHDL_FREQUENCY_DT_VALUE1'\n\t\t,CASE \n\t\t\tWHEN SCHDL_FREQUENCY_DT_UNIT \= 'GAP'\n\t\t\t\tTHEN SCHDL_FREQUENCY_DT_VALUE2\n\t\t\tEND AS 'GAP_SCHDL_FREQUENCY_DT_VALUE2'\n\t\t,CASE \n\t\t\tWHEN SCHDL_FREQUENCY_DT_UNIT \= 'GAP'\n\t\t\t\tTHEN SCHDL_FREQUENCY_DT_VALUE3\n\t\t\tEND AS 'GAP_SCHDL_FREQUENCY_DT_VALUE3'\n\t\t,CASE \n\t\t\tWHEN SCHDL_FREQUENCY_DT_UNIT \= 'GAP'\n\t\t\t\tTHEN SCHDL_FREQUENCY_DT_VALUE4\n\t\t\tEND AS 'GAP_SCHDL_FREQUENCY_DT_VALUE4'\n\t\t,CASE \n\t\t\tWHEN SCHDL_FREQUENCY_DT_UNIT \= 'LASTMONTH'\n\t\t\t\tTHEN SCHDL_FREQUENCY_DT_VALUE1\n\t\t\tEND AS 'LASTMONTH_SCHDL_FREQUENCY_DT_VALUE1'\n\t\t,CASE \n\t\t\tWHEN SCHDL_FREQUENCY_DT_UNIT \= 'LASTMONTH'\n\t\t\t\tTHEN SCHDL_FREQUENCY_DT_VALUE2\n\t\t\tEND AS 'LASTMONTH_SCHDL_FREQUENCY_DT_VALUE2'\n\t\t,CASE \n\t\t\tWHEN SCHDL_FREQUENCY_DT_UNIT \= 'LASTMONTH'\n\t\t\t\tTHEN SCHDL_FREQUENCY_DT_VALUE3\n\t\t\tEND AS 'LASTMONTH_SCHDL_FREQUENCY_DT_VALUE3'\n\t\t,CASE \n\t\t\tWHEN SCHDL_FREQUENCY_DT_UNIT \= 'LASTMONTH'\n\t\t\t\tTHEN SCHDL_FREQUENCY_DT_VALUE4\n\t\t\tEND AS 'LASTMONTH_SCHDL_FREQUENCY_DT_VALUE4'\n\t\t,CASE \n\t\t\tWHEN SCHDL_STOP_RULE_VALUE1 \= '-1'\n\t\t\t\tTHEN '2'\n\t\t\tWHEN SCHDL_STOP_RULE_UNIT \= 'BOUT'\n\t\t\t\tTHEN '1'\n\t\t\tWHEN SCHDL_STOP_RULE_UNIT \= 'YMDHMS'\n\t\t\t\tTHEN '0'\n\t\t\tEND AS 'SCHDL_STOP_TYPE'\n\t\t,SCHDL_STOP_RULE_UNIT\n\t\t,CASE \n\t\t\tWHEN SCHDL_STOP_RULE_UNIT \= 'BOUT'\n\t\t\t\tAND SCHDL_STOP_RULE_VALUE1 <> '-1'\n\t\t\t\tTHEN SCHDL_STOP_RULE_VALUE1\n\t\t\tEND AS 'BOUT_SCHDL_STOP_RULE_VALUE1'\n\t\t,CASE \n\t\t\tWHEN SCHDL_STOP_RULE_UNIT \= 'YMDHMS'\n\t\t\t\tTHEN SCHDL_STOP_RULE_VALUE1\n\t\t\tEND AS 'YMDHMS_SCHDL_STOP_RULE_VALUE1'\n\t\t,CASE \n\t\t\tWHEN SCHDL_STOP_RULE_UNIT \= 'YMDHMS'\n\t\t\t\tTHEN DATEPART(hh, CONVERT(TIME, SCHDL_STOP_RULE_VALUE2))\n\t\t\tEND AS 'YMDHMS_SCHDL_STOP_RULE_VALUE2_1'\n\t\t,CASE \n\t\t\tWHEN SCHDL_STOP_RULE_UNIT \= 'YMDHMS'\n\t\t\t\tTHEN DATEPART(mi, CONVERT(TIME, SCHDL_STOP_RULE_VALUE2))\n\t\t\tEND AS 'YMDHMS_SCHDL_STOP_RULE_VALUE2_2'\n\t\t,SCHDL_START_DT_YMD\n\t\t,DATEPART(hh, CONVERT(TIME, SCHDL_START_DT_HMS)) AS 'SCHDL_START_DT_HMS_1'\n\t\t,DATEPART(mi, CONVERT(TIME, SCHDL_START_DT_HMS)) AS 'SCHDL_START_DT_HMS_2'\n\t\t,ADD_USER_ID\n\t\t,ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_DT\n\tFROM JH_WS02_SCHDL_LIST WITH (NOLOCK)\n\tWHERE (\n\t\t\tSCHDL_ID LIKE '%$$SCHDL_ID$$%'\n\t\t\tOR '$$SCHDL_ID$$' \= 'ALL'\n\t\t\t)\n\t\tAND (\n\t\t\tSCHDL_STATUS \= '$$SCHDL_STATUS$$'\n\t\t\tOR '$$SCHDL_STATUS$$' \= 'ALL'\n\t\t\t)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n
API_Fn09A001_M_C=/*開始點：此語法請填入【API_Fn09A001_Master_C】(JH_WS02_SCHDL_GROUP)(LS_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR varchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING varchar(50),@vPARAM_COMPANY varchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\='$$SG_NAME$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='C';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tDECLARE @SG_STATUS_HELP nvarchar(200)\=ISNULL((SELECT TOP 1 CODE_VALUE_DESC\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM JH_REF_CODE_DETAIL WITH (NOLOCK)\n\t\t\t\t\t\t\t\t\t\t\t\t\t   WHERE DISABLE_YN \= 'N'\n\t\t\t\t\t\t\t\t\t\t\t\t\t     AND CODE_TYPE  \= 'SG_STATUS'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t AND CODE_VALUE \= '$$SG_STATUS$$'),'');\n \n\t\t/*M TABLE 新增*/\n\t\tINSERT INTO JH_WS02_SCHDL_GROUP("WS_CODE","PROXY_WS","SG_NAME","SG_HELP","SG_START_YMD","SG_START_HMS","SG_ABORT_YMD","SG_ABORT_HMS","SG_ABORT","SG_TEAM_NUM","SG_THIS_DT","SG_NEXT_DT","SG_START_DT","SG_END_DT","SG_TOTAL","SG_SUCCEED_COUNT","SG_ERROR_COUNT","SG_STATUS","SG_STATUS_HELP","SG_PROCESS","SG_PROCESS_HELP","SG_CREATE_NUM","SG_CREATE_UNIT","SG_SLEEP_NUM","SG_SKIP_CRDATE","SG_SUCCEED_MAIL","SG_FAIL_MAIL","COMPANY_ID","ADD_USER_ID","ADD_USER_COMPANY_ID","ADD_DT","DATA_STATUS")\n\t\tVALUES (N'$$WS_CODE$$',N'$$PROXY_WS$$',N'$$SG_NAME$$',N'$$SG_HELP$$',CONVERT(date,NULLIF('$$SG_START_YMD$$','')),'$$SG_START_HMS$$',CONVERT(date,NULLIF('$$SG_ABORT_YMD$$','')),NULLIF('$$SG_ABORT_HMS$$',''),N'$$SG_ABORT$$',NULLIF('$$SG_TEAM_NUM$$',''),CONVERT(datetime,NULLIF('$$SG_THIS_DT$$','')),CONVERT(datetime,NULLIF('$$SG_NEXT_DT$$','')),CONVERT(datetime,NULLIF('$$SG_START_DT$$','')),CONVERT(datetime,NULLIF('$$SG_END_DT$$','')),0,NULLIF('$$SG_SUCCEED_COUNT$$',''),NULLIF('$$SG_ERROR_COUNT$$',''),N'$$SG_STATUS$$',NULLIF(@SG_STATUS_HELP,''),NULL,NULL,30,'NUM',NULLIF('$$SG_SLEEP_NUM$$',''),N'$$SG_SKIP_CRDATE$$',N'$$SG_SUCCEED_MAIL$$',N'$$SG_FAIL_MAIL$$',@vPARAM_COMPANY,@vPARAM_SOURCE_COMING,@vPARAM_COMPANY,CONVERT(nvarchar,GETDATE(),120),N'$$DATA_STATUS$$');\n\t\t\n\t\tSET @vPK \= CAST(SCOPE_IDENTITY() AS VARCHAR(200));\n\t\tSET @vMASTER_PK \= @vPK;\n\n\t\t/*M TABLE2 新增*/\n\t\tINSERT INTO JH_WS02_SCHDL_CYCLE_LIST("SG_PK","SC_VALUE_A","SC_UNIT_A","SC_VALUE_B","SC_UNIT_B","COMPANY_ID","ADD_USER_ID","ADD_USER_COMPANY_ID","ADD_DT","DATA_STATUS")\n\t\tVALUES (NULLIF(@vMASTER_PK,''),N'$$SC_VALUE_A$$',N'$$SC_UNIT_A$$',NULLIF(N'$$SC_VALUE_B$$',''),NULLIF(N'$$SC_UNIT_B$$',''),@vPARAM_COMPANY,@vPARAM_SOURCE_COMING,@vPARAM_COMPANY,CONVERT(nvarchar,GETDATE(),120),N'$$DATA_STATUS$$')\n \n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'INSERT',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'JH_WS02_SCHDL_GROUP' , @i_LOG_IDENT OUTPUT, 'M'\n \n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'C',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn09A001_Master_C】(JH_WS02_SCHDL_GROUP)(LS_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_Fn09A001_M_D=/*開始點：此語法請填入【API_Fn09A001_Master_D】(JH_WS02_SCHDL_GROUP)(LS_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR varchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING varchar(50),@vPARAM_COMPANY varchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\='$$PK$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='D';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'JH_WS02_SCHDL_GROUP', 'PK','int', @vPK \n \n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'DELETE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'JH_WS02_SCHDL_GROUP' , @i_LOG_IDENT OUTPUT, 'M'\n \n\t\t/*M-刪除主檔及明細資料檔*/\n\t\tDELETE JH_WS02_SCHDL_TASK WHERE SG_PK\=@vPK; \n\t\tDELETE JH_WS02_SCHDL_GROUP  WHERE PK\=@vPK;\n\t\tDELETE JH_WS02_SCHDL_CYCLE_LIST  WHERE SG_PK\=@vPK;\n \n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'D',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn09A001_Master_D】(JH_WS02_SCHDL_GROUP)(LS_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_Fn09A001_M_U=/*開始點：此語法請填入【API_Fn09A001_Master_U】(JH_WS02_SCHDL_GROUP)(LS_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR varchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING varchar(50),@vPARAM_COMPANY varchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$SG_NAME$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='U';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'JH_WS02_SCHDL_GROUP', 'PK','int', @vPK \n \n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'UPDATE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'JH_WS02_SCHDL_GROUP' , @i_LOG_IDENT OUTPUT, 'M'\n \n\t\t/*-修改M TABLE*/\n\t\tUPDATE JH_WS02_SCHDL_GROUP SET\n\t\t"WS_CODE"\= CASE WHEN '$$WS_CODE$$'\='\#NO_DATA\#'  THEN "WS_CODE" ELSE N'$$WS_CODE$$' END\n\t\t,"PROXY_WS"\= CASE WHEN '$$PROXY_WS$$'\='\#NO_DATA\#'  THEN "PROXY_WS" ELSE N'$$PROXY_WS$$' END\n\t\t,"SG_NAME"\= CASE WHEN '$$SG_NAME$$'\='\#NO_DATA\#'  THEN "SG_NAME" ELSE N'$$SG_NAME$$' END\n\t\t,"SG_HELP"\= CASE WHEN '$$SG_HELP$$'\='\#NO_DATA\#'  THEN "SG_HELP" ELSE N'$$SG_HELP$$' END\n\t\t,"SG_START_YMD"\= CASE WHEN '$$SG_START_YMD$$'\='\#NO_DATA\#'  THEN "SG_START_YMD" ELSE CONVERT(date,NULLIF('$$SG_START_YMD$$','')) END\n\t\t,"SG_START_HMS"\= CASE WHEN '$$SG_START_HMS$$'\='\#NO_DATA\#'  THEN "SG_START_HMS" ELSE '$$SG_START_HMS$$' END\n\t\t,"SG_ABORT_YMD"\= CASE WHEN '$$SG_ABORT_YMD$$'\='\#NO_DATA\#'  THEN NULL ELSE CONVERT(date,NULLIF('$$SG_ABORT_YMD$$','')) END\n\t\t,"SG_ABORT_HMS"\= CASE WHEN '$$SG_ABORT_HMS$$'\='\#NO_DATA\#'  THEN NULL ELSE NULLIF('$$SG_ABORT_HMS$$','') END\n\t\t,"SG_ABORT"\= CASE WHEN '$$SG_ABORT$$'\='\#NO_DATA\#'  THEN "SG_ABORT" ELSE N'$$SG_ABORT$$' END\n\t\t,"SG_TEAM_NUM"\= CASE WHEN '$$SG_TEAM_NUM$$'\='\#NO_DATA\#'  THEN "SG_TEAM_NUM" ELSE NULLIF('$$SG_TEAM_NUM$$','') END\n\t\t,"SG_THIS_DT"\= CASE WHEN '$$SG_THIS_DT$$'\='\#NO_DATA\#'  THEN "SG_THIS_DT" ELSE CONVERT(datetime,NULLIF('$$SG_THIS_DT$$','')) END\n\t\t,"SG_NEXT_DT"\= CASE WHEN '$$SG_NEXT_DT$$'\='\#NO_DATA\#'  THEN "SG_NEXT_DT" ELSE CONVERT(datetime,NULLIF('$$SG_NEXT_DT$$','')) END\n\t\t,"SG_START_DT"\= CASE WHEN '$$SG_START_DT$$'\='\#NO_DATA\#'  THEN "SG_START_DT" ELSE CONVERT(datetime,NULLIF('$$SG_START_DT$$','')) END\n\t\t,"SG_END_DT"\= CASE WHEN '$$SG_END_DT$$'\='\#NO_DATA\#'  THEN "SG_END_DT" ELSE CONVERT(datetime,NULLIF('$$SG_END_DT$$','')) END\n\t\t/* ,"SG_TOTAL"\= CASE WHEN '$$SG_TOTAL$$'\='\#NO_DATA\#'  THEN "SG_TOTAL" ELSE NULLIF('$$SG_TOTAL$$','') END \n\t\t,"SG_SUCCEED_COUNT"\= CASE WHEN '$$SG_SUCCEED_COUNT$$'\='\#NO_DATA\#'  THEN "SG_SUCCEED_COUNT" ELSE NULLIF('$$SG_SUCCEED_COUNT$$','') END\n\t\t,"SG_ERROR_COUNT"\= CASE WHEN '$$SG_ERROR_COUNT$$'\='\#NO_DATA\#'  THEN "SG_ERROR_COUNT" ELSE NULLIF('$$SG_ERROR_COUNT$$','') END */\n\t\t,"SG_STATUS"\= CASE WHEN '$$SG_STATUS$$'\='\#NO_DATA\#'  THEN "SG_STATUS" ELSE N'$$SG_STATUS$$' END\n\t\t,"SG_SLEEP_NUM"\= CASE WHEN '$$SG_SLEEP_NUM$$'\='\#NO_DATA\#'  THEN "SG_SLEEP_NUM" ELSE NULLIF('$$SG_SLEEP_NUM$$','') END\n\t\t,"SG_SKIP_CRDATE"\= CASE WHEN '$$SG_SKIP_CRDATE$$'\='\#NO_DATA\#'  THEN "SG_SKIP_CRDATE" ELSE N'$$SG_SKIP_CRDATE$$' END\n\t\t,"SG_SUCCEED_MAIL"\= CASE WHEN '$$SG_SUCCEED_MAIL$$'\='\#NO_DATA\#'  THEN "SG_SUCCEED_MAIL" ELSE N'$$SG_SUCCEED_MAIL$$' END\n\t\t,"SG_FAIL_MAIL"\= CASE WHEN '$$SG_FAIL_MAIL$$'\='\#NO_DATA\#'  THEN "SG_FAIL_MAIL" ELSE N'$$SG_FAIL_MAIL$$' END\n\t\t,"COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"LAST_MOD_USER_ID"\= @vPARAM_SOURCE_COMING\n\t\t,"LAST_MOD_USER_COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"LAST_MOD_DT"\= CONVERT(nvarchar,GETDATE(),120)\n\t\t,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE N'$$DATA_STATUS$$' END\n\t\tWHERE PK\=@vPK;\n\t\t\n\t\t/*-修改M TABLE*/\n\t\tUPDATE JH_WS02_SCHDL_CYCLE_LIST SET\n\t\t"SG_PK"\= CASE WHEN @vPK\='\#NO_DATA\#'  THEN "SG_PK" ELSE NULLIF(@vPK,'') END\n\t\t,"SC_VALUE_A"\= CASE WHEN '$$SC_VALUE_A$$'\='\#NO_DATA\#'  THEN "SC_VALUE_A" ELSE N'$$SC_VALUE_A$$' END\n\t\t,"SC_UNIT_A"\= CASE WHEN '$$SC_UNIT_A$$'\='\#NO_DATA\#'  THEN "SC_UNIT_A" ELSE N'$$SC_UNIT_A$$' END\n\t\t,"SC_VALUE_B"\= CASE WHEN '$$SC_VALUE_B$$'\='\#NO_DATA\#'  THEN "SC_VALUE_B" ELSE NULLIF(N'$$SC_VALUE_B$$','') END\n\t\t,"SC_UNIT_B"\= CASE WHEN '$$SC_UNIT_B$$'\='\#NO_DATA\#'  THEN "SC_UNIT_B" ELSE NULLIF(N'$$SC_UNIT_B$$','') END\n\t\t,"COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"LAST_MOD_USER_ID"\= @vPARAM_SOURCE_COMING\n\t\t,"LAST_MOD_USER_COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"LAST_MOD_DT"\= CONVERT(nvarchar,GETDATE(),120)\n\t\t,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE N'$$DATA_STATUS$$' END\n\t\tWHERE SG_PK\=@vPK;\n \n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'U',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn09A001_Master_U】(JH_WS02_SCHDL_GROUP)(LS_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_Fn09A001_SG_NAME=/* \n\tLast Version\tLast Updated by\tLast Updated Date Comment；\n\t\tv2.2.3 Steve 20200720 \n\t\t\t1. 以 COUNT(*) OVER() 方式解決 2 段子查詢問題\n\t\tv2.2.3 Min   20200828\n\t\t\t1. 增加 @R1_CONDITION 註解說明\n\t\tv2.2.3 Steve 20201016\n\t\t\t1. 調整註解\n*/\nSELECT *\nFROM (\n\t\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t\t,ROW_NUMBER() OVER (\n\t\t\t\tORDER BY new1.PK\n\t\t\t\t) AS RowNum,\n\t\t\tnew1.*\n\t\tFROM (\n\t\t\tSELECT\n\t\t\t\t PK,\n\t\t\t\t SG_NAME\n\t\t\tFROM JH_WS02_SCHDL_GROUP WITH (NOLOCK)\n\t\t\tWHERE (\n\t\t\t\t\tSG_NAME LIKE '%$$SG_NAME$$%'\n\t\t\t\t\tOR '$$SG_NAME$$' \= 'ALL'\n\t\t\t\t  )\n\t\t\t) AS new1 ) outer1\nWHERE RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)
API_Fn09A001_TK_HELP=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT PK\n\t\t\t\t,API_DESC AS 'API_DESC'\n\t\t\tFROM JH_WS02_FLOW_LIST\n\t\t\tWHERE (\n\t\t\t\t\tFLOW_ID LIKE '%$$SCHDL_API_NAME$$%'\n\t\t\t\t\tOR '$$SCHDL_API_NAME$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\tAND '$$SCHDL_TYPE$$' \= 'Flow'\n\t\t\tUNION ALL\n\t\t\tSELECT PK\n\t\t\t\t,API_DESC AS 'API_DESC'\n\t\t\tFROM JH_WS02_CODE_LIST\n\t\t\tWHERE (\n\t\t\t\t\tCODE_ID LIKE '%$$SCHDL_API_NAME$$%'\n\t\t\t\t\tOR '$$SCHDL_API_NAME$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\tAND '$$SCHDL_TYPE$$' \= 'Task'\n\t\t\t) M\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK\n\t\t\t) AS RowNum\n\t\t,PK\n\t\t,API_DESC\n\tFROM (\n\t\tSELECT PK\n\t\t\t,API_DESC AS 'API_DESC'\n\t\tFROM JH_WS02_FLOW_LIST\n\t\tWHERE (\n\t\t\t\tFLOW_ID LIKE '%$$SCHDL_API_NAME$$%'\n\t\t\t\tOR '$$SCHDL_API_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND '$$SCHDL_TYPE$$' \= 'Flow'\n\t\tUNION ALL\n\t\tSELECT PK\n\t\t\t,API_DESC AS 'API_DESC'\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE (\n\t\t\t\tCODE_ID LIKE '%$$SCHDL_API_NAME$$%'\n\t\t\t\tOR '$$SCHDL_API_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND '$$SCHDL_TYPE$$' \= 'Task'\n\t\t) M\n\t) AS new1\nORDER BY API_DESC ASC
API_Fn09A001_TK_NAME=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT PK\n\t\t\t\t,FLOW_ID AS 'SCHDL_API_NAME'\n\t\t\tFROM JH_WS02_FLOW_LIST\n\t\t\tWHERE (((\n\t\t\t\t\t  FLOW_ID LIKE '%$$SCHDL_API_NAME$$%'\n\t\t\t\t\t  OR '$$SCHDL_API_NAME$$' \= 'ALL'\n\t\t\t\t    )AND ISNULL('$$TK_NAME$$','') \= 'ALL')\n\t\t\t\t   OR FLOW_ID \= '$$TK_NAME$$')\n\t\t\t\tAND '$$SCHDL_TYPE$$' \= 'Flow'\n\t\t\tUNION ALL\n\t\t\tSELECT PK\n\t\t\t\t,CODE_ID AS 'SCHDL_API_NAME'\n\t\t\tFROM JH_WS02_CODE_LIST\n\t\t\tWHERE (((\n\t\t\t\t\t  CODE_ID LIKE '%$$SCHDL_API_NAME$$%'\n\t\t\t\t\t  OR '$$SCHDL_API_NAME$$' \= 'ALL'\n\t\t\t\t    )AND ISNULL('$$TK_NAME$$','') \= 'ALL')\n\t\t\t\t  OR CODE_ID \= '$$TK_NAME$$')\n\t\t\t\tAND '$$SCHDL_TYPE$$' \= 'Task'\n\t\t\t) M\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK\n\t\t\t) AS RowNum\n\t\t,PK\n\t\t,SCHDL_API_NAME\n\t\t,SCHDL_API_NAME AS 'SCHDL_API_NAME_DESC'\n\tFROM (\n\t\tSELECT PK\n\t\t\t,FLOW_ID AS 'SCHDL_API_NAME'\n\t\tFROM JH_WS02_FLOW_LIST\n\t\tWHERE (((\n\t\t\t\t  FLOW_ID LIKE '%$$SCHDL_API_NAME$$%'\n\t\t\t\t  OR '$$SCHDL_API_NAME$$' \= 'ALL'\n\t\t\t    ) AND ISNULL('$$TK_NAME$$','') \= 'ALL')\n\t\t\t  OR FLOW_ID \= '$$TK_NAME$$')\n\t\t\tAND '$$SCHDL_TYPE$$' \= 'Flow'\n\t\tUNION ALL\n\t\tSELECT PK\n\t\t\t,CODE_ID AS 'SCHDL_API_NAME'\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE (((\n\t\t\t\t CODE_ID LIKE '%$$SCHDL_API_NAME$$%'\n\t\t\t\t OR '$$SCHDL_API_NAME$$' \= 'ALL'\n\t\t\t    ) AND ISNULL('$$TK_NAME$$','') \= 'ALL')\n\t\t\t  OR CODE_ID \= '$$TK_NAME$$')\n\t\t\tAND '$$SCHDL_TYPE$$' \= 'Task'\n\t\t) M\n\t) AS new1\nWHERE RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\nORDER BY SCHDL_API_NAME_DESC ASC
API_Fn09A001_W1=/* \n\tLast Version\tLast Updated by\tLast Updated Date Comment；\n\t\tv2.2.3 Steve 20200720\n\t\t\t1. 以 COUNT(*) OVER() 方式解決\n\t\t\t2 段子查詢問題\n\t\tv2.2.3 Min 20200828\n\t\t\t1. 增加 @R1_CONDITION 註解說明\n\t\tv2.2.3 Steve 20201016\n\t\t\t1. 調整註解\n*/\nSELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY D.PK\n\t\t\t) AS RowNum\n\t\t,D.PK\n\t\t,D.SG_PK\n\t\t,M.SG_NAME\n\t\t,D.TK_NAME\t\t\t\t\t\t\t\t\t\t\t\t/*API、FLOW名稱*/\n\t\t,D.TK_TYPE\t\t\t\t\t\t\t\t\t\t\t\t/*類型*/\n\t\t,D.TK_HELP\t\t\t\t\t\t\t\t\t\t\t\t/*說明*/\n\t\t,D.TK_PAUSE\n\t\t,D.TK_ABORT\n\t\t,D.TK_SUCCEED_MAIL\t\t\t\t\t\t\t\t\t\t/*通知信(成功)*/\n\t\t,D.TK_FAIL_MAIL\t\t\t\t\t\t\t\t\t\t\t/*通知信(失敗)*/\n\t\t,D.COMPANY_ID\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,D.ADD_USER_ID\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,D.ADD_USER_COMPANY_ID\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, D.ADD_DT, 120) AS ADD_DT\t\t\t\t/*固定欄位必須輸出，不可移除 */\n\t\t,D.LAST_MOD_USER_ID\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,D.LAST_MOD_USER_COMPANY_ID\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, D.LAST_MOD_DT, 120) AS LAST_MOD_DT\t/*固定欄位必須輸出，不可移除 */\n\t\t,D.DEL_USER_ID\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,D.DEL_USER_COMPANY_ID\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, D.DEL_DT, 120) AS DEL_DT\t\t\t\t/*固定欄位必須輸出，不可移除 */\n\t\t,D.DATA_STATUS\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\tFROM JH_WS02_SCHDL_TASK D WITH (NOLOCK)\n\t\tINNER JOIN JH_WS02_SCHDL_GROUP M\n\t\t ON D.SG_PK \= M.PK\n\tWHERE (\n\t\t\tM.PK \= '$$PK$$'\n\t\t\tOR '$$PK$$' \= 'ALL'\n\t\t\t) \n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
API_Fn09A001_WS_CODE=/* \n\tLast Version\tLast Updated by\tLast Updated Date Comment；\n\t\tv2.2.3 Steve 20200720\n\t\t\t1. 以 COUNT(*) OVER() 方式解決 \n\t\t\t2 段子查詢問題\n\t\tv2.2.3 Min 20200828\n\t\t\t1. 增加 @R1_CONDITION 註解說明\n\t\tv2.2.3 Steve 20201016\n\t\t\t1. 調整註解\n*/\nSELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY CW_IDX\n\t\t\t) AS RowNum\n\t\t,WEB_SERVICE_CODE\n\tFROM JH_WS02_WEBSERVICE_INFO WITH (NOLOCK)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)\n
API_Fn09A002_DS=/* \n\tLast Version Last Updated by Last Updated Date  Comment；\n\t\tv2.2.3 Steve 20200720\n\t\t\t1. 以 COUNT(*) OVER() 方式解決 \n\t\t\t2 段子查詢問題\n\t\tv2.2.3 Min 20200828\n\t\t\t1. 增加 @R1_CONDITION 註解說明\n\t\tv2.2.3 Steve 20201016\n\t\t\t1. 調整註解\n*/\nSELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY M.PK\n\t\t\t) AS RowNum\n\t\t,M.PK\n\t\t,M.WS_CODE\t\t\t\t\t\t\t\t\t\t\t\t/*主機代碼*/\n\t\t,M.SG_PK\n\t\t,D.SG_NAME\t\t\t\t\t\t\t\t\t\t\t\t/*排程名稱*/\n\t\t,CONVERT(VARCHAR, M.SP_START_YMD, 120) AS SP_START_YMD\t/*啟用日期*/\n\t\t,CONVERT(VARCHAR, M.SP_END_YMD, 120) AS SP_END_YMD\t\t/*結束日期*/\n\t\t,CONVERT(VARCHAR,M.SP_TIME_FROM)\tAS SP_TIME_FROM\t\t/*時間(起)*/\n\t\t,CONVERT(VARCHAR,M.SP_TIME_UNTIL) AS SP_TIME_UNTIL\t\t/*時間(迄)*/\n\t\t,(CASE WHEN M.SP_MULTIPLE_DAY IS NULL\n\t\t       THEN 'DAILY'\n\t\t\t   ELSE\n\t\t\t        'RESIGNDAY'\n\t\t\t   END) \t\t AS RADIO_SP_MULTIPLE_DAY\n\t\t,M.SP_MULTIPLE_DAY\t AS SP_MULTIPLE_DAY\t\t\t\t\t/*執行指定日*/\n\t\t,M.SP_RULE_USE\t\t\t\t\t\t\t\t\t\t\t/*啟用規則*/\n\t\t,M.SP_HELP\t\t\t\t\t\t\t\t\t\t\t\t/*備註*/\n\t\t,M.COMPANY_ID\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,M.ADD_USER_ID\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,M.ADD_USER_COMPANY_ID\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, M.ADD_DT, 120) AS ADD_DT\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,M.LAST_MOD_USER_ID\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,M.LAST_MOD_USER_COMPANY_ID\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, M.LAST_MOD_DT, 120) AS LAST_MOD_DT\t/*固定欄位必須輸出，不可移除*/\n\t\t,M.DEL_USER_ID\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,M.DEL_USER_COMPANY_ID\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, M.DEL_DT, 120) AS DEL_DT\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,M.DATA_STATUS\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\tFROM JH_WS02_SCHDL_SKIP_DT M WITH (NOLOCK)\n\tLEFT JOIN JH_WS02_SCHDL_GROUP D ON M.SG_PK \= D.PK\n\tWHERE (\n\t\t\t(\n\t\t\t\tM.WS_CODE \= '$$WS_CODE$$'\n\t\t\t\tOR '$$WS_CODE$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tD.PK LIKE '%$$PK$$%'\n\t\t\t\tOR '$$PK$$' \= 'ALL'\n\t\t\t\t)\n\t\t\t)\n\t) AS new1\nWHERE RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)
API_Fn09A002_M_C=/*開始點：此語法請填入【API_Fn09A002_Master_C】(JH_WS02_SCHDL_SKIP_DT)(LS_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR varchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING varchar(50),@vPARAM_COMPANY varchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\='$$SP_START_YMD$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='C';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n \n\t\t/*M TABLE 新增*/\n\t\tINSERT INTO JH_WS02_SCHDL_SKIP_DT("WS_CODE","SG_PK","SP_START_YMD","SP_END_YMD","SP_TIME_FROM","SP_TIME_UNTIL","SP_MULTIPLE_DAY","SP_RULE_USE","SP_HELP","COMPANY_ID","ADD_USER_ID","ADD_USER_COMPANY_ID","ADD_DT","DATA_STATUS")\n\t\tVALUES (NULLIF('$$WS_CODE$$',''),NULLIF('$$SG_PK$$',''),CONVERT(date,NULLIF('$$SP_START_YMD$$','')),CONVERT(date,NULLIF('$$SP_END_YMD$$','')),'$$SP_TIME_FROM$$','$$SP_TIME_UNTIL$$',NULLIF('$$SP_MULTIPLE_DAY$$',''),N'$$SP_RULE_USE$$',N'$$SP_HELP$$',@vPARAM_COMPANY,@vPARAM_SOURCE_COMING,@vPARAM_COMPANY,CONVERT(nvarchar,GETDATE(),120),N'$$DATA_STATUS$$')\n\t\tSET @vPK \= CAST(SCOPE_IDENTITY() AS VARCHAR(200))\n\t\tSET @vMASTER_PK \= @vPK;\n\t\t\n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'INSERT',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'JH_WS02_SCHDL_SKIP_DT' , @i_LOG_IDENT OUTPUT, 'M'\n \n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'C',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn09A002_Master_C】(JH_WS02_SCHDL_SKIP_DT)(LS_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_Fn09A002_M_D=/*開始點：此語法請填入【API_Fn09A002_Master_D】(JH_WS02_SCHDL_SKIP_DT)(LS_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR varchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING varchar(50),@vPARAM_COMPANY varchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\='$$PK$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='D';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'JH_WS02_SCHDL_SKIP_DT', 'PK','int', @vPK \n \n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'DELETE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'JH_WS02_SCHDL_SKIP_DT' , @i_LOG_IDENT OUTPUT, 'M'\n \n\t\t/*M-刪除主檔及明細資料檔*/\n\t\t\n\t\tDELETE JH_WS02_SCHDL_SKIP_DT  WHERE PK\=@vPK;\n \n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'D',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn09A002_Master_D】(JH_WS02_SCHDL_SKIP_DT)(LS_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_Fn09A002_M_U=/*開始點：此語法請填入【API_Fn09A002_Master_U】(JH_WS02_SCHDL_SKIP_DT)(LS_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR varchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING varchar(50),@vPARAM_COMPANY varchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\='$$SP_START_YMD$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='U';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK$$'\n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'JH_WS02_SCHDL_SKIP_DT', 'PK','int', @vPK \n \n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'UPDATE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'JH_WS02_SCHDL_SKIP_DT' , @i_LOG_IDENT OUTPUT, 'M'\n \n\t\t/*-修改M TABLE*/\n\t\tUPDATE JH_WS02_SCHDL_SKIP_DT SET\n\t\t"WS_CODE"\= CASE WHEN '$$WS_CODE$$'\='\#NO_DATA\#'  THEN "WS_CODE" ELSE NULLIF('$$WS_CODE$$','') END\n\t\t,"SG_PK"\= CASE WHEN '$$SG_PK$$'\='\#NO_DATA\#'  THEN "SG_PK" ELSE NULLIF('$$SG_PK$$','') END\n\t\t,"SP_START_YMD"\= CASE WHEN '$$SP_START_YMD$$'\='\#NO_DATA\#'  THEN "SP_START_YMD" ELSE CONVERT(date,NULLIF('$$SP_START_YMD$$','')) END\n\t\t,"SP_END_YMD"\= CASE WHEN '$$SP_END_YMD$$'\='\#NO_DATA\#'  THEN "SP_END_YMD" ELSE CONVERT(date,NULLIF('$$SP_END_YMD$$','')) END\n\t\t,"SP_TIME_FROM"\= CASE WHEN '$$SP_TIME_FROM$$'\='\#NO_DATA\#'  THEN "SP_TIME_FROM" ELSE '$$SP_TIME_FROM$$' END\n\t\t,"SP_TIME_UNTIL"\= CASE WHEN '$$SP_TIME_UNTIL$$'\='\#NO_DATA\#'  THEN "SP_TIME_UNTIL" ELSE '$$SP_TIME_UNTIL$$' END\n\t\t,"SP_MULTIPLE_DAY"\= CASE WHEN '$$SP_MULTIPLE_DAY$$'\='\#NO_DATA\#'  THEN "SP_MULTIPLE_DAY" ELSE NULLIF('$$SP_MULTIPLE_DAY$$','') END\n\t\t,"SP_RULE_USE"\= CASE WHEN '$$SP_RULE_USE$$'\='\#NO_DATA\#'  THEN "SP_RULE_USE" ELSE N'$$SP_RULE_USE$$' END\n\t\t,"SP_HELP"\= CASE WHEN '$$SP_HELP$$'\='\#NO_DATA\#'  THEN "SP_HELP" ELSE N'$$SP_HELP$$' END\n\t\t,"COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"LAST_MOD_USER_ID"\= @vPARAM_SOURCE_COMING\n\t\t,"LAST_MOD_USER_COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"LAST_MOD_DT"\= CONVERT(nvarchar,GETDATE(),120)\n\t\t,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE N'$$DATA_STATUS$$' END\n\t\tWHERE PK\=@vPK;\n \n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'U',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn09A002_Master_U】(JH_WS02_SCHDL_SKIP_DT)(LS_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_Fn09A002_SG_NAME=/* \n\tLast Version Last Updated by Last Updated Date Comment；\n\t\tv2.2.3 Steve 20200720\n\t\t\t1. 以 COUNT(*) OVER() 方式解決 \n\t\t\t2 段子查詢問題\n\t\tv2.2.3 Min 20200828\n\t\t\t1. 增加 @R1_CONDITION 註解說明\n\t\tv2.2.3 Steve 20201016\n\t\t\t1. 調整註解\n*/\nSELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY JS.PK\n\t\t\t) AS RowNum\n\t\t,CL.SG_PK\n\t\t,JS.SG_NAME\n\tFROM JH_WS02_SCHDL_GROUP JS WITH (NOLOCK)\n\tINNER JOIN JH_WS02_SCHDL_CYCLE_LIST CL WITH (NOLOCK)\n\t  ON JS.PK \= CL.SG_PK\n\tWHERE SG_NAME LIKE '%$$SG_NAME$$%'\n\t   OR '$$SG_NAME$$' \= 'ALL'\n\t) AS new1\nWHERE RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n
API_Fn09A002_WS_CODE=/* \n\tLast Version\tLast Updated by\tLast Updated Date Comment；\n\t\tv2.2.3 Steve 20200720\n\t\t\t1. 以 COUNT(*) OVER() 方式解決 \n\t\t\t2 段子查詢問題\n\t\tv2.2.3 Min 20200828\n\t\t\t1. 增加 @R1_CONDITION 註解說明\n\t\tv2.2.3 Steve 20201016\n\t\t\t1. 調整註解\n*/\nSELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY CW_IDX\n\t\t\t) AS RowNum\n\t\t,WEB_SERVICE_CODE\n\tFROM JH_WS02_WEBSERVICE_INFO WITH (NOLOCK)\n      WHERE (WEB_SERVICE_CODE \= '$$WEB_SERVICE_CODE$$' OR\n           '$$WEB_SERVICE_CODE$$' \= 'ALL')\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)\n
API_Fn09A003_DS=/* Last Version\tLast Updated by\t\tLast Updated Date   Comment； v2.2.3\t\t\tSteve\t\t\t\t20200720\t\t\t1. 以 COUNT(*) OVER() 方式解決 2 段子查詢問題v2.2.3\t\t\tMin\t\t\t\t\t20200828\t\t\t1. 增加 @R1_CONDITION 註解說明v2.2.3\t\t\tSteve\t\t\t\t20201016\t\t\t1. 調整註解*/\n\nIF '$$LOG_TYPE$$' \= '0'\nBEGIN\n\n\tSELECT *\n\tFROM (SELECT COUNT(*) OVER() AS totalProperty,\n\t\t\t  ROW_NUMBER() OVER (\n\t\t\t\t\t\t\t\t ORDER BY new1.SG_THIS_DT desc) AS RowNum,\n\t\t\t  new1.*\n\t\t\tFROM\n\t\t\t(SELECT\tPK,\n\t\t\t\t\tWS_CODE,\n\t\t\t\t\tPROXY_WS,\n\t\t\t\t\tSG_NAME,\n\t\t\t\t\tSG_PK,\n\t\t\t\t\tTK_NAME,\n\t\t\t\t\tCONVERT(VARCHAR, SG_TEAM_NUM) AS SG_TEAM_NUM,\n\t\t\t\t\tCONVERT(VARCHAR, SG_THIS_DT, 120) AS SG_THIS_DT,\n\t\t\t\t\tCONVERT(VARCHAR, SG_NEXT_DT, 120) AS SG_NEXT_DT,\n\t\t\t\t\tCONVERT(VARCHAR, SG_START_DT, 108) AS SG_START_DT,\n\t\t\t\t\tCONVERT(VARCHAR, SG_END_DT, 108) AS SG_END_DT,\n\t\t\t\t\tCR_PROCESS_HELP,\n\t\t\t\t\tLOG_URL,\n\t\t\t\t\tCOMPANY_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tADD_USER_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tADD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tCONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT /*固定欄位必須輸出，不可移除 */,\n\t\t\t\t\tLAST_MOD_USER_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tLAST_MOD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tCONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT /*固定欄位必須輸出，不可移除 */,\n\t\t\t\t\tDEL_USER_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tDEL_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tCONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT /*固定欄位必須輸出，不可移除 */,\n\t\t\t\t\tDATA_STATUS /*固定欄位必須輸出，不可移除*/\n\t\t\t   FROM JH_WS02_SCHDL_CALENDAR WITH (NOLOCK)\n\t\t\t  WHERE (SG_PK \= '$$PK$$'\n\t\t\t\t\tOR '$$PK$$' \= 'ALL')\n\t\t\t\tAND (CR_PROCESS \= '$$CODE_TYPE$$'\n\t\t\t\t    OR '$$CODE_TYPE$$' \= 'ALL')\t  \n\t\t\t    AND (TRY_CONVERT(date,SG_START_DT) >\= TRY_CONVERT(date,'$$SG_START_DATE$$')\n\t\t\t\t    OR IIF(TRY_CONVERT(date,'$$SG_START_DATE$$') IS NULL,'ALL','')\='ALL')\n\t\t\t\tAND (SG_START_DT >\= TRY_CONVERT(datetime,'$$SG_START_DATE$$'+' '+'$$SG_START_TIME$$')\n\t\t\t\t    OR IIF('$$SG_START_TIME$$'\='ALL','ALL','')\='ALL')\n\t\t\t\tAND (TRY_CONVERT(date,SG_END_DT) <\= TRY_CONVERT(date,'$$SG_END_DATE$$')\n\t\t\t\t    OR IIF(TRY_CONVERT(date,'$$SG_END_DATE$$') IS NULL,'ALL','') \= 'ALL')\n\t\t\t\tAND (SG_END_DT <\= TRY_CONVERT(datetime,'$$SG_END_DATE$$'+' '+'$$SG_END_TIME$$')\n\t\t\t\t    OR IIF('$$SG_END_TIME$$'\='ALL','ALL','')\='ALL')\n\t\t\t\tAND '$$LOG_TYPE$$'\='0'\n\t\t\t\tAND (DATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\t\t    OR '$$DATA_STATUS$$' \= 'ALL')\n\t\t\t) AS new1) outer1\n\tWHERE outer1.RowNum > $$start$$\n\t  AND outer1.RowNum <\= ($$start$$ + $$limit$$);\nEND\nELSE IF '$$LOG_TYPE$$' \= '1'\nBEGIN\n\n\tSELECT *\n\tFROM (SELECT COUNT(*) OVER() AS totalProperty,\n\t\t\t  ROW_NUMBER() OVER (\n\t\t\t\t\t\t\t\t ORDER BY CONVERT(INT,new1.SG_TEAM_NUM),new1.SG_THIS_DT) AS RowNum,\n\t\t\t  new1.*\n\t\t\tFROM\n\t\t\t(SELECT\tPK,\n\t\t\t\t\tWS_CODE,\n\t\t\t\t\tPROXY_WS,\n\t\t\t\t\tSG_NAME,\n\t\t\t\t\tSG_PK,\n\t\t\t\t\tTK_NAME,\n\t\t\t\t\tCONVERT(VARCHAR, SG_TEAM_NUM) AS SG_TEAM_NUM,\n\t\t\t\t\tCONVERT(VARCHAR, SG_THIS_DT, 120) AS SG_THIS_DT,\n\t\t\t\t\tCONVERT(VARCHAR, SG_NEXT_DT, 120) AS SG_NEXT_DT,\n\t\t\t\t\tCONVERT(VARCHAR, SG_START_DT, 120) AS SG_START_DT,\n\t\t\t\t\tCONVERT(VARCHAR, SG_END_DT, 120) AS SG_END_DT,\n\t\t\t\t\t'' AS CR_PROCESS_HELP,\n\t\t\t\t\t'' AS LOG_URL,\n\t\t\t\t\tCOMPANY_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tADD_USER_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tADD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tCONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT /*固定欄位必須輸出，不可移除 */,\n\t\t\t\t\tLAST_MOD_USER_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tLAST_MOD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tCONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT /*固定欄位必須輸出，不可移除 */,\n\t\t\t\t\tDEL_USER_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tDEL_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/,\n\t\t\t\t\tCONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT /*固定欄位必須輸出，不可移除 */,\n\t\t\t\t\tDATA_STATUS /*固定欄位必須輸出，不可移除*/\n\t\t      FROM JH_WS02_SCHDL_RESERVATION WITH (NOLOCK)\n\t\t     WHERE (SG_PK \= '$$PK$$'\n\t\t\t\t   OR '$$PK$$' \= 'ALL')\n\t\t\t   AND (TRY_CONVERT(date,SG_START_DT) >\= TRY_CONVERT(date,'$$SG_START_DATE$$')\n\t\t\t       OR IIF(TRY_CONVERT(date,'$$SG_START_DATE$$') IS NULL,'ALL','')\='ALL')\n\t\t\t   AND (SG_START_DT >\= TRY_CONVERT(datetime,'$$SG_START_DATE$$'+' '+'$$SG_START_TIME$$')\n\t\t\t\t   OR IIF('$$SG_START_TIME$$'\='ALL','ALL','')\='ALL')\n\t\t\t   AND (TRY_CONVERT(date,SG_END_DT) <\= TRY_CONVERT(date,'$$SG_END_DATE$$')\n\t\t\t       OR IIF(TRY_CONVERT(date,'$$SG_END_DATE$$') IS NULL,'ALL','') \= 'ALL')\n\t\t\t   AND (SG_END_DT <\= TRY_CONVERT(datetime,'$$SG_END_DATE$$'+' '+'$$SG_END_TIME$$')\n\t\t\t\t   OR IIF('$$SG_END_TIME$$'\='ALL','ALL','')\='ALL')\n\t\t\t   AND '$$LOG_TYPE$$'\='1'\n\t\t\t   AND (DATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\t\t   OR '$$DATA_STATUS$$' \= 'ALL')\n\t\t\t) AS new1) outer1\n\tWHERE outer1.RowNum > $$start$$\n\t  AND outer1.RowNum <\= ($$start$$ + $$limit$$);\nEND
API_Fn09A003_SG_NAME=/* \n\tLast Version Last Updated by Last Updated Date Comment；\n\t\tv2.2.3 Steve 20200720\n\t\t\t1. 以 COUNT(*) OVER() 方式解決 \n\t\t\t2 段子查詢問題\n\t\tv2.2.3 Min 20200828\n\t\t\t1. 增加 @R1_CONDITION 註解說明\n\t\tv2.2.3 Steve 20201016\n\t\t\t1. 調整註解\n*/\nSELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY PK\n\t\t\t) AS RowNum\n\t\t,PK\n\t\t,SG_NAME\n\tFROM JH_WS02_SCHDL_GROUP WITH (NOLOCK)\n      WHERE (SG_NAME LIKE '%$$SG_NAME$$%' \n\t\t\tOR\n            '$$SG_NAME$$' \= 'ALL')\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)
API_Fn09X001_D1=SELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n   FROM PROP_MASTER \n   WHERE PROP_TYPE \= 'SSH'\n     AND ENABLED_FLAG \= 'Y') A,\n\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY PK_PROP ASC) AS RowNum,\n                            PROP_ID\n   FROM PROP_MASTER\n   WHERE PROP_TYPE \= 'SSH'\n     AND ENABLED_FLAG \= 'Y') B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)
API_FN09X002_CD_US_GR=SELECT *,\n\n  (SELECT COUNT(*)\n   FROM\n     (SELECT USERID AS 'US_GR_ID',\n             USERNAME AS 'US_GR_DESC'\n      FROM USERS AS A\n      UNION ALL SELECT GROUPID AS 'US_GR_ID',\n                       GROUPNAME AS 'US_GR_DESC'\n      FROM GROUPS AS B) AS NEW1)totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY US_GR_ID) AS RowNum,\n                            *\n   FROM\n     (SELECT USERID AS 'US_GR_ID',\n             USERNAME AS 'US_GR_DESC'\n      FROM USERS AS A\n      UNION ALL SELECT GROUPID AS 'US_GR_ID',\n                       GROUPNAME AS 'US_GR_DESC'\n      FROM GROUPS AS B) AS NEW2) AS NEW3\nWHERE RowNum > $$start$$\n  AND RowNum <\= ($$start$$+$$limit$$);
API_FN09X002_DS=SELECT *,\n\n  (SELECT COUNT(*)\n   FROM JH_WS02_FM_RULE\n   WHERE ((FM_FOLDER_NAME LIKE '%$$FM_FOLDER_NAME$$%') OR ('$$FM_FOLDER_NAME$$' \= 'ALL'))\n   AND ((FM_FILE_NAME LIKE '%$$FM_FILE_NAME$$%') OR ('$$FM_FILE_NAME$$' \= 'ALL'))\n   AND ((FM_RULE_VALUE LIKE '%$$FM_RULE_VALUE$$%') OR ('$$FM_RULE_VALUE$$' \= 'ALL'))) AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY PK) AS RowNum,\n                            *\n   FROM JH_WS02_FM_RULE\n   WHERE ((FM_FOLDER_NAME LIKE '%$$FM_FOLDER_NAME$$%') OR ('$$FM_FOLDER_NAME$$' \= 'ALL'))\n   AND ((FM_FILE_NAME LIKE '%$$FM_FILE_NAME$$%') OR ('$$FM_FILE_NAME$$' \= 'ALL'))\n   AND ((FM_RULE_VALUE LIKE '%$$FM_RULE_VALUE$$%') OR ('$$FM_RULE_VALUE$$' \= 'ALL'))) AS new1\nWHERE RowNum > $$start$$\n  AND RowNum <\= ($$start$$+$$limit$$);
API_FN0ˊ6B002_DSTEST=SELECT *\n ,(\n  SELECT COUNT(*)\n  FROM GROUPS_TEST WITH (NOLOCK)\n  WHERE (DATA_STATUS \= '$$DATA_STATUS$$'\n   OR '$$DATA_STATUS$$' \= 'ALL')\n   ) AS totalProperty\nFROM (\nSELECT ROW_NUMBER() OVER (\n   ORDER BY ) AS RowNum\n,GROUP_IDX\n,GROUPID\n,GROUPNAME\n,GROUPDESC\n,pos_level\n,DEL_USER_COMPANY_ID\n,DEL_DT\n,LAST_MOD_USER_COMPANY_ID\n,DEL_USER_ID\n,ADD_USER_COMPANY_ID\n,LAST_MOD_DT\n,ADD_USER_ID\n,DATA_STATUS\n,COMPANY_ID\n,LAST_MOD_USER_ID\n,ADD_DT\nFROM GROUPS_TEST WITH (NOLOCK)\nWHERE (\n   DATA_STATUS \= '$$DATA_STATUS$$'\n   OR '$$DATA_STATUS$$' \= 'ALL'\n   )\n) AS new1\nWHERE RowNum > $$start$$\n AND RowNum <\= ($$start$$ + $$limit$$);
API_Fn11B001_DS=SELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (ORDER BY EX.EXP_NO) AS RowNum\n\t\t,EX.FORM_PK\n\t\t,EX.EXP_NO\n\t\t,EX.EXP_CATEGORY\n\t\t,EX.RFA_YN\n\t\t,EX.CONTRACT_YN\n\t\t,EX.RFA_NO\n\t\t,EX.CONTRACT_NO\n\t\t,EX.COST_CENTER\n\t\t,EX.EXP_APPLY_DESC\n\t\t,EX.EXP_DESC\n\t\t,EX.EXP_AMT\n\t\t,EX.WF_SET_MASTER_SEQ\n\t\t,CONVERT(VARCHAR(10),EX.APPLY_DTE, 120) AS APPLY_DTE\n\t\t,EX.APPLICANT_USERID\n\t\t,EX.OWNER_USERID\n\t\t,CONVERT(VARCHAR, EX.ADD_DT, 120) AS ADD_DT\n\t\t,EX.ADD_USER_ID\n\t\t,EX.ADD_USER_COMPANY_ID\n\t\t,CONVERT(VARCHAR, EX.LAST_MOD_DT, 120) AS LAST_MOD_DT\n\t\t,EX.LAST_MOD_USER_ID\n\t\t,EX.LAST_MOD_USER_COMPANY_ID\n\t\t,CONVERT(VARCHAR, EX.DEL_DT, 120) AS DEL_DT\n\t\t,EX.DEL_USER_ID\n\t\t,EX.DEL_USER_COMPANY_ID\n\t\t,EX.COMPANY_ID\n\t\t,EX.DATA_STATUS\n\t\t,C1.CODE_VALUE_DESC AS EXP_CATEGORY_DESC /*費用申請類別*/\n\t\t,C3.CODE_VALUE_DESC AS DATA_STATUS_DESC/*表單狀態*/\n\t\t,UA.USERNAME AS APPLICANT_USERNAME/*表單申請者*/\n\t\t,UO.USERNAME AS OWNER_USERNAME /*表單負責人*/\n\tFROM JH_FORM_EXP_REQ EX WITH (NOLOCK)\n\tLEFT JOIN JH_REF_CODE_DETAIL C1 ON (C1.CODE_TYPE \= 'EXP_CATEGORY'  AND C1.CODE_VALUE \= EX.EXP_CATEGORY)\n\tLEFT JOIN JH_REF_CODE_DETAIL C3 ON (C3.CODE_TYPE \= 'DATA_STATUS'   AND C3.CODE_VALUE \= EX.DATA_STATUS)\n\tLEFT JOIN JH_CONF_USERS UA ON (UA.USERID \= EX.APPLICANT_USERID)\n\tLEFT JOIN JH_CONF_USERS UO ON (UO.USERID \= EX.OWNER_USERID)\n\tWHERE EXISTS (SELECT 1 FROM dbo.JHFN_GET_AUTH_USERS('${PARAM_SOURCE_COMING}') U WHERE U.USERID \= EX.OWNER_USERID) /*找出自己有權限看到的資料($$USERID$$為登入者之USERID)*/\n\t\tAND (APPLY_DTE >\= TRY_CONVERT(DATETIME, '$$APPLY_DTE_S$$') OR '$$APPLY_DTE_S$$' \= 'ALL')\n\t\tAND (APPLY_DTE <\= TRY_CONVERT(DATETIME, '$$APPLY_DTE_E$$') OR '$$APPLY_DTE_E$$' \= 'ALL') /*申請日期*/\n\t\tAND (EXP_NO LIKE '%$$EXP_NO$$%' OR '$$EXP_NO$$' \= 'ALL') /*費用單編號*/\n\t\tAND (EXP_CATEGORY \= '$$EXP_CATEGORY$$' OR '$$EXP_CATEGORY$$' \= 'ALL') /*費用申請單類別*/\n\t\tAND (EXISTS (\n\t\t\t\tSELECT 1\n\t\t\t\tFROM JH_CONF_USERS U\n\t\t\t\tWHERE U.USERID \= EX.OWNER_USERID\n\t\t\t\t\tAND U.DEPID \= '$$DEPID$$'\n\t\t\t\t) OR '$$DEPID$$' \= 'ALL'\n\t\t\t) /*表單負責人部門*/\n\t\tAND (EX.OWNER_USERID \= '$$OWNER_USERID$$' OR '$$OWNER_USERID$$' \= 'ALL') /*表單負責人*/ \n\t\tAND (  ('$$DATA_STATUS_CLOSE$$' \= 'Y' AND EX.DATA_STATUS \= 4)\n\t\t\tOR ('$$DATA_STATUS_CLOSE$$' \= 'N' AND EX.DATA_STATUS <> 4)\n\t\t\t)\n                AND (EX.DATA_STATUS \= '$$DATA_STATUS$$' OR  '$$DATA_STATUS$$'\='ALL')\n\t) AS new1 /*@o@*/\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
API_Fn11C001_SAVE=EXEC JHSP_FORM_PROCESS $$WF_DATA_SEQ$$,$$WF_DATA_STEP_SEQ$$,$$WF_DATA_STEP_EXE_SEQ$$,'$$PRINCIPAL_USRID$$','${PARAM_SOURCE_COMING}','${PARAM_SOURCE_COMING_NAME}','$$GROUPID$$','$$EXEC_RESULT$$', '$$EXEC_REMARK$$', @RETURN_CODE OUTPUT,@RETURN_MSG OUTPUT
API_FnDBa001_CD_COMB1=SELECT DISTINCT DB_NAME,DB_OWNER FROM JH_TABLE_INFO
API_FnDBa001_CD_COMB2=SELECT DB_OWNER FROM JH_TABLE_INFO
API_FnDBa001_CD_COMBO=select distinct A.DB_NAME,A.DB_OWNER\nFROM JH_TABLE_INFO AS A \nLEFT JOIN JH_TABLE_COLUMN_INFO AS B ON A.PK \= B.TABLE_PK\nLEFT JOIN JH_TABLE_HELP AS C ON A.DB_NAME \= C.DB_NAME AND A.DB_OWNER \= C.DB_OWNER AND A.TABLE_NAME \= C.TABLE_NAME\nLEFT JOIN JH_TABLE_COLUMN_HELP AS D ON B.TABLE_PK \= D.TABLE_PK AND B.COL_NAME \= D.COL_NAME
API_FnDBa001_COMB1=SELECT DB_NAME FROM JH_TABLE_INFO
API_FnDBa001_D1=SELECT *\nFROM (SELECT ROW_NUMBER() OVER(ORDER BY COL_IDX) AS ROWNUM,\nA.PK AS 'PK_COLUMN',\nB.PK AS 'PK',\nB.TABLE_PK AS 'TABLE_PK',\nB.COL_IDX AS 'COL_IDX',\nB.COL_NAME AS 'COL_NAME',\nB.COL_CNAME AS 'COL_CNAME',\nB.COL_TYPE AS 'COL_TYPE',\nB.COL_LEN AS 'COL_LEN',\nB.COL_DECIMAL AS 'COL_DECIMAL',\nB.COL_ISNULL AS 'COL_ISNULL',\nB.COL_ISPK AS 'COL_ISPK',\nB.COL_ISIDENTITY AS 'COL_ISIDENTITY',\nB.COMPANY_ID AS 'COMPANY_ID',\nB.ADD_USER_ID AS 'ADD_USER_ID',\nB.ADD_USER_COMPANY_ID AS 'ADD_USER_COMPANY_ID',\nB.ADD_DT AS 'ADD_DT',\nB.LAST_MOD_USER_ID AS 'LAST_MOD_USER_ID',\nB.LAST_MOD_USER_COMPANY_ID AS 'LAST_MOD_USER_COMPANY_ID',\nB.LAST_MOD_DT AS 'LAST_MOD_DT',\nB.DEL_USER_ID AS 'DEL_USER_ID',\nB.DEL_USER_COMPANY_ID AS 'DEL_USER_COMPANY_ID',\nB.DEL_DT AS 'DEL_DT',\nB.DATA_STATUS AS 'DATA_STATUS'\nFROM JH_TABLE_INFO AS A\nLEFT JOIN JH_TABLE_COLUMN_INFO AS B ON A.PK \= B.TABLE_PK\nLEFT JOIN JH_TABLE_HELP AS C ON A.DB_NAME \= C.DB_NAME AND A.DB_OWNER \= C.DB_OWNER AND A.TABLE_NAME \= C.TABLE_NAME\nLEFT JOIN JH_TABLE_COLUMN_HELP AS D ON B.TABLE_PK \= D.TABLE_PK AND B.COL_NAME \= D.COL_NAME\nWHERE B.TABLE_PK \= '$$PK_COLUMN$$'\n) AS NEW\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
API_FnDBa001_D1_WELL=SELECT *\n\tFROM ( SELECT COUNT(*) OVER() AS totalProperty,\n          ROW_NUMBER() OVER (\n\t\t  ORDER BY C.COL_IDX\n\t\t\t) AS RowNum,\n\t   A.PK AS 'PK_COLUMN',\n\t   C.PK AS 'JH_TABLE_COLUMN_INFO_PK',\n\t   C.TABLE_PK AS 'TABLE_PK',\n\t   C.COL_IDX AS 'COL_IDX',\n\t   C.COL_NAME AS 'COL_NAME',\n\t   C.COL_CNAME AS 'COL_CNAME',\n\t   C.COL_TYPE AS 'COL_TYPE',\n\t   C.COL_LEN AS 'COL_LEN',\n\t   C.COL_DECIMAL AS 'COL_DECIMAL',\n\t   C.COL_ISPK AS 'COL_ISPK',\n\t   C.COL_ISNULL AS 'COL_ISNULL',\n\t   C.COL_ISIDENTITY AS 'COL_ISIDENTITY',\n\t   C.COMPANY_ID AS 'COMPANY_ID',\n\t   C.ADD_USER_ID AS 'ADD_USER_ID',\n\t   C.ADD_USER_COMPANY_ID AS 'ADD_USER_COMPANY_ID',\n\t   C.ADD_DT AS 'ADD_DT',\n\t   C.LAST_MOD_USER_ID AS 'LAST_MOD_USER_ID',\n\t   C.LAST_MOD_USER_COMPANY_ID AS 'LAST_MOD_USER_COMPANY_ID',\n\t   C.LAST_MOD_DT AS 'LAST_MOD_DT',\n\t   C.DEL_USER_ID AS 'DEL_USER_ID',\n\t   C.DEL_USER_COMPANY_ID AS 'DEL_USER_COMPANY_ID',\n\t   C.DEL_DT AS 'DEL_DT',\n\t   C.DATA_STATUS AS 'DATA_STATUS',\t   \n\t   D.COL_HELP AS 'COL_HELP'\nFROM JH_TABLE_INFO AS A \nLEFT JOIN JH_TABLE_HELP AS B ON A.DB_NAME \= B.DB_NAME AND A.DB_OWNER \= B.DB_OWNER AND A.TABLE_NAME \= B.TABLE_NAME\nLEFT JOIN JH_TABLE_COLUMN_INFO AS C ON A.PK \= C.TABLE_PK\nLEFT JOIN JH_TABLE_COLUMN_HELP AS D ON C.TABLE_PK \= D.TABLE_PK AND C.COL_NAME \= D.COL_NAME\nWHERE C.TABLE_PK \= '$$PK_COLUMN$$') AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
API_FnDBa001_DS=IF '$$RD_BUTTON$$' \= 'A'\n  BEGIN\nSELECT * \nFROM (SELECT ROW_NUMBER() OVER(ORDER BY A.PK) AS ROWNUM,  \nA.PK AS 'PK_COLUMN',\nA.DB_NAME AS 'DB_NAME',\nA.DB_OWNER AS 'DB_OWNER',\nA.TABLE_NAME AS 'TABEL_NAME',\nA.TABLE_CNAME AS 'TABLE_CNAME',\n'' AS 'COMPANY_ID',\n'' AS 'ADD_USER_ID',\n'' AS 'ADD_USER_COMPANY_ID',\nA.ADD_DT AS 'ADD_DT',\n'' AS 'LAST_MOD_USER_ID',\n'' AS 'LAST_MOD_USER_COMPANY_ID',\n'' AS 'LAST_MOD_DT',\n'' AS 'DEL_USER_ID',\n'' AS 'DEL_USER_COMPANY_ID',\n'' AS 'DEL_DT',\n'' AS 'DATA_STATUS',\n'' AS 'JH_TABLE_COLUMN_INFO_PK',\n'' AS 'TABLE_PK',\n'' AS 'COL_NAME',\n'' AS 'COL_CNAME',\n'' AS 'COL_TYPE',\n'' AS 'COL_LEN',\n'' AS 'COL_DECIMAL',\n'' AS 'COL_ISNULL',\n'' AS 'COL_ISPK',\n'' AS 'COL_ISIDENTITY',\nC.TABLE_HELP AS 'TABLE_HELP',\n'' AS 'COL_HELP' \nFROM JH_TABLE_INFO AS A \nLEFT JOIN JH_TABLE_COLUMN_INFO AS B ON A.PK \= B.TABLE_PK\nLEFT JOIN JH_TABLE_HELP AS C ON A.DB_NAME \= C.DB_NAME AND A.DB_OWNER \= C.DB_OWNER AND A.TABLE_NAME \= C.TABLE_NAME\nLEFT JOIN JH_TABLE_COLUMN_HELP AS D ON B.TABLE_PK \= D.TABLE_PK AND B.COL_NAME \= D.COL_NAME\n\tWHERE (A.DB_NAME LIKE '%$$DB_NAME$$%'\n\t\tOR '$$TABLE_NAME$$' \= 'ALL')\n\tAND (A.DB_OWNER LIKE '%$$DB_OWNER$$%'\n\t\tOR '$$DB_OWNER$$' \= 'ALL')\n\tAND (A.TABLE_NAME LIKE '%$$TABLE_NAME$$%'\n\t\tOR '$$TABLE_NAME$$' \= 'ALL')\n\tAND (A.TABLE_CNAME LIKE '%$$TABLE_CNAME$$%'\n\t\tOR '$$TABLE_CNAME$$' \= 'ALL')\n) AS NEW\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n  END\nELSE IF '$$RD_BUTTON$$' \= 'B'\n  BEGIN\nSELECT *\nFROM (SELECT ROW_NUMBER() OVER(ORDER BY A.PK) AS ROWNUM,  \nA.PK AS 'PK_COLUMN',\nA.DB_NAME AS 'DB_NAME',\nA.DB_OWNER AS 'DB_OWNER',\nA.TABLE_NAME AS 'TABEL_NAME',\nA.TABLE_CNAME AS 'TABLE_CNAME',\nA.COMPANY_ID AS 'COMPANY_ID',\nA.ADD_USER_ID AS 'ADD_USER_ID',\nA.ADD_USER_COMPANY_ID AS 'ADD_USER_COMPANY_ID',\nA.ADD_DT AS 'ADD_DT',\nA.LAST_MOD_USER_ID AS 'LAST_MOD_USER_ID',\nA.LAST_MOD_USER_COMPANY_ID AS 'LAST_MOD_USER_COMPANY_ID',\nA.LAST_MOD_DT AS 'LAST_MOD_DT',\nA.DEL_USER_ID AS 'DEL_USER_ID',\nA.DEL_USER_COMPANY_ID AS 'DEL_USER_COMPANY_ID',\nA.DEL_DT AS 'DEL_DT',\nA.DATA_STATUS AS 'DATA_STATUS',\nB.PK AS 'JH_TABLE_COLUMN_INFO_PK',\nB.TABLE_PK AS 'TABLE_PK',\nB.COL_NAME AS 'COL_NAME',\nB.COL_CNAME AS 'COL_CNAME',\nB.COL_TYPE AS 'COL_TYPE',\nB.COL_LEN AS 'COL_LEN',\nB.COL_DECIMAL AS 'COL_DECIMAL',\nB.COL_ISNULL AS 'COL_ISNULL',\nB.COL_ISPK AS 'COL_ISPK',\nB.COL_ISIDENTITY AS 'COL_ISIDENTITY',\nC.TABLE_HELP AS 'TABLE_HELP',\nD.COL_HELP AS 'COL_HELP'\nFROM JH_TABLE_INFO AS A \nLEFT JOIN JH_TABLE_COLUMN_INFO AS B ON A.PK \= B.TABLE_PK\nLEFT JOIN JH_TABLE_HELP AS C ON A.DB_NAME \= C.DB_NAME AND A.DB_OWNER \= C.DB_OWNER AND A.TABLE_NAME \= C.TABLE_NAME\nLEFT JOIN JH_TABLE_COLUMN_HELP AS D ON B.TABLE_PK \= D.TABLE_PK AND B.COL_NAME \= D.COL_NAME\n\tWHERE (A.DB_NAME LIKE '%$$DB_NAME$$%'\n\t\tOR '$$TABLE_NAME$$' \= 'ALL')\n\tAND (A.DB_OWNER LIKE '%$$DB_OWNER$$%'\n\t\tOR '$$DB_OWNER$$' \= 'ALL')\n\tAND (A.TABLE_NAME LIKE '%$$TABLE_NAME$$%'\n\t\tOR '$$TABLE_NAME$$' \= 'ALL')\n\tAND (A.TABLE_CNAME LIKE '%$$TABLE_CNAME$$%'\n\t\tOR '$$TABLE_CNAME$$' \= 'ALL')\n\tAND (B.COL_NAME  LIKE '%$$COL_NAME$$%'\n\t\tOR '$$COL_NAME$$' \= 'ALL')\n\tAND (B.COL_CNAME LIKE '%$$COL_CNAME$$%'\n\t\tOR '$$COL_CNAME$$' \= 'ALL')\n) AS NEW\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\nEND
API_FnDBa001_DS_WELL=IF '$$SELECT_TABLE$$' \= 'A'\nBEGIN\n\tSELECT *\n\t\tFROM( \n\t\tSELECT COUNT(*) OVER() AS totalProperty,\n          ROW_NUMBER() OVER (\n\t\t\tORDER BY A.PK\n\t\t\t) AS RowNum,\n\t\t A.PK AS 'PK_COLUMN',\n\t\t A.DB_NAME AS 'DB_NAME',\n\t\t A.DB_OWNER AS 'DB_OWNER',\n\t\t A.TABLE_NAME AS 'TABLE_NAME',\n\t\t A.TABLE_CNAME AS 'TABLE_CNAME',\t\t \n\t\t A.COMPANY_ID AS 'COMPANY_ID',\n\t\t A.ADD_USER_ID AS 'ADD_USER_ID',\n\t\t A.ADD_USER_COMPANY_ID AS 'ADD_USER_COMPANY_ID',\n\t\t A.ADD_DT AS 'ADD_DT',\n\t\t A.LAST_MOD_USER_ID AS 'LAST_MOD_USER_ID',\n\t\t A.LAST_MOD_USER_COMPANY_ID AS 'LAST_MOD_USER_COMPANY_ID',\n\t\t A.LAST_MOD_DT AS 'LAST_MOD_DT',\n\t\t A.DEL_USER_ID AS 'DEL_USER_ID',\n\t\t A.DEL_USER_COMPANY_ID AS 'DEL_USER_COMPANY_ID',\n\t\t A.DEL_DT AS 'DEL_DT',\n\t\t A.DATA_STATUS AS 'DATA_STATUS',\n\t\t C.TABLE_HELP AS 'TABLE_HELP',\n\t\t '' AS 'JH_TABLE_COLUMN_INFO_PK',\n\t\t '' AS 'TABLE_PK',\n\t\t '' AS 'COL_NAME',\n\t\t '' AS 'COL_CNAME',\n\t\t '' AS 'COL_TYPE',\n\t\t '' AS 'COL_LEN',\n\t\t '' AS 'COL_DECIMAL',\n\t\t '' AS 'COL_ISNULL',\n\t\t '' AS 'COL_ISPK',\n\t\t '' AS 'COL_ISIDENTITY',\t\t \n\t\t '' AS 'COL_HELP'\t\t\n\tFROM JH_TABLE_INFO AS A \n\tLEFT JOIN JH_TABLE_COLUMN_INFO AS B ON A.PK \= B.TABLE_PK\n\tLEFT JOIN JH_TABLE_HELP AS C ON A.DB_NAME \= C.DB_NAME AND A.DB_OWNER \= C.DB_OWNER AND A.TABLE_NAME \= C.TABLE_NAME\n\tLEFT JOIN JH_TABLE_COLUMN_HELP AS D ON B.TABLE_PK \= D.TABLE_PK AND B.COL_NAME \= D.COL_NAME\n\tWHERE\t(\n\t\t\t\tA.DB_NAME LIKE '%$$DB_NAME$$%'\n\t\t\t\tOR '$$DB_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND(\n\t\t\t\tA.DB_OWNER LIKE '%$$DB_OWNER$$%'\n\t\t\t\tOR '$$DB_OWNER$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tA.TABLE_NAME LIKE '$$TABLE_NAME$$%'\n\t\t\t\tOR '$$TABLE_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tA.TABLE_CNAME LIKE '$$TABLE_CNAME$$%'\n\t\t\t\tOR '$$TABLE_CNAME$$' \= 'ALL'\n\t\t\t\t)) AS new1\n\tWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n\nEND\nELSE IF '$$SELECT_TABLE$$' \= 'B'\nBEGIN\n  SELECT *\n\t\tFROM(SELECT COUNT(*) OVER() AS totalProperty,\n          ROW_NUMBER() OVER (\n\t\t  ORDER BY A.PK\n\t\t\t) AS RowNum,\n\t\tA.PK AS 'PK_COLUMN',\n\t\tA.DB_NAME AS 'DB_NAME',\n\t\tA.DB_OWNER AS 'DB_OWNER',\n\t\tA.TABLE_NAME AS 'TABLE_NAME',\n\t\tA.TABLE_CNAME AS 'TABLE_CNAME',\n\t\tA.COMPANY_ID AS 'COMPANY_ID',\n\t\tA.ADD_USER_ID AS 'ADD_USER_ID',\n\t\tA.ADD_USER_COMPANY_ID AS 'ADD_USER_COMPANY_ID',\n\t\tA.ADD_DT AS 'ADD_DT',\n\t\tA.LAST_MOD_USER_ID AS 'LAST_MOD_USER_ID',\n\t\tA.LAST_MOD_USER_COMPANY_ID AS 'LAST_MOD_USER_COMPANY_ID',\n\t\tA.LAST_MOD_DT AS 'LAST_MOD_DT',\n\t\tA.DEL_USER_ID AS 'DEL_USER_ID',\n\t\tA.DEL_USER_COMPANY_ID AS 'DEL_USER_COMPANY_ID',\n\t\tA.DEL_DT AS 'DEL_DT',\n\t\tA.DATA_STATUS AS 'DATA_STATUS',\n\t\tB.PK AS 'JH_TABLE_COLUMN_INFO_PK',\n\t\tB.TABLE_PK AS 'TABLE_PK',\n\t\tB.COL_NAME AS 'COL_NAME',\n\t\tB.COL_CNAME AS 'COL_CNAME',\n\t\tB.COL_TYPE AS 'COL_TYPE',\n\t\tB.COL_LEN AS 'COL_LEN',\n\t\tB.COL_DECIMAL AS 'COL_DECIMAL',\n\t\tB.COL_ISPK AS 'COL_ISPK',\n\t\tB.COL_ISNULL AS 'COL_ISNULL',\t\t\n\t\tB.COL_ISIDENTITY AS 'COL_ISIDENTITY',\n\t\tC.TABLE_HELP AS 'TABLE_HELP',\n\t\tD.COL_HELP AS 'COL_HELP'\n\t\tFROM JH_TABLE_INFO AS A \n\t\tLEFT JOIN JH_TABLE_COLUMN_INFO AS B ON A.PK \= B.TABLE_PK\n\t\tLEFT JOIN JH_TABLE_HELP AS C ON A.DB_NAME \= C.DB_NAME AND A.DB_OWNER \= C.DB_OWNER AND A.TABLE_NAME \= C.TABLE_NAME\n\t\tLEFT JOIN JH_TABLE_COLUMN_HELP AS D ON B.TABLE_PK \= D.TABLE_PK AND B.COL_NAME \= D.COL_NAME\n\t\tWHERE (\n\t\t\t\tA.DB_NAME LIKE '%$$DB_NAME$$%'\n\t\t\t\tOR '$$DB_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND(\n\t\t\t\tA.DB_OWNER LIKE '%$$DB_OWNER$$%'\n\t\t\t\tOR '$$DB_OWNER$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tA.TABLE_NAME LIKE '$$TABLE_NAME$$%'\n\t\t\t\tOR '$$TABLE_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tA.TABLE_CNAME LIKE '$$TABLE_CNAME$$%'\n\t\t\t\tOR '$$TABLE_CNAME$$' \= 'ALL'\n\t\t\t\t)\t\t\n\t\t\tAND (\n\t\t\t\tB.COL_NAME LIKE '$$COL_NAME$$%'\n\t\t\t\tOR '$$COL_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tB.COL_CNAME LIKE '$$COL_CNAME$$%'\n\t\t\t\tOR '$$COL_CNAME$$' \= 'ALL'\n\t\t\t\t)) AS new1\n\tWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n\t\nEND;
API_FnDBa001_WELLTEST2=select A.PK as 'PK_COLUMN',\n\t   B.PK,B.COL_NAME,B.COL_CNAME,B.COL_TYPE,B.COL_LEN,B.COL_DECIMAL,B.COL_ISPK,\n\t   B.COL_ISNULL,B.COL_ISIDENTITY,B.COMPANY_ID,B.ADD_USER_ID,B.ADD_USER_COMPANY_ID,\n\t   B.ADD_DT,B.LAST_MOD_USER_ID,B.LAST_MOD_USER_COMPANY_ID,B.LAST_MOD_DT,B.DEL_USER_ID,\n\t   B.DEL_USER_COMPANY_ID,B.DEL_DT,B.DATA_STATUS,B.COL_IDX as 'COL_IDX',\n\t   C.COL_HELP\nfrom JH_TABLE_INFO AS A\nLEFT JOIN JH_TABLE_COLUMN_INFO B ON A.PK \= B.TABLE_PK\nLEFT JOIN JH_TABLE_COLUMN_HELP C ON A.PK \= C.PK\nWHERE B.TABLE_PK \= '$$PK_COLUMN$$'\nORDER BY 'COL_IDX'
API_FnDBa001_WELLTEST=IF '$$SELECT_TABLE$$' \= 'A'\nBEGIN\n\tselect \n\t\t A.DB_NAME,A.DB_OWNER,A.TABLE_NAME,A.TABLE_CNAME,C.TABLE_HELP,A.PK AS 'PK_COLUMN',\n\t\t A.COMPANY_ID,A.ADD_USER_ID,A.ADD_USER_COMPANY_ID,A.ADD_DT,A.LAST_MOD_USER_ID,\n\t\t A.LAST_MOD_USER_COMPANY_ID,A.LAST_MOD_DT,A.DEL_USER_ID,A.DEL_USER_COMPANY_ID,\n\t\t A.DEL_DT,A.DATA_STATUS,\n\t\t '' as 'COL_NAME',\n\t\t '' as 'COL_CNAME',\n\t\t '' as 'COL_TYPE',\n\t\t '' as 'COL_LEN',\n\t\t '' as 'COL_DECIMAL',\n\t\t '' as 'COL_ISNULL',\n\t\t '' as 'COL_ISPK',\n\t\t '' as 'COL_ISIDENTITY',\n\t\t '' as 'TABLE_HELP',\n\t\t '' as 'COL_HELP'\t\t \n\tfrom JH_TABLE_INFO as A\t\t\n\tLEFT JOIN JH_TABLE_COLUMN_INFO as B ON A.PK \= B.TABLE_PK \n\tLEFT JOIN JH_TABLE_HELP AS c ON A.DB_NAME \= C.DB_NAME\n\tLEFT JOIN JH_TABLE_COLUMN_HELP AS D ON B.TABLE_PK \= D.TABLE_PK\n\tWHERE\t(\n\t\t\t\tA.DB_NAME LIKE '%$$DB_NAME$$%'\n\t\t\t\tOR '$$DB_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND(\n\t\t\t\tA.DB_OWNER LIKE '%$$DB_OWNER$$%'\n\t\t\t\tOR '$$DB_OWNER$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tA.TABLE_NAME LIKE '%$$TABLE_NAME$$%'\n\t\t\t\tOR '$$TABLE_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tA.TABLE_CNAME LIKE '%$$TABLE_CNAME$$%'\n\t\t\t\tOR '$$TABLE_CNAME$$' \= 'ALL'\n\t\t\t\t)\n\nEND\nELSE IF '$$SELECT_TABLE$$' \= 'B'\nBEGIN\n  SELECT \n\t\tA.DB_NAME,A.DB_OWNER,A.TABLE_NAME,A.TABLE_CNAME,A.PK as 'PK_COLUMN',\n\t\tA.COMPANY_ID,A.ADD_USER_ID,A.ADD_USER_COMPANY_ID,A.ADD_DT,A.LAST_MOD_USER_ID,A.LAST_MOD_USER_COMPANY_ID,A.LAST_MOD_DT,A.DEL_USER_ID,A.DEL_USER_COMPANY_ID,A.DEL_DT,A.DATA_STATUS,\n\t\tB.COL_NAME,B.COL_CNAME,B.COL_TYPE,B.COL_LEN,B.COL_DECIMAL,B.COL_ISNULL,B.COL_ISPK,B.COL_ISIDENTITY,\n\t\tC.TABLE_HELP,\n\t\tD.COL_HELP\n\t\tFROM JH_TABLE_INFO AS A \n\t\tLEFT JOIN JH_TABLE_COLUMN_INFO AS B ON A.PK \= B.TABLE_PK\n\t\tLEFT JOIN JH_TABLE_HELP AS C ON A.DB_NAME \= C.DB_NAME AND A.DB_OWNER \= C.DB_OWNER AND A.TABLE_NAME \= C.TABLE_NAME\n\t\tLEFT JOIN JH_TABLE_COLUMN_HELP AS D ON B.TABLE_PK \= D.TABLE_PK AND B.COL_NAME \= D.COL_NAME\n\t\tWHERE (\n\t\t\t\tA.DB_NAME LIKE '%$$DB_NAME$$%'\n\t\t\t\tOR '$$DB_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND(\n\t\t\t\tA.DB_OWNER LIKE '%$$DB_OWNER$$%'\n\t\t\t\tOR '$$DB_OWNER$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tA.TABLE_NAME LIKE '%$$TABLE_NAME$$%'\n\t\t\t\tOR '$$TABLE_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tA.TABLE_CNAME LIKE '%$$TABLE_CNAME$$%'\n\t\t\t\tOR '$$TABLE_CNAME$$' \= 'ALL'\n\t\t\t\t)\t\t\n\t\t\tAND (\n\t\t\t\tB.COL_NAME LIKE '%$$COL_NAME$$%'\n\t\t\t\tOR '$$COL_NAME$$' \= 'ALL'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tB.COL_CNAME LIKE '%$$COL_CNAME$$%'\n\t\t\t\tOR '$$COL_CNAME$$' \= 'ALL'\n\t\t\t\t)\n\t\nEND;
API_FndqA001_1=IF EXISTS (\n\t\tSELECT *\n\t\tFROM JH_WS02_LOV_TABLE_LIST\n\t\tWHERE LOV_TABLE_NAME \= '$$name$$'\n\t\t)\nBEGIN\n\tINSERT INTO [JH_WS02_LOV_TABLE_LIST] (\n\t\tPK_PROP\n\t\t,/*對應PROP_MASTER的PK_PROP欄位*/\n\t\t[LOV_CATALOG_NAME]\n\t\t,/*資料庫名稱*/\n\t\t[LOV_SCHEMA_NAME]\n\t\t,/*結構敘述*/\n\t\t[LOV_TABLE_NAME]\n\t\t,/*資料表名稱*/\n\t\t[LOV_TABLE_COMMENT]\n\t\t,/*資料表說明*/\n\t\t[LOV_MAPPING_TABLE_NAME]\n\t\t,/*比對欄位型態用的資料表名稱，若不需要則給空值*/\n\t\t[LOV_REPORT_NAME]\n\t\t,/*產出報表的名稱*/\n\t\t[LOV_SELECT_TOP_NUM]\n\t\t,/*設定查詢幾筆，-1表示最大筆數*/\n\t\t[LOV_LOT_NUM]\n\t\t,/*批號，0表示最初版，之後版本皆以此批號複製異動*/\n\t\t[LOV_LOT_DT]\n\t\t,/*當下產生批號的日期*/\n\t\t[LOV_HELP] /*欄位備註或自訂義說明*/\n\t\t)\n\tSELECT B.PK_PROP AS 'PK_PROP'\n\t\t,/*對應PROP_MASTER的PK_PROP欄位*/\n\t\tC.TABLE_CATALOG AS 'LOV_CATALOG_NAME'\n\t\t,/*資料庫名稱*/\n\t\tC.TABLE_SCHEMA AS 'LOV_SCHEMA_NAME'\n\t\t,/*結構敘述*/\n\t\tA.NAME AS 'LOV_TABLE_NAME'\n\t\t,/*資料表名稱*/\n\t\t'test' AS 'LOV_TABLE_COMMENT'\n\t\t,/*資料表說明*/\n\t\tA.NAME AS 'LOV_MAPPING_TABLE_NAME'\n\t\t,/*比對欄位型態用的資料表名稱，若不需要則給空值*/\n\t\tA.NAME AS 'LOV_REPORT_NAME'\n\t\t,/*產出報表的名稱*/\n\t\t'-1' AS 'LOV_SELECT_TOP_NUM'\n\t\t,/*設定查詢幾筆，-1表示最大筆數*/\n\t\t(\n\t\t\tSELECT MAX(LOV_LOT_NUM + 1) AS LOV_LOT_NUM\n\t\t\tFROM JH_WS02_LOV_TABLE_LIST\n\t\t\tWHERE LOV_TABLE_NAME \= '$$name$$'\n\t\t\t) AS 'LOV_LOT_NUM'\n\t\t,/*批號，0表示最初版，之後版本皆以此批號複製異動*/\n\t\tCONVERT(VARCHAR(10), GETDATE(), 23) AS 'LOV_LOT_DT'\n\t\t,/*當下產生批號的日期*/\n\t\tNULL AS 'LOV_HELP' /*欄位備註或自訂義說明*/\n\tFROM (\n\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\tORDER BY [name] ASC\n\t\t\t\t) AS RowNum\n\t\t\t,'DFM' AS CONN_DB\n\t\t\t,[name]\n\t\t\t,[object_id]\n\t\t\t,[principal_id]\n\t\t\t,[schema_id]\n\t\t\t,[parent_object_id]\n\t\t\t,[type]\n\t\t\t,[type_desc]\n\t\t\t,[create_date]\n\t\t\t,[modify_date]\n\t\t\t,[is_ms_shipped]\n\t\t\t,[is_published]\n\t\t\t,[is_schema_published]\n\t\t\t,[lob_data_space_id]\n\t\t\t,[filestream_data_space_id]\n\t\t\t,[max_column_id_used]\n\t\t\t,[lock_on_bulk_load]\n\t\t\t,[uses_ansi_nulls]\n\t\t\t,[is_replicated]\n\t\t\t,[has_replication_filter]\n\t\t\t,[is_merge_published]\n\t\t\t,[is_sync_tran_subscribed]\n\t\t\t,[has_unchecked_assembly_data]\n\t\t\t,[text_in_row_limit]\n\t\t\t,[large_value_types_out_of_row]\n\t\t\t,[is_tracked_by_cdc]\n\t\t\t,[lock_escalation]\n\t\t\t,[lock_escalation_desc]\n\t\t\t,[is_filetable]\n\t\t\t,[is_memory_optimized]\n\t\t\t,[durability]\n\t\t\t,[durability_desc]\n\t\t\t,[temporal_type]\n\t\t\t,[temporal_type_desc]\n\t\t\t,[history_table_id]\n\t\t\t,[is_remote_data_archive_enabled]\n\t\t\t,[is_external]\n\t\t\t,[history_retention_period]\n\t\t\t,[history_retention_period_unit]\n\t\t\t,[history_retention_period_unit_desc]\n\t\t\t,[is_node]\n\t\t\t,[is_edge]\n\t\tFROM SYS.tables\n\t\t) AS A\n\tINNER JOIN (\n\t\tSELECT PK_PROP\n\t\t\t,/*對應PROP_MASTER的PK_PROP欄位*/\n\t\t\tJNDI_NAME\n\t\tFROM PROP_MASTER\n\t\t) AS B ON 'DFMDB' \= B.JNDI_NAME\n\tINNER JOIN (\n\t\tSELECT DISTINCT TABLE_CATALOG /*資料庫名稱*/\n\t\t\t,TABLE_SCHEMA /*結構敘述*/\n\t\t\t,TABLE_NAME /*資料表名稱*/\n\t\tFROM INFORMATION_SCHEMA.COLUMNS\n\t\t) AS C ON A.NAME \= C.TABLE_NAME\n\tWHERE A.NAME \= '$$name$$'\nEND\nELSE\nBEGIN\n\tINSERT INTO [JH_WS02_LOV_TABLE_LIST] (\n\t\tPK_PROP\n\t\t,/*對應PROP_MASTER的PK_PROP欄位*/\n\t\t[LOV_CATALOG_NAME]\n\t\t,/*資料庫名稱*/\n\t\t[LOV_SCHEMA_NAME]\n\t\t,/*結構敘述*/\n\t\t[LOV_TABLE_NAME]\n\t\t,/*資料表名稱*/\n\t\t[LOV_TABLE_COMMENT]\n\t\t,/*資料表說明*/\n\t\t[LOV_MAPPING_TABLE_NAME]\n\t\t,/*比對欄位型態用的資料表名稱，若不需要則給空值*/\n\t\t[LOV_REPORT_NAME]\n\t\t,/*產出報表的名稱*/\n\t\t[LOV_SELECT_TOP_NUM]\n\t\t,/*設定查詢幾筆，-1表示最大筆數*/\n\t\t[LOV_LOT_NUM]\n\t\t,/*批號，0表示最初版，之後版本皆以此批號複製異動*/\n\t\t[LOV_LOT_DT]\n\t\t,/*當下產生批號的日期*/\n\t\t[LOV_HELP] /*欄位備註或自訂義說明*/\n\t\t)\n\tSELECT B.PK_PROP AS 'PK_PROP'\n\t\t,/*對應PROP_MASTER的PK_PROP欄位*/\n\t\tC.TABLE_CATALOG AS 'LOV_CATALOG_NAME'\n\t\t,/*資料庫名稱*/\n\t\tC.TABLE_SCHEMA AS 'LOV_SCHEMA_NAME'\n\t\t,/*結構敘述*/\n\t\tA.NAME AS 'LOV_TABLE_NAME'\n\t\t,/*資料表名稱*/\n\t\t'test' AS 'LOV_TABLE_COMMENT'\n\t\t,/*資料表說明*/\n\t\tA.NAME AS 'LOV_MAPPING_TABLE_NAME'\n\t\t,/*比對欄位型態用的資料表名稱，若不需要則給空值*/\n\t\tA.NAME AS 'LOV_REPORT_NAME'\n\t\t,/*產出報表的名稱*/\n\t\t'-1' AS 'LOV_SELECT_TOP_NUM'\n\t\t,/*設定查詢幾筆，-1表示最大筆數*/\n\t\t'0' AS 'LOV_LOT_NUM'\n\t\t,/*批號，0表示最初版，之後版本皆以此批號複製異動*/\n\t\tCONVERT(VARCHAR(10), GETDATE(), 23) AS 'LOV_LOT_DT'\n\t\t,/*當下產生批號的日期*/\n\t\tNULL AS 'LOV_HELP' /*欄位備註或自訂義說明*/\n\tFROM (\n\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\tORDER BY [name] ASC\n\t\t\t\t) AS RowNum\n\t\t\t,'DFM' AS CONN_DB\n\t\t\t,[name]\n\t\t\t,[object_id]\n\t\t\t,[principal_id]\n\t\t\t,[schema_id]\n\t\t\t,[parent_object_id]\n\t\t\t,[type]\n\t\t\t,[type_desc]\n\t\t\t,[create_date]\n\t\t\t,[modify_date]\n\t\t\t,[is_ms_shipped]\n\t\t\t,[is_published]\n\t\t\t,[is_schema_published]\n\t\t\t,[lob_data_space_id]\n\t\t\t,[filestream_data_space_id]\n\t\t\t,[max_column_id_used]\n\t\t\t,[lock_on_bulk_load]\n\t\t\t,[uses_ansi_nulls]\n\t\t\t,[is_replicated]\n\t\t\t,[has_replication_filter]\n\t\t\t,[is_merge_published]\n\t\t\t,[is_sync_tran_subscribed]\n\t\t\t,[has_unchecked_assembly_data]\n\t\t\t,[text_in_row_limit]\n\t\t\t,[large_value_types_out_of_row]\n\t\t\t,[is_tracked_by_cdc]\n\t\t\t,[lock_escalation]\n\t\t\t,[lock_escalation_desc]\n\t\t\t,[is_filetable]\n\t\t\t,[is_memory_optimized]\n\t\t\t,[durability]\n\t\t\t,[durability_desc]\n\t\t\t,[temporal_type]\n\t\t\t,[temporal_type_desc]\n\t\t\t,[history_table_id]\n\t\t\t,[is_remote_data_archive_enabled]\n\t\t\t,[is_external]\n\t\t\t,[history_retention_period]\n\t\t\t,[history_retention_period_unit]\n\t\t\t,[history_retention_period_unit_desc]\n\t\t\t,[is_node]\n\t\t\t,[is_edge]\n\t\tFROM SYS.tables\n\t\t) AS A\n\tINNER JOIN (\n\t\tSELECT PK_PROP\n\t\t\t,/*對應PROP_MASTER的PK_PROP欄位*/\n\t\t\tJNDI_NAME\n\t\tFROM PROP_MASTER\n\t\t) AS B ON 'DFMDB' \= B.JNDI_NAME\n\tINNER JOIN (\n\t\tSELECT DISTINCT TABLE_CATALOG /*資料庫名稱*/\n\t\t\t,TABLE_SCHEMA /*結構敘述*/\n\t\t\t,TABLE_NAME /*資料表名稱*/\n\t\tFROM INFORMATION_SCHEMA.COLUMNS\n\t\t) AS C ON A.NAME \= C.TABLE_NAME\n\tWHERE A.NAME \= '$$name$$'\nEND\n\nINSERT INTO JH_WS02_LOV_LIST (\n\t[PK_TABLE_LIST]\n\t,/*對應JH_WS02_LOV_TABLE_LIST的PK_PROP欄位*/\n\t[LOV_COLUMN_NAME]\n\t,/*欄位名稱*/\n\t[LOV_COLUMN_ORDINAL_POSITION]\n\t,/*欄位順序*/\n\t[LOV_COLUMN_PK]\n\t,/*是否為主鍵值*/\n\t[LOV_COLUMN_HELP]\n\t,/*欄位說明*/\n\t[LOV_COLUMN_IS_NULLABLE]\n\t,/*可為NULL*/\n\t[LOV_COLUMN_DATA_TYPE]\n\t,/*欄位型態*/\n\t[LOV_COLUMN_SHOW_DATA_TYPE]\n\t,/*欄位型態-將型態與長度等整合顯示*/\n\t[LOV_COLUMN_CHARACTER_MAXIMUM_LENGTH]\n\t,/*欄位長度*/\n\t[LOV_COLUMN_NUMERIC_PRECISION]\n\t,/*整數位長度*/\n\t[LOV_COLUMN_NUMERIC_SCALE]\n\t,/*小數位長度*/\n\t[LOV_COLUMN_DEFAULT]\n\t,/*欄位預設值*/\n\t[LOV_COLUMN_CHARACTER_SET_NAME]\n\t,/*欄位字元集*/\n\t[LOV_COLUMN_CREATE_DATE]\n\t,/*欄位建立時間*/\n\t[LOV_COLUMN_MODIFY_DATE]\n\t,/*欄位修改時間*/\n\t[LOV_LOT_NUM]\n\t,/*批號，0表示最初版，之後版本皆以此批號複製異動*/\n\t[LOV_LOT_DT] /*當下執行該批號的日*/\n\t)\nSELECT (\n\t\tSELECT MAX(PK)\n\t\tFROM JH_WS02_LOV_TABLE_LIST\n\t\tWHERE LOV_TABLE_NAME \= '$$name$$'\n\t\t) AS 'PK_TABLE_LIST'\n\t,/*對應JH_WS02_LOV_TABLE_LIST的PK_PROP欄位*/\n\tCOLUMN_NAME\n\t,ORDINAL_POSITION\n\t,NULL AS 'LOV_COLUMN_PK'\n\t,NULL AS 'LOV_COLUMN_HELP'\n\t,IS_NULLABLE\n\t,DATA_TYPE\n\t,NULL AS 'LOV_COLUMN_SHOW_DATA_TYPE'\n\t,CHARACTER_MAXIMUM_LENGTH\n\t,NUMERIC_PRECISION\n\t,NUMERIC_SCALE\n\t,COLUMN_DEFAULT AS 'LOV_COLUMN_DEFAULT'\n\t,CHARACTER_SET_NAME\n\t,NULL AS 'LOV_COLUMN_CREATE_DATE'\n\t,NULL AS 'LOV_COLUMN_MODIFY_DATE'\n\t,(\n\t\tSELECT MAX(LOV_LOT_NUM) AS LOV_LOT_NUM\n\t\tFROM JH_WS02_LOV_TABLE_LIST\n\t\tWHERE LOV_TABLE_NAME \= '$$name$$'\n\t\t) AS 'LOV_LOT_NUM'\n\t,NULL AS 'LOV_LOT_DT'\nFROM INFORMATION_SCHEMA.COLUMNS A\nINNER JOIN (\n\tSELECT PK_PROP\n\t\t,/*對應PROP_MASTER的PK_PROP欄位*/\n\t\tJNDI_NAME\n\tFROM PROP_MASTER\n\t) AS B ON 'DFMDB' \= B.JNDI_NAME WHERE A.TABLE_NAME \= '$$name$$'\n
API_FndqA001_D1WIN=SELECT\nPK,                          /*主值*/\nPK_TABLE_LIST,               /*對應JH_WS02_LOV_TABLE_LIST的PK_PROP欄位*/\nLOV_COLUMN_NAME,             /*欄位名稱*/\nLOV_COLUMN_ORDINAL_POSITION, /*欄位順序*/\nLOV_COLUMN_HELP,             /*欄位說明*/\nLOV_COLUMN_PK,               /*是否為主鍵值*/\nLOV_COLUMN_IS_NULLABLE,      /*可為NULL*/\nLOV_COLUMN_DATA_TYPE,        /*欄位型態*/\nLOV_COLUMN_SHOW_DATA_TYPE,   /*欄位型態-將型態與長度等整合顯示*/\nLOV_COLUMN_CHARACTER_MAXIMUM_LENGTH,/*欄位長度*/\nLOV_COLUMN_NUMERIC_PRECISION,       /*整數位長度*/\nLOV_COLUMN_NUMERIC_SCALE,           /*小數位長度*/\nLOV_COLUMN_DEFAULT,                 /*欄位預設值*/\nLOV_COLUMN_CHARACTER_SET_NAME,      /*欄位字元集*/\nLOV_COLUMN_CREATE_DATE,             /*欄位建立時間*/\nLOV_COLUMN_MODIFY_DATE,             /*欄位修改時間*/\nLOV_LOT_NUM,                        /*批號*/\nLOV_LOT_DT                          /*當下執行該批號的日期*/\nFROM \nJH_WS02_LOV_LIST\nWHERE PK_TABLE_LIST\='1'
API_FndqA001_DS=SELECT *, (SELECT COUNT(*) FROM [JH_WS02_LOV_TABLE_LIST]) AS totalProperty  FROM (SELECT ROW_NUMBER() OVER (ORDER BY PK_PROP) AS RowNum,  \nPK_PROP, /*對應PROP_MASTER的PK_PROP欄位*/\t\n[LOV_CATALOG_NAME] ,/*資料庫名稱*/\n[LOV_SCHEMA_NAME],/*結構敘述*/\n[LOV_TABLE_NAME] ,/*資料表名稱*/ \n[LOV_TABLE_COMMENT] ,/*資料表說明*/ \n[LOV_MAPPING_TABLE_NAME],/*比對欄位型態用的資料表名稱，若不需要則給空值*/\n[LOV_REPORT_NAME],/*產出報表的名稱*/ \n[LOV_SELECT_TOP_NUM] ,/*設定查詢幾筆，-1表示最大筆數*/ \n[LOV_LOT_NUM],/*批號，0表示最初版，之後版本皆以此批號複製異動*/ \n[LOV_LOT_DT],/*當下產生批號的日期*/\n[LOV_HELP], /*欄位備註或自訂義說明*/\nDATA_STATUS\nFROM [JH_WS02_LOV_TABLE_LIST]) AS new1 WHERE RowNum > $$start$$ AND RowNum <\= ($$start$$+$$limit$$);
API_FnE1T007_DS=SELECT *\n\t,(\n\t\tSELECT COUNT(*)0\n\t\tFROM Trpo_Mast WITH (NOLOCK)\n\t\tWHERE\n                \n(POLYN2 \= '$$POLYN2$$' OR '$$POLYN2$$' \= 'ALL') AND (IreqNo LIKE '$$IreqNo$$%' OR '$$IreqNo$$' \= 'ALL') AND (Idnumb LIKE '$$Idnumb$$%' OR '$$Idnumb$$' \= 'ALL') AND (InsSrc LIKE '$$InsSrc$$%' OR '$$InsSrc$$' \= 'ALL') AND (Idnumb1 LIKE '$$Idnumb1$$%' OR '$$Idnumb1$$' \= 'ALL') AND (PrtDat LIKE '$$PrtDat$$%' OR '$$IPrtDat$$' \= 'ALL') AND (PrtDat1 LIKE '$$PrtDat1$$%' OR '$$PrtDat1$$' \= 'ALL')\n\t\t\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_COLUMN\n\t\t\t) AS RowNum\n\t\t,PK_COL\n\t\t\n\t\t,IreqNo\n\t\t,Secno\n\t\t,NAME\n\t\t,Strdat\n\t\t,Insamt\n\t\t,PrtDat\n\t\t,TrnDat\n\t\t\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_USERUMN\n\t\t_COMPANY_ID\n\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT\n\t\t,DEL_USER_ID\n\t\t,DEL_USER_COMPANY_ID\n\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT\n\t\t,COMPANY_ID\n\t\t,DATA_STATUS\n\tFROM Trpo_Mast WITH (NOLOCK)\n\tWHERE (\n\t\n(POLYN2 \= '$$POLYN2$$' OR '$$POLYN2$$' \= 'ALL') AND (IreqNo LIKE '$$IreqNo$$%' OR '$$IreqNo$$' \= 'ALL') AND (Idnumb LIKE '$$Idnumb$$%' OR '$$Idnumb$$' \= 'ALL') AND (InsSrc LIKE '$$InsSrc$$%' OR '$$InsSrc$$' \= 'ALL') AND (Idnumb1 LIKE '$$Idnumb1$$%' OR '$$Idnumb1$$' \= 'ALL') AND (PrtDat LIKE '$$PrtDat$$%' OR '$$IPrtDat$$' \= 'ALL') AND (PrtDat1 LIKE '$$PrtDat1$$%' OR '$$PrtDat1$$' \= 'ALL')\n\t\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);s\n\n/*,CAST(COLUMN2 AS VARCHAR) AS COLUMN2\n\t\t,CONVERT(VARCHAR, COLUMN3, 120) AS COLUMN3*/
API_INV_FN02A006_MOVE_FINRPT=BEGIN\n\tDECLARE @RETURN_CODE INT\n\t\t,@RETURN_MSG VARCHAR(1000);\n\n\tEXEC [INV_FN02A006_MOVE_FINRPT] '$$AOID$$'\n\t\t,'$$AIMSID$$'\n\t\t,@RETURN_CODE OUTPUT\n\t\t,@RETURN_MSG OUTPUT;\n\n\tSELECT @RETURN_CODE AS RETURN_CODE\n\t\t,@RETURN_MSG AS RETURN_MSG\n\n\tIF (@RETURN_CODE <> 0)\n\tBEGIN\n\t\tRAISERROR (\n\t\t\t\t@RETURN_MSG\n\t\t\t\t,16\n\t\t\t\t,1\n\t\t\t\t)\n\tEND\nEND\n
API_INVSP_CHECK_PROCESS=PLUGINS/INVSP_CHECK_PROCESS/INVSP_CHECK_PROCESS_MAIN.kjb
API_MS_TIFCUD_TEST_DS=SELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_TEST_CUD_M\n\t\t\t) AS RowNum\n\t\t,PK_TEST_CUD_M\n\t\t,M_CHAR_COL\n\t\t,M_NCHAR_COL\n\t\t,M_VARCHAR_COL\n\t\t,M_NVARCHAR_COL\n\t\t,M_INT_COL\n\t\t,CAST(M_NUMERIC_COL AS VARCHAR) AS M_NUMERIC_COL\n\t\t,CAST(M_DECIMAL_COL AS VARCHAR) AS M_DECIMAL_COL\n\t\t,CONVERT(VARCHAR, M_DATETIME_COL, 120) AS M_DATETIME_COL\n\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,ADD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,ADD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,LAST_MOD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,LAST_MOD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT /*固定欄位必須輸出，不可移除 */\n\t\t,DEL_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,DEL_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,DATA_STATUS /*固定欄位必須輸出，不可移除*/\n\tFROM TEST_CUD_M WITH (NOLOCK)\n\tWHERE (\n\t\t\tDATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t\t\t) \n\t AND (M_CHAR_COL like '%$$M_CHAR_COL$$%' OR '$$M_CHAR_COL$$' \= 'ALL')\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n
API_RELOAD_SCHDL_LIST=PLUGINS/RELOAD_SCHDL_LIST/RELOAD_SCHDL_MAIN.kjb
API_REPORT=PLUGINS/BUILD_REPORT/BUILD_REPORT_MAIN.kjb
API_RPT=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM JOB_REG M\n\t\tLEFT JOIN JOB_PARAM D ON M.JOB_ID \= D.JOB_ID\n\t\tWHERE D.PARAM_TYPE \= 1\n\t\t\tAND D.IO_TYPE \= 1\n\t\t\tAND D.PARAM_VAL IS NOT NULL\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY LEFT(JOB_NAME, 8)\n\t\t\t) AS RowNum\n\t\t,LEFT(JOB_NAME, 8) + CASE \n\t\t\tWHEN ISNUMERIC(SUBSTRING(JOB_NAME, 9, 1)) \= 1\n\t\t\t\tTHEN SUBSTRING(JOB_NAME, 9, 1)\n\t\t\tELSE ''\n\t\t\tEND AS 'FUNC_ID'\n\t\t,D.PARAM_KEY\n\t\t,D.PARAM_VAL\n\tFROM JOB_REG M\n\tLEFT JOIN JOB_PARAM D ON M.JOB_ID \= D.JOB_ID\n\tWHERE D.PARAM_TYPE \= 1\n\t\tAND D.IO_TYPE \= 1\n\t\tAND D.PARAM_VAL IS NOT NULL\n\t) AS new1\n
API_SendMail=Funs/SendMail/Entrances.kjb
API_SendMailCreate=Funs/SendMailCreate/Entrances.kjb
API_TEST_CUD_D1_C=/*開始點：此語法請填入【API_Fn00A000_D1_C】(TEST_CUD_D1)(D1_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$D1_CHAR_COL$$' /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK}\n\t\tSET @vMEMO\='$$MEMO$$'\n\t\tSET @vProcType\='C'\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$'\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}'\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$'\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}'\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}'\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}'\n \n\t\t/*D1 TABLE 新增*/\n\t\tINSERT INTO TEST_CUD_D1("PK_TEST_CUD_M","D1_CHAR_COL","D1_NCHAR_COL","D1_VARCHAR_COL","D1_NVARCHAR_COL","D1_INT_COL","D1_NUMERIC_COL","D1_DECIMAL_COL","D1_DATETIME_COL","ADD_DT","ADD_USER_ID","ADD_USER_COMPANY_ID","DATA_STATUS")\n\t\tVALUES (ISNULL(@vMASTER_PK ,'$$PK_TEST_CUD_M$$'),'$$D1_CHAR_COL$$',N'$$D1_NCHAR_COL$$','$$D1_VARCHAR_COL$$',N'$$D1_NVARCHAR_COL$$',NULLIF('$$D1_INT_COL$$',''),NULLIF('$$D1_NUMERIC_COL$$',''),NULLIF('$$D1_DECIMAL_COL$$',''),CONVERT(datetime,NULLIF('$$D1_DATETIME_COL$$','')),CONVERT(datetime,GETDATE(),120),@vPARAM_SOURCE_COMING,@vPARAM_COMPANY,'$$DATA_STATUS$$')\n\t\tSET @vPK \= CAST(SCOPE_IDENTITY() AS VARCHAR(200))\n \n \n \n\t\t/*D1-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'INSERT',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'TEST_CUD_D1' , @i_LOG_IDENT OUTPUT, 'D1'\n \n\t\t/*D1- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_CUD_D1\n\t\tSELECT @i_LOG_IDENT,@vPARAM_FUNC_ID,'C',T.* \n\t\tFROM TEST_CUD_D1 T\n\t\tWHERE PK_TEST_CUD_D1\=@vPK\n \n\t\t/*D1-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'C',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn00A000_D1_C】(TEST_CUD_D1)(D1_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */;
API_TEST_CUD_D1_D=/*開始點：此語法請填入【API_Fn00A000_D1_D】(TEST_CUD_D1)(D1_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$D1_CHAR_COL$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='D';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK_TEST_CUD_D1$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'TEST_CUD_D1', 'PK_TEST_CUD_D1','int', @vPK \n \n\t\t/*D1-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'DELETE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'TEST_CUD_D1' , @i_LOG_IDENT OUTPUT, 'D1'\n \n\t\t/*D1- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_CUD_D1\n\t\tSELECT @i_LOG_IDENT,@vPARAM_FUNC_ID,'D',T.* \n\t\tFROM TEST_CUD_D1 T\n\t\tWHERE PK_TEST_CUD_D1\=@vPK;\n \n\t\t/*D1-刪除主檔及明細資料檔*/\n\t\tDELETE TEST_CUD_D1  WHERE PK_TEST_CUD_D1\=@vPK;\n \n\t\t/*D1-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'D',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn00A000_D1_D】(TEST_CUD_D1)(D1_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_TEST_CUD_D1_DS=SELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_TEST_CUD_D1\n\t\t\t) AS RowNum\n\t\t,PK_TEST_CUD_D1\n\t\t,PK_TEST_CUD_M\n\t\t,D1_CHAR_COL\n\t\t,D1_NCHAR_COL\n\t\t,D1_VARCHAR_COL\n\t\t,D1_NVARCHAR_COL\n\t\t,D1_INT_COL\n\t\t,D1_NUMERIC_COL\n\t\t,D1_DECIMAL_COL\n\t\t,CONVERT(VARCHAR, D1_DATETIME_COL, 120) AS D1_DATETIME_COL\n\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,ADD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,ADD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,LAST_MOD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,LAST_MOD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT /*固定欄位必須輸出，不可移除 */\n\t\t,DEL_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,DEL_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,DATA_STATUS /*固定欄位必須輸出，不可移除*/\n\tFROM TEST_CUD_D1 WITH (NOLOCK)\n\tWHERE (\n\t\t\tDATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t\t\t)\n\t\t\t/* 當條件為數值時 */ \n\t\t\tAND (PK_TEST_CUD_M \= '$$PK_TEST_CUD_M$$' OR '$$PK_TEST_CUD_M$$' \= 'ALL')\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
API_TEST_CUD_D1_U=/*開始點：此語法請填入【API_Fn00A000_D1_U】(TEST_CUD_D1)(D1_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$D1_CHAR_COL$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='U';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK_TEST_CUD_D1$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'TEST_CUD_D1', 'PK_TEST_CUD_D1','int', @vPK \n \n\t\t/*D1-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'UPDATE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'TEST_CUD_D1' , @i_LOG_IDENT OUTPUT, 'D1'\n \n\t\t/*D1- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_CUD_D1\n\t\tSELECT @i_LOG_IDENT,@vPARAM_FUNC_ID,'U',T.* \n\t\tFROM TEST_CUD_D1 T\n\t\tWHERE PK_TEST_CUD_D1\=@vPK;\n \n\t\t/*-修改D1 TABLE*/\n\t\tUPDATE TEST_CUD_D1 SET\n\t\t"D1_CHAR_COL"\= CASE WHEN '$$D1_CHAR_COL$$'\='\#NO_DATA\#'  THEN "D1_CHAR_COL" ELSE '$$D1_CHAR_COL$$' END\n\t\t,"D1_NCHAR_COL"\= CASE WHEN '$$D1_NCHAR_COL$$'\='\#NO_DATA\#'  THEN "D1_NCHAR_COL" ELSE N'$$D1_NCHAR_COL$$' END\n\t\t,"D1_VARCHAR_COL"\= CASE WHEN '$$D1_VARCHAR_COL$$'\='\#NO_DATA\#'  THEN "D1_VARCHAR_COL" ELSE '$$D1_VARCHAR_COL$$' END\n\t\t,"D1_NVARCHAR_COL"\= CASE WHEN '$$D1_NVARCHAR_COL$$'\='\#NO_DATA\#'  THEN "D1_NVARCHAR_COL" ELSE N'$$D1_NVARCHAR_COL$$' END\n\t\t,"D1_INT_COL"\= CASE WHEN '$$D1_INT_COL$$'\='\#NO_DATA\#'  THEN "D1_INT_COL" ELSE NULLIF('$$D1_INT_COL$$','') END\n\t\t,"D1_NUMERIC_COL"\= CASE WHEN '$$D1_NUMERIC_COL$$'\='\#NO_DATA\#'  THEN "D1_NUMERIC_COL" ELSE NULLIF('$$D1_NUMERIC_COL$$','') END\n\t\t,"D1_DECIMAL_COL"\= CASE WHEN '$$D1_DECIMAL_COL$$'\='\#NO_DATA\#'  THEN "D1_DECIMAL_COL" ELSE NULLIF('$$D1_DECIMAL_COL$$','') END\n\t\t,"D1_DATETIME_COL"\= CASE WHEN '$$D1_DATETIME_COL$$'\='\#NO_DATA\#'  THEN "D1_DATETIME_COL" ELSE CONVERT(datetime,NULLIF('$$D1_DATETIME_COL$$','')) END\n\t\t,"LAST_MOD_DT"\= CONVERT(datetime,GETDATE(),120)\n\t\t,"LAST_MOD_USER_ID"\= @vPARAM_SOURCE_COMING\n\t\t,"LAST_MOD_USER_COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE '$$DATA_STATUS$$' END\n\t\tWHERE PK_TEST_CUD_D1\=@vPK;\n \n\t\t/*D1-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'U',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn00A000_D1_U】(TEST_CUD_D1)(D1_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_TEST_CUD_D2_C=/*開始點：此語法請填入【API_Fn00A000_D2_C】(TEST_CUD_D2)(D2_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$D2_CHAR_COL$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='C';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n \n\t\t/*D2 TABLE 新增*/\n\t\tINSERT INTO TEST_CUD_D2("PK_TEST_CUD_M","D2_CHAR_COL","D2_NCHAR_COL","D2_VARCHAR_COL","D2_NVARCHAR_COL","D2_INT_COL","D2_NUMERIC_COL","D2_DECIMAL_COL","D2_DATETIME_COL","ADD_DT","ADD_USER_ID","ADD_USER_COMPANY_ID","DATA_STATUS")\n\t\tVALUES (ISNULL(@vMASTER_PK ,'$$PK_TEST_CUD_M$$'),'$$D2_CHAR_COL$$',N'$$D2_NCHAR_COL$$','$$D2_VARCHAR_COL$$',N'$$D2_NVARCHAR_COL$$',NULLIF('$$D2_INT_COL$$',''),NULLIF('$$D2_NUMERIC_COL$$',''),NULLIF('$$D2_DECIMAL_COL$$',''),CONVERT(datetime,NULLIF('$$D2_DATETIME_COL$$','')),CONVERT(datetime,GETDATE(),120),@vPARAM_SOURCE_COMING,@vPARAM_COMPANY,'$$DATA_STATUS$$')\n\t\tSET @vPK \= CAST(SCOPE_IDENTITY() AS VARCHAR(200))\n \n \n \n\t\t/*D2-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'INSERT',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'TEST_CUD_D2' , @i_LOG_IDENT OUTPUT, 'D2'\n \n\t\t/*D2- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_CUD_D2\n\t\tSELECT @i_LOG_IDENT,@vPARAM_FUNC_ID,'C',T.* \n\t\tFROM TEST_CUD_D2 T\n\t\tWHERE PK_TEST_CUD_D2\=@vPK;\n \n\t\t/*D2-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'C',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn00A000_D2_C】(TEST_CUD_D2)(D2_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_TEST_CUD_D2_D=/*開始點：此語法請填入【API_Fn00A000_D2_D】(TEST_CUD_D2)(D2_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$D2_CHAR_COL$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='D';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK_TEST_CUD_D2$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'TEST_CUD_D2', 'PK_TEST_CUD_D2','int', @vPK \n \n\t\t/*D2-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'DELETE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'TEST_CUD_D2' , @i_LOG_IDENT OUTPUT, 'D2'\n \n\t\t/*D2- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_CUD_D2\n\t\tSELECT @i_LOG_IDENT,@vPARAM_FUNC_ID,'D',T.* \n\t\tFROM TEST_CUD_D2 T\n\t\tWHERE PK_TEST_CUD_D2\=@vPK;\n \n\t\t/*D2-刪除主檔及明細資料檔*/\n\t\tDELETE TEST_CUD_D2  WHERE PK_TEST_CUD_D2\=@vPK;\n \n\t\t/*D2-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'D',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn00A000_D2_D】(TEST_CUD_D2)(D2_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_TEST_CUD_D2_DS=SELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_TEST_CUD_D2\n\t\t\t) AS RowNum\n\t\t,PK_TEST_CUD_D2\n\t\t,PK_TEST_CUD_M\n\t\t,D2_CHAR_COL\n\t\t,D2_NCHAR_COL\n\t\t,D2_VARCHAR_COL\n\t\t,D2_NVARCHAR_COL\n\t\t,D2_INT_COL\n\t\t,CAST(D2_NUMERIC_COL AS VARCHAR) AS D2_NUMERIC_COL\n\t\t,CAST(D2_DECIMAL_COL AS VARCHAR) AS D2_DECIMAL_COL\n\t\t,CONVERT(VARCHAR, D2_DATETIME_COL, 120) AS D2_DATETIME_COL\n\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,ADD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,ADD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,LAST_MOD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,LAST_MOD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT /*固定欄位必須輸出，不可移除 */\n\t\t,DEL_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,DEL_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,DATA_STATUS /*固定欄位必須輸出，不可移除*/\n\tFROM TEST_CUD_D2 WITH (NOLOCK)\n\tWHERE (\n\t\t\tDATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t\t\t) \n\t\t\t/* 當條件為數值時 */ \n\t\t\tAND (PK_TEST_CUD_M \= '$$PK_TEST_CUD_M$$' OR '$$PK_TEST_CUD_M$$' \= 'ALL')\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
API_TEST_CUD_D2_U=/*開始點：此語法請填入【API_Fn00A000_D2_U】(TEST_CUD_D2)(D2_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$D2_CHAR_COL$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='U';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK_TEST_CUD_D2$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'TEST_CUD_D2', 'PK_TEST_CUD_D2','int', @vPK \n \n\t\t/*D2-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'UPDATE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'TEST_CUD_D2' , @i_LOG_IDENT OUTPUT, 'D2'\n \n\t\t/*D2- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_CUD_D2\n\t\tSELECT @i_LOG_IDENT,@vPARAM_FUNC_ID,'U',T.* \n\t\tFROM TEST_CUD_D2 T\n\t\tWHERE PK_TEST_CUD_D2\=@vPK;\n \n\t\t/*-修改D2 TABLE*/\n\t\tUPDATE TEST_CUD_D2 SET\n\t\t"D2_CHAR_COL"\= CASE WHEN '$$D2_CHAR_COL$$'\='\#NO_DATA\#'  THEN "D2_CHAR_COL" ELSE '$$D2_CHAR_COL$$' END\n\t\t,"D2_NCHAR_COL"\= CASE WHEN '$$D2_NCHAR_COL$$'\='\#NO_DATA\#'  THEN "D2_NCHAR_COL" ELSE N'$$D2_NCHAR_COL$$' END\n\t\t,"D2_VARCHAR_COL"\= CASE WHEN '$$D2_VARCHAR_COL$$'\='\#NO_DATA\#'  THEN "D2_VARCHAR_COL" ELSE '$$D2_VARCHAR_COL$$' END\n\t\t,"D2_NVARCHAR_COL"\= CASE WHEN '$$D2_NVARCHAR_COL$$'\='\#NO_DATA\#'  THEN "D2_NVARCHAR_COL" ELSE N'$$D2_NVARCHAR_COL$$' END\n\t\t,"D2_INT_COL"\= CASE WHEN '$$D2_INT_COL$$'\='\#NO_DATA\#'  THEN "D2_INT_COL" ELSE NULLIF('$$D2_INT_COL$$','') END\n\t\t,"D2_NUMERIC_COL"\= CASE WHEN '$$D2_NUMERIC_COL$$'\='\#NO_DATA\#'  THEN "D2_NUMERIC_COL" ELSE NULLIF('$$D2_NUMERIC_COL$$','') END\n\t\t,"D2_DECIMAL_COL"\= CASE WHEN '$$D2_DECIMAL_COL$$'\='\#NO_DATA\#'  THEN "D2_DECIMAL_COL" ELSE NULLIF('$$D2_DECIMAL_COL$$','') END\n\t\t,"D2_DATETIME_COL"\= CASE WHEN '$$D2_DATETIME_COL$$'\='\#NO_DATA\#'  THEN "D2_DATETIME_COL" ELSE CONVERT(datetime,NULLIF('$$D2_DATETIME_COL$$','')) END\n\t\t,"LAST_MOD_DT"\= CONVERT(datetime,GETDATE(),120)\n\t\t,"LAST_MOD_USER_ID"\= @vPARAM_SOURCE_COMING\n\t\t,"LAST_MOD_USER_COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE '$$DATA_STATUS$$' END\n\t\tWHERE PK_TEST_CUD_D2\=@vPK;\n \n\t\t/*D2-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'U',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn00A000_D2_U】(TEST_CUD_D2)(D2_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_TEST_CUD_D3_C=/*開始點：此語法請填入【API_Fn00A000_D3_C】(TEST_CUD_D3)(D3_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$D3_CHAR_COL$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='C';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n \n\t\t/*D3 TABLE 新增*/\n\t\tINSERT INTO TEST_CUD_D3("PK_TEST_CUD_M","D3_CHAR_COL","D3_NCHAR_COL","D3_VARCHAR_COL","D3_NVARCHAR_COL","D3_INT_COL","D3_NUMERIC_COL","D3_DECIMAL_COL","D3_DATETIME_COL","ADD_DT","ADD_USER_ID","ADD_USER_COMPANY_ID","DATA_STATUS")\n\t\tVALUES (ISNULL(@vMASTER_PK ,'$$PK_TEST_CUD_M$$'),'$$D3_CHAR_COL$$',N'$$D3_NCHAR_COL$$','$$D3_VARCHAR_COL$$',N'$$D3_NVARCHAR_COL$$',NULLIF('$$D3_INT_COL$$',''),NULLIF('$$D3_NUMERIC_COL$$',''),NULLIF('$$D3_DECIMAL_COL$$',''),CONVERT(datetime,NULLIF('$$D3_DATETIME_COL$$','')),CONVERT(datetime,GETDATE(),120),@vPARAM_SOURCE_COMING,@vPARAM_COMPANY,'$$DATA_STATUS$$')\n\t\tSET @vPK \= CAST(SCOPE_IDENTITY() AS VARCHAR(200))\n \n \n \n\t\t/*D3-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'INSERT',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'TEST_CUD_D3' , @i_LOG_IDENT OUTPUT, 'D3'\n \n\t\t/*D3- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_CUD_D3\n\t\tSELECT @i_LOG_IDENT,@vPARAM_FUNC_ID,'C',T.* \n\t\tFROM TEST_CUD_D3 T\n\t\tWHERE PK_TEST_CUD_D3\=@vPK;\n \n\t\t/*D3-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'C',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn00A000_D3_C】(TEST_CUD_D3)(D3_ADD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_TEST_CUD_D3_D=/*開始點：此語法請填入【API_Fn00A000_D3_D】(TEST_CUD_D3)(D3_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$D3_CHAR_COL$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='D';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK_TEST_CUD_D3$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'TEST_CUD_D3', 'PK_TEST_CUD_D3','int', @vPK \n \n\t\t/*D3-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'DELETE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'TEST_CUD_D3' , @i_LOG_IDENT OUTPUT, 'D3'\n \n\t\t/*D3- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_CUD_D3\n\t\tSELECT @i_LOG_IDENT,@vPARAM_FUNC_ID,'D',T.* \n\t\tFROM TEST_CUD_D3 T\n\t\tWHERE PK_TEST_CUD_D3\=@vPK;\n \n\t\t/*D3-刪除主檔及明細資料檔*/\n\t\tDELETE TEST_CUD_D3  WHERE PK_TEST_CUD_D3\=@vPK;\n \n\t\t/*D3-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'D',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn00A000_D3_D】(TEST_CUD_D3)(D3_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_TEST_CUD_D3_DS=SELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_TEST_CUD_D3\n\t\t\t) AS RowNum\n\t\t,PK_TEST_CUD_D3\n\t\t,PK_TEST_CUD_M\n\t\t,D3_CHAR_COL\n\t\t,D3_NCHAR_COL\n\t\t,D3_VARCHAR_COL\n\t\t,D3_NVARCHAR_COL\n\t\t,D3_INT_COL\n\t\t,CAST(D3_NUMERIC_COL AS VARCHAR) AS D3_NUMERIC_COL\n\t\t,CAST(D3_DECIMAL_COL AS VARCHAR) AS D3_DECIMAL_COL\n\t\t,CONVERT(VARCHAR, D3_DATETIME_COL, 120) AS D3_DATETIME_COL\n\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,ADD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,ADD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,LAST_MOD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,LAST_MOD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT /*固定欄位必須輸出，不可移除 */\n\t\t,DEL_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,DEL_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,DATA_STATUS /*固定欄位必須輸出，不可移除*/\n\tFROM TEST_CUD_D3 WITH (NOLOCK)\n\tWHERE (\n\t\t\tDATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t\t\t) \n\t\t\tAND (PK_TEST_CUD_M \= '$$PK_TEST_CUD_M$$' OR '$$PK_TEST_CUD_M$$' \= 'ALL')\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
API_TEST_CUD_D3_U=/*開始點：此語法請填入【API_Fn00A000_D3_U】(TEST_CUD_D3)(D3_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$D3_CHAR_COL$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='U';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK_TEST_CUD_D3$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'TEST_CUD_D3', 'PK_TEST_CUD_D3','int', @vPK \n \n\t\t/*D3-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'UPDATE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'TEST_CUD_D3' , @i_LOG_IDENT OUTPUT, 'D3'\n \n\t\t/*D3- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_CUD_D3\n\t\tSELECT @i_LOG_IDENT,@vPARAM_FUNC_ID,'U',T.* \n\t\tFROM TEST_CUD_D3 T\n\t\tWHERE PK_TEST_CUD_D3\=@vPK;\n \n\t\t/*-修改D3 TABLE*/\n\t\tUPDATE TEST_CUD_D3 SET\n\t\t"D3_CHAR_COL"\= CASE WHEN '$$D3_CHAR_COL$$'\='\#NO_DATA\#'  THEN "D3_CHAR_COL" ELSE '$$D3_CHAR_COL$$' END\n\t\t,"D3_NCHAR_COL"\= CASE WHEN '$$D3_NCHAR_COL$$'\='\#NO_DATA\#'  THEN "D3_NCHAR_COL" ELSE N'$$D3_NCHAR_COL$$' END\n\t\t,"D3_VARCHAR_COL"\= CASE WHEN '$$D3_VARCHAR_COL$$'\='\#NO_DATA\#'  THEN "D3_VARCHAR_COL" ELSE '$$D3_VARCHAR_COL$$' END\n\t\t,"D3_NVARCHAR_COL"\= CASE WHEN '$$D3_NVARCHAR_COL$$'\='\#NO_DATA\#'  THEN "D3_NVARCHAR_COL" ELSE N'$$D3_NVARCHAR_COL$$' END\n\t\t,"D3_INT_COL"\= CASE WHEN '$$D3_INT_COL$$'\='\#NO_DATA\#'  THEN "D3_INT_COL" ELSE NULLIF('$$D3_INT_COL$$','') END\n\t\t,"D3_NUMERIC_COL"\= CASE WHEN '$$D3_NUMERIC_COL$$'\='\#NO_DATA\#'  THEN "D3_NUMERIC_COL" ELSE NULLIF('$$D3_NUMERIC_COL$$','') END\n\t\t,"D3_DECIMAL_COL"\= CASE WHEN '$$D3_DECIMAL_COL$$'\='\#NO_DATA\#'  THEN "D3_DECIMAL_COL" ELSE NULLIF('$$D3_DECIMAL_COL$$','') END\n\t\t,"D3_DATETIME_COL"\= CASE WHEN '$$D3_DATETIME_COL$$'\='\#NO_DATA\#'  THEN "D3_DATETIME_COL" ELSE CONVERT(datetime,NULLIF('$$D3_DATETIME_COL$$','')) END\n\t\t,"LAST_MOD_DT"\= CONVERT(datetime,GETDATE(),120)\n\t\t,"LAST_MOD_USER_ID"\= @vPARAM_SOURCE_COMING\n\t\t,"LAST_MOD_USER_COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE '$$DATA_STATUS$$' END\n\t\tWHERE PK_TEST_CUD_D3\=@vPK;\n \n\t\t/*D3-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'U',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn00A000_D3_U】(TEST_CUD_D3)(D3_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_TEST_CUD_M_C=\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n\tBEGIN /* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t\tINSERT INTO TEST_CUD_M /* WITH (ROWLOCK) */ (\n\t\t\tM_CHAR_COL\n\t\t\t,M_NCHAR_COL\n\t\t\t,M_VARCHAR_COL\n\t\t\t,M_NVARCHAR_COL\n\t\t\t,M_INT_COL\n\t\t\t,M_NUMERIC_COL\n\t\t\t,M_DECIMAL_COL\n\t\t\t,M_DATETIME_COL\n\t\t\t,ADD_DT\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,COMPANY_ID\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$M_CHAR_COL$$'\n\t\t\t,'$$M_NCHAR_COL$$'\n\t\t\t,'$$M_VARCHAR_COL$$'\n\t\t\t,'$$M_NVARCHAR_COL$$'\n\t\t\t,'$$M_INT_COL$$'\n\t\t\t,'$$M_NUMERIC_COL$$'\n\t\t\t,'$$M_DECIMAL_COL$$'\n\t\t\t,'$$M_DATETIME_COL$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'$$DATA_STATUS$$'\n\t\t\t);\n\tEND;\n
API_TEST_CUD_M_D=/*開始點：此語法請填入【API_Fn00A000_Master_D】(TEST_CUD_M)(LS_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$PK_TEST_CUD_M$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='D';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK_TEST_CUD_M$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'TEST_CUD_M', 'PK_TEST_CUD_M','int', @vPK \n \n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'DELETE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'TEST_CUD_M' , @i_LOG_IDENT OUTPUT, 'M'\n \n\t\t/*M- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_CUD_M\n\t\tSELECT @i_LOG_IDENT,@vPARAM_FUNC_ID,'D',T.* \n\t\tFROM TEST_CUD_M T\n\t\tWHERE PK_TEST_CUD_M\=@vPK;\n \n\t\t/*M-刪除主檔及明細資料檔*/\n\t\t DELETE TEST_CUD_D1 WHERE PK_TEST_CUD_M\=@vPK;  DELETE TEST_CUD_D2 WHERE PK_TEST_CUD_M\=@vPK;  DELETE TEST_CUD_D3 WHERE PK_TEST_CUD_M\=@vPK; \n\t\tDELETE TEST_CUD_M  WHERE PK_TEST_CUD_M\=@vPK;\n \n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'D',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn00A000_Master_D】(TEST_CUD_M)(LS_DEL')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_TEST_CUD_M_DS=SELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_TEST_CUD_M\n\t\t\t) AS RowNum\n\t\t,PK_TEST_CUD_M\n\t\t,M_CHAR_COL\n\t\t,M_NCHAR_COL\n\t\t,M_VARCHAR_COL\n\t\t,M_NVARCHAR_COL\n\t\t,M_INT_COL\n\t\t,CAST(M_NUMERIC_COL AS VARCHAR) AS M_NUMERIC_COL\n\t\t,CAST(M_DECIMAL_COL AS VARCHAR) AS M_DECIMAL_COL\n\t\t,CONVERT(VARCHAR, M_DATETIME_COL, 120) AS M_DATETIME_COL\n\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,ADD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,ADD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT /*固定欄位必須輸出，不可移除 */\n\t\t,LAST_MOD_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,LAST_MOD_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT /*固定欄位必須輸出，不可移除 */\n\t\t,DEL_USER_ID /*固定欄位必須輸出，不可移除*/\n\t\t,DEL_USER_COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,COMPANY_ID /*固定欄位必須輸出，不可移除*/\n\t\t,DATA_STATUS /*固定欄位必須輸出，不可移除*/\n\tFROM TEST_CUD_M WITH (NOLOCK)\n\tWHERE (\n\t\t\tDATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t\t\t) \n\t AND (M_CHAR_COL like '%$$M_CHAR_COL$$%' OR '$$M_CHAR_COL$$' \= 'ALL')\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
API_TEST_CUD_M_U=/*開始點：此語法請填入【API_Fn00A000_Master_U】(TEST_CUD_M)(LS_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */\n\n\t\t/*檢查參數使用\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\t\tDECLARE  @vRETURN_KEY_STR nvarchar(200),@vLOGPK bigint,@vMEMO varchar(8000), @vProcType varchar(20), @vPARAM_TASK_CODE varchar(50), @vMASTER_PK varchar(200), @vPK varchar(200), @vPARAM_FUNC_ID varchar(100),@vACTION_FLAG varchar(50),@vPARAM_SOURCE_COMING nvarchar(50),@vPARAM_COMPANY nvarchar(50),@vPARAM_SESSION_ID varchar(100),@i_LOG_IDENT bigint,@vChkDataStatus varchar(10),@vHASH_VALUE varchar(100),@RETURN_CODE int, @RETURN_MSG varchar(1000) \n\t\t\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t\tSET @vRETURN_KEY_STR\=N'$$PK_TEST_CUD_M$$'; /*BUSINESS PK欄位 */\n\t\tSET @vLOGPK\=${LOGPK};\n\t\tSET @vMEMO\='$$MEMO$$';\n\t\tSET @vProcType\='U';\n\t\tSET @vPARAM_TASK_CODE\='$$PARAM_TASK_CODE$$';\n\t\tSET @vPARAM_FUNC_ID\='${PARAM_FUNC_ID}';\n\t\tSET @vACTION_FLAG\='$$PARAM_SWITCH_VALUE$$';\n\t\tSET @vPARAM_SOURCE_COMING\=N'${PARAM_SOURCE_COMING}';\n\t\tSET @vPARAM_COMPANY\=N'${PARAM_COMPANY}';\n\t\tSET @vPARAM_SESSION_ID\='${PARAM_SESSION_ID}';\n\t\tSET @vPK \= '$$PK_TEST_CUD_M$$' \n \n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tEXEC JHSP_CHK_DATA_STATUS 'TEST_CUD_M', 'PK_TEST_CUD_M','int', @vPK \n \n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tEXEC JHSP_INS_CHG_LOG  @vPARAM_FUNC_ID,'UPDATE',@vPARAM_SOURCE_COMING,@vPK,@vMEMO,@vPARAM_COMPANY,@vPARAM_SESSION_ID,@vLOGPK , 'TEST_CUD_M' , @i_LOG_IDENT OUTPUT, 'M'\n \n\t\t/*M- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_CUD_M\n\t\tSELECT @i_LOG_IDENT,@vPARAM_FUNC_ID,'U',T.* \n\t\tFROM TEST_CUD_M T\n\t\tWHERE PK_TEST_CUD_M\=@vPK;\n \n\t\t/*-修改M TABLE*/\n\t\tUPDATE TEST_CUD_M SET\n\t\t"M_CHAR_COL"\= CASE WHEN '$$M_CHAR_COL$$'\='\#NO_DATA\#'  THEN "M_CHAR_COL" ELSE '$$M_CHAR_COL$$' END\n\t\t,"M_NCHAR_COL"\= CASE WHEN '$$M_NCHAR_COL$$'\='\#NO_DATA\#'  THEN "M_NCHAR_COL" ELSE N'$$M_NCHAR_COL$$' END\n\t\t,"M_VARCHAR_COL"\= CASE WHEN '$$M_VARCHAR_COL$$'\='\#NO_DATA\#'  THEN "M_VARCHAR_COL" ELSE '$$M_VARCHAR_COL$$' END\n\t\t,"M_NVARCHAR_COL"\= CASE WHEN '$$M_NVARCHAR_COL$$'\='\#NO_DATA\#'  THEN "M_NVARCHAR_COL" ELSE N'$$M_NVARCHAR_COL$$' END\n\t\t,"M_INT_COL"\= CASE WHEN '$$M_INT_COL$$'\='\#NO_DATA\#'  THEN "M_INT_COL" ELSE NULLIF('$$M_INT_COL$$','') END\n\t\t,"M_NUMERIC_COL"\= CASE WHEN '$$M_NUMERIC_COL$$'\='\#NO_DATA\#'  THEN "M_NUMERIC_COL" ELSE NULLIF('$$M_NUMERIC_COL$$','') END\n\t\t,"M_DECIMAL_COL"\= CASE WHEN '$$M_DECIMAL_COL$$'\='\#NO_DATA\#'  THEN "M_DECIMAL_COL" ELSE NULLIF('$$M_DECIMAL_COL$$','') END\n\t\t,"M_DATETIME_COL"\= CASE WHEN '$$M_DATETIME_COL$$'\='\#NO_DATA\#'  THEN "M_DATETIME_COL" ELSE CONVERT(datetime,NULLIF('$$M_DATETIME_COL$$','')) END\n\t\t,"LAST_MOD_DT"\= CONVERT(datetime,GETDATE(),120)\n\t\t,"LAST_MOD_USER_ID"\= @vPARAM_SOURCE_COMING\n\t\t,"LAST_MOD_USER_COMPANY_ID"\= @vPARAM_COMPANY\n\t\t,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE '$$DATA_STATUS$$' END\n\t\tWHERE PK_TEST_CUD_M\=@vPK;\n \n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tEXEC JHSP_INS_API_RESULT  @vLOGPK , @vHASH_VALUE ,0, 'SUCCESS', @vRETURN_KEY_STR,'U',@vMEMO,@vACTION_FLAG \n\n/*結束點：此語法請填入【API_Fn00A000_Master_U】(TEST_CUD_M)(LS_MOD')\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\= */
API_VAL_RANGE_CHK=Funs/ChkColsRule/Entrances.kjb
API_WF_GENERATE_MAIL=\tSELECT '$$SRC_TB_NAME_DESC$$' AS SRC_TB_NAME_DESC\n\t\t  ,'$$FORM_NO$$'          AS FORM_NO\n\t\t  ,'$$FORM_DESC$$'        AS FORM_DESC\n\t\t  ,'$$WF_STEP_DESC$$'     AS WF_STEP_DESC\n\t\t  ,'$$APPLICANT$$'        AS APPLICANT\n\t\t  ,'$$EXECTOR_DESC$$'     AS EXECTOR_DESC\n
AUTORN_FILES=/PLUGINS/AUTORN_FILES/AUTORUN_FILE_MAIN.kjb
AUTORUN_SENDMAIL=PLUGINS/SENDMAIL/AUTORUN_SENDMAIL_SYS_MAIN.kjb
BACKUP_INFO=PLUGINS/BACKUP_LOG/BACKUP_INFO_MAIN.kjb
BACKUP_MLIREPDB=\nDECLARE @DBPATH VARCHAR(120)\nDECLARE @DB VARCHAR(120)\nSET @DBPATH\= CONVERT(VARCHAR(20),GETDATE(),112)\nSET @DB\=N'/var/opt/mssql/data/MLIREPDB'+'_'+@DBPATH+'.BAK'\nBACKUP DATABASE MLIREPDB\nTO DISK\=@DB
BACKUP_SQL=DECLARE @DBPATH VARCHAR(120)\nDECLARE @DB VARCHAR(120)\nSET @DBPATH\= CONVERT(VARCHAR(20),GETDATE(),112)\nSET  @DB\=N'/var/opt/mssql/data/IFRS9VC'+'_'+@DBPATH+'.BAK'\nBACKUP DATABASE IFRS9VC\nTO DISK\=@DB
BUILD_PRPT_REPORT_FnDBa001=Funs/BuildReport/Entrances.kjb
Call_CUD_SP=SET QUOTED_IDENTIFIER OFF\n\nEXEC (" DECLARE @SQL AS  NVARCHAR(4000); SET @SQL \= N'$$sql$$' EXEC(@SQL) ")\n\nSET QUOTED_IDENTIFIER ON
CALL_MY_API=PLUGINS/CALL_MY_API/CALL_MY_API_MAIN.kjb
ChkIsReadyToCal=BEGIN\n\nDECLARE @RETURN_CODE INT, @RETURN_MSG VARCHAR(1000), @SP_RETURN_CODE INT, @SP_RETURN_MSG NVARCHAR(1000)  /**/\n\nBEGIN TRANSACTION TEST /**/ EXEC [ESSP_EXEC_SP_LOG] @RETURN_CODE OUTPUT, @RETURN_MSG OUTPUT, 'I', 'ChkIsReadyToCal',  NULL,  NULL,  NULL,  NULL;\n\n /**/\n\nCOMMIT TRANSACTION TEST /**/ \n\nEXEC ESSP_CHK_ETLDATA_BEFORE_CAL @RETURN_CODE OUTPUT,  @RETURN_MSG OUTPUT /**/\n\nBEGIN TRANSACTION TEST2 /**/ EXEC [ESSP_EXEC_SP_LOG] @SP_RETURN_CODE OUTPUT, @SP_RETURN_MSG OUTPUT, 'U', 'ChkIsReadyToCal', @RETURN_CODE, @RETURN_MSG, NULL, NULL;\n\n /**/\n\nCOMMIT TRANSACTION TEST2 /**/ \n\nIF (@RETURN_CODE <> 0)  BEGIN\n\tRAISERROR (@RETURN_MSG, 16, 1)  END\n\tEND
ChkIsReadyToETL=/*----------------------------------------------------------------------------------\n    檢查項目：  \n    一、判斷資料基準日\n        (一) 取變數@ORDER_DATE \n             正常程序此API會由玉山Control-M執行command line傳入@ORDER_DATE變數值，\n             如透過IFRS9系統介面執行API，則可透過介面指定ORDER_DATE參數值。\n        (二) 取變數@DB_DATE\n             為IFRS9系統計算的ETL啟動日。\n        (三) 比對上列兩個日期如不相同，表示CTM與系統資料基準日不相同，\n             則不可將資料源匯入IFRS9系統。\n    二、前瞻性經濟指標歷史值\n        (一) 信用卡：檢查前瞻性經濟指標歷史值，不可為空值。\n\t\t\t\n        (二) 個金：檢查前瞻性經濟指標歷史值，不可為空值。\n        (三) 法金：檢查前瞻性經濟指標歷史值，不可為空值。\n             \n----------------------------------------------------------------------------------*/\nBEGIN\n\tDECLARE @RETURN_CODE INT\n\t\t,@RETURN_MSG VARCHAR(1000)\n\t\t,@SP_RETURN_CODE INT\n\t\t,@SP_RETURN_MSG NVARCHAR(1000)\n\n\t--1.新增ES_API_LOG\n\tEXEC [ESSP_EXEC_SP_LOG] @RETURN_CODE OUTPUT\n\t\t,@RETURN_MSG OUTPUT\n\t\t,'I'\n\t\t,'ChkIsReadyToETL'\n\t\t,NULL\n\t\t,NULL\n\t\t,NULL\n\t\t,NULL;\n/*\n\t--2.判斷 前瞻性經濟指標歷史值\n\t--(1)信用卡\n\tDECLARE @CC_FLPD_INDEX_ISOK CHAR(1) \= CASE \n\t\t\tWHEN (\n\t\t\t\t\tSELECT DISTINCT 1\n\t\t\t\t\tFROM ES_REF_FLPD_INDEX_DETAIL\n\t\t\t\t\tWHERE PROPERTY_TYPE \= 'CC'\n\t\t\t\t\t\tAND FL_TYPE \= 'HISTORY'\n\t\t\t\t\t\tAND FL_VALUE IS NULL /*AND  ISNULL(FL_VALUE,0) \= 0*/ --2021.03.04 與Kay確認比照企金修改。\n\t\t\t\t\t) \= 1\n\t\t\t\tTHEN 'N'\n\t\t\tELSE 'Y'\n\t\t\tEND\n\tDECLARE @CC_FLPD_INDEX_ISOK_DES NVARCHAR(100) \= CASE \n\t\t\tWHEN (\n\t\t\t\t\tSELECT DISTINCT 1\n\t\t\t\t\tFROM ES_REF_FLPD_INDEX_DETAIL\n\t\t\t\t\tWHERE PROPERTY_TYPE \= 'CC'\n\t\t\t\t\t\tAND FL_TYPE \= 'HISTORY'\n\t\t\t\t\t\tAND FL_VALUE IS NULL /*AND  ISNULL(FL_VALUE,0) \= 0*/ --2021.03.04 與Kay確認比照企金修改。\n\t\t\t\t\t) \= 1\n\t\t\t\tTHEN N' 信用卡前瞻性經濟指標歷史值不可為空值或零；'\n\t\t\tELSE N''\n\t\t\tEND\n\n*/\n\t--3.判斷資料基準日\n\tDECLARE @ORDER_DATE VARCHAR(100)\n\t\t,@DB_DATE VARCHAR(100)\n\n\tSET @ORDER_DATE \= '$$PARAM_ODATE$$'\n\tSET @DB_DATE \= dbo.[ESFN_get_etl_startdate]()\n\n\t--4.判斷如未通過，則組裝相關提示訊息\n\t--(1)資料基準日\n\tIF @ORDER_DATE <> @DB_DATE\n\tBEGIN\n\t\tSELECT @RETURN_CODE \= '-1'\n\t\t\t,@RETURN_MSG \= 'Control-M傳入之ODATE參數為' + @ORDER_DATE + '，IFRS9系統ETL起始日為' + @DB_DATE + '，兩者不一致，無法進行ETL作業。';\n\tEND\n\t\t\t--(2)前瞻性經濟指標歷史值\n\tELSE\n\t/*\tIF (\n\t\t\t\t@CC_FLPD_INDEX_ISOK \= 'N'\n\t\t\t\tOR @CF_FLPD_INDEX_ISOK \= 'N'\n\t\t\t\tOR @BF_FLPD_INDEX_ISOK \= 'N'\n\t\t\t\t)\n\t\tBEGIN\n\t\t\tSELECT @RETURN_CODE \= '-1'\n\t\t\t\t,@RETURN_MSG \= @BF_FLPD_INDEX_ISOK_DES + @CF_FLPD_INDEX_ISOK_DES + @CC_FLPD_INDEX_ISOK_DES\n\t\tEND\n\t\tELSE\n\t*/\t\n\t\tBEGIN\n\t\t\tSELECT @RETURN_CODE \= '0'\n\t\t\t\t,@RETURN_MSG \= '資料庫內參數為' + @DB_DATE + '，前瞻性經濟指標歷史值檢核成功。'\n\t\tEND\n\n\tSELECT @RETURN_CODE\n\t\t,@RETURN_MSG\n\n\t--5.更新ES_API_LOG\n\tEXEC [ESSP_EXEC_SP_LOG] @SP_RETURN_CODE OUTPUT\n\t\t,@SP_RETURN_MSG OUTPUT\n\t\t,'U'\n\t\t,'ChkIsReadyToETL'\n\t\t,@RETURN_CODE\n\t\t,@RETURN_MSG\n\t\t,NULL\n\t\t,NULL;\n\n\tIF (@RETURN_CODE <> 0)\n\tBEGIN\n\t\tRAISERROR (\n\t\t\t\t@RETURN_MSG\n\t\t\t\t,16\n\t\t\t\t,1\n\t\t\t\t)\n\tEND\nEND\n
chris_0701_10=chris_0701_10\nchris_0701_10\nchris_0701_10
chris_0701_11=--WARNING\! ERRORS ENCOUNTERED DURING SQL PARSING\!\nvRETURN_KEY_STR \: \= '$$M_PK$$';/*BUSINESS PK欄位 */\n\nvLOGPK\: \= '${LOGPK}';\n\nvMEMO\: \= '$$MEMO$$';\n\nvProcType\: \= 'C';\n\nvPARAM_TASK_CODE\: \= '$$PARAM_TASK_CODE$$';\n\nvPARAM_FUNC_ID\: \= '${PARAM_FUNC_ID}';\n\nvPARAM_SOURCE_COMING\: \= '${PARAM_SOURCE_COMING}';\n\nvPARAM_COMPANY\: \= '${PARAM_COMPANY}';\n\nvPARAM_SESSION_ID\: \= '${PARAM_SESSION_ID}';\n\n/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n/*M TABLE 新增*/\nINSERT INTO TEST_M (\n\t"M_DESC"\n\t,"DATA_STATUS"\n\t)\nVALUES (\n\t'$$M_DESC$$'\n\t,'$$DATA_STATUS$$'\n\t) RETURNING CAST (M_PK AS varchar2(200))\nINTO vPK;/*取得資料表PK值*/\n\nvMASTER_PK\: \= vPK;\n\n/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n/*M-寫入DATA_CHANGE_LOG*/\nJHSP_INS_CHG_LOG(vPARAM_FUNC_ID, 'INSERT', vPARAM_SOURCE_COMING, vPK, vMEMO, vPARAM_COMPANY, vPARAM_SESSION_ID, TO_NUMBER(vLOGPK DEFAULT NULL ON CONVERSION ERROR), 'TEST_M', i_LOG_IDENT);\n\n/*M- 寫入 DATA Detail LOG Table(before modified)*/\nINSERT INTO LOG_TEST_M\nSELECT i_LOG_IDENT\n\t,vPARAM_FUNC_ID\n\t,'C'\n\t,T.*\nFROM TEST_M T\nWHERE M_PK \= TO_NUMBER(vPK DEFAULT NULL ON CONVERSION ERROR);\n\n/*M-寫入MEM_API_RESULT - Action Return */\nJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE, 0, 'SUCCESS', vPK, 'C', vMEMO);\n
chris_0701_12=--WARNING\! ERRORS ENCOUNTERED DURING SQL PARSING\!\nvRETURN_KEY_STR \: \= '$$M_PK$$';/*BUSINESS PK欄位 */\n\nvLOGPK\: \= '${LOGPK}';\n\nvMEMO\: \= '$$MEMO$$';\n\nvProcType\: \= 'C';\n\nvPARAM_TASK_CODE\: \= '$$PARAM_TASK_CODE$$';\n\nvPARAM_FUNC_ID\: \= '${PARAM_FUNC_ID}';\n\nvPARAM_SOURCE_COMING\: \= '${PARAM_SOURCE_COMING}';\n\nvPARAM_COMPANY\: \= '${PARAM_COMPANY}';\n\nvPARAM_SESSION_ID\: \= '${PARAM_SESSION_ID}';\n\n/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n/*M TABLE 新增*/\nINSERT INTO TEST_M (\n\t"M_DESC"\n\t,"DATA_STATUS"\n\t)\nVALUES (\n\t'$$M_DESC$$'\n\t,'$$DATA_STATUS$$'\n\t) RETURNING CAST (M_PK AS varchar2(200))\nINTO vPK;/*取得資料表PK值*/\n\nvMASTER_PK\: \= vPK;\n\n/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n/*M-寫入DATA_CHANGE_LOG*/\nJHSP_INS_CHG_LOG(vPARAM_FUNC_ID, 'INSERT', vPARAM_SOURCE_COMING, vPK, vMEMO, vPARAM_COMPANY, vPARAM_SESSION_ID, TO_NUMBER(vLOGPK DEFAULT NULL ON CONVERSION ERROR), 'TEST_M', i_LOG_IDENT);\n\n/*M- 寫入 DATA Detail LOG Table(before modified)*/\nINSERT INTO LOG_TEST_M\nSELECT i_LOG_IDENT\n\t,vPARAM_FUNC_ID\n\t,'C'\n\t,T.*\nFROM TEST_M T\nWHERE M_PK \= TO_NUMBER(vPK DEFAULT NULL ON CONVERSION ERROR);\n\n/*M-寫入MEM_API_RESULT - Action Return */\nJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE, 0, 'SUCCESS', vPK, 'C', vMEMO);\n
chris_0701_13=chris_0701_13chris_0701_13chris_0701_13
chris_0701_14=chris_0701_14chris_0701_14chris_0701_14
chris_0701_15=chris_0701_15chris_0701_15chris_0701_15
chris_0701_16=chris_0701_16chris_0701_16chris_0701_16
chris_0701_17=chris_0701_17chris_0701_17chris_0701_17
chris_0701_18=chris_0701_18chris_0701_18chris_0701_18
chris_0701_19=chris_0701_19chris_0701_19chris_0701_19
chris_0701_1=chris_0701_1\nchris_0701_1\nchris_0701_1
chris_0701_20=chris_0701_20chris_0701_20chris_0701_20
chris_0701_21=chris_0701_21chris_0701_21chris_0701_21
chris_0701_22=chris_0701_22chris_0701_22chris_0701_22
chris_0701_23=chris_0701_23chris_0701_23chris_0701_23
chris_0701_24=chris_0701_24chris_0701_24chris_0701_24
chris_0701_25=chris_0701_25chris_0701_25chris_0701_25
chris_0701_26=chris_0701_26chris_0701_26chris_0701_26
chris_0701_27=chris_0701_27chris_0701_27chris_0701_27
chris_0701_28=chris_0701_28chris_0701_28chris_0701_28
chris_0701_29=chris_0701_29chris_0701_29chris_0701_29
chris_0701_2=chris_0701_2chris_0701_2chris_0701_2
chris_0701_30=chris_0701_30chris_0701_30chris_0701_30
chris_0701_31=chris_0701_31chris_0701_31chris_0701_31
chris_0701_32=chris_0701_32chris_0701_32chris_0701_32
chris_0701_33=chris_0701_33chris_0701_33chris_0701_33
chris_0701_34=chris_0701_34chris_0701_34chris_0701_34
chris_0701_35=chris_0701_35chris_0701_35chris_0701_35
chris_0701_36=chris_0701_36chris_0701_36chris_0701_36
chris_0701_37=chris_0701_37chris_0701_37chris_0701_37
chris_0701_38=chris_0701_38chris_0701_38chris_0701_38
chris_0701_39=chris_0701_39chris_0701_39chris_0701_39
chris_0701_3=chris_0701_3chris_0701_3chris_0701_3
chris_0701_40=chris_0701_40chris_0701_40chris_0701_40
chris_0701_41=chris_0701_41chris_0701_41chris_0701_41
chris_0701_42=chris_0701_42chris_0701_42chris_0701_42
chris_0701_43=chris_0701_43chris_0701_43chris_0701_43
chris_0701_44=chris_0701_44chris_0701_44chris_0701_44
chris_0701_45=chris_0701_45chris_0701_45chris_0701_45
chris_0701_46=chris_0701_46chris_0701_46chris_0701_46
chris_0701_47=chris_0701_47chris_0701_47chris_0701_47
chris_0701_48=chris_0701_48chris_0701_48chris_0701_48
chris_0701_49=chris_0701_49chris_0701_49chris_0701_49
chris_0701_4=chris_0701_4chris_0701_4chris_0701_4
chris_0701_50=chris_0701_50chris_0701_50chris_0701_50
chris_0701_5=chris_0701_5chris_0701_5chris_0701_5
chris_0701_6=chris_0701_6chris_0701_6chris_0701_6
chris_0701_7=chris_0701_7chris_0701_7chris_0701_7
chris_0701_8=chris_0701_8chris_0701_8chris_0701_8
chris_0701_9=chris_0701_9chris_0701_9chris_0701_9
chris_test_SCHDL_10_auto_success=select USERID,USERNAME,* from users where userid \= 'chris'\nWAITFOR DELAY '00\:03\:00'
chris_test_SCHDL_11_auto_error=select USERID,USERNAME,* from users where $$userid$$ \= 'chris'\n
chris_test_SCHDL_12_success=select USERID,USERNAME,* from users where userid \= 'chris'\nWAITFOR DELAY '00\:03\:00'
chris_test_SCHDL_12hr=select USERID,USERNAME,* from users where userid \= 'chris'\nWAITFOR DELAY '12\:00\:00'
chris_test_SCHDL_13_error=select USERID,USERNAME,* from users where $$userid$$ \= 'chris'
chris_test_SCHDL_1=select USERID,USERNAME,* from users where userid \= 'chris'\nWAITFOR DELAY '00\:00\:30'
chris_test_SCHDL_1_Flow=select USERID,USERNAME,* from users where userid \= 'chris'\nWAITFOR DELAY '00\:00\:30'
chris_test_SCHDL_1_long=select USERID,USERNAME,* from users where userid \= 'chris'\nWAITFOR DELAY '00\:05\:00'
chris_test_SCHDL_2=select GROUPID,GROUPNAME,* from groups\nWAITFOR DELAY '00\:01\:00'
chris_test_SCHDL_2_Flow=select GROUPID,GROUPNAME,* from groups\nWAITFOR DELAY '00\:01\:00'
chris_test_SCHDL_2_long=select GROUPID,GROUPNAME,* from groups\nWAITFOR DELAY '00\:10\:00'
chris_test_SCHDL_3=select FUNC_ID,FUNC_NAME,* from FUNCTIONS\nWAITFOR DELAY '00\:01\:30'
chris_test_SCHDL_3_Flow=select FUNC_ID,FUNC_NAME,* from FUNCTIONS\nWAITFOR DELAY '00\:01\:30'
chris_test_SCHDL_3_long=select FUNC_ID,FUNC_NAME,* from FUNCTIONS\nWAITFOR DELAY '00\:15\:00'
chris_test_SCHDL_4=select FUNC_ID,FUNC_NAME,* from FUNCTIONS\nWAITFOR DELAY '00\:02\:00'
chris_test_SCHDL_4_Flow=select FUNC_ID,FUNC_NAME,* from FUNCTIONS\nWAITFOR DELAY '00\:02\:00'
chris_test_SCHDL_4_long=select FUNC_ID,FUNC_NAME,* from FUNCTIONS\nWAITFOR DELAY '00\:20\:00'
chris_test_SCHDL_5=select USERID,USERNAME,* from users where userid \= 'chris'\nWAITFOR DELAY '00\:02\:30'
chris_test_SCHDL_5_Flow=select USERID,USERNAME,* from users where userid \= 'chris'\nWAITFOR DELAY '00\:02\:30'
chris_test_SCHDL_5_long=select USERID,USERNAME,* from users where userid \= 'chris'\nWAITFOR DELAY '00\:25\:00'
chris_test_SCHDL_6_auto_success=select USERID,USERNAME,* from users where userid \= 'chris'\nWAITFOR DELAY '00\:00\:30'
chris_test_SCHDL_7_success=select USERID,USERNAME,* from users where userid \= 'chris'\nWAITFOR DELAY '00\:00\:30'
chris_test_SCHDL_8_auto_error=select USERID,USERNAME,* from users where $$userid$$ \= 'chris'\n
chris_test_SCHDL_9_error=select USERID,USERNAME,* from users where $$userid$$ \= 'chris'\n
ChrisTestAutoFiles=/PLUGINS/AUTORN_FILES/AUTORUN_FILE_MAIN.kjb
CMD_T_001=$$CMDSTR$$
COMM_SP_LOD_TMP_TO_STG=BEGIN\n        DECLARE @RETURN_CODE_1 INT ,@RETURN_MSG_1 VARCHAR(1000) ,@SP_RETURN_CODE_1 int ,@SP_RETURN_MSG_1 nvarchar(1000),@RETURN_COUNT INT\n\t\t/**/BEGIN TRANSACTION TEST/**/\n\n\t\tEXEC [ESSP_EXEC_SP_LOG] @RETURN_CODE_1 OUTPUT ,@RETURN_MSG_1 OUTPUT,'I','$$EXEC_API_SPNAME$$',\n        null,\n        null,\n        null,\n        null;\n       /**/COMMIT TRANSACTION TEST/**/\n\n        EXEC $$SP_NAME$$ @RETURN_CODE_1 OUTPUT ,@RETURN_MSG_1 OUTPUT,@RETURN_COUNT OUTPUT,NULL, '$$TYPE$$'\n\n\t\t/**/BEGIN TRANSACTION TEST2/**/\n\t\tEXEC [ESSP_EXEC_SP_LOG] @SP_RETURN_CODE_1 OUTPUT ,@SP_RETURN_MSG_1 OUTPUT,'U','$$EXEC_API_SPNAME$$',@RETURN_CODE_1,@RETURN_MSG_1,null,@RETURN_COUNT ;\n\t\t/**/COMMIT TRANSACTION TEST2/**/\n    IF(@RETURN_CODE_1 <>0)\n        BEGIN\n             RAISERROR(@RETURN_MSG_1,16,1)\n        END\n    END
COMM_SP_PROCESS_MART=BEGIN\nDECLARE @RETURN_CODE_1 INT \n\t,@RETURN_MSG_1 VARCHAR(1000) \n\t,@SP_RETURN_CODE_1 int \n\t,@SP_RETURN_MSG_1 nvarchar(1000)\n\t,@RETURN_COUNT INT\n\t/**/\nBEGIN TRANSACTION TEST\n\t/**/\nEXEC [ESSP_EXEC_SP_LOG] @RETURN_CODE_1 OUTPUT \n\t,@RETURN_MSG_1 OUTPUT\n\t,'I'\n\t,'$$EXEC_API_SPNAME$$'\n\t,null\n\t,null\n\t,null\n\t,null\n\t/**/\nCOMMIT TRANSACTION TEST\n\t/**/\nEXEC $$SP_NAME$$   $$DATAYM$$\n\t,@RETURN_CODE_1 OUTPUT\n\t,@RETURN_MSG_1 OUTPUT\n\t,@RETURN_COUNT OUTPUT\n\t/**/\nBEGIN TRANSACTION TEST2\n/**/\nEXEC [ESSP_EXEC_SP_LOG] @SP_RETURN_CODE_1 OUTPUT \n\t,@SP_RETURN_MSG_1 OUTPUT\n\t,'U'\n\t,'$$EXEC_API_SPNAME$$'\n\t,@RETURN_CODE_1\n\t,@RETURN_MSG_1\n\t,null\n\t,@RETURN_COUNT\n\t/**/\n\tCOMMIT TRANSACTION TEST2\n\t/**/\n\tIF(@RETURN_CODE_1 <>0)\n\tBEGIN\n\tRAISERROR(@RETURN_MSG_1,16,1)\n\tEND\n\tEND
COMM_SP_PROCESS_SAP=BEGIN\nDECLARE @RETURN_CODE_1 INT \n\t,@RETURN_MSG_1 VARCHAR(1000) \n\t,@SP_RETURN_CODE_1 int \n\t,@SP_RETURN_MSG_1 nvarchar(1000)\n\t,@RETURN_COUNT INT\n\t/**/\nBEGIN TRANSACTION TEST\n\t/**/\nEXEC [ESSP_EXEC_SP_LOG] @RETURN_CODE_1 OUTPUT \n\t,@RETURN_MSG_1 OUTPUT\n\t,'I'\n\t,'$$EXEC_API_SPNAME$$'\n\t,null\n\t,null\n\t,null\n\t,null\n\t/**/\nCOMMIT TRANSACTION TEST\n\t/**/\nEXEC $$SP_NAME$$\n\t@RETURN_CODE_1 OUTPUT\n\t,@RETURN_MSG_1 OUTPUT\n\t/**/\nBEGIN TRANSACTION TEST2\n/**/\nEXEC [ESSP_EXEC_SP_LOG] @SP_RETURN_CODE_1 OUTPUT \n\t,@SP_RETURN_MSG_1 OUTPUT\n\t,'U'\n\t,'$$EXEC_API_SPNAME$$'\n\t,@RETURN_CODE_1\n\t,@RETURN_MSG_1\n\t,null\n\t,@RETURN_COUNT\n\t/**/\n\tCOMMIT TRANSACTION TEST2\n\t/**/\n\tIF(@RETURN_CODE_1 <>0)\n\tBEGIN\n\tRAISERROR(@RETURN_MSG_1,16,1)\n\tEND\n\tEND
COPY_API=INSERT INTO JH_WS02_CODE_LIST (\n\tCODE_ID\n\t,JNDI_USE\n\t,EXEC_TYPE\n\t,ACTION_TYPE\n\t,SQL_PROP_KEY\n\t,AUTH_KEY\n\t,INPUT_FIELD\n\t,CODE_HELP\n\t,ADD_USER_ID\n\t,ADD_USER_COMPANY_ID\n\t,ADD_DT\n\t,DATA_STATUS\n\t,URL_VAR_FIELD\n\t,IS_ENCODE\n\t,INPUT_ENCODE\n\t,OUTPUT_ENCODE\n\t)\nSELECT '$$COPY_API_NAME$$' AS 'CODE_ID'\n\t,JNDI_USE\n\t,EXEC_TYPE\n\t,ACTION_TYPE\n\t,'$$COPY_API_NAME$$' AS 'SQL_PROP_KEY'\n\t,AUTH_KEY\n\t,INPUT_FIELD\n\t,'$$CODE_HELP$$'\n\t,'$$ADD_USER_ID$$' AS 'ADD_USER_ID'\n\t,'$$COMPANY_ID$$' AS 'ADD_USER_COMPANY_ID'\n\t,GETDATE() AS 'ADD_DT'\n\t,DATA_STATUS\n\t,URL_VAR_FIELD\n\t,IS_ENCODE\n\t,INPUT_ENCODE\n\t,OUTPUT_ENCODE\nFROM JH_WS02_CODE_LIST\nWHERE CODE_ID \= '$$ORI_API_NAME$$';\n\nINSERT INTO JH_WS02_CODE_FORMAT_LIST (\n\tCODE_ID_PK\n\t,CLASS_NUM\n\t,UP_PK_FIELD\n\t,DOWN_PK_FIELD\n\t,OUTPUT_FIELD\n\t,ADD_USER_ID\n\t,ADD_USER_COMPANY_ID\n\t,ADD_DT\n\t,DATA_STATUS\n\t)\nSELECT (\n\t\tSELECT PK\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE CODE_ID \= '$$COPY_API_NAME$$'\n\t\t) AS 'CODE_ID_PK'\n\t,CLASS_NUM\n\t,UP_PK_FIELD\n\t,DOWN_PK_FIELD\n\t,OUTPUT_FIELD\n\t,'$$ADD_USER_ID$$' AS 'ADD_USER_ID'\n\t,'$$COMPANY_ID$$' AS 'ADD_USER_COMPANY_ID'\n\t,GETDATE() AS 'ADD_DT'\n\t,DATA_STATUS\nFROM JH_WS02_CODE_FORMAT_LIST\nWHERE CODE_ID_PK \= (\n\t\tSELECT PK\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE CODE_ID \= '$$ORI_API_NAME$$'\n\t\t);\n\nINSERT INTO JH_WS02_CODE_IP_RELATION (\n\tCODE_ID_PK\n\t,ACCESSED_IP\n\t,ACCESSED_DESC\n\t,ADD_USER_ID\n\t,ADD_USER_COMPANY_ID\n\t,ADD_DT\n\t,DATA_STATUS\n\t)\nSELECT (\n\t\tSELECT PK\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE CODE_ID \= '$$COPY_API_NAME$$'\n\t\t) AS 'CODE_ID_PK'\n\t,ACCESSED_IP\n\t,ACCESSED_DESC\n\t,'$$ADD_USER_ID$$' AS 'ADD_USER_ID'\n\t,'$$COMPANY_ID$$' AS 'ADD_USER_COMPANY_ID'\n\t,GETDATE() AS 'ADD_DT'\n\t,DATA_STATUS\nFROM JH_WS02_CODE_IP_RELATION\nWHERE CODE_ID_PK \= (\n\t\tSELECT PK\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE CODE_ID \= '$$ORI_API_NAME$$'\n\t\t);\n\nINSERT INTO JH_WS02_CODE_WS_RELATION (\n\tCODE_ID_PK\n\t,CLASS_NUM\n\t,WEB_SERVICE_CODE\n\t,CODE_URL\n\t,IS_DOING\n\t,ADD_USER_ID\n\t,ADD_USER_COMPANY_ID\n\t,ADD_DT\n\t,COMPANY_ID\n\t,DATA_STATUS\n\t)\nSELECT (\n\t\tSELECT PK\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE CODE_ID \= '$$COPY_API_NAME$$'\n\t\t) AS 'CODE_ID_PK'\n\t,CLASS_NUM\n\t,WEB_SERVICE_CODE\n\t,CODE_URL\n\t,IS_DOING\n\t,'$$ADD_USER_ID$$' AS 'ADD_USER_ID'\n\t,'$$COMPANY_ID$$' AS 'ADD_USER_COMPANY_ID'\n\t,GETDATE() AS 'ADD_DT'\n\t,COMPANY_ID\n\t,DATA_STATUS\nFROM JH_WS02_CODE_WS_RELATION\nWHERE CODE_ID_PK \= (\n\t\tSELECT PK\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE CODE_ID \= '$$ORI_API_NAME$$'\n\t\t);\n\nINSERT INTO JH_WS02_CODE_RANGE_ANALYSIS (\n\tCODE_ID_PK\n\t,INPUT_FIELD\n\t,INPUT_DEFAULT_VAL\n\t,REG_FIELD\n\t,REG_DESC\n\t,ADD_USER_ID\n\t,ADD_USER_COMPANY_ID\n\t,ADD_DT\n\t,DATA_STATUS\n\t,IS_ENCRYPT\n\t)\nSELECT (\n\t\tSELECT PK\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE CODE_ID \= '$$COPY_API_NAME$$'\n\t\t) AS 'CODE_ID_PK'\n\t,INPUT_FIELD\n\t,INPUT_DEFAULT_VAL\n\t,REG_FIELD\n\t,REG_DESC\n\t,'$$ADD_USER_ID$$' AS 'ADD_USER_ID'\n\t,'$$COMPANY_ID$$' AS 'ADD_USER_COMPANY_ID'\n\t,GETDATE() AS 'ADD_DT'\n\t,DATA_STATUS\n\t,IS_ENCRYPT\nFROM JH_WS02_CODE_RANGE_ANALYSIS\nWHERE CODE_ID_PK \= (\n\t\tSELECT PK\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE CODE_ID \= '$$ORI_API_NAME$$'\n\t\t);\n
COPYNEW_JNDI_SET=SysFuns/COPYNEW_JNDI_SET/Entrances.kjb
DATA_CHANGE_LOG=SELECT ROW_NUMBER() OVER ( ORDER BY LOG_ID ASC ) AS RowNum ,* FROM DATA_CHANGE_LOG WHERE 1\=1
DEL_Fn06_D001=DELETE JOB_REG WHERE JOB_ID \= '$$cmp01';DELETE JOB_PARAM WHERE JOB_ID \= '$$cmp01';
EXECSP_INVSP_FN03A003_UPD03_AIMS=EXEC [INVSP_FN03A003_UPD03_AIMS] 0,''\n
FILE_BACKUP_FOR_YMD=Funs/FileToBack/Entrances.kjb
FlowDBCopyStep1=SELECT C001,C002,C003,C004,C005,C006,C007,C008,C009,C010,C011,C012,C013,C014,C015,C016,C017,C018,C019,C020,C021,C022,FILE_DT,PK_TB_TMP FROM COMMODITY_PREDICTION_TABLE
FlowDBCopyStep2=Funs/DbCopyJoin3/Entrances.kjb
Fn01A004_10=insert_JH_WS02_CODE_IP_RELATION
Fn01A004_11=delete_del_JH_WS02_CODE_IP_RELATION
Fn01A004_12=update_JH_WS02_CODE_IP_RELATION
Fn01A004_13=SELECT ROW_NUMBER() OVER ( ORDER BY CW_IDX ASC) AS RowNum, CW_IDX, CODE_ID, WEB_SERVICE_CODE FROM JH_WS02_CODE_WS_RELATION WHERE 1\=1 AND (CODE_ID \= $$cmp01)
Fn01A004_14=insert_JH_WS02_CODE_WS_RELATION
Fn01A004_15=delete_del_JH_WS02_CODE_WS_RELATION
Fn01A004_16=update_JH_WS02_CODE_WS_RELATION
Fn01A004_17=SELECT ROW_NUMBER() OVER (ORDER BY CODE_IDX ASC) AS RowNum, CODE_ID, CODE_ID + CODE_LOCATE AS DISPLAY_CODE FROM JH_WS02_4GE_LIST
Fn01A004_18=SELECT ROW_NUMBER() OVER (ORDER BY B.CLASS_NUM ASC) AS RowNum, A.CODE_ID, C.WEB_SERVICE_CODE, C.WEB_SERVICE_NAME, SUBSTRING(C.WEB_SERVICE_IP, 1, (CASE WHEN CHARINDEX('\:', C.WEB_SERVICE_IP) \= 0 THEN '' ELSE (CHARINDEX('\:', C.WEB_SERVICE_IP) - 1) END)) AS WEB_SERVICE_IP, B.CW_IDX, B.IS_DOING, B.CLASS_NUM, B.ADD_USER_ID, B.ADD_DT, B.LAST_MOD_USER_ID, B.LAST_MOD_DT FROM JH_WS02_CODE_LIST A LEFT JOIN JH_WS02_CODE_WS_RELATION B ON A.PK \= B.CODE_ID_PK LEFT JOIN (SELECT WEB_SERVICE_CODE, WEB_SERVICE_NAME, ISNULL(WEB_SERVICE_IP, '') AS WEB_SERVICE_IP FROM JH_WS02_WEBSERVICE_INFO) C ON B.WEB_SERVICE_CODE \= C.WEB_SERVICE_CODE WHERE 1 \= 1 AND CODE_ID_PK \= $$cmp01
Fn01A004_19=insert_JH_WS02_CODE_WS_RELATION
Fn01A004_1=SELECT ROW_NUMBER() OVER ( ORDER BY CODE_ID_PK ASC, CLASS_NUM ASC ) AS RowNum, * FROM JH_WS02_CODE_FORMAT_LIST WHERE 1\=1 AND (CODE_ID_PK \= $$cmp01)
Fn01A004_20=delete_del_JH_WS02_CODE_WS_RELATION
Fn01A004_21=update_JH_WS02_CODE_WS_RELATION
Fn01A004_22=SELECT ROW_NUMBER() OVER (ORDER BY CW_IDX ASC) AS RowNum, * FROM JH_WS02_WEBSERVICE_INFO WHERE IS_DOING \= 'Y'
Fn01A004_23=SELECT ROW_NUMBER() OVER (ORDER BY INPUT_FIELD ASC) AS RowNum, * FROM JH_WS02_CODE_RANGE_ANALYSIS WHERE 1 \= 1 AND CODE_ID_PK \= $$cmp01
Fn01A004_24=insert_JH_WS02_CODE_RANGE_ANALYSIS
Fn01A004_25=update_JH_WS02_CODE_RANGE_ANALYSIS
Fn01A004_26=delete_del_JH_WS02_CODE_RANGE_ANALYSIS
Fn01A004_27=SELECT ROW_NUMBER() OVER (ORDER BY PK_PROP ASC) AS RowNum, * FROM (SELECT A.PK_PROP, A.PROP_ID, A.PROP_DESC, B.PROP_KEY, B.PROP_VALUE, B.ENCRYPTED FROM PROP_MASTER A LEFT JOIN PROP_DETAIL B ON A.PK_PROP \= B.PK_PROP WHERE A.PROP_TYPE \= 'AUTH' AND A.ENABLED_FLAG \= 'Y') AS New1
Fn01A004_28=SELECT ROW_NUMBER() OVER ( ORDER BY CODE_ID ASC) AS RowNum, PK, CODE_ID, SQL_PROP_KEY, CODE_HELP FROM JH_WS02_CODE_LIST WHERE 1 \= 1 AND (CODE_ID LIKE (%$$cmp01%)OR 'ALL' \= $$cmp01) AND (SQL_PROP_KEY LIKE (%$$cmp02%) OR 'ALL' \= $$cmp02) AND (CODE_HELP LIKE (%$$cmp03%) OR 'ALL' \= $$cmp03) AND (CODE_TYPE \= $$cmp04 OR 'ALL' \= $$cmp04)
Fn01A004_29=insert_DATA_IMPORT_LOG
Fn01A004_2=insert_JH_WS02_CODE_LIST
Fn01A004_3=update_JH_WS02_CODE_LIST
Fn01A004_4=delete_del_JH_WS02_CODE_LIST
Fn01A004_5=insert_JH_WS02_CODE_FORMAT_LIST
Fn01A004_6=update_JH_WS02_CODE_FORMAT_LIST
Fn01A004_7=delete_del_JH_WS02_CODE_FORMAT_LIST
Fn01A004_8=SELECT ROW_NUMBER() OVER ( ORDER BY CODE_ID ASC) AS RowNum, * FROM JH_WS02_CODE_LIST WHERE 1\=1 AND (CODE_ID LIKE (%$$cmp01%) OR 'ALL' \= $$cmp01) AND (JNDI_USE \= $$cmp03 OR 'ALL' \= $$cmp03) AND (SQL_PROP_KEY LIKE (%$$cmp04%) OR 'ALL' \= $$cmp04) AND (CODE_TYPE \= $$cmp05 OR 'ALL' \= $$cmp05) AND (API_DESC LIKE (%$$cmp02%) OR 'ALL' \= $$cmp02)
Fn01A004_9=SELECT ROW_NUMBER() OVER ( ORDER BY FORMAT_IDX ASC) AS RowNum,* FROM JH_WS02_CODE_IP_RELATION WHERE 1\=1 AND (CODE_ID_PK \= $$cmp01)
Fn01A005_2=SELECT CW_IDX, WEB_SERVICE_IP, WEB_SERVICE_CODE, WEB_SERVICE_NAME, WEB_SERVICE_DOMAIN, WEB_SERVICE_SUB_DOMAIN FROM JH_WS02_WEBSERVICE_INFO WHERE IS_DOING \= 'Y'
Fn01A006_1=SELECT *\n\t,(\n\t\tSELECT count(*)\n\t\tFROM (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT FUNCID\n\t\t\t\t\t,CODE_ID\n\t\t\t\t\t,LOGINID\n\t\t\t\t\t,ACTION_TYPE\n\t\t\t\t\t,HOSTIP\n\t\t\t\t\t,(\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN PROCTYPE LIKE '%WS%'\n\t\t\t\t\t\t\t\tTHEN PROCTYPE + '_API'\n\t\t\t\t\t\t\tELSE 'LOCAL'\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t) AS PROCTYPE\n\t\t\t\t\t,PROCTARGET AS PROCTARGET_CODE\n\t\t\t\t\t,CASE PROCTARGET\n\t\t\t\t\t\tWHEN '0'\n\t\t\t\t\t\t\tTHEN '成功'\n\t\t\t\t\t\tWHEN '-1'\n\t\t\t\t\t\t\tTHEN '失敗'\n\t\t\t\t\t\tEND AS PROCTARGET\n\t\t\t\t\t,SUBMITVALUE\n\t\t\t\t\t,OuterReturnCode\n\t\t\t\t\t,OuterReturnMsg\n\t\t\t\t\t,SubReturnCode\n\t\t\t\t\t,SubReturnMsg\n\t\t\t\t\t,SubReturnUrl\n\t\t\t\t\t,LogUrl\n\t\t\t\t\t/*,FIELDBEFORE*/\n\t\t\t\t\t/*,FIELDAFTER*/\n\t\t\t\t\t,CONVERT(VARCHAR, PROCSTARTDT, 120) AS PROCSTARTDT\n \t\t\t\t\t,CONVERT(VARCHAR, PROCENDDT, 120) AS PROCENDDT\n\t\t\t\t\t,(\n\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\tWHEN ISNULL(PROCENDDT, 0) \= '1900-01-01 00\:00\:00.000'\n\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\tELSE CAST(ABS(DATEDIFF(SECOND, PROCSTARTDT, ISNULL(PROCENDDT, '$$END_DATE$$' + ' ' + '$$END_TIME$$'))) AS NVARCHAR(10)) + N'.' + RIGHT('000' + CAST(ABS(DATEDIFF(MILLISECOND, PROCSTARTDT, ISNULL(PROCENDDT, '$$END_DATE$$' + ' ' + '$$END_TIME$$')) % 1000) AS NVARCHAR(3)), 3)\n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t) AS EXEC_PERIOD\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t,PARAM_VALUE\n\t\t\t\tFROM PROCESS_LOG WITH (NOLOCK)\n\t\t\t\tWHERE PROCTYPE LIKE '%WS%'\n\t\t\t\t) A\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND (\n\t\t\t\t\t(\n\t\t\t\t\t\t(CONVERT(DATETIME, PROCSTARTDT, 120) >\= '$$START_DATE$$' + ' ' + '$$START_TIME$$')\n\t\t\t\t\t\tAND (CONVERT(DATETIME, PROCSTARTDT, 120) <\= '$$END_DATE$$' + ' ' + '$$END_TIME$$')\n\t\t\t\t\t\t)\n\t\t\t\t\tOR (\n\t\t\t\t\t\t'$$START_DATE$$' \= 'ALL'\n\t\t\t\t\t\tAND '$$END_DATE$$' \= 'ALL'\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tPROCTYPE LIKE '%$$PROCTYPE$$%'\n\t\t\t\t\tOR 'ALL' \= '$$PROCTYPE$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tCODE_ID LIKE '%$$CODE_ID$$%'\n\t\t\t\t\tOR 'ALL' \= '$$CODE_ID$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tLOGINID LIKE '%$$LOGINID$$%'\n\t\t\t\t\tOR 'ALL' \= '$$LOGINID$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\t(\n\t\t\t\t\t\tEXEC_PERIOD BETWEEN '$$PERIOD_START$$'\n\t\t\t\t\t\t\tAND '$$PERIOD_END$$'\n\t\t\t\t\t\t)\n\t\t\t\t\tOR (\n\t\t\t\t\t\t'$$PERIOD_START$$' \= '0'\n\t\t\t\t\t\tAND '$$PERIOD_END$$' \= '0'\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tHOSTIP LIKE '%$$HOSTIP$$%'\n\t\t\t\t\tOR 'ALL' \= '$$HOSTIP$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tPROCTARGET_CODE \= '$$PROCTARGET_CODE$$'\n\t\t\t\t\tOR 'ALL' \= '$$PROCTARGET_CODE$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tACTION_TYPE \= '$$ACTION_TYPE$$'\n\t\t\t\t\tOR 'ALL' \= '$$ACTION_TYPE$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tPARAM_VALUE LIKE '%$$PARAM_VALUE$$%'\n\t\t\t\t\tOR '$$PARAM_VALUE$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t) CNT\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PROCSTARTDT DESC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT FUNCID\n\t\t\t,CODE_ID\n\t\t\t,LOGINID\n\t\t\t,ACTION_TYPE\n\t\t\t,HOSTIP\n\t\t\t,PROCTYPE\n\t\t\t,PROCTARGET_CODE\n\t\t\t,PROCTARGET\n\t\t\t,SUBMITVALUE\n\t\t\t,OuterReturnCode\n\t\t\t,OuterReturnMsg\n\t\t\t,SubReturnCode\n\t\t\t,SubReturnMsg\n\t\t\t,SubReturnUrl\n\t\t\t,LogUrl\n\t\t\t/*,FIELDBEFORE*/\n\t\t\t/*,FIELDAFTER*/\n\t\t\t,CONVERT(VARCHAR, PROCSTARTDT, 120) AS PROCSTARTDT\n \t\t\t,CONVERT(VARCHAR, PROCENDDT, 120) AS PROCENDDT\n\t\t\t,EXEC_PERIOD\n\t\t\t,DATA_STATUS\n\t\tFROM (\n\t\t\tSELECT FUNCID\n\t\t\t\t,CODE_ID\n\t\t\t\t,LOGINID\n\t\t\t\t,ACTION_TYPE\n\t\t\t\t,HOSTIP\n\t\t\t\t,(\n\t\t\t\t\tCASE \n\t\t\t\t\t\tWHEN PROCTYPE LIKE '%WS%'\n\t\t\t\t\t\t\tTHEN PROCTYPE + '_API'\n\t\t\t\t\t\tELSE 'LOCAL'\n\t\t\t\t\t\tEND\n\t\t\t\t\t) AS PROCTYPE\n\t\t\t\t,PROCTARGET AS PROCTARGET_CODE\n\t\t\t\t,CASE PROCTARGET\n\t\t\t\t\tWHEN '0'\n\t\t\t\t\t\tTHEN '成功'\n\t\t\t\t\tWHEN '-1'\n\t\t\t\t\t\tTHEN '失敗'\n\t\t\t\t\tEND AS PROCTARGET\n\t\t\t\t,SUBMITVALUE\n\t\t\t\t,OuterReturnCode\n\t\t\t\t,OuterReturnMsg\n\t\t\t\t,SubReturnCode\n\t\t\t\t,SubReturnMsg\n\t\t\t\t,SubReturnUrl\n\t\t\t\t,LogUrl\n\t\t\t\t/*,FIELDBEFORE*/\n\t\t\t\t/*,FIELDAFTER*/\n\t\t\t\t,PROCSTARTDT\n\t\t\t\t,PROCENDDT\n\t\t\t\t,(\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNULL(PROCENDDT, 0) \= '1900-01-01 00\:00\:00.000'\n\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\tELSE CAST(ABS(DATEDIFF(SECOND, PROCSTARTDT, ISNULL(PROCENDDT, '$$END_DATE$$' + ' ' + '$$END_TIME$$'))) AS NVARCHAR(10)) + N'.' + RIGHT('000' + CAST(ABS(DATEDIFF(MILLISECOND, PROCSTARTDT, ISNULL(PROCENDDT, '$$END_DATE$$' + ' ' + '$$END_TIME$$')) % 1000) AS NVARCHAR(3)), 3)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)  AS EXEC_PERIOD\n\t\t\t\t,DATA_STATUS\n\t\t\t\t,PARAM_VALUE\n\t\t\tFROM PROCESS_LOG WITH (NOLOCK)\n\t\t\tWHERE PROCTYPE LIKE '%WS%'\n\t\t\t) A\n\t\tWHERE 1 \= 1\n\t\t\tAND (\n\t\t\t\t(\n\t\t\t\t\t(CONVERT(DATETIME, PROCSTARTDT, 120) >\= '$$START_DATE$$' + ' ' + '$$START_TIME$$')\n\t\t\t\t\tAND (CONVERT(DATETIME, PROCSTARTDT, 120) <\= '$$END_DATE$$' + ' ' + '$$END_TIME$$')\n\t\t\t\t\t)\n\t\t\t\tOR (\n\t\t\t\t\t'$$START_DATE$$' \= 'ALL'\n\t\t\t\t\tAND '$$END_DATE$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tPROCTYPE LIKE '%$$PROCTYPE$$%'\n\t\t\t\tOR 'ALL' \= '$$PROCTYPE$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tCODE_ID LIKE '%$$CODE_ID$$%'\n\t\t\t\tOR 'ALL' \= '$$CODE_ID$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tLOGINID LIKE '%$$LOGINID$$%'\n\t\t\t\tOR 'ALL' \= '$$LOGINID$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\t(\n\t\t\t\t\tEXEC_PERIOD BETWEEN '$$PERIOD_START$$'\n\t\t\t\t\t\tAND '$$PERIOD_END$$'\n\t\t\t\t\t)\n\t\t\t\tOR (\n\t\t\t\t\t'$$PERIOD_START$$' \= '0'\n\t\t\t\t\tAND '$$PERIOD_END$$' \= '0'\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tHOSTIP LIKE '%$$HOSTIP$$%'\n\t\t\t\tOR 'ALL' \= '$$HOSTIP$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tPROCTARGET_CODE \= '$$PROCTARGET_CODE$$'\n\t\t\t\tOR 'ALL' \= '$$PROCTARGET_CODE$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tACTION_TYPE \= '$$ACTION_TYPE$$'\n\t\t\t\tOR 'ALL' \= '$$ACTION_TYPE$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tPARAM_VALUE LIKE '%$$PARAM_VALUE$$%'\n\t\t\t\tOR '$$PARAM_VALUE$$' \= 'ALL'\n\t\t\t\t)\n\t\t) DATA\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
Fn01A007_10=update_JH_WS02_FLOW_LIST
Fn01A007_11=delete_del_JH_WS02_FLOW_LIST
Fn01A007_12=insert_JH_WS02_FLOW_SCHEDULE_LIST
Fn01A007_13=update_JH_WS02_FLOW_SCHEDULE_LIST
Fn01A007_14=delete_del_JH_WS02_FLOW_SCHEDULE_LIST
Fn01A007_15=insert_JH_WS02_FLOW_IP_RELATION
Fn01A007_16=update_JH_WS02_FLOW_IP_RELATION
Fn01A007_17=delete_del_JH_WS02_FLOW_IP_RELATION
Fn01A007_18=insert_JH_WS02_FLOW_WS_RELATION
Fn01A007_19=update_JH_WS02_FLOW_WS_RELATION
Fn01A007_1=SELECT ROW_NUMBER() OVER (ORDER BY PK ASC) AS RowNum, * FROM JH_WS02_FLOW_LIST WHERE 1 \= 1 AND (FLOW_ID LIKE (%$$cmp01%) OR 'ALL' \= $$cmp01)
Fn01A007_20=delete_del_JH_WS02_FLOW_WS_RELATION
Fn01A007_21=insert_JH_WS02_FLOW_RANGE_ANALYSIS
Fn01A007_22=update_JH_WS02_FLOW_RANGE_ANALYSIS
Fn01A007_23=delete_del_JH_WS02_FLOW_RANGE_ANALYSIS
Fn01A007_24=SELECT ROW_NUMBER() OVER ( ORDER BY PK ASC) AS RowNum, PK, FLOW_ID, FLOW_HELP FROM JH_WS02_FLOW_LIST WHERE 1 \= 1 AND (FLOW_ID LIKE (%$$cmp01%) OR 'ALL' \= $$cmp01) AND (FLOW_HELP LIKE (%$$cmp02%) OR 'ALL' \= $$cmp02) AND (FLOW_TYPE \= $$cmp03 OR 'ALL' \= $$cmp03)
Fn01A007_2=SELECT ROW_NUMBER() OVER (ORDER BY FLOW_ID_PK ASC, CLASS_NUM ASC) AS RowNum, * FROM JH_WS02_FLOW_SCHEDULE_LIST WHERE 1 \= 1 AND FLOW_ID_PK \= $$cmp01
Fn01A007_3=SELECT ROW_NUMBER() OVER (ORDER BY FLOW_ID_PK ASC) AS RowNum, * FROM JH_WS02_FLOW_IP_RELATION WHERE 1 \= 1 AND FLOW_ID_PK \= $$cmp01
Fn01A007_4=SELECT ROW_NUMBER() OVER (ORDER BY B.CLASS_NUM ASC) AS RowNum, A.FLOW_ID, C.WEB_SERVICE_CODE, C.WEB_SERVICE_NAME, SUBSTRING(C.WEB_SERVICE_IP, 1, (CASE WHEN CHARINDEX('\:', C.WEB_SERVICE_IP) \= 0 THEN '' ELSE (CHARINDEX('\:', C.WEB_SERVICE_IP) - 1) END)) AS WEB_SERVICE_IP, B.CW_IDX, B.IS_DOING, B.CLASS_NUM, B.ADD_USER_ID, B.ADD_DT, B.LAST_MOD_USER_ID, B.LAST_MOD_DT FROM JH_WS02_FLOW_LIST A LEFT JOIN JH_WS02_FLOW_WS_RELATION B ON A.PK \= B.FLOW_ID_PK LEFT JOIN JH_WS02_WEBSERVICE_INFO C ON B.WEB_SERVICE_CODE \= C.WEB_SERVICE_CODE WHERE 1 \= 1 AND FLOW_ID_PK \= $$cmp01
Fn01A007_5=SELECT ROW_NUMBER() OVER (ORDER BY FLOW_ID_PK ASC) AS RowNum, * FROM JH_WS02_FLOW_RANGE_ANALYSIS WHERE 1 \= 1 AND FLOW_ID_PK \= $$cmp01
Fn01A007_6=SELECT ROW_NUMBER() OVER (ORDER BY CODE_ID ASC) AS RowNum, * FROM (SELECT '0' AS PK, ' ' AS CODE_ID, '(無)' AS CODE_ID_NAME UNION SELECT PK, CODE_ID, CODE_ID AS CODE_ID_NAME FROM JH_WS02_CODE_LIST WHERE (CODE_TYPE \= $$cmp01 OR 'ALL' \= $$cmp01)) AS A
Fn01A007_7=SELECT ROW_NUMBER() OVER (ORDER BY CODE_ID ASC) AS RowNum, * FROM JH_WS02_CODE_LIST WHERE 1 \= 1 AND (CODE_TYPE \= $$cmp01 OR 'ALL' \= $$cmp01)
Fn01A007_8=SELECT ROW_NUMBER() OVER (ORDER BY CW_IDX ASC) AS RowNum, * FROM JH_WS02_WEBSERVICE_INFO WHERE IS_DOING \= 'Y'
Fn01A007_9=insert_JH_WS02_FLOW_LIST
Fn01A008_1=SELECT ROW_NUMBER() OVER (ORDER BY ConvertCode_utf8) AS RowNum, * FROM CodeMap WHERE 1 \= 1 AND (Code_big5 LIKE (%$$cmp01%) OR 'ALL' \= $$cmp01) AND (Code_CNS LIKE (%$$cmp02%) OR 'ALL' \= $$cmp02) AND (MapCode_utf8 LIKE (%$$cmp03%) OR 'ALL' \= $$cmp03) AND (ConvertCode_utf8 LIKE (%$$cmp04%) OR 'ALL' \= $$cmp04)
Fn01A008_2=insert_CodeMap
Fn01A008_3=update_CodeMap
Fn01A008_4=delete_del_CodeMap
Fn01A009_1=SELECT ROW_NUMBER() OVER (ORDER BY UP_IDX DESC) AS RowNum, * FROM FILE_CONVERT_LOG WHERE 1 \= 1
Fn01A009_2=insert_FILE_CONVERT_LOG
Fn01B001_13=SELECT ROW_NUMBER() OVER (ORDER BY SEQ ASC) AS RowNum, DATA_DISPLAY, VALUE FROM JH_WS02_REF_MAPDATA_TYPE WHERE 1 \= 1 AND IS_ENABLED \= 'Y'
Fn01B001_14=SELECT ROW_NUMBER() OVER (ORDER BY RN ASC) AS RowNum, * FROM (SELECT 0 AS RN, 'ALL' AS DATA_DISPLAY, 'ALL' AS VALUE UNION ALL SELECT ROW_NUMBER() OVER (ORDER BY SEQ ASC) AS RN, DATA_DISPLAY, VALUE FROM JH_WS02_REF_MAPDATA_TYPE WHERE 1 \= 1 AND IS_ENABLED \= 'Y') AS A
Fn01B001_1=SELECT ROW_NUMBER() OVER (ORDER BY A.PK_PROP) AS RowNum, A.*FROM PROP_MASTER A WHERE 1 \=1 AND (PROP_ID LIKE (%$$cmp01%) OR 'ALL' \= $$cmp01)AND (PROP_TYPE \= $$cmp02 OR 'ALL' \= $$cmp02)
Fn01B001_2=SELECT ROW_NUMBER() OVER (ORDER BY PK_PROP ) AS RowNum, * FROM PROP_DETAIL WHERE 1\=1 AND PK_PROP \= $$cmp01
Fn01B001_3=insert_PROP_MASTER
Fn01B001_4=update_PROP_MASTER
Fn01B001_5=delete_del_PROP_MASTER
Fn01B001_6=insert_PROP_DETAIL
Fn01B001_7=update_PROP_DETAIL
Fn01B001_8=delete_del_PROP_DETAIL
Fn01B002_1=SELECT ROW_NUMBER() OVER (ORDER BY CODE_IDX ASC) AS RowNum, CODE_IDX, CODE_ID, CODE_NAME, CODE_DESC, CODE_LOCATE FROM JH_WS02_4GE_LIST WHERE 1 \= 1 AND (CODE_ID LIKE (%$$cmp01%) OR $$cmp01 \= 'ALL')
Fn01B002_2=insert_JH_WS02_4GE_LIST
Fn01B002_3=update_JH_WS02_4GE_LIST
Fn01B002_4=delete_del_JH_WS02_4GE_LIST
Fn01B003_1=SELECT ROW_NUMBER() OVER ( ORDER BY CW_IDX ASC) AS RowNum,* FROM JH_WS02_WEBSERVICE_INFO WHERE 1 \= 1  AND ( WEB_SERVICE_CODE LIKE (%$$cmp01%) OR 'ALL' \= $$cmp01 ) AND ( WEB_SERVICE_NAME LIKE (%$$cmp02%) OR 'ALL' \= $$cmp02 )
Fn01B003_2=insert_JH_WS02_WEBSERVICE_INFO
Fn01B003_3=update_JH_WS02_WEBSERVICE_INFO
Fn01B003_4=delete_del_JH_WS02_WEBSERVICE_INFO
Fn02A001_4=update_JH_LOSS_ESTPARM_MULTI
Fn02A001_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'D1_MOD'\nBEGIN\n\tSET QUOTED_IDENTIFIER OFF\n\n\tEXEC (\n\t\t\t" SET QUOTED_IDENTIFIER OFF DECLARE @PROC_TARGET AS VARCHAR(50); DECLARE @WHERE_CONDITION AS VARCHAR(500);  SET @PROC_TARGET \= 'INV_FUND_COMPARE';  SET @WHERE_CONDITION \= ""WHERE AOID \= '$$AOID$$' AND AIMSID \= '$$AIMSID$$' AND COMPAREIDNO \= '$$COMPAREIDNO$$'""; DECLARE @UPDATE_SQL varchar(MAX),         @UPDATE_COUNT_A varchar(MAX) \='',         @UPDATE_COUNT_B varchar(MAX) \=        ""USEFLAG \= '$$USEFLAG$$',         LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}',         LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$',         LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)""; SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+        CASE            WHEN CHARINDEX('$$', VALUE) <\= 0 THEN VALUE+','            ELSE ''        END                                    FROM STRING_SPLIT(@UPDATE_COUNT_B, ','); IF LEN(@UPDATE_COUNT_A) > 0  BEGIN     SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1)      SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION     EXEC (@UPDATE_SQL);       END;    SET QUOTED_IDENTIFIER ON "\n\t\t\t)\n\n\tSET QUOTED_IDENTIFIER ON\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'update'\n\t\t,'INV_FUND_COMPARE'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$COMPAREIDNO$$'\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\nEND;\n
Fn02A002_3=insert_JH_REF_BRANCH
Fn02A002_4=update_JH_REF_BRANCH
Fn02A002_5=delete_del_JH_REF_BRANCH
Fn02A002_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tINSERT INTO INV_MAINTAIN_ACNO (\n\t\tACNOLEVEL\n\t\t,ACNO\n\t\t,ACNONAME\n\t\t,ACNOFLAG\n\t\t,USEFLAG\n\t\t,ACNOTYPE\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t)\n\tVALUES (\n\t\t'$$ACNOLEVEL$$'\n\t\t,'$$ACNO$$'\n\t\t,'$$ACNONAME$$'\n\t\t,'$$ACNOFLAG$$'\n\t\t,'$$USEFLAG$$'\n\t\t,'BS'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'insert'\n\t\t,'INV_MAINTAIN_ACNO'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$DATA_NO$$'\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\nEND;\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\tSET QUOTED_IDENTIFIER OFF\n\n\t\tEXEC (\n\t\t\t\t" SET QUOTED_IDENTIFIER OFF DECLARE @PROC_TARGET AS VARCHAR(50); DECLARE @WHERE_CONDITION AS VARCHAR(500); SET @PROC_TARGET \= 'INV_MAINTAIN_ACNO'; SET @WHERE_CONDITION \= "" WHERE ACNO \= '$$OLD_ACNO$$' AND ACNOLEVEL \= '$$OLD_ACNOLEVEL$$' AND ACNOTYPE \= 'BS' ;""; DECLARE @UPDATE_SQL varchar(MAX), @UPDATE_COUNT_A varchar(MAX) \= '', @UPDATE_COUNT_B varchar(MAX) \= ""ACNOLEVEL \= '$$ACNOLEVEL$$', ACNO \= '$$ACNO$$', ACNONAME \= '$$ACNONAME$$', ACNOFLAG \= '$$ACNOFLAG$$', USEFLAG \= '$$USEFLAG$$', LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}', LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$', LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)""; SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+ CASE WHEN CHARINDEX('$$', VALUE) < \= 0 THEN VALUE+',' ELSE '' END FROM STRING_SPLIT(@UPDATE_COUNT_B, ','); IF LEN(@UPDATE_COUNT_A) > 0 BEGIN SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION SELECT @UPDATE_SQL EXEC (@UPDATE_SQL); END SET QUOTED_IDENTIFIER ON "\n\t\t\t\t)\n\n\t\tSET QUOTED_IDENTIFIER ON\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'INV_MAINTAIN_ACNO'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DATA_NO$$'\n\t\t\t,GETDATE()\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n
Fn02A003_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tINSERT INTO INV_MAINTAIN_ACNO (\n\t\tACNOLEVEL\n\t\t,ACNO\n\t\t,ACNONAME\n\t\t,ACNOFLAG\n\t\t,USEFLAG\n\t\t,ACNOTYPE\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t)\n\tVALUES (\n\t\t'$$ACNOLEVEL$$'\n\t\t,'$$ACNO$$'\n\t\t,'$$ACNONAME$$'\n\t\t,'$$ACNOFLAG$$'\n\t\t,'$$USEFLAG$$'\n\t\t,'PL'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'insert'\n\t\t,'INV_MAINTAIN_ACNO'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$DATA_NO$$'\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\nEND;\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\tSET QUOTED_IDENTIFIER OFF\n\n\t\tEXEC (\n\t\t\t\t" SET QUOTED_IDENTIFIER OFF DECLARE @PROC_TARGET AS VARCHAR(50); DECLARE @WHERE_CONDITION AS VARCHAR(500); SET @PROC_TARGET \= 'INV_MAINTAIN_ACNO'; SET @WHERE_CONDITION \= "" WHERE ACNO \= '$$OLD_ACNO$$' AND ACNOLEVEL \= '$$OLD_ACNOLEVEL$$' AND ACNOTYPE \= 'PL' ;""; DECLARE @UPDATE_SQL varchar(MAX), @UPDATE_COUNT_A varchar(MAX) \= '', @UPDATE_COUNT_B varchar(MAX) \= ""ACNOLEVEL \= '$$ACNOLEVEL$$', ACNO \= '$$ACNO$$', ACNONAME \= '$$ACNONAME$$', ACNOFLAG \= '$$ACNOFLAG$$', USEFLAG \= '$$USEFLAG$$', LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}', LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$', LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)""; SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+ CASE WHEN CHARINDEX('$$', VALUE) < \= 0 THEN VALUE+',' ELSE '' END FROM STRING_SPLIT(@UPDATE_COUNT_B, ','); IF LEN(@UPDATE_COUNT_A) > 0 BEGIN SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION SELECT @UPDATE_SQL EXEC (@UPDATE_SQL); END SET QUOTED_IDENTIFIER ON "\n\t\t\t\t)\n\n\t\tSET QUOTED_IDENTIFIER ON\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'INV_MAINTAIN_ACNO'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DATA_NO$$'\n\t\t\t,GETDATE()\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n
Fn02A004_1=SELECT ROW_NUMBER() OVER (ORDER BY PK_REF_INDUSTRY_MASTER ASC) AS RowNum, PK_REF_INDUSTRY_MASTER ,INDUSTRY_NAME ,INDUSTRY_MEMO ,USE_FLAG FROM JH_REF_INDUSTRY_MASTER
Fn02A004_2=insert_JH_REF_INDUSTRY_MASTER
Fn02A004_3=update_JH_REF_INDUSTRY_MASTER
Fn02A004_4=delete_del_JH_REF_INDUSTRY_MASTER
Fn02A004_5=SELECT ROW_NUMBER() OVER (ORDER BY PK_REF_INDUSTRY_MASTER ASC) AS RowNum, PK_REF_INDUSTRY_MASTER, ID_NO, ID_NAME, ID_MEMO FROM JH_REF_INDUSTRY_DETAIL WHERE 1 \=1 AND PK_REF_INDUSTRY_MASTER \= $$cmp01
Fn02A004_6=insert_JH_REF_INDUSTRY_DETAIL
Fn02A004_7=update_JH_REF_INDUSTRY_DETAIL
Fn02A004_8=delete_del_JH_REF_INDUSTRY_DETAIL
Fn02A004_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tINSERT INTO INV_MAINTAIN_ACNO (\n\t\tACNOLEVEL\n\t\t,ACNO\n\t\t,ACNONAME\n\t\t,ACNOFLAG\n\t\t,USEFLAG\n\t\t,ACNOTYPE\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t)\n\tVALUES (\n\t\t'$$ACNOLEVEL$$'\n\t\t,'$$ACNO$$'\n\t\t,'$$ACNONAME$$'\n\t\t,'$$ACNOFLAG$$'\n\t\t,'$$USEFLAG$$'\n\t\t,'CS'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'insert'\n\t\t,'INV_MAINTAIN_ACNO'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$DATA_NO$$'\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\nEND;\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\tSET QUOTED_IDENTIFIER OFF\n\n\t\tEXEC (\n\t\t\t\t" SET QUOTED_IDENTIFIER OFF DECLARE @PROC_TARGET AS VARCHAR(50); DECLARE @WHERE_CONDITION AS VARCHAR(500); SET @PROC_TARGET \= 'INV_MAINTAIN_ACNO'; SET @WHERE_CONDITION \= "" WHERE ACNO \= '$$OLD_ACNO$$' AND ACNOLEVEL \= '$$OLD_ACNOLEVEL$$' AND ACNOTYPE \= 'CS' ;""; DECLARE @UPDATE_SQL varchar(MAX), @UPDATE_COUNT_A varchar(MAX) \= '', @UPDATE_COUNT_B varchar(MAX) \= ""ACNOLEVEL \= '$$ACNOLEVEL$$', ACNO \= '$$ACNO$$', ACNONAME \= '$$ACNONAME$$', ACNOFLAG \= '$$ACNOFLAG$$', USEFLAG \= '$$USEFLAG$$', LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}', LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$', LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)""; SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+ CASE WHEN CHARINDEX('$$', VALUE) < \= 0 THEN VALUE+',' ELSE '' END FROM STRING_SPLIT(@UPDATE_COUNT_B, ','); IF LEN(@UPDATE_COUNT_A) > 0 BEGIN SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION SELECT @UPDATE_SQL EXEC (@UPDATE_SQL); END SET QUOTED_IDENTIFIER ON "\n\t\t\t\t)\n\n\t\tSET QUOTED_IDENTIFIER ON\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'INV_MAINTAIN_ACNO'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DATA_NO$$'\n\t\t\t,GETDATE()\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n
Fn02A005_4=insert_JH_REF_FORCE_CLASSIFY_LIST
Fn02A005_5=update_JH_REF_FORCE_CLASSIFY_LIST
Fn02A005_6=delete_del_JH_REF_FORCE_CLASSIFY_LIST
Fn02A005_CUD2=IF '$$PARAM_SWITCH_VALUE$$' \= 'WIN_ADD_ACNO'\nBEGIN\n\tINSERT INTO INV_MAINTAIN_FINRPT (\n\t\tAOID\n\t\t,AIMSID\n\t\t,AIMSCMPY\n\t\t,FUNDYEAR\n\t\t,FUNDPER\n\t\t,ACNOTYPE\n\t\t,ACNOLEVEL\n\t\t,ACNO\n\t\t,ACNONAME\n\t\t,ACNOFLAG\n\t\t,ACCOUNTFIRMS\n\t\t,ACCOUNT\n\t\t,ACT_VISA\n\t\t,ADD_DT\n\t\t,ADD_USER_ID\n\t\t,CCYFIN\n\t\t)\n\tSELECT M.AOID\n\t\t,M.AIMSID\n\t\t,M.AIMSCMPY\n\t\t,M.FUNDYEAR\n\t\t,M.FUNDPER\n\t\t,M.ACNOTYPE\n\t\t,M.ACNOLEVEL\n\t\t,M.ACNO\n\t\t,M.ACNONAME\n\t\t,M.ACNOFLAG\n\t\t,M.ACCOUNTFIRMS\n\t\t,M.ACCOUNT\n\t\t,M.ACT_VISA\n\t\t,M.ADD_DT\n\t\t,M.ADD_USER_ID\n\t\t,M.CCYFIN\n\tFROM (\n\t\tSELECT DISTINCT S1.AOID\n\t\t\t,S1.AIMSID\n\t\t\t,S1.AIMSCMPY\n\t\t\t,'$$MAXFUNDYEAR$$' AS 'FUNDYEAR'\n\t\t\t,'$$MAXFUNDPER$$' AS 'FUNDPER'\n\t\t\t,S2.ACNOTYPE\n\t\t\t,S2.ACNOLEVEL\n\t\t\t,S2.ACNO\n\t\t\t,S2.ACNONAME\n\t\t\t,S2.ACNOFLAG\n\t\t\t,'$$ACCOUNTFIRMS$$' AS 'ACCOUNTFIRMS'\n\t\t\t,'$$ACCOUNT$$' AS 'ACCOUNT'\n\t\t\t,'$$ACT_VISA$$' AS 'ACT_VISA'\n\t\t\t,CONVERT(CHAR(20), GETDATE(), 120) AS 'ADD_DT'\n\t\t\t,'$$LOGIN_ID$$' AS 'ADD_USER_ID'\n\t\t\t,S1.CCYFIN\n\t\tFROM INV_FUND_AIMSMAP S1\n\t\tINNER JOIN INV_MAINTAIN_ACNO S2 ON S1.AIMSID \= '$$AIMSID$$'\n\t\tWHERE ACNOLEVEL IN (\n\t\t\t\t'0'\n\t\t\t\t,'1'\n\t\t\t\t,'2'\n\t\t\t\t,'3'\n\t\t\t\t)\n\t\t\tAND S2.USEFLAG \= '1'\n\t\t) M\n\tLEFT JOIN (\n\t\tSELECT ACNO AS 'ACNO_EXIST'\n\t\tFROM INV_MAINTAIN_FINRPT\n\t\tWHERE AIMSID \= '$$AIMSID$$'\n\t\t\tAND FUNDYEAR \= '$$MAXFUNDYEAR$$'\n\t\t\tAND FUNDPER \= '$$MAXFUNDPER$$'\n\t\t) A ON M.ACNO \= A.ACNO_EXIST\n\tWHERE ACNO_EXIST IS NULL\n\t\tAND ACNOTYPE \= '$$ACNOTYPE$$';\n\n\tUPDATE INV_MAINTAIN_FINRPT\n\tSET ACNOLEVEL \= B.ACNOLEVEL\n\t\t,ACNONAME \= B.ACNONAME\n\tFROM (\n\t\tSELECT DISTINCT S2.ACNOLEVEL\n\t\t\t,S2.ACNO\n\t\t\t,S2.ACNONAME\n\t\tFROM INV_FUND_AIMSMAP S1\n\t\tINNER JOIN INV_MAINTAIN_ACNO S2 ON S1.AIMSID \= '$$AIMSID$$'\n\t\tWHERE ACNOLEVEL IN (\n\t\t\t\t'0'\n\t\t\t\t,'1'\n\t\t\t\t,'2'\n\t\t\t\t,'3'\n\t\t\t\t)\n\t\t\tAND S2.USEFLAG \= '1'\n\t\t) B\n\tWHERE INV_MAINTAIN_FINRPT.ACNO \= B.ACNO\n\t\tAND INV_MAINTAIN_FINRPT.AIMSID \= '$$AIMSID$$'\n\t\tAND INV_MAINTAIN_FINRPT.FUNDYEAR \= '$$MAXFUNDYEAR$$'\n\t\tAND INV_MAINTAIN_FINRPT.FUNDPER \= '$$MAXFUNDPER$$'\n\t\tAND INV_MAINTAIN_FINRPT.ACNOTYPE \= '$$ACNOTYPE$$';\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'UPDATE'\n\t\t,'INV_FUND_AIMS'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,IDENT_CURRENT('INV_MAINTAIN_FINRPT')\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\n\t\t/*繼承上一期的[流動性折減]的數字*/\n\t\t;\n\n\tWITH MAXDT (\n\t\tAIMSID\n\t\t,EACHLAWDIFF\n\t\t,ACNO\n\t\t,ACNOLEVEL\n\t\t,FUNDDT\n\t\t)\n\tAS (\n\t\tSELECT AIMSID\n\t\t\t,EACHLAWDIFF\n\t\t\t,ACNO\n\t\t\t,ACNOLEVEL\n\t\t\t,MAX(FUNDYEAR + FUNDPER) FUNDDT\n\t\tFROM INV_HIS_MAINTAIN_FINRPT\n\t\tWHERE UPDMEMO IS NOT NULL\n\t\tGROUP BY AIMSID\n\t\t\t,EACHLAWDIFF\n\t\t\t,ACNO\n\t\t\t,ACNOLEVEL\n\t\t)\n\tUPDATE S1\n\tSET EACHLAWDIFF \= S2.EACHLAWDIFF\n\tFROM INV_MAINTAIN_FINRPT S1\n\tINNER JOIN MAXDT S2 ON S1.AIMSID \= S2.AIMSID\n\t\tAND S1.ACNO \= S2.ACNO\n\t\tAND S1.ACNOLEVEL \= S2.ACNOLEVEL\nEND;\n
Fn02A005_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tINSERT INTO INV_MAINTAIN_FINRPT (\n\t\tAOID\n\t\t,AIMSID\n\t\t,AIMSCMPY\n\t\t,FUNDYEAR\n\t\t,FUNDPER\n\t\t,ACNOTYPE\n\t\t,ACNOLEVEL\n\t\t,ACNO\n\t\t,ACNONAME\n\t\t,ACNOFLAG\n\t\t,ACCOUNTFIRMS\n\t\t,ACCOUNT\n\t\t,ACT_VISA\n\t\t,ADD_DT\n\t\t,ADD_USER_ID\n\t\t,CCYFIN\n\t\t)\n\tSELECT DISTINCT S1.AOID\n\t\t,S1.AIMSID\n\t\t,S1.AIMSCMPY\n\t\t,'$$MAXFUNDYEAR$$'\n\t\t,'$$MAXFUNDPER$$'\n\t\t,S2.ACNOTYPE\n\t\t,S2.ACNOLEVEL\n\t\t,S2.ACNO\n\t\t,S2.ACNONAME\n\t\t,S2.ACNOFLAG\n\t\t,'$$ACCOUNTFIRMS$$'\n\t\t,'$$ACCOUNT$$'\n\t\t,'$$ACT_VISA$$'\n\t\t,CONVERT(CHAR(20), GETDATE(), 120) ADD_DT\n\t\t,'$$LOGIN_ID$$'\n\t\t,S1.CCYFIN\n\tFROM INV_FUND_AIMSMAP S1\n\tINNER JOIN INV_MAINTAIN_ACNO S2 ON S1.AIMSID \= '$$AIMSID$$'\n\tWHERE ACNOLEVEL IN (\n\t\t\t'0'\n\t\t\t,'1'\n\t\t\t,'2'\n\t\t\t,'3'\n\t\t\t)\n\t\tAND S2.USEFLAG \= '1'\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'insert'\n\t\t,'INV_FUND_AIMS'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,IDENT_CURRENT('INV_MAINTAIN_FINRPT')\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\n\t\t/*繼承上一期的[流動性折減]的數字*/\n\t\t;\n\n\tWITH MAXDT (\n\t\tAIMSID\n\t\t,EACHLAWDIFF\n\t\t,ACNO\n\t\t,ACNOLEVEL\n\t\t,FUNDDT\n\t\t)\n\tAS (\n\t\tSELECT AIMSID\n\t\t\t,EACHLAWDIFF\n\t\t\t,ACNO\n\t\t\t,ACNOLEVEL\n\t\t\t,MAX(FUNDYEAR + FUNDPER) FUNDDT\n\t\tFROM INV_HIS_MAINTAIN_FINRPT\n\t\tWHERE UPDMEMO IS NOT NULL\n\t\tGROUP BY AIMSID\n\t\t\t,EACHLAWDIFF\n\t\t\t,ACNO\n\t\t\t,ACNOLEVEL\n\t\t)\n\tUPDATE S1\n\tSET EACHLAWDIFF \= S2.EACHLAWDIFF\n\tFROM INV_MAINTAIN_FINRPT S1\n\tINNER JOIN MAXDT S2 ON S1.AIMSID \= S2.AIMSID\n\t\tAND S1.ACNO \= S2.ACNO\n\t\tAND S1.ACNOLEVEL \= S2.ACNOLEVEL\nEND;\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\tSET QUOTED_IDENTIFIER OFF\n\n\t\tEXEC (\n\t\t\t\t"\nSET QUOTED_IDENTIFIER OFF\nDECLARE @PROC_TARGET AS VARCHAR(50);\nDECLARE @WHERE_CONDITION AS VARCHAR(500);\n\nSET @PROC_TARGET \= 'INV_MAINTAIN_FINRPT'; \nSET @WHERE_CONDITION \= ""WHERE AIMSID \= '$$AIMSID$$' AND FUNDYEAR \= '$$MAXFUNDYEAR$$' AND FUNDPER \='$$MAXFUNDPER$$'"";\nDECLARE @UPDATE_SQL varchar(MAX),\n        @UPDATE_COUNT_A varchar(MAX) \='',\n        @UPDATE_COUNT_B varchar(MAX) \= \n           ""ACCOUNTFIRMS \= '$$ACCOUNTFIRMS$$',\n            ACCOUNT \= '$$ACCOUNT$$',\n            ACT_VISA \= '$$ACT_VISA$$',\n            LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}',\n            LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$',\n            LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)"";\nSELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+\n       CASE\n           WHEN CHARINDEX('$$', VALUE) <\= 0 THEN VALUE+','\n           ELSE ''\n       END                                   \nFROM STRING_SPLIT(@UPDATE_COUNT_B, ',');\nIF LEN(@UPDATE_COUNT_A) > 0 \nBEGIN\n    SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) \n    SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION\n    EXEC (@UPDATE_SQL);      \nEND     \nSET QUOTED_IDENTIFIER ON\n"\n\t\t\t\t)\n\n\t\tSET QUOTED_IDENTIFIER ON\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'INV_MAINTAIN_FINRPT'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'AIMSID($$AIMSID$$),FUNDYEAR($$MAXFUNDYEAR$$),FUNDPER($$MAXFUNDPER$$)'\n\t\t\t,GETDATE()\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND;\n
Fn02A005_CUD_WIN=IF '$$PARAM_SWITCH_VALUE$$' \= 'WINS_MOD'\nBEGIN\n\tSET QUOTED_IDENTIFIER OFF\n\n\tEXEC (\n\t\t\t" SET QUOTED_IDENTIFIER OFF DECLARE @PROC_TARGET AS VARCHAR(50); DECLARE @WHERE_CONDITION AS VARCHAR(500); SET @PROC_TARGET \= 'INV_MAINTAIN_FINRPT'; SET @WHERE_CONDITION \= ""WHERE ACNO \= '$$ACNO$$' AND ACNOFLAG \= '$$ACNOFLAG$$'AND ACNOLEVEL \= '$$ACNOLEVEL$$'AND ACNOTYPE \= '$$ACNOTYPE$$'AND AIMSID \= '$$AIMSID$$'AND FUNDPER \= '$$FUNDPER$$'AND FUNDYEAR \= '$$FUNDYEAR$$'""; DECLARE @UPDATE_SQL varchar(MAX), @UPDATE_COUNT_A varchar(MAX) \= '', @UPDATE_COUNT_B varchar(MAX) \= ""PRINCAL_BAL \= CAST('$$PRINCAL_BAL$$' AS float)*1000.00000000, LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}', LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$', LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)""; SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+ CASE WHEN CHARINDEX('$$', VALUE) < \= 0 THEN VALUE+',' ELSE '' END FROM STRING_SPLIT(@UPDATE_COUNT_B, ','); IF LEN(@UPDATE_COUNT_A) > 0 BEGIN SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION EXEC (@UPDATE_SQL); END SET QUOTED_IDENTIFIER ON "\n\t\t\t)\n\n\tSET QUOTED_IDENTIFIER ON\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'update'\n\t\t,'INV_MAINTAIN_FINRPT'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$ACNO$$,$$ACNOFLAG$$,$$ACNOLEVEL$$,$$ACNOTYPE$$,$$AIMSID$$,$$FUNDPER$$,$$FUNDYEAR$$'\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\nEND;\n
Fn02A006_1=SELECT ROW_NUMBER() OVER ( ORDER BY PK_REF_MOODYS ASC ) AS RowNum ,PK_REF_MOODYS, MDS_CODE, RECOVERY_RATE, ADD_USER_ID, ADD_DT, LAST_MOD_USER_ID, LAST_MOD_DT FROM JH_REF_MOODYS
Fn02A006_2=insert_JH_REF_MOODYS
Fn02A006_3=update_JH_REF_MOODYS
Fn02A006_4=delete_del_JH_REF_MOODYS
Fn02A006_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tOR '$$PARAM_SWITCH_VALUE$$' \= 'MOD_CCY'\nBEGIN\n\tSET QUOTED_IDENTIFIER OFF\n\n\tEXEC (\n\t\t\t"\nSET QUOTED_IDENTIFIER OFF\nDECLARE @PROC_TARGET AS VARCHAR(50);\nDECLARE @WHERE_CONDITION AS VARCHAR(500);\n\nSET @PROC_TARGET \= 'INV_FUND_AIMSMAP'; \nSET @WHERE_CONDITION \= ""WHERE AOID \= '$$PARAM_AOID$$'\n                          AND AIMSCMPY \= '$$PARAM_AIMSCMPY$$'\n                          AND AIMSID \= '$$PARAM_AIMSID$$'"";\nDECLARE @UPDATE_SQL varchar(MAX),\n        @UPDATE_COUNT_A varchar(MAX) \='',\n        @UPDATE_COUNT_B varchar(MAX) \= \n           ""AIMSEVLFLAG \= '$$AIMSEVLFLAG$$',\n             AIMSEVLFLAGNAME \='$$AIMSEVLFLAGNAME$$',\n             WEB_IPO \= CAST('$$WEB_IPO$$' AS float)*1000.00000000,\n             WEB_TSTO \= CAST('$$WEB_TSTO$$' AS float)*1000.00000000,\n             OUTINVENTORY \= CAST('$$OUTINVENTORY$$' AS float)*1000.00000000,\n             CCY \= '$$CCY$$',\n             CCYFIN \= '$$CCYFIN$$',\n             LAWDIFF \= $$LAWDIFF$$/100.0,\n             STKDIFF  \= $$STKDIFF$$/100.0,\n             OCIFLAG \= '$$OCIFLAG$$',\n             LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}',\n             LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$',\n             LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)"";\nSELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+\n       CASE\n           WHEN CHARINDEX('$$', VALUE) <\= 0 THEN VALUE+','\n           ELSE ''\n       END                                   \nFROM STRING_SPLIT(@UPDATE_COUNT_B, ',');\nIF LEN(@UPDATE_COUNT_A) > 0 \nBEGIN\n    SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) \n    SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION\n    EXEC (@UPDATE_SQL);      \nEND     \nSET QUOTED_IDENTIFIER ON\n"\n\t\t\t)\n\n\tSET QUOTED_IDENTIFIER ON\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'update'\n\t\t,'INV_FUND_AIMSMAP'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$AIMSID$$'\n\t\t,GETDATE()\n\t\t,''\n\t\t);\n\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'MOD_CCY'\n\tBEGIN\n\t\tDECLARE @RETURN_CODE INT\n\t\t\t,@RETURN_MSG VARCHAR(1000);\n\n\t\tEXEC INVSP_FN02A006_MOVE_FINRPT '${PARAM_SOURCE_COMING}'\n\t\t\t,'$$PARAM_AIMSID$$'\n\t\t\t,@RETURN_CODE OUTPUT\n\t\t\t,@RETURN_MSG OUTPUT;\n\tEND\nEND;\n
Fn02A007_1=SELECT ROW_NUMBER() OVER (ORDER BY APNO ASC) AS RowNum, PK_REF_EL_APNO_CFF, APNO ,APNO_DESC ,CCF ,ACC_CDE ,ACC_CDE_DESC ,DEL_DT ,LAST_MOD_DT ,LAST_MOD_USER_COMPANY_ID ,ADD_DT ,DEL_USER_COMPANY_ID ,DATA_STATUS ,ADD_USER_ID ,DEL_USER_ID ,LAST_MOD_USER_ID ,ADD_USER_COMPANY_ID ,COMPANY_ID FROM JH_REF_EL_APNO_CCF
Fn02A007_2=insert_JH_REF_EL_APNO_CCF
Fn02A007_3=update_JH_REF_EL_APNO_CCF
Fn02A007_4=delete_del_JH_REF_EL_APNO_CCF
Fn02B001_1=SELECT ROW_NUMBER() OVER ( ORDER BY CONDITION_TYPE,MASTER_RULE_CDE ) AS RowNum ,* FROM JH_EVENTRULE_MASTER WHERE 1\=1 AND (PROPERTY_TYPE \= $$cmp01 OR $$cmp01 \= 'ALL')
Fn02B001_2=insert_JH_EVENTRULE_MASTER
Fn02B001_3=delete_del_JH_EVENTRULE_MASTER
Fn02B001_4=update_JH_EVENTRULE_MASTER
Fn02B001_5=SELECT ROW_NUMBER() OVER ( ORDER BY DETAIL_RULE_SEQ) AS RowNum ,* FROM JH_EVENTRULE_DETAIL WHERE 1\=1 AND PK_EVENTRULE_MASTER \= $$cmp01
Fn02B001_6=insert_JH_EVENTRULE_DETAIL
Fn02B001_7=delete_del_JH_EVENTRULE_DETAIL
Fn02B001_8=update_JH_EVENTRULE_DETAIL
Fn02B001_9=SELECT DISTINCT ACTION_TYPE AS 'PROPERTY_TYPE',  PROPERTY_TYPE_DESC FROM JHVW_GUI_PROPERTY_TYPE_ALL WHERE 1 \= 1 AND MAPDATA_TYPE \= 'STAGE_CLASSIFY' AND MAP_DEPID IN ($$SysDep)
Fn02B002_1=SELECT ROW_NUMBER() OVER (ORDER BY PK_REF_FORCE_LIST) AS RowNum, * FROM JH_REF_FORCE_LIST
Fn02B002_2=insert_JH_REF_FORCE_LIST
Fn02B002_3=update_JH_REF_FORCE_LIST
Fn02B002_4=delete_del_JH_REF_FORCE_LIST
Fn02B002_5=SELECT ROW_NUMBER() OVER ( ORDER BY MASTER_RULE_CDE ASC) AS RowNum, MASTER_RULE_CDE, MASTER_RULE_CDE +'_' + MASTERRULE_DESC AS MASTERRULE_DESC FROM JH_EVENTRULE_MASTER WHERE NOW_FLAG\='Y' AND CONDITION_TYPE\='S1'
Fn02B002_6=SELECT ROW_NUMBER() OVER ( ORDER BY MASTER_RULE_CDE ASC) AS RowNum, MASTER_RULE_CDE, MASTER_RULE_CDE +'_' + MASTERRULE_DESC AS MASTERRULE_DESC FROM JH_EVENTRULE_MASTER WHERE NOW_FLAG\='Y' AND CONDITION_TYPE\='S2'
Fn02B002_7=SELECT ROW_NUMBER() OVER ( ORDER BY MASTER_RULE_CDE ASC) AS RowNum, MASTER_RULE_CDE, MASTER_RULE_CDE +'_' + MASTERRULE_DESC AS MASTERRULE_DESC FROM JH_EVENTRULE_MASTER WHERE NOW_FLAG\='Y' AND CONDITION_TYPE\='S3'
Fn02B002_CUD=BEGIN TRY\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\tSET QUOTED_IDENTIFIER OFF\n\n\t\tEXEC (" SET QUOTED_IDENTIFIER OFF DECLARE @PROC_TARGET AS VARCHAR(50); DECLARE @WHERE_CONDITION AS VARCHAR(500); SET @PROC_TARGET \= 'INV_WEB_MARKET'; SET @WHERE_CONDITION \= ""WHERE AOID \= '$$AOID$$' AND AIMSCMPY \= '$$AIMSCMPY$$' AND LEVELNAME \= '$$LEVELNAME$$'""; DECLARE @UPDATE_SQL varchar(MAX), @UPDATE_COUNT_A varchar(MAX) \= '', @UPDATE_COUNT_B varchar(MAX) \= ""DAYNOW \= '$$DAYNOW$$', UPDMEMO \= '$$UPDMEMO$$'""; SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+ CASE WHEN CHARINDEX('$$', VALUE) < \= 0 THEN VALUE+',' ELSE '' END FROM STRING_SPLIT(@UPDATE_COUNT_B, ','); IF LEN(@UPDATE_COUNT_A) > 0 BEGIN SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION EXEC (@UPDATE_SQL); END SET QUOTED_IDENTIFIER ON ")\n\n\t\tSET QUOTED_IDENTIFIER ON\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'INV_WEB_MARKET'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DATA_NO$$'\n\t\t\t,GETDATE()\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND;\n\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_MOD'\n\tBEGIN\n\t\tUPDATE INV_WEB_MARKET_DETAIL\n\t\tSET FLAG_PB \= CASE \n\t\t\t\tWHEN NULLIF('$$FLAG_PB$$', FLAG_PB) \= 'true'\n\t\t\t\t\tTHEN 1\n\t\t\t\tELSE CASE \n\t\t\t\t\t\tWHEN NULLIF('$$FLAG_PB$$', FLAG_PB) \= 'false'\n\t\t\t\t\t\t\tTHEN 0\n\t\t\t\t\t\tELSE CASE \n\t\t\t\t\t\t\t\tWHEN NULLIF('$$FLAG_PB$$', FLAG_PB) \= '$$FLAG_PB$$'\n\t\t\t\t\t\t\t\t\tTHEN FLAG_PB\n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\tEND\n\t\t\t\tEND\n\t\t\t,FLAG_PS \= CASE \n\t\t\t\tWHEN NULLIF('$$FLAG_PS$$', FLAG_PS) \= 'true'\n\t\t\t\t\tTHEN 1\n\t\t\t\tELSE CASE \n\t\t\t\t\t\tWHEN NULLIF('$$FLAG_PS$$', FLAG_PS) \= 'false'\n\t\t\t\t\t\t\tTHEN 0\n\t\t\t\t\t\tELSE CASE \n\t\t\t\t\t\t\t\tWHEN NULLIF('$$FLAG_PS$$', FLAG_PS) \= '$$FLAG_PS$$'\n\t\t\t\t\t\t\t\t\tTHEN FLAG_PS\n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\tEND\n\t\t\t\tEND\n\t\t\t,FLAG_PE \= CASE \n\t\t\t\tWHEN NULLIF('$$FLAG_PE$$', FLAG_PE) \= 'true'\n\t\t\t\t\tTHEN 1\n\t\t\t\tELSE CASE \n\t\t\t\t\t\tWHEN NULLIF('$$FLAG_PE$$', FLAG_PE) \= 'false'\n\t\t\t\t\t\t\tTHEN 0\n\t\t\t\t\t\tELSE CASE \n\t\t\t\t\t\t\t\tWHEN NULLIF('$$FLAG_PE$$', FLAG_PE) \= '$$FLAG_PE$$'\n\t\t\t\t\t\t\t\t\tTHEN FLAG_PE\n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\tEND\n\t\t\t\tEND\n\t\t\t,FLAG_PEBIT \= CASE \n\t\t\t\tWHEN NULLIF('$$FLAG_PEBIT$$', FLAG_PEBIT) \= 'true'\n\t\t\t\t\tTHEN 1\n\t\t\t\tELSE CASE \n\t\t\t\t\t\tWHEN NULLIF('$$FLAG_PEBIT$$', FLAG_PEBIT) \= 'false'\n\t\t\t\t\t\t\tTHEN 0\n\t\t\t\t\t\tELSE CASE \n\t\t\t\t\t\t\t\tWHEN NULLIF('$$FLAG_PEBIT$$', FLAG_PEBIT) \= '$$FLAG_PEBIT$$'\n\t\t\t\t\t\t\t\t\tTHEN FLAG_PEBIT\n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\tEND\n\t\t\t\tEND\n\t\t\t,FLAG_PEBITDA \= CASE \n\t\t\t\tWHEN NULLIF('$$FLAG_PEBITDA$$', FLAG_PEBITDA) \= 'true'\n\t\t\t\t\tTHEN 1\n\t\t\t\tELSE CASE \n\t\t\t\t\t\tWHEN NULLIF('$$FLAG_PEBITDA$$', FLAG_PEBITDA) \= 'false'\n\t\t\t\t\t\t\tTHEN 0\n\t\t\t\t\t\tELSE CASE \n\t\t\t\t\t\t\t\tWHEN NULLIF('$$FLAG_PEBITDA$$', FLAG_PEBITDA) \= '$$FLAG_PEBITDA$$'\n\t\t\t\t\t\t\t\t\tTHEN FLAG_PEBITDA\n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\tEND\n\t\t\t\tEND\n\t\t\t,UPDMEMO \= '$$UPDMEMO$$'\n\t\tWHERE AOID \= '$$AOID$$'\n\t\t\tAND GROUP_AIMSCMPY \= '$$GROUP_AIMSCMPY$$'\n\t\t\tAND AIMSIDSEQ \= '$$AIMSIDSEQ$$'\n\t\t\tAND AIMSCMPY \= '$$AIMSCMPY$$';\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'INV_WEB_MARKET_DETAIL'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DATA_NO$$'\n\t\t\t,GETDATE()\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND;\nEND TRY\n\nBEGIN CATCH\n\tSELECT ERROR_NUMBER() AS 'RETURN_CODE'\n\t\t,ERROR_MESSAGE() AS 'RETURN_MSG'\nEND CATCH;\n
Fn02B003_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'DS_MOD'\nBEGIN\n\tSET QUOTED_IDENTIFIER OFF;\n\n\tEXEC (\n\t\t\t" SET QUOTED_IDENTIFIER OFF \n    DECLARE @PROC_TARGET AS VARCHAR(50); \n    DECLARE @WHERE_CONDITION AS VARCHAR(500); \n    SET @PROC_TARGET \= 'INV_WEB_ASSETS'; \n    SET @WHERE_CONDITION \= ""WHERE AOID \= '$$AOID$$' \n                             AND AIMSCMPY \= '$$AIMSCMPY$$' \n                             AND LEVELNAME \= '$$LEVELNAME$$'""; \n    DECLARE @UPDATE_SQL varchar(MAX), \n    @UPDATE_COUNT_A varchar(MAX) \= '', \n    @UPDATE_COUNT_B varchar(MAX) \= ""DAYNOW \= '$$DAYNOW$$',\n                                     UPDMEMO \= '$$UPDMEMO$$',\n                                     LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}',\n                                     LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$',\n                                     LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)""; \n\n    SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+ CASE WHEN CHARINDEX('$$', VALUE) < \= 0 THEN VALUE+',' ELSE '' END \n    FROM STRING_SPLIT(@UPDATE_COUNT_B, ','); \n\n    IF LEN(@UPDATE_COUNT_A) > 0 \n    BEGIN \n        SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) \n        SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION EXEC (@UPDATE_SQL); \n    END \n    SET QUOTED_IDENTIFIER ON \n"\n\t\t\t);\n\n\tSET QUOTED_IDENTIFIER ON;\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'update'\n\t\t,'INV_WEB_ASSETS'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$DATA_NO$$'\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\nEND;\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_MOD'\n\tBEGIN\n\t\tSET QUOTED_IDENTIFIER OFF;\n\n\t\tEXEC (\n\t\t\t\t" SET QUOTED_IDENTIFIER OFF; \n        DECLARE @PROC_TARGET AS VARCHAR(50); \n        DECLARE @WHERE_CONDITION AS VARCHAR(500); \n        SET @PROC_TARGET \= 'INV_MAINTAIN_FINRPT'; \n        SET @WHERE_CONDITION \= "" WHERE AOID \= '$$AOID$$' \n                                AND AIMSID \= '$$AIMSID$$' \n                                AND FUNDYEAR \= '$$FUNDYEAR$$' \n                                AND FUNDPER \= '$$FUNDPER$$' \n                                AND ACNOLEVEL \= '$$ACNOLEVEL$$' \n                                AND ACNO \= '$$ACNO$$'""; \n        DECLARE @UPDATE_SQL varchar(MAX), \n        @UPDATE_COUNT_A varchar(MAX) \= '', \n        @UPDATE_COUNT_B varchar(MAX) \= ""EACHLAWDIFF \= $$EACHLAWDIFF$$/100.0, \n                                        PRINCAL_ADJ \= -1*CONVERT(DECIMAL(25, 8), \n                                        $$EACHLAWDIFF$$)*PRINCAL_BAL/100.0,\n                                        PRINCAL_SUM \= PRINCAL_BAL - CONVERT(DECIMAL(25, 8), $$EACHLAWDIFF$$)*PRINCAL_BAL/100.0, \n                                        UPDMEMO \= '$$UPDMEMO$$',\n                                        LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}',\n                                        LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$',\n                                        LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)""; \n        SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+ CASE WHEN CHARINDEX('$$', VALUE) < \= 0 THEN VALUE+',' ELSE '' END \n        FROM STRING_SPLIT(@UPDATE_COUNT_B, ','); \n\n        IF LEN(@UPDATE_COUNT_A) > 0 \n        BEGIN \n            SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) \n            SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION EXEC (@UPDATE_SQL); \n        END \n        SET QUOTED_IDENTIFIER ON \n"\n\t\t\t\t);\n\n\t\tSET QUOTED_IDENTIFIER ON;\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'INV_MAINTAIN_FINRPT'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DATA_NO$$'\n\t\t\t,GETDATE()\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND;\n
Fn02C001_1=SELECT ROW_NUMBER() OVER (ORDER BY PK_CDE_ACCOUNT ASC) AS RowNum,PK_CDE_ACCOUNT,ACC_SUB_CDE,ACC_DESC,FX_MAP_CDE,CHK_TYPE.CHK_TYPE_DESC AS 'CHK_TYPE',AG.ACCOUNT_GROUP_DESC AS 'ACCOUNT_GROUP',BD_ACC_CDE,APNO,IS_COLL_CDE.IS_COLL_CDE_DESC AS 'IS_COLL_CDE', ADD_USER_ID, ADD_USER_COMPANY_ID, ADD_DT, LAST_MOD_USER_ID, LAST_MOD_USER_COMPANY_ID, LAST_MOD_DT, DEL_USER_ID, DEL_USER_COMPANY_ID, DEL_DT, COMPANY_ID, DATA_STATUS FROM JH_CDE_ACCOUNT M LEFT JOIN (SELECT CODE_VALUE,CODE_VALUE + '_' + CODE_VALUE_DESC AS 'CHK_TYPE_DESC' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE \= 'CHK_TYPE') CHK_TYPE ON M.CHK_TYPE \= CHK_TYPE.CODE_VALUE LEFT JOIN (SELECT ACCOUNT_GROUP,ACCOUNT_GROUP + '_' + ACCOUNT_GROUP_DESC AS 'ACCOUNT_GROUP_DESC' FROM JH_CDE_ACCOUNT_GROUP) AG ON M.ACCOUNT_GROUP \= AG.ACCOUNT_GROUP  LEFT JOIN (SELECT CODE_VALUE,CODE_VALUE + '_' + CODE_VALUE_DESC AS 'IS_COLL_CDE_DESC' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE \= 'IS_COLL_CDE') IS_COLL_CDE ON M.IS_COLL_CDE \= IS_COLL_CDE.CODE_VALUE WHERE 1 \= 1 AND (ACC_SUB_CDE LIKE (%$$cmp01%) OR 'ALL' \= $$ cmp01) AND (CHK_TYPE \= $$ cmp02 OR 'ALL' \= $$ cmp02)
Fn02C001_2=SELECT ROW_NUMBER() OVER (ORDER BY CODE_VALUE ASC) AS RowNum, D.CODE_VALUE AS 'CHK_VALUE',D.CODE_VALUE+'_'+D.CODE_VALUE_DESC AS 'CHK_DESC' FROM JH_REF_CODE_MASTER M INNER JOIN JH_REF_CODE_DETAIL D ON M.CODE_TYPE \= D.CODE_TYPE WHERE M.CODE_TYPE \= 'CHK_TYPE'
Fn02C001_3=insert_JH_CDE_ACCOUNT
Fn02C001_4=update_JH_CDE_ACCOUNT
Fn02C001_5=delete_del_JH_CDE_ACCOUNT
Fn02C001_6=SELECT ROW_NUMBER() OVER (ORDER BY ACCOUNT_GROUP ASC) AS RowNum, ACCOUNT_GROUP AS 'ACCOUNT_GROUP',ACCOUNT_GROUP+'_'+ACCOUNT_GROUP_DESC AS 'ACCOUNT_GRPUP_DESC' FROM JH_CDE_ACCOUNT_GROUP
Fn02C001_7=SELECT '0' AS RowNum,'ALL' AS CHK_VALUE ,'ALL' AS CHK_DESC UNION SELECT ROW_NUMBER() OVER (ORDER BY D.CODE_VALUE ASC) AS RowNum, D.CODE_VALUE AS 'CHK_VALUE',D.CODE_VALUE+'_'+D.CODE_VALUE_DESC AS 'CHK_DESC' FROM JH_REF_CODE_MASTER M INNER JOIN JH_REF_CODE_DETAIL D ON M.CODE_TYPE \= D.CODE_TYPE WHERE M.CODE_TYPE \= 'CHK_TYPE'
Fn02C001_DS_CUD2=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD' \nBEGIN\nINSERT INTO dbo.JH_TABLEDEAL_LIST2\n           (WORK_DBNAME\n           ,TB_NAME\n           ,TB_DESC\n           ,BACKUP_FLAG\n           ,BACKUP_ORDER\n           ,DATA_KEEP_MONTH\n\t\t   ,RESET_FLAG\n\t\t   ,RESET_COMMAND\n\t\t   ,RESET_ORDER\n\t\t   ,DEL_FLAG\n\t\t   ,ADD_USER_ID\n\t\t   ,ADD_DT\n\t\t   ,ADD_USER_COMPANY_ID\n\t\t   ,COMPANY_ID\n\t\t   ,DATA_STATUS\n\t\t   )\n     VALUES\n           ('$$WORK_DBNAME$$'\n           ,'$$TB_NAME$$'\n           ,'$$TB_DESC$$'\n           ,'$$BACKUP_FLAG$$'\n           ,'$$BACKUP_ORDER$$'\n\t\t   ,'$$DATA_KEEP_MONTH$$'\n           ,'$$RESET_FLAG$$'\n\t\t   ,'$$RESET_COMMAND$$'\n\t\t   ,'$$RESET_ORDER$$'\n\t\t   ,'$$DEL_FLAG$$'\n\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t   ,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t   ,'${PARAM_COMPANY}'\n\t\t   ,'${PARAM_COMPANY_NAME}'\n\t\t   ,'3'\n\t\t   )\nEND;\n\nELSE IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\nBEGIN\nDELETE JH_TABLEDEAL_LIST2 WHERE PK_TABLEDEAL_LIST \= '$$PK_TABLEDEAL_LIST$$'\nEND;\n\nELSE IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\nBEGIN\nSET QUOTED_IDENTIFIER OFF\nEXEC("\nSET QUOTED_IDENTIFIER OFF\nDECLARE @PROC_TARGET AS VARCHAR(50);\nDECLARE @WHERE_CONDITION AS VARCHAR(50);\n\nSET @PROC_TARGET \= 'JH_TABLEDEAL_LIST2'; \nSET @WHERE_CONDITION \= ""WHERE PK_TABLEDEAL_LIST \='$$PK_TABLEDEAL_LIST$$'"";\nDECLARE @UPDATE_SQL varchar(MAX),\n\t\t@UPDATE_COUNT_A varchar(MAX) \='',\n\t\t@UPDATE_COUNT_B varchar(MAX) \= "" WORK_DBNAME \= '$$WORK_DBNAME$$', \n\t\t\t\t\t\t\t\t\t\t  TB_NAME \='$$TB_NAME$$',\n\t\t\t\t\t\t\t\t\t\t  TB_DESC \= '$$TB_DESC$$',\n\t\t\t\t\t\t\t\t\t\t  BACKUP_FLAG \= '$$BACKUP_FLAG$$',\n\t\t\t\t\t\t\t\t\t\t  BACKUP_ORDER \= '$$BACKUP_ORDER$$',\n\t\t\t\t\t\t\t\t\t\t  DATA_KEEP_MONTH \= '$$DATA_KEEP_MONTH$$',\n\t\t\t\t\t\t\t\t\t\t  RESET_FLAG \= '$$RESET_FLAG$$',\n\t\t\t\t\t\t\t\t\t      RESET_COMMAND \= '$$RESET_COMMAND$$',\n\t\t\t\t\t\t\t\t\t\t  RESET_ORDER \= '$$RESET_ORDER$$',\n\t\t\t\t\t\t\t\t\t      DEL_FLAG \= '$$DEL_FLAG$$',\n\t\t\t\t\t\t\t\t\t\t  LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}',\n\t\t\t\t\t\t\t\t\t\t  LAST_MOD_USER_COMPANY_ID \= '${PARAM_COMPANY}',\n\t\t\t\t\t\t\t\t\t\t  LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)"";\n\t\t\t\t\t\t\t\t\t\t  DECLARE @CIndex smallint\nWHILE (@UPDATE_COUNT_B<>'')\n\tBEGIN\n\t\tSET @CIndex\=CHARINDEX(',',@UPDATE_COUNT_B)\n\t\tIF @CIndex\=0 SET @CIndex\=LEN(@UPDATE_COUNT_B)+1\n\nSELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+\n       CASE\n           WHEN CHARINDEX('$$', SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)) <\= 0 THEN SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)+','\n           ELSE ''\n       END   \n\t\t\n\t\tIF @CIndex\=LEN(@UPDATE_COUNT_B)+1 BREAK\n\t\tSET @UPDATE_COUNT_B\=SUBSTRING(@UPDATE_COUNT_B,@CIndex+1,LEN(@UPDATE_COUNT_B)-@CIndex)\n\tEND\n\nIF LEN(@UPDATE_COUNT_A) > 0 \nBEGIN\n    SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) \n    SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION\n    EXEC (@UPDATE_SQL);\nEND  \n SET QUOTED_IDENTIFIER ON   \n ")\n END;
Fn02C001_DS_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD' \nBEGIN\nINSERT INTO dbo.ES_CDE_ACCOUNT\n           (ACC_SUB_CDE\n           ,ACC_SUB_DESC\n           ,CHK_TYPE\n           ,PC_CDE\n           ,ACCOUNT_GROUP\n           ,ACC_LEVEL\n           ,ADD_USER_COMPANY_ID\n           ,ADD_USER_ID\n           ,COMPANY_ID\n           ,ADD_DT)\n     VALUES\n           ('$$ACC_SUB_CDE$$'\n           ,'$$ACC_SUB_DESC$$'\n           ,'$$CHK_TYPE$$'\n           ,'$$PC_CDE$$'\n           ,'$$ACCOUNT_GROUP$$'\n           ,'$$ACC_LEVEL$$'\n           ,'$$COMPANY_ID$$'\n           ,'${PARAM_SOURCE_COMING}'\n           ,'$$COMPANY_ID$$'\n           ,CONVERT(VARCHAR(19), GETDATE(), 120)\n           );\nINSERT INTO DATA_CHANGE_LOG(SessionID, ProcPK, FUNC_ID, PROC_TYPE, PROC_TARGET, USER_ID, DATA_NO, EVENT_DT, MEMO)\nVALUES ('${PARAM_SESSION_ID}',\n        '${LOGPK}',\n        '$$FunctionID$$',\n        'insert',\n        'ES_CDE_ACCOUNT',\n        '${PARAM_SOURCE_COMING}',\n        IDENT_CURRENT('ES_CDE_ACCOUNT'),\n        GETDATE(),\n        '$$MEMO$$');\nEND;\nELSE IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\nBEGIN\nDELETE ES_CDE_ACCOUNT WHERE PK_CDE_ACCOUNT \='$$PK_CDE_ACCOUNT$$'\nINSERT INTO DATA_CHANGE_LOG(SessionID, ProcPK, FUNC_ID, PROC_TYPE, PROC_TARGET, USER_ID, DATA_NO, EVENT_DT, MEMO)\nVALUES ('${PARAM_SESSION_ID}',\n        '${LOGPK}',\n        '$$FunctionID$$',\n        'delete',\n        'ES_CDE_ACCOUNT',\n        '${PARAM_SOURCE_COMING}',\n        '$$DATA_NO$$',\n        GETDATE(),\n        '$$MEMO$$');\nEND;\nELSE IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\nBEGIN\nSET QUOTED_IDENTIFIER OFF\nEXEC("\nSET QUOTED_IDENTIFIER OFF\nDECLARE @PROC_TARGET AS VARCHAR(50);\nDECLARE @WHERE_CONDITION AS VARCHAR(50);\n\nSET @PROC_TARGET \= 'ES_CDE_ACCOUNT'; \nSET @WHERE_CONDITION \= ""WHERE  PK_CDE_ACCOUNT \='$$PK_CDE_ACCOUNT$$'"";\nDECLARE @UPDATE_SQL varchar(MAX),\n        @UPDATE_COUNT_A varchar(MAX) \='',\n        @UPDATE_COUNT_B varchar(MAX) \= \n ""ACC_SUB_CDE \= '$$ACC_SUB_CDE$$'\n,ACC_SUB_DESC \= '$$ACC_SUB_DESC$$'\n,CHK_TYPE \= '$$CHK_TYPE$$'\n,PC_CDE \= '$$PC_CDE$$'\n,ACCOUNT_GROUP \='$$ACCOUNT_GROUP$$'\n,ACC_LEVEL \= '$$ACC_LEVEL$$'\n,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n,LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)"";\nDECLARE @CIndex smallint\nWHILE (@UPDATE_COUNT_B<>'')\n\tBEGIN\n\t\tSET @CIndex\=CHARINDEX(',',@UPDATE_COUNT_B)\n\t\tIF @CIndex\=0 SET @CIndex\=LEN(@UPDATE_COUNT_B)+1\n\nSELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+\n       CASE\n           WHEN CHARINDEX('$$', SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)) <\= 0 THEN SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)+','\n           ELSE ''\n       END   \n\t\t\n\t\tIF @CIndex\=LEN(@UPDATE_COUNT_B)+1 BREAK\n\t\tSET @UPDATE_COUNT_B\=SUBSTRING(@UPDATE_COUNT_B,@CIndex+1,LEN(@UPDATE_COUNT_B)-@CIndex)\n\tEND\n\nIF LEN(@UPDATE_COUNT_A) > 0 \nBEGIN\n    SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) \n    SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION\n    EXEC (@UPDATE_SQL);\nEND  \n SET QUOTED_IDENTIFIER ON   \n ")\nSET QUOTED_IDENTIFIER ON\nINSERT INTO DATA_CHANGE_LOG(SessionID, ProcPK, FUNC_ID, PROC_TYPE, PROC_TARGET, USER_ID, DATA_NO, EVENT_DT, MEMO)\nVALUES ('${PARAM_SESSION_ID}',\n        '${LOGPK}',\n        '$$FunctionID$$',\n        'update',\n        'ES_CDE_ACCOUNT',\n        '${PARAM_SOURCE_COMING}',\n        '$$DATA_NO$$',\n        GETDATE(),\n        '$$MEMO$$');\nEND;
Fn02C002_10=update_ JH_CDE_ACCOUNT_GROUP_DETAIL
Fn02C002_1=SELECT ROW_NUMBER() OVER ( ORDER BY PK_CDE_ACCOUNT_GROUP ASC) AS RowNum, PK_CDE_ACCOUNT_GROUP, ACCOUNT_GROUP, M.PROPERTY_TYPE, D.PROPERTY_TYPE_DESC AS 'PROPERTY_TYPE_DESC', ACCOUNT_GROUP_DESC, T.CODE_VALUE AS 'TRANS_CHK_ITEM', T.TRANS_CHK_ITEM AS 'TRANS_CHK_ITEM_DESC', TRANS_CHK_DESC, TRANS_SQL, LEDGER_CHK_DESC, LEDGER_SQL, M.ADD_USER_ID, M.ADD_USER_COMPANY_ID, M.ADD_DT, M.LAST_MOD_USER_ID, M.LAST_MOD_USER_COMPANY_ID, M.LAST_MOD_DT, M.DEL_USER_ID, M.DEL_USER_COMPANY_ID, M.DEL_DT, M.COMPANY_ID, M.DATA_STATUS FROM JH_CDE_ACCOUNT_GROUP M LEFT JOIN (SELECT CODE_VALUE, CODE_VALUE_DESC + '_' + CODE_VALUE AS 'PROPERTY_TYPE_DESC' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE \= 'PROPERTY_TYPE') D ON M.PROPERTY_TYPE \= D.CODE_VALUE LEFT JOIN (SELECT CODE_VALUE, CODE_VALUE + '_' + CODE_VALUE_DESC AS 'TRANS_CHK_ITEM' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE \= 'TRANS_CHK_ITEM') T ON M.TRANS_CHK_ITEM \= T.CODE_VALUE WHERE 1 \= 1 AND (PROPERTY_TYPE \= $$cmp01 OR 'ALL' \= $$cmp01)
Fn02C002_2=SELECT DISTINCT ROW_NUMBER() OVER (ORDER BY ACTION_TYPE ASC ) AS RowNum, ACTION_TYPE AS 'PROPERTY_TYPE', PROPERTY_TYPE_DESC FROM JHVW_GUI_PROPERTY_TYPE_ALL WHERE 1\=1 AND MAPDATA_TYPE \= 'CHK_CDE_ACCOUNT' AND MAP_DEPID IN ($$SysDep)
Fn02C002_3=insert_JH_CDE_ACCOUNT_GROUP
Fn02C002_4=update_JH_CDE_ACCOUNT_GROUP
Fn02C002_5=delete_del_JH_CDE_ACCOUNT_GROUP
Fn02C002_6=SELECT ROW_NUMBER() OVER (ORDER BY D.CODE_VALUE ASC ) AS RowNum, D.CODE_VALUE AS 'TRANS_VALUE',D.CODE_VALUE+'_'+D.CODE_VALUE_DESC AS 'TRANS_DESC' FROM JH_REF_CODE_MASTER M INNER JOIN JH_REF_CODE_DETAIL D ON M.CODE_TYPE \= D.CODE_TYPE WHERE M.CODE_TYPE \= 'TRANS_CHK_ITEM'
Fn02C002_7=SELECT ROW_NUMBER() OVER ( ORDER BY PK_CDE_ACCOUNT_GROUP_DETAIL ASC) AS RowNum, PK_CDE_ACCOUNT_GROUP,PK_CDE_ACCOUNT_GROUP_DETAIL,CHK_GROUP_CDE,PROPERTY_TYPE,ACC_TITLE_CDE,ACC_SUB_CDE,CHK_SIGN,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,DEL_USER_ID,DEL_USER_COMPANY_ID,DEL_DT,COMPANY_ID,DATA_STATUS FROM JH_CDE_ACCOUNT_GROUP_DETAIL WHERE PK_CDE_ACCOUNT_GROUP \= $$cmp01
Fn02C002_8=insert_JH_CDE_ACCOUNT_GROUP_DETAIL
Fn02C002_9=delete_del_JH_CDE_ACCOUNT_GROUP_DETAIL
Fn02C003_1=SELECT ROW_NUMBER() OVER (ORDER BY ACTION_TYPE ASC) AS RowNum, ACTION_TYPE,PROPERTY_TYPE_DESC FROM JHVW_GUI_CHK_ACCOUNT_BALANCE WHERE MAP_DEPID \= $$SysDep
Fn02C003_2=SELECT ROW_NUMBER() OVER (ORDER BY DESC_SEQ ASC) AS RowNum, INFORMATION FROM JH_INF_ACTION_DETAIL WHERE PK_INF_ACTION_MASTER \= (SELECT MAX(PK_INF_ACTION_MASTER) FROM JH_INF_ACTION_MASTER WHERE ACTION_TYPE \='CHKLOANACC')
Fn02C003_3=SELECT ROW_NUMBER() OVER (ORDER BY DESC_SEQ ASC) AS RowNum, INFORMATION FROM JH_INF_ACTION_DETAIL WHERE PK_INF_ACTION_MASTER \= (SELECT MAX(PK_INF_ACTION_MASTER) FROM JH_INF_ACTION_MASTER WHERE ACTION_TYPE \='CHKBONDACC')
Fn02C003_4=SELECT ROW_NUMBER() OVER (ORDER BY PK_ACCCHECK_MASTER ASC) AS RowNum,PK_ACCCHECK_MASTER,PT.PROPERTY_TYPE_DESC AS 'PROPERTY_TYPE',(CASE CHK_TYPE WHEN 2 THEN '核帳' WHEN 3 THEN '群組核帳' WHEN 11 THEN '額外交易帳' END) AS 'CHK_TYPE' ,CHK_ITEM,D.ACCOUNT_BOOK_SHOW AS 'ACCOUNT_BOOK_SHOW',D.ACCOUNT_BOOK AS 'ACCOUNT_BOOK',ACCOUNT_AMT,TRANSACTION_AMT,ACC_TRANS_DIFF_AMT,(CASE IS_BALANCE WHEN 'Y' THEN '是' WHEN 'N'\tTHEN '否' END ) AS 'IS_BALANCE' FROM JH_ACCCHECK_MASTER A LEFT JOIN (SELECT CODE_VALUE,CODE_VALUE + '_' + CODE_VALUE_DESC AS 'ACCOUNT_BOOK_SHOW',CODE_VALUE AS 'ACCOUNT_BOOK' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE \= 'ACCOUNT_BOOK') D ON A.ACCOUNT_BOOK \= D.CODE_VALUE LEFT JOIN (SELECT CODE_VALUE,CODE_VALUE_DESC + '_' + CODE_VALUE AS 'PROPERTY_TYPE_DESC'\tFROM JH_REF_CODE_DETAIL\tWHERE CODE_TYPE \= 'PROPERTY_TYPE') PT ON A.PROPERTY_TYPE \= PT.CODE_VALUE WHERE 1 \= 1 AND (PROPERTY_TYPE \= $$cmp01 OR $$cmp01 \= 'ALL') AND (CHK_TYPE \= $$cmp02 OR $$cmp02 \= 'ALL') AND (D.ACCOUNT_BOOK_SHOW \= $$cmp03 OR $$cmp03 \= 'ALL') AND (IS_BALANCE \= $$cmp04 OR $$cmp04 \= 'ALL')
Fn02C003_5=SELECT ROW_NUMBER() OVER (ORDER BY PK_ACCCHECK_MASTER ASC ) AS RowNum, CHK_DESC, D.TRANS_CHK_ITEM AS 'TRANS_CHK_ITEM' FROM JH_ACCCHECK_MASTER A LEFT JOIN (SELECT CODE_VALUE,CODE_VALUE+'_'+CODE_VALUE_DESC AS 'TRANS_CHK_ITEM' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE \= 'TRANS_CHK_ITEM') D ON A.TRANS_CHK_ITEM \= D.CODE_VALUE WHERE 1\=1 AND PK_ACCCHECK_MASTER \= $$cmp01
Fn02C003_6=SELECT ROW_NUMBER() OVER (ORDER BY PK_ACCCHECK_MASTER ASC) AS RowNum, ACC_CDE,ACC_DESC,D.ACCOUNT_BOOK,ACCOUNT_AMT FROM JH_ACCCHECK_DETAIL ACC LEFT JOIN (SELECT CODE_VALUE,CODE_VALUE+'_'+CODE_VALUE_DESC AS 'ACCOUNT_BOOK' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE \= 'ACCOUNT_BOOK') D ON ACC.ACCOUNT_BOOK \= D.CODE_VALUE WHERE 1\=1 AND ACC.PK_ACCCHECK_MASTER \= $$cmp01 AND ACC.ACCOUNT_BOOK \= $$cmp02
Fn02C003_8=SELECT ROW_NUMBER() OVER (ORDER BY CODE_VALUE ASC) AS RowNum, CODE_VALUE,CODE_VALUE + '_' + CODE_VALUE_DESC AS 'ACCOUNT_BOOK' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE \= 'ACCOUNT_BOOK'
Fn02C003_9=SELECT '0' AS RowNum,'ALL' AS CODE_VALUE ,'ALL' AS ACCOUNT_BOOK UNION  SELECT ROW_NUMBER() OVER (ORDER BY CODE_VALUE ASC) AS RowNum, CODE_VALUE,CODE_VALUE + '_' + CODE_VALUE_DESC AS 'ACCOUNT_BOOK' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE \= 'ACCOUNT_BOOK'
Fn02C004_DS_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tIF EXISTS (\n\t\t\tSELECT 1\n\t\t\tFROM ES_REF_CODE_DETAIL\n\t\t\tWHERE CODE_TYPE \= '$$CODE_TYPE$$' AND CODE_VALUE \= '$$CODE_VALUE$$' /*'$$CODE_VALUE$$'*/\n\t\t\t)\n\t\t/*代碼存在，不新增資料*/\n\tBEGIN\n\t\tRAISERROR (\n\t\t\t\t'無法新增，因為已存在   ''$$CODE_VALUE$$'' 代碼。'\n\t\t\t\t, 16\n\t\t\t\t, 1\n\t\t\t\t)\n\tEND\n\tELSE\n\t\t/*代碼不存在,新增資料*/\n\tBEGIN\n\t\tINSERT INTO ES_REF_CODE_DETAIL (\n\t\t\tCODE_TYPE\n\t\t\t, CODE_VALUE\n\t\t\t, CODE_VALUE_DESC\n\t\t\t, APPLY_VARCHAR_01\n\t\t\t, APPLY_INT_01\n\t\t\t, APPLY_NUMERIC_01\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$CODE_TYPE$$'\n\t\t\t, '$$CODE_VALUE$$'\n\t\t\t, '$$CODE_VALUE_DESC$$'\n\t\t\t, '$$APPLY_VARCHAR_01$$'\n\t\t\t,  NULLIF('$$APPLY_INT_01$$','')\n\t\t\t, NULLIF('$$APPLY_NUMERIC_01$$','')\n\t\t\t \n\t\t\t)\n\tEND\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t, ProcPK\n\t\t, FUNC_ID\n\t\t, PROC_TYPE\n\t\t, PROC_TARGET\n\t\t, USER_ID\n\t\t, DATA_NO\n\t\t, EVENT_DT\n\t\t, MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t, '${LOGPK}'\n\t\t, '$$FunctionID$$'\n\t\t, 'insert'\n\t\t, 'ES_REF_CODE_DETAIL'\n\t\t, '${PARAM_SOURCE_COMING}'\n\t\t, IDENT_CURRENT('ES_REF_CODE_DETAIL')\n\t\t, GETDATE()\n\t\t, '$$MEMO$$'\n\t\t);\nEND;\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\tBEGIN\n\t\tDELETE ES_REF_CODE_DETAIL\n\t\tWHERE PK_REF_CODE_DETAIL \= '$$PK_REF_CODE_DETAIL$$'\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t, ProcPK\n\t\t\t, FUNC_ID\n\t\t\t, PROC_TYPE\n\t\t\t, PROC_TARGET\n\t\t\t, USER_ID\n\t\t\t, DATA_NO\n\t\t\t, EVENT_DT\n\t\t\t, MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t, '${LOGPK}'\n\t\t\t, '$$FunctionID$$'\n\t\t\t, 'delete'\n\t\t\t, 'ES_REF_CODE_DETAIL'\n\t\t\t, '${PARAM_SOURCE_COMING}'\n\t\t\t, '$$DATA_NO$$'\n\t\t\t, GETDATE()\n\t\t\t, '$$MEMO$$'\n\t\t\t);\n\tEND;\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\t\tBEGIN\n\t\t\tIF EXISTS (\n\t\t\t\t\tSELECT 1\n\t\t\t\t\tFROM ES_REF_CODE_DETAIL\n\t\t\t\t\tWHERE /*CODE_TYPE \= '$$CODE_TYPE$$' AND */CODE_VALUE \= '$$CODE_VALUE$$' /*'$$CODE_VALUE$$'*/\n\t\t\t\t\t)\n\t\t\t\t/*代碼存在，不新增資料*/\n\t\t\tBEGIN\n\t\t\t\tRAISERROR (\n\t\t\t\t\t\t'無法新增，因為已存在   ''$$CODE_VALUE$$'' 代碼。'\n\t\t\t\t\t\t, 16\n\t\t\t\t\t\t, 1\n\t\t\t\t\t\t)\n\t\t\tEND\n\t\t\tELSE\n\t\t\t\t/*代碼不存在,新增資料*/\n\t\t\tBEGIN\n\t\t\t\tSET QUOTED_IDENTIFIER OFF\n\n\t\t\t\tEXEC (\n\t\t\t\t\t\t"\nSET QUOTED_IDENTIFIER OFF\nDECLARE @PROC_TARGET AS VARCHAR(50);\nDECLARE @WHERE_CONDITION AS VARCHAR(50);\n\nSET @PROC_TARGET \= 'ES_REF_CODE_DETAIL'; \nSET @WHERE_CONDITION \= ""WHERE  PK_REF_CODE_DETAIL \='$$PK_REF_CODE_DETAIL$$'"";\nDECLARE @UPDATE_SQL varchar(MAX),\n        @UPDATE_COUNT_A varchar(MAX) \='',\n        @UPDATE_COUNT_B varchar(MAX) \= \n ""CODE_TYPE            \= '$$CODE_TYPE$$'\n        ,CODE_VALUE          \= '$$CODE_VALUE$$'\n        ,CODE_VALUE_DESC     \= '$$CODE_VALUE_DESC$$'\n        ,APPLY_VARCHAR_01    \= '$$APPLY_VARCHAR_01$$'\n\t,  APPLY_INT_01\=NULLIF('$$APPLY_INT_01$$','')\n\t\t\t, APPLY_NUMERIC_01\=NULLIF('$$APPLY_NUMERIC_01$$','')\n,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n,LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)"";\nDECLARE @CIndex smallint\nWHILE (@UPDATE_COUNT_B<>'')\n\tBEGIN\n\t\tSET @CIndex\=CHARINDEX(',',@UPDATE_COUNT_B)\n\t\tIF @CIndex\=0 SET @CIndex\=LEN(@UPDATE_COUNT_B)+1\n\nSELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+\n       CASE\n           WHEN CHARINDEX('$$', SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)) <\= 0 THEN SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)+','\n           ELSE ''\n       END   \n\t\t\n\t\tIF @CIndex\=LEN(@UPDATE_COUNT_B)+1 BREAK\n\t\tSET @UPDATE_COUNT_B\=SUBSTRING(@UPDATE_COUNT_B,@CIndex+1,LEN(@UPDATE_COUNT_B)-@CIndex)\n\tEND\n\nIF LEN(@UPDATE_COUNT_A) > 0 \nBEGIN\n    SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) \n    SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION\n    EXEC (@UPDATE_SQL);\nEND  \n SET QUOTED_IDENTIFIER ON   \n "\n\t\t\t\t\t\t)\n\n\t\t\t\tSET QUOTED_IDENTIFIER ON\n\n\t\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\t\tSessionID\n\t\t\t\t\t, ProcPK\n\t\t\t\t\t, FUNC_ID\n\t\t\t\t\t, PROC_TYPE\n\t\t\t\t\t, PROC_TARGET\n\t\t\t\t\t, USER_ID\n\t\t\t\t\t, DATA_NO\n\t\t\t\t\t, EVENT_DT\n\t\t\t\t\t, MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t\t, '${LOGPK}'\n\t\t\t\t\t, '$$FunctionID$$'\n\t\t\t\t\t, 'update'\n\t\t\t\t\t, 'ES_REF_CODE_DETAIL'\n\t\t\t\t\t, '${PARAM_SOURCE_COMING}'\n\t\t\t\t\t, '$$DATA_NO$$'\n\t\t\t\t\t, GETDATE()\n\t\t\t\t\t, '$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND;\n\t\tEND;
Fn02C005_DS_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tBEGIN\n\t\tINSERT INTO ES_ETLDATA_INFORMATION (\n\t\t\tITEM_CLASSIFY\n\t\t\t, ITEM_DESC\n\t\t\t, PROVIDE_FREQUENCY\n\t\t\t, PROVIDE_TYPE\n\t\t\t, PROVIDE_SYSTEM\n\t\t\t, STORAGE_TYPE\n\t\t\t, ETL_TMP_API\n\t\t\t, ETL_TMP_API_CtmJobID_RT\n\t\t\t, ETL_TMP_API_CtmJobID_RT4\n\t\t\t, ETL_TMP_TABLE\n\t\t\t, ETL_STG_API\n\t\t\t, ETL_STG_API_CtmJobID_RT\n\t\t\t, ETL_STG_API_CtmJobID_RT4\n\t\t\t, ETL_STG_TABLE\n\t\t\t, OTHER_API\n\t\t\t, OTHER_API_CtmJobID_RT\n\t\t\t, OTHER_API_CtmJobID_RT4\n\t\t\t,WHERE_CMD_TMP\n\t\t\t,WHERE_CMD_STG\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$ITEM_CLASSIFY$$'\n\t\t\t, '$$ITEM_DESC$$'\n\t\t\t, '$$PROVIDE_FREQUENCY$$'\n\t\t\t, '$$PROVIDE_TYPE$$'\n\t\t\t, '$$PROVIDE_SYSTEM$$'\n\t\t\t, '$$STORAGE_TYPE$$'\n\t\t\t, '$$ETL_TMP_API$$'\n\t\t\t, '$$ETL_TMP_API_CtmJobID_RT$$'\n\t\t\t, '$$ETL_TMP_API_CtmJobID_RT4$$'\n\t\t\t, '$$ETL_TMP_TABLE$$'\n\t\t\t, '$$ETL_STG_API$$'\n\t\t\t, '$$ETL_STG_API_CtmJobID_RT$$'\n\t\t\t, '$$ETL_STG_API_CtmJobID_RT4$$'\n\t\t\t, '$$ETL_STG_TABLE$$'\n\t\t\t, '$$OTHER_API$$'\n\t\t\t, '$$OTHER_API_CtmJobID_RT$$'\n\t\t\t, '$$OTHER_API_CtmJobID_RT4$$'\n\t\t\t,'$$WHERE_CMD_TMP$$'\n\t\t\t,'$$WHERE_CMD_STG$$'\n\t\t\t)\n\tEND\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t, ProcPK\n\t\t, FUNC_ID\n\t\t, PROC_TYPE\n\t\t, PROC_TARGET\n\t\t, USER_ID\n\t\t, DATA_NO\n\t\t, EVENT_DT\n\t\t, MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t, '${LOGPK}'\n\t\t, '$$FunctionID$$'\n\t\t, 'insert'\n\t\t, 'IFRSRPDB..ES_ETLDATA_INFORMATION'\n\t\t, '${PARAM_SOURCE_COMING}'\n\t\t, IDENT_CURRENT('IFRSRPDB..ES_ETLDATA_INFORMATION')\n\t\t, GETDATE()\n\t\t, '$$MEMO$$'\n\t\t);\nEND;\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\tBEGIN\n\t\tDELETE IFRSRPDB..ES_ETLDATA_INFORMATION\n\t\tWHERE PK_ETLDATA_INFO \= '$$PK_ETLDATA_INFO$$'\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t, ProcPK\n\t\t\t, FUNC_ID\n\t\t\t, PROC_TYPE\n\t\t\t, PROC_TARGET\n\t\t\t, USER_ID\n\t\t\t, DATA_NO\n\t\t\t, EVENT_DT\n\t\t\t, MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t, '${LOGPK}'\n\t\t\t, '$$FunctionID$$'\n\t\t\t, 'delete'\n\t\t\t, 'IFRSRPDB..ES_ETLDATA_INFORMATION'\n\t\t\t, '${PARAM_SOURCE_COMING}'\n\t\t\t, '$$DATA_NO$$'\n\t\t\t, GETDATE()\n\t\t\t, '$$MEMO$$'\n\t\t\t);\n\tEND;\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\t\tBEGIN\n\t\t\tSET QUOTED_IDENTIFIER OFF\n\n\t\t\tEXEC (\n\t\t\t\t\t"\nSET QUOTED_IDENTIFIER OFF\nDECLARE @PROC_TARGET AS VARCHAR(50);\nDECLARE @WHERE_CONDITION AS VARCHAR(50);\n\nSET @PROC_TARGET \= 'IFRSRPDB..ES_ETLDATA_INFORMATION'; \nSET @WHERE_CONDITION \= ""WHERE  PK_ETLDATA_INFO \= '$$PK_ETLDATA_INFO$$'"";\nDECLARE @UPDATE_SQL varchar(MAX),\n        @UPDATE_COUNT_A varchar(MAX) \='',\n        @UPDATE_COUNT_B varchar(MAX) \= \n           ""ITEM_CLASSIFY\='$$ITEM_CLASSIFY$$'\t\t\t\t\n\t\t,ITEM_DESC\='$$ITEM_DESC$$'\t\t\t\t\t\t\n\t\t,PROVIDE_FREQUENCY\='$$PROVIDE_FREQUENCY$$'\t\t\t\t\n\t\t,PROVIDE_TYPE\='$$PROVIDE_TYPE$$'\t\t\t\t\t\n\t\t,PROVIDE_SYSTEM\t\='$$PROVIDE_SYSTEM$$'\t\t\t\t\n\t\t,STORAGE_TYPE\='$$STORAGE_TYPE$$'\t\t\t\t\t\n\t\t,ETL_TMP_API\='$$ETL_TMP_API$$'\t\t\t\t\t\n\t\t,ETL_TMP_API_CtmJobID_RT\='$$ETL_TMP_API_CtmJobID_RT$$'\n\t\t,ETL_TMP_API_CtmJobID_RT4\='$$ETL_TMP_API_CtmJobID_RT4$$'\n\t\t,ETL_TMP_TABLE\t\='$$ETL_TMP_TABLE$$'\t\t\t\n\t\t,ETL_STG_API\='$$ETL_STG_API$$'\t\t\t\t\n\t\t,ETL_STG_API_CtmJobID_RT\='$$ETL_STG_API_CtmJobID_RT$$'\n\t\t,ETL_STG_API_CtmJobID_RT4\='$$ETL_STG_API_CtmJobID_RT4$$'\n\t\t,ETL_STG_TABLE\t\='$$ETL_STG_TABLE$$'\t\n\t\t,WHERE_CMD_TMP\t\='$$WHERE_CMD_TMP$$'\n\t\t,WHERE_CMD_STG\t\='$$WHERE_CMD_STG$$'\t\t\t\n\t\t,OTHER_API\t\='$$OTHER_API$$'\t\t\t\t\n\t\t,OTHER_API_CtmJobID_RT\='$$OTHER_API_CtmJobID_RT$$'\n\t\t,OTHER_API_CtmJobID_RT4\='$$OTHER_API_CtmJobID_RT4$$'\n            LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}',\n            LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$',\n            LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)"";\nDECLARE @CIndex smallint\nWHILE (@UPDATE_COUNT_B<>'')\n\tBEGIN\n\t\tSET @CIndex\=CHARINDEX(',',@UPDATE_COUNT_B)\n\t\tIF @CIndex\=0 SET @CIndex\=LEN(@UPDATE_COUNT_B)+1\n\nSELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+\n       CASE\n           WHEN CHARINDEX('$$', SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)) <\= 0 THEN SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)+','\n           ELSE ''\n       END   \n\t\t\n\t\tIF @CIndex\=LEN(@UPDATE_COUNT_B)+1 BREAK\n\t\tSET @UPDATE_COUNT_B\=SUBSTRING(@UPDATE_COUNT_B,@CIndex+1,LEN(@UPDATE_COUNT_B)-@CIndex)\n\tEND\n\nIF LEN(@UPDATE_COUNT_A) > 0 \nBEGIN\n    SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) \n    SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION\n    EXEC (@UPDATE_SQL);\nEND  \n SET QUOTED_IDENTIFIER ON   \n "\n\t\t\t\t\t)\n\n\t\t\tSET QUOTED_IDENTIFIER ON\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\tSessionID\n\t\t\t\t, ProcPK\n\t\t\t\t, FUNC_ID\n\t\t\t\t, PROC_TYPE\n\t\t\t\t, PROC_TARGET\n\t\t\t\t, USER_ID\n\t\t\t\t, DATA_NO\n\t\t\t\t, EVENT_DT\n\t\t\t\t, MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t, '${LOGPK}'\n\t\t\t\t, '$$FunctionID$$'\n\t\t\t\t, 'update'\n\t\t\t\t, 'ES_REF_FLPD_INDEX_MASTER'\n\t\t\t\t, '${PARAM_SOURCE_COMING}'\n\t\t\t\t, '$$DATA_NO$$'\n\t\t\t\t, GETDATE()\n\t\t\t\t, '$$MEMO$$'\n\t\t\t\t);\n\t\tEND;
Fn02C006_DS_CUD2=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD' \nBEGIN\nINSERT INTO dbo.JH_TABLEDEAL_LIST2\n           (WORK_DBNAME\n           ,TB_NAME\n           ,TB_DESC\n           ,BACKUP_FLAG\n           ,BACKUP_ORDER\n           ,DATA_KEEP_MONTH\n\t\t   ,RESET_FLAG\n\t\t   ,RESET_COMMAND\n\t\t   ,RESET_ORDER\n\t\t   ,DEL_FLAG\n\t\t   ,ADD_USER_ID\n\t\t   ,ADD_DT\n\t\t   ,ADD_USER_COMPANY_ID\n\t\t   ,COMPANY_ID\n\t\t   ,DATA_STATUS\n\t\t   )\n     VALUES\n           ('$$WORK_DBNAME$$'\n           ,'$$TB_NAME$$'\n           ,'$$TB_DESC$$'\n           ,'$$BACKUP_FLAG$$'\n           ,'$$BACKUP_ORDER$$'\n\t\t   ,'$$DATA_KEEP_MONTH$$'\n           ,'$$RESET_FLAG$$'\n\t\t   ,'$$RESET_COMMAND$$'\n\t\t   ,'$$RESET_ORDER$$'\n\t\t   ,'$$DEL_FLAG$$'\n\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t   ,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t   ,'${PARAM_COMPANY}'\n\t\t   ,'${PARAM_COMPANY_NAME}'\n\t\t   ,'3'\n\t\t   )\nEND;\n\nELSE IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\nBEGIN\nDELETE JH_TABLEDEAL_LIST2 WHERE PK_TABLEDEAL_LIST \= '$$PK_TABLEDEAL_LIST$$'\nEND;\n\nELSE IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\nBEGIN\nSET QUOTED_IDENTIFIER OFF\nEXEC("\nSET QUOTED_IDENTIFIER OFF\nDECLARE @PROC_TARGET AS VARCHAR(50);\nDECLARE @WHERE_CONDITION AS VARCHAR(50);\n\nSET @PROC_TARGET \= 'JH_TABLEDEAL_LIST2'; \nSET @WHERE_CONDITION \= ""WHERE PK_TABLEDEAL_LIST \='$$PK_TABLEDEAL_LIST$$'"";\nDECLARE @UPDATE_SQL varchar(MAX),\n\t\t@UPDATE_COUNT_A varchar(MAX) \='',\n\t\t@UPDATE_COUNT_B varchar(MAX) \= "" WORK_DBNAME \= '$$WORK_DBNAME$$', \n\t\t\t\t\t\t\t\t\t\t  TB_NAME \='$$TB_NAME$$',\n\t\t\t\t\t\t\t\t\t\t  TB_DESC \= '$$TB_DESC$$',\n\t\t\t\t\t\t\t\t\t\t  BACKUP_FLAG \= '$$BACKUP_FLAG$$',\n\t\t\t\t\t\t\t\t\t\t  BACKUP_ORDER \= '$$BACKUP_ORDER$$',\n\t\t\t\t\t\t\t\t\t\t  DATA_KEEP_MONTH \= '$$DATA_KEEP_MONTH$$',\n\t\t\t\t\t\t\t\t\t\t  RESET_FLAG \= '$$RESET_FLAG$$',\n\t\t\t\t\t\t\t\t\t      RESET_COMMAND \= '$$RESET_COMMAND$$',\n\t\t\t\t\t\t\t\t\t\t  RESET_ORDER \= '$$RESET_ORDER$$',\n\t\t\t\t\t\t\t\t\t      DEL_FLAG \= '$$DEL_FLAG$$',\n\t\t\t\t\t\t\t\t\t\t  LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}',\n\t\t\t\t\t\t\t\t\t\t  LAST_MOD_USER_COMPANY_ID \= '${PARAM_COMPANY}',\n\t\t\t\t\t\t\t\t\t\t  LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)"";\n\t\t\t\t\t\t\t\t\t\t  DECLARE @CIndex smallint\nWHILE (@UPDATE_COUNT_B<>'')\n\tBEGIN\n\t\tSET @CIndex\=CHARINDEX(',',@UPDATE_COUNT_B)\n\t\tIF @CIndex\=0 SET @CIndex\=LEN(@UPDATE_COUNT_B)+1\n\nSELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+\n       CASE\n           WHEN CHARINDEX('$$', SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)) <\= 0 THEN SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)+','\n           ELSE ''\n       END   \n\t\t\n\t\tIF @CIndex\=LEN(@UPDATE_COUNT_B)+1 BREAK\n\t\tSET @UPDATE_COUNT_B\=SUBSTRING(@UPDATE_COUNT_B,@CIndex+1,LEN(@UPDATE_COUNT_B)-@CIndex)\n\tEND\n\nIF LEN(@UPDATE_COUNT_A) > 0 \nBEGIN\n    SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) \n    SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION\n    EXEC (@UPDATE_SQL);\nEND  \n SET QUOTED_IDENTIFIER ON   \n ")\n END;
Fn02C006_DS_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD' \nBEGIN\nINSERT INTO dbo.JH_TABLEDEAL_LIST2\n           (WORK_DBNAME\n           ,TB_NAME\n           ,TB_DESC\n           ,BACKUP_FLAG\n           ,BACKUP_ORDER\n           ,DATA_KEEP_MONTH\n\t\t   ,RESET_FLAG\n\t\t   ,RESET_COMMAND\n\t\t   ,RESET_ORDER\n\t\t   ,DEL_FLAG\n\t\t   ,ADD_USER_ID\n\t\t   ,ADD_DT\n\t\t   ,ADD_USER_COMPANY_ID\n\t\t   ,COMPANY_ID\n\t\t   ,DATA_STATUS\n\t\t   )\n     VALUES\n           ('$$WORK_DBNAME$$'\n           ,'$$TB_NAME$$'\n           ,'$$TB_DESC$$'\n           ,'$$BACKUP_FLAG$$'\n           ,'$$BACKUP_ORDER$$'\n\t\t   ,'$$DATA_KEEP_MONTH$$'\n           ,'$$RESET_FLAG$$'\n\t\t   ,'$$RESET_COMMAND$$'\n\t\t   ,'$$RESET_ORDER$$'\n\t\t   ,'$$DEL_FLAG$$'\n\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t   ,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t   ,'${PARAM_COMPANY}'\n\t\t   ,'${PARAM_COMPANY_NAME}'\n\t\t   ,'3'\n\t\t   )\nEND;\n\nELSE IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\nBEGIN\nDELETE JH_TABLEDEAL_LIST2 WHERE PK_TABLEDEAL_LIST \= '$$PK_TABLEDEAL_LIST$$'\nEND;\n\nELSE IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\nBEGIN\nSET QUOTED_IDENTIFIER OFF\nEXEC("\nSET QUOTED_IDENTIFIER OFF\nDECLARE @PROC_TARGET AS VARCHAR(50);\nDECLARE @WHERE_CONDITION AS VARCHAR(50);\n\nSET @PROC_TARGET \= 'JH_TABLEDEAL_LIST2'; \nSET @WHERE_CONDITION \= ""WHERE PK_TABLEDEAL_LIST \='$$PK_TABLEDEAL_LIST$$'"";\nDECLARE @UPDATE_SQL varchar(MAX),\n\t\t@UPDATE_COUNT_A varchar(MAX) \='',\n\t\t@UPDATE_COUNT_B varchar(MAX) \= "" WORK_DBNAME \= '$$WORK_DBNAME$$', \n\t\t\t\t\t\t\t\t\t\t  TB_NAME \='$$TB_NAME$$',\n\t\t\t\t\t\t\t\t\t\t  TB_DESC \= '$$TB_DESC$$',\n\t\t\t\t\t\t\t\t\t\t  BACKUP_FLAG \= '$$BACKUP_FLAG$$',\n\t\t\t\t\t\t\t\t\t\t  BACKUP_ORDER \= '$$BACKUP_ORDER$$',\n\t\t\t\t\t\t\t\t\t\t  DATA_KEEP_MONTH \= '$$DATA_KEEP_MONTH$$',\n\t\t\t\t\t\t\t\t\t\t  RESET_FLAG \= '$$RESET_FLAG$$',\n\t\t\t\t\t\t\t\t\t      RESET_COMMAND \= '$$RESET_COMMAND$$',\n\t\t\t\t\t\t\t\t\t\t  RESET_ORDER \= '$$RESET_ORDER$$',\n\t\t\t\t\t\t\t\t\t      DEL_FLAG \= '$$DEL_FLAG$$',\n\t\t\t\t\t\t\t\t\t\t  LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}',\n\t\t\t\t\t\t\t\t\t\t  LAST_MOD_USER_COMPANY_ID \= '${PARAM_COMPANY}',\n\t\t\t\t\t\t\t\t\t\t  LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)"";\n\t\t\t\t\t\t\t\t\t\t  DECLARE @CIndex smallint\nWHILE (@UPDATE_COUNT_B<>'')\n\tBEGIN\n\t\tSET @CIndex\=CHARINDEX(',',@UPDATE_COUNT_B)\n\t\tIF @CIndex\=0 SET @CIndex\=LEN(@UPDATE_COUNT_B)+1\n\nSELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+\n       CASE\n           WHEN CHARINDEX('$$', SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)) <\= 0 THEN SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)+','\n           ELSE ''\n       END   \n\t\t\n\t\tIF @CIndex\=LEN(@UPDATE_COUNT_B)+1 BREAK\n\t\tSET @UPDATE_COUNT_B\=SUBSTRING(@UPDATE_COUNT_B,@CIndex+1,LEN(@UPDATE_COUNT_B)-@CIndex)\n\tEND\n\nIF LEN(@UPDATE_COUNT_A) > 0 \nBEGIN\n    SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) \n    SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION\n    EXEC (@UPDATE_SQL);\nEND  \n SET QUOTED_IDENTIFIER ON   \n ")\n END;
Fn02C006_DS_U=UPDATE IS00PF\nSET\n    S0007 \= CASE WHEN $$S0007$$ \= 'Y' THEN 'Y' ELSE 'N' END,\n    S0008 \= CASE WHEN $$S0007$$ \= 'N' THEN NULL ELSE S0008 END,\n    S0009 \= CASE WHEN $$S0007$$ \= 'N' THEN NULL ELSE S0009 END\nWHERE\n      S0001\='$$S0001$$'\nAND\n      S0002\='$$S0002$$'\nAND\n      S0003\=$$S0003$$\nAND \n     S0010\='$$S0004$$';\nSELECT '0' as RETURN_CODE,'成功' AS RETURN_MSG from dual;
Fn02C006_DS_U_TEST=select * from sys.procedures where name \= 'EXEC_IF_SQL_INOUT'
Fn02D001_1=SELECT * FROM (SELECT ROW_NUMBER() OVER ( ORDER BY EVA_CDE ASC) AS RowNum, EVA_CDE, EVA_DESC, UNION_ACC_CDE, UNION_ACC_DESC, BD_ACC_CDE, PROD_CDE, CLASS_NODE FROM JH_EVA_MASTER)AS A, (SELECT count(*) AS totalProperty FROM JH_EVA_MASTER) AS B WHERE 1 \= 1 AND RowNum > '$$start$$' AND RowNum <\= '$$limit$$'
Fn02D001_2=insert_JH_EVA_MASTER
Fn02D001_3=update_JH_EVA_MASTER
Fn02D001_4=delete_del_JH_EVA_MASTER
Fn02D001_5=SELECT ROW_NUMBER() OVER (ORDER BY EVA_CDE ASC) AS RowNum, EVA_CDE, ACC_SUB_CDE, ACC_SUB_DESC, ADD_USER_ID, ADD_DT, LAST_MOD_USER_ID, LAST_MOD_DT FROM JH_EVA_DETAIL WHERE 1 \= 1 AND EVA_CDE \= $$cmp01
Fn02D001_6=insert_JH_EVA_DETAIL
Fn02D001_7=update_JH_EVA_DETAIL
Fn02D001_8=delete_del_JH_EVA_DETAIL
Fn02D002_1=SELECT '0' AS RowNum, 'ALL' AS EVA_CDE, '全部' AS EVA_DESC UNION ALL SELECT ROW_NUMBER() OVER (ORDER BY EVA_CDE ASC) AS RowNum, * FROM (SELECT DISTINCT EVA_CDE, EVA_DESC FROM JH_EVA_MASTER) A
Fn02D002_2=SELECT ROW_NUMBER() OVER ( ORDER BY RN ASC ) AS RowNum, BRNO, BRNAME FROM ( SELECT '0' AS RN, 'ALL' AS BRNO, '全部' AS BRNAME UNION ALL SELECT ROW_NUMBER() OVER ( ORDER BY BRNO ASC ) AS RN, CAST(CAST(BRNO AS INT) AS VARCHAR) AS BRNO, BRNAME FROM JH_REF_BRANCH ) AS A
Fn02D002_3=SELECT * FROM (SELECT ROW_NUMBER() OVER ( ORDER BY RN ASC) AS RowNum, * FROM (SELECT '0' AS RN, 'ALL' AS CALCULATE_FLAG, '全部' AS CALCULATE_FLAG_DESC UNION ALL SELECT ROW_NUMBER() OVER ( ORDER BY D.CODE_VALUE ASC) AS RN, D.CODE_VALUE AS CALCULATE_FLAG, D.CODE_VALUE_DESC AS CALCULATE_FLAG_DESC FROM JH_REF_CODE_MASTER AS M LEFT JOIN JH_REF_CODE_DETAIL AS D ON M.CODE_TYPE \= D.CODE_TYPE WHERE M.CODE_TYPE \= 'AR_CALCULATE_FLAG')AS A, (SELECT COUNT(*) AS totalProperty FROM (SELECT '0' AS RN, 'ALL' AS CALCULATE_FLAG, '全部' AS CALCULATE_FLAG_DESC UNION ALL SELECT ROW_NUMBER() OVER ( ORDER BY D.CODE_VALUE ASC) AS RN, D.CODE_VALUE AS CALCULATE_FLAG, D.CODE_VALUE_DESC AS CALCULATE_FLAG_DESC FROM JH_REF_CODE_MASTER AS M LEFT JOIN JH_REF_CODE_DETAIL AS D ON M.CODE_TYPE \= D.CODE_TYPE WHERE M.CODE_TYPE \= 'AR_CALCULATE_FLAG')AS B) AS B) AS new1 WHERE 1 \= 1 AND RowNum > '$$start$$' AND RowNum <\= '$$limit$$'
Fn02D002_4=SELECT ROW_NUMBER() OVER (ORDER BY PK_EVA_AR ASC ) AS RowNum , EVA_DESC ,BRNAME ,UNION_ACC_DESC ,UPLOAD_S1_AMT ,UPLOAD_S2_AMT ,UPLOAD_S3_AMT ,LEDGER_NT_AMT ,DIFF_AMT ,S1_LEDGER_NT_AMT ,S2_LEDGER_NT_AMT ,S3_LEDGER_NT_AMT ,AR_CALCULATE_FLAG_DESC FROM JHVW_SRC_AR WHERE 1\=1 AND (EVA_CDE \= $$cmp01 OR 'ALL' \= $$cmp01) AND (CAST(CAST(BRNO AS INT) AS VARCHAR) \= $$cmp02 OR 'ALL' \= $$cmp02) AND (CALCULATE_FLAG \= $$cmp03 OR 'ALL' \= $$cmp03)
Fn02E001_1=SELECT ROW_NUMBER() OVER (ORDER BY PK_REF_FORCE_LIST) AS RowNum, * FROM JH_REF_FORCE_LIST
Fn02E001_2=insert_JH_REF_FORCE_LIST
Fn02E001_3=update_JH_REF_FORCE_LIST
Fn02E001_4=delete_del_JH_REF_FORCE_LIST
Fn02E001_5=SELECT ROW_NUMBER() OVER ( ORDER BY MASTER_RULE_CDE ASC) AS RowNum, MASTER_RULE_CDE, MASTER_RULE_CDE +'_' + MASTERRULE_DESC AS MASTERRULE_DESC FROM JH_EVENTRULE_MASTER WHERE NOW_FLAG\='Y' AND CONDITION_TYPE\='S1'
Fn02E001_6=SELECT ROW_NUMBER() OVER ( ORDER BY MASTER_RULE_CDE ASC) AS RowNum, MASTER_RULE_CDE, MASTER_RULE_CDE +'_' + MASTERRULE_DESC AS MASTERRULE_DESC FROM JH_EVENTRULE_MASTER WHERE NOW_FLAG\='Y' AND CONDITION_TYPE\='S2'
Fn02E001_7=SELECT ROW_NUMBER() OVER ( ORDER BY MASTER_RULE_CDE ASC) AS RowNum, MASTER_RULE_CDE, MASTER_RULE_CDE +'_' + MASTERRULE_DESC AS MASTERRULE_DESC FROM JH_EVENTRULE_MASTER WHERE NOW_FLAG\='Y' AND CONDITION_TYPE\='S3'
Fn02F001_2=insert_JH_WTYPE_CC_ACCOUNTING
Fn02F001_3=update_JH_WTYPE_CC_ACCOUNTING
Fn02F001_4=delete_del_JH_WTYPE_CC_ACCOUNTING
Fn02F002_2=insert_JH_TDAY_ACCOUNTING
Fn02F002_3=update_JH_TDAY_ACCOUNTING
Fn02F002_4=delete_del_JH_TDAY_ACCOUNTING
Fn03A003_1=SELECT ROW_NUMBER () OVER (ORDER BY A.JOB_ID ASC) AS RowNum,A.JOB_ID,A.JOB_NAME,A.JOB_DESC,A.COMPANY_ID,A.DATA_STATUS,A.ACT_FILE_PATH,A.ACT_EXEC_TARGET,HASH_NAME,JOB_FILE_PATH,A.JOB_FILE_NAME,JOB_HASH_NAME,CASE B.SUCCESS WHEN 'Y' THEN '成功' WHEN 'N' THEN '失敗' END AS SUCCESS,b.START_EXE_DT AS ADD_DT,B.LOG_MSG FROM VW_MANUAL_UPLOAD A LEFT OUTER JOIN (SELECT * FROM JHVW_JOB_LOG_IN_PERIOD WHERE JLOG_PK IN (SELECT max(JLOG_PK) FROM JHVW_JOB_LOG_IN_PERIOD WHERE SUCCESS NOT IN ('S','I') group by JOB_ID )) B ON A.JOB_ID\=B.JOB_ID WHERE CLASSIFY \= $$cmp01 AND  MAP_DEPID \= $$SysDep
Fn03A003_2=SELECT ROW_NUMBER() OVER(ORDER BY JLOG_PK DESC) AS RowNum,CASE SUCCESS WHEN 'Y' THEN '成功' WHEN 'N' THEN '失敗' END AS RESULT ,* FROM JHVW_JOB_LOG_IN_PERIOD WHERE JOB_ID \= $$cmp01
Fn03A003_3=insert_JOB_UPLOAD_DATA^
Fn03A003_4=SELECT PROPERTY_TYPE_DESC,CLASSIFY FROM JHVW_GUI_FILEUPLOAD WHERE MAP_DEPID \= $$SysDep
Fn03A004_1=SELECT ROW_NUMBER() OVER (ORDER BY PK_DWDATA_LIST ASC) AS RowNum, PK_DWDATA_LIST, EXE_TYPE, TB_NAME, TB_DESC, IS_READY, CHK_DATETIME FROM JH_DWDATA_LIST WHERE 1 \= 1 AND (EXE_TYPE \= $$cmp01 OR $$cmp01 \= 'ALL')
Fn03A004_2=SELECT ROW_NUMBER() OVER (ORDER BY CODE_VALUE ASC) AS RowNum, CODE_VALUE,CODE_VALUE_DESC FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE \= 'DW_FILE_WATCH_TYPE'
Fn03A005_1=SELECT CLASSIFY,PROPERTY_TYPE_DESC FROM JHVW_GUI_ETL_INTEGRATION WHERE MAP_DEPID\=$$SysDep
Fn03A005_2=SELECT ROW_NUMBER() OVER (ORDER BY B.FLOW_NAME ASC, A.JOB_LV ASC) AS RowNum, A.FLOW_ID AS FLOW_ID, B.FLOW_NAME AS FLOW_NAME, B.TMP_AP_TAG, A.JOB_LV AS JOB_ORDER, A.JOB_ID AS JOB_ID, C.JOB_NAME AS JOB_NAME, D.START_EXE_DT AS START_EXE_DT, D.END_EXE_DT AS END_EXE_DT, CASE WHEN D.SCHDL_ID IS NOT NULL AND D.SCHDL_ID<>0 THEN '排程' WHEN D.SCHDL_ID IS NOT NULL AND D.SCHDL_ID \= 0 THEN '手動' ELSE '' END AS EXEC_METHOD, CASE D.SUCCESS WHEN 'I' THEN '中止' WHEN 'Y' THEN '成功' WHEN 'N' THEN '失敗' ELSE '' END AS EXEC_STATUS_DESC, ISNULL(D.LOG_MSG, '') AS LOG_MSG FROM JOB_FLOW A INNER JOIN JOB_FLOW_MASTER B ON A.FLOW_ID \= B.FLOW_ID INNER JOIN JOB_REG C ON A.JOB_ID \= C.JOB_ID LEFT JOIN (SELECT J.* FROM JHVW_JOB_LOG_IN_PERIOD J, (SELECT JOB_ID, MAX(JLOG_PK) AS MAX_JLOG_PK FROM JHVW_JOB_LOG_IN_PERIOD WHERE SUCCESS IN ('Y', 'N') GROUP BY JOB_ID)K WHERE J.JOB_ID \= K.JOB_ID AND J.JLOG_PK \= K.MAX_JLOG_PK)D ON A.JOB_ID \= D.JOB_ID WHERE 1 \= 1
Fn03A006_1=SELECT ROW_NUMBER() OVER (ORDER BY ACTION_TYPE ASC) AS RowNum, ACTION_TYPE,PROPERTY_TYPE_DESC,MAP_DEPID FROM JHVW_GUI_ETL_FILE_WATCH WHERE 1\=1 AND MAP_DEPID \= $$SysDep
Fn03A006_2=SELECT ROW_NUMBER() OVER (ORDER BY JOB_ID ASC) AS RowNum, PROPERTY_TYPE,JOB_ID,JOB_NAME,IS_PERIDICAL_FILE,DAT_FILE_NAME,IDX_FILE_NAME,ORIGIN_FTP_DIR,IS_READY,DAT_FILE_DATETIME,IDX_FILE_DATETIME,IDX_INFO_FILE_DATE,IDX_INFO_DATA_DATE,IDX_INFO_DATA_RECORD_NUMBER,CHECK_DATETIME,TARGET_TABLE_NAME,LOAD_FILE_DATE,LOAD_DATA_DATE,RECORD_COUNT,SYNC_DATETIME FROM JHVW_ETL_INFO WHERE PROPERTY_TYPE \= $$cmp01
Fn04A001_1=SELECT ROW_NUMBER() OVER ( ORDER BY PK_SYS DESC ) AS RowNum ,* FROM B_SYS_CONFIG WHERE 1\=1 AND PK_SYS NOT IN(SELECT TOP 0 PK_SYS FROM B_SYS_CONFIG ORDER BY PK_SYS DESC)/*ORDER BY PK_SYS DESC*/
Fn04A001_2=SELECT ROW_NUMBER() OVER ( ORDER BY PK_SYS DESC ) AS RowNum ,* FROM B_SYS_CONFIG_DETAIL WHERE 1\=1 AND IS_MODIFIABLE \= 'Y' AND PK_SYS \= $$cmp01
Fn04A001_3=insert_B_SYS_CONFIG
Fn04A001_4=update_B_SYS_CONFIG
Fn04A001_5=delete_del_B_SYS_CONFIG
Fn04A001_6=insert_B_SYS_CONFIG_DETAIL
Fn04A001_7=update_B_SYS_CONFIG_DETAIL
Fn04A001_8=delete_del_B_SYS_CONFIG_DETAIL
FN04A001_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tINSERT B_SYS_CONFIG (\n\t\tPK_SYS\n\t\t,CAL_ALIAS\n\t\t,DATA_YMD\n\t\t,MA_BASIC_STATUS\n\t\t,MA_BASIC_DATE\n\t\t,MA_TRANS_STATUS\n\t\t,MA_TRANS_DATE\n\t\t,CASE_CLASSIFY_STATUS\n\t\t,MA_RECEIVE_STATUS\n\t\t,MA_RECEIVE_DATE\n\t\t,LOSS_BATCH_STATUS\n\t\t,OPEN_STATUS\n\t\t,NOW_FLAG\n\t\t,UPD_ID\n\t\t,CRT_TIME\n\t\t,UPT_TIME\n\t\t,OPEN_ACC_TYPE\n\t\t,ADD_DT\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,COMPANY_ID\n\t\t)\n\tVALUES (\n\t\t'$$ADD_PK_SYS$$'\n\t\t,'$$CAL_ALIAS$$'\n\t\t,'$$DATA_YMD$$'\n\t\t,'Y'\n\t\t,NULL\n\t\t,'Y'\n\t\t,NULL\n\t\t,'Y'\n\t\t,'Y'\n\t\t,NULL\n\t\t,'Y'\n\t\t,'A'\n\t\t,'N'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,GETDATE()\n\t\t,NULL\n\t\t,'$$OPEN_ACC_TYPE$$'\n\t\t,CONVERT(VARCHAR(100), GETDATE(), 120)\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'$$COMPANY_ID$$'\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'insert'\n\t\t,'B_SYS_CONFIG'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,IDENT_CURRENT('B_SYS_CONFIG')\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\nEND;\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD_ERR'\n\tBEGIN\n\t\tDELETE B_SYS_CONFIG\n\t\tWHERE PK_SYS \= '$$ADD_PK_SYS$$';\n\n\t\tDELETE B_SYS_CONFIG_DETAIL\n\t\tWHERE PK_SYS \= '$$ADD_PK_SYS$$';\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'delete'\n\t\t\t,'B_SYS_CONFIG,B_SYS_CONFIG_DETAIL'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$PK_SYS$$'\n\t\t\t,GETDATE()\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND;\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\t\tBEGIN\n\t\t\tUPDATE B_SYS_CONFIG\n\t\t\tSET CAL_ALIAS \= '$$CAL_ALIAS$$'\n\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(100), GETDATE(), 120)\n\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\tWHERE PK_SYS \= '$$PK_SYS$$';\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\tSessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,FUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,PROC_TARGET\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'$$FunctionID$$'\n\t\t\t\t,'update'\n\t\t\t\t,'B_SYS_CONFIG'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'$$PK_SYS$$'\n\t\t\t\t,GETDATE()\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND;\n\t\tELSE\n\t\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'OPEN_CLOSE_ACC'\n\t\t\tBEGIN\n\t\t\t\tUPDATE B_SYS_CONFIG\n\t\t\t\tSET OPEN_STATUS \= '$$OPEN_STATUS$$'\n\t\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(100), GETDATE(), 120)\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t\tWHERE PK_SYS \= '$$PK_SYS$$';\n\n\t\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\t\tSessionID\n\t\t\t\t\t,ProcPK\n\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t,PROC_TYPE\n\t\t\t\t\t,PROC_TARGET\n\t\t\t\t\t,USER_ID\n\t\t\t\t\t,DATA_NO\n\t\t\t\t\t,EVENT_DT\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t\t,'${LOGPK}'\n\t\t\t\t\t,'$$FunctionID$$'\n\t\t\t\t\t,'update'\n\t\t\t\t\t,'B_SYS_CONFIG'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'$$PK_SYS$$'\n\t\t\t\t\t,GETDATE()\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND;
Fn04A001_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tINSERT B_SYS_CONFIG (\n\t\tPK_SYS\n\t\t,CAL_ALIAS\n\t\t,DATA_YMD\n\t\t,MA_BASIC_STATUS\n\t\t,MA_BASIC_DATE\n\t\t,MA_TRANS_STATUS\n\t\t,MA_TRANS_DATE\n\t\t,CASE_CLASSIFY_STATUS\n\t\t,MA_RECEIVE_STATUS\n\t\t,MA_RECEIVE_DATE\n\t\t,LOSS_BATCH_STATUS\n\t\t,OPEN_STATUS\n\t\t,NOW_FLAG\n\t\t,UPD_ID\n\t\t,CRT_TIME\n\t\t,UPT_TIME\n\t\t,OPEN_ACC_TYPE\n\t\t,ADD_DT\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,COMPANY_ID\n\t\t)\n\tVALUES (\n\t\t'$$ADD_PK_SYS$$'\n\t\t,'$$CAL_ALIAS$$'\n\t\t,'$$DATA_YMD$$'\n\t\t,'Y'\n\t\t,NULL\n\t\t,'Y'\n\t\t,NULL\n\t\t,'Y'\n\t\t,'Y'\n\t\t,NULL\n\t\t,'Y'\n\t\t,'A'\n\t\t,'N'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,GETDATE()\n\t\t,NULL\n\t\t,'$$OPEN_ACC_TYPE$$'\n\t\t,CONVERT(VARCHAR(100), GETDATE(), 120)\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'$$COMPANY_ID$$'\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'insert'\n\t\t,'B_SYS_CONFIG'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,IDENT_CURRENT('B_SYS_CONFIG')\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\nEND;\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD_ERR'\n\tBEGIN\n\t\tDELETE B_SYS_CONFIG\n\t\tWHERE PK_SYS \= '$$ADD_PK_SYS$$';\n\n\t\tDELETE B_SYS_CONFIG_DETAIL\n\t\tWHERE PK_SYS \= '$$ADD_PK_SYS$$';\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'delete'\n\t\t\t,'B_SYS_CONFIG,B_SYS_CONFIG_DETAIL'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$PK_SYS$$'\n\t\t\t,GETDATE()\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND;\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\t\tBEGIN\n\t\t\tUPDATE B_SYS_CONFIG\n\t\t\tSET CAL_ALIAS \= '$$CAL_ALIAS$$'\n\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(100), GETDATE(), 120)\n\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\tWHERE PK_SYS \= '$$PK_SYS$$';\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\tSessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,FUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,PROC_TARGET\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'$$FunctionID$$'\n\t\t\t\t,'update'\n\t\t\t\t,'B_SYS_CONFIG'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'$$PK_SYS$$'\n\t\t\t\t,GETDATE()\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND;\n\t\tELSE\n\t\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'OPEN_CLOSE_ACC'\n\t\t\tBEGIN\n\t\t\t\tUPDATE B_SYS_CONFIG\n\t\t\t\tSET OPEN_STATUS \= '$$OPEN_STATUS$$'\n\t\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(100), GETDATE(), 120)\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t\tWHERE PK_SYS \= '$$PK_SYS$$';\n\n\t\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\t\tSessionID\n\t\t\t\t\t,ProcPK\n\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t,PROC_TYPE\n\t\t\t\t\t,PROC_TARGET\n\t\t\t\t\t,USER_ID\n\t\t\t\t\t,DATA_NO\n\t\t\t\t\t,EVENT_DT\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t\t,'${LOGPK}'\n\t\t\t\t\t,'$$FunctionID$$'\n\t\t\t\t\t,'update'\n\t\t\t\t\t,'B_SYS_CONFIG'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'$$PK_SYS$$'\n\t\t\t\t\t,GETDATE()\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND;
Fn04A001_D1_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'D1_MOD'\n\tBEGIN\n\t\tUPDATE B_SYS_CONFIG_DETAIL\n\t\tSET PARM_VAL \= '$$PARM_VAL$$'\n\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(100), GETDATE(), 120)\n\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\tWHERE PK_SYS \= '$$PK_SYS$$'\n\t\tAND PARM_NAME \= '$$PARM_NAME$$';\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'B_SYS_CONFIG_DETAIL'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$PK_SYS$$'\n\t\t\t,GETDATE()\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND;
Fn04A003_1=SELECT CLASSIFY,PROPERTY_TYPE_DESC FROM JHVW_GUI_LOSSCAL WHERE MAP_DEPID\=$$SysDep
Fn04A003_2=SELECT ROW_NUMBER() OVER (ORDER BY B.FLOW_NAME ASC,A.JOB_LV ASC) AS RowNum, A.FLOW_ID AS FLOW_ID, B.FLOW_NAME AS FLOW_NAME, B.TMP_AP_TAG AS TMP_AP_TAG,A.JOB_LV AS JOB_ORDER,A.JOB_ID AS JOB_ID,C.JOB_NAME  AS JOB_NAME,D.START_EXE_DT AS START_EXE_DT,D.END_EXE_DT AS END_EXE_DT,CASE WHEN D.SCHDL_ID IS NOT NULL AND D.SCHDL_ID<>0 THEN '排程' WHEN D.SCHDL_ID IS NOT NULL AND D.SCHDL_ID\=0 THEN '手動' ELSE '' END  AS EXEC_METHOD, CASE D.SUCCESS WHEN 'I' THEN '中止' WHEN 'Y' THEN '成功' WHEN 'N' THEN '失敗' ELSE '' END AS EXEC_STATUS_DESC, ISNULL(D.LOG_MSG,'') AS LOG_MSG  FROM JOB_FLOW A INNER JOIN JOB_FLOW_MASTER B ON A.FLOW_ID\=B.FLOW_ID INNER JOIN JOB_REG C ON A.JOB_ID\=C.JOB_ID LEFT JOIN (SELECT J.* FROM JHVW_JOB_LOG_IN_PERIOD J,  (SELECT JOB_ID,MAX(JLOG_PK) AS MAX_JLOG_PK FROM JHVW_JOB_LOG_IN_PERIOD WHERE SUCCESS IN ('Y','N') GROUP BY JOB_ID)K WHERE J.JOB_ID\=K.JOB_ID AND J.JLOG_PK\=K.MAX_JLOG_PK)D ON A.JOB_ID\=D.JOB_ID WHERE 1 \= 1
Fn04B001_1=SELECT ROW_NUMBER() OVER ( ORDER BY LGD_PROD_CDE, LGD_CLASS_NODE ASC) AS RowNum, LGD_PROD_CDE , LGD_CLASS_NODE , CLASS_NODE_DESC , SRC_CNT , YEAR_1 , YEAR_2 , YEAR_3 , YEAR_4 , YEAR_5 , WEI_EFF_RATE_S1S2 , LGD_S1S2_ORG , LGD_S1S2 , WEI_EFF_RATE_S3 , LGD_S3_ORG , LGD_S3 FROM JHVW_LGD_PARAM
Fn04B002_1=SELECT ROW_NUMBER() OVER (ORDER BY PD_PROD_CDE, PD_CLASS_NODE, CLASS_NODE_DESC, STAGE_LEVEL, BIGORDER, START_YEAR, ITEM_ORDER ASC) AS RowNum, * FROM (SELECT [BIGORDER], [PD_PROD_CDE], [PD_CLASS_NODE], [CLASS_NODE_DESC], [STAGE_LEVEL], [START_YEAR], [ITEM_ORDER], [ITEM_DESC], [APPEND_YEAR_1], [APPEND_YEAR_2], [APPEND_YEAR_3], [APPEND_YEAR_4], [APPEND_YEAR_5], [APPEND_YEAR_6], [APPEND_YEAR_7], [APPEND_YEAR_8], [APPEND_YEAR_9], [APPEND_YEAR_10], [APPEND_YEAR_11], [APPEND_YEAR_12], [APPEND_YEAR_13], [APPEND_YEAR_14], [APPEND_YEAR_15], [APPEND_YEAR_16], [APPEND_YEAR_17], [APPEND_YEAR_18], [APPEND_YEAR_19], [APPEND_YEAR_20], [APPEND_YEAR_21], [APPEND_YEAR_22], [APPEND_YEAR_23], [APPEND_YEAR_24], [APPEND_YEAR_25], [APPEND_YEAR_26], [APPEND_YEAR_27], [APPEND_YEAR_28], [APPEND_YEAR_29], [APPEND_YEAR_30], [APPEND_YEAR_31], [APPEND_YEAR_32], [APPEND_YEAR_33], [APPEND_YEAR_34], [APPEND_YEAR_35], [APPEND_YEAR_36], [APPEND_YEAR_37], [APPEND_YEAR_38], [APPEND_YEAR_39], [APPEND_YEAR_40], CASE WHEN BIGORDER \= 2 AND ITEM_ORDER IN (1, 2, 3, 4, 5) THEN 'TRUE' END AS ITEM_A, CASE WHEN BIGORDER \= 1 AND ITEM_ORDER \= 5 THEN 'TRUE' END AS ITEM_B, CASE WHEN BIGORDER \= 1 AND ITEM_ORDER IN (1, 2, 3, 4) THEN 'TRUE' END AS ITEM_C FROM JHVW_PD_OVERVIEW)M WHERE 1 \= 1 AND (PD_PROD_CDE \= $$cmp01 OR $$cmp01 \= 'ALL') AND (STAGE_LEVEL \= $$cmp02 OR $$cmp02 \= 'ALL') AND ((BIGORDER \= 2 AND ITEM_ORDER \= 6) OR ITEM_A \= $$cmp03 OR ITEM_B \= $$cmp04 OR ITEM_C \= $$cmp05)
Fn04B002_2=SELECT ROW_NUMBER() OVER (ORDER BY PD_PROD_CDE ASC) AS RowNum, * FROM (SELECT 'ALL' AS 'PD_PROD_CDE', 'ALL' AS 'PD_PROD_CDE_DESC' UNION ALL SELECT DISTINCT PD_PROD_CDE AS 'PD_PROD_CDE', LEFT(PD_CLASS_NODE_DESC, CHARINDEX('_', PD_CLASS_NODE_DESC, 0)-1) AS 'PD_PROD_CDE_DESC' FROM JH_MAP_PROD_NODE WHERE PD_PROD_CDE IS NOT NULL) A
Fn04B002_3=SELECT ROW_NUMBER() OVER (ORDER BY STAGE_LEVEL ASC) AS RowNum, * FROM (SELECT 'ALL' AS 'STAGE_LEVEL', 'ALL' AS 'STAGE_LEVEL_DESC' UNION ALL SELECT CODE_VALUE AS 'STAGE_LEVEL', CODE_VALUE AS 'STAGE_LEVEL_DESC' FROM JH_REF_CODE_MASTER M INNER JOIN JH_REF_CODE_DETAIL D ON M.CODE_TYPE \= D.CODE_TYPE WHERE M.CODE_TYPE \= 'STAGE_LEVEL' AND D.CODE_VALUE <> 'S3')A
Fn04B003_1=SELECT ROW_NUMBER() OVER (ORDER BY CURCD ASC) AS RowNum,  CURCD ,CODE ,ENAME ,CNAME ,EXRATE_T5_ORG_TO_TWD ,EXRATE_T5_ORG_TO_USD ,EXRATE_T_ORG_TO_TWD ,EXRATE_T_ORG_TO_USD ,ADD_USER_ID ,ADD_DT ,LAST_MOD_USER_ID ,LAST_MOD_DT FROM JH_REF_EXRATE
Fn04B003_2=insert_JH_REF_EXRATE
Fn04B003_3=update_JH_REF_EXRATE
Fn04B003_4=delete_del_JH_REF_EXRATE
Fn04B004_1=SELECT 'ALL' AS 'STAGE_LEVEL' ,'ALL' AS 'STAGE_LEVEL_VALUE' UNION ALL SELECT CODE_VALUE AS 'STAGE_LEVEL' ,CODE_VALUE AS 'STAGE_LEVEL_VALUE' FROM JH_REF_CODE_MASTER M INNER JOIN JH_REF_CODE_DETAIL D ON M.CODE_TYPE \= D.CODE_TYPE WHERE M.CODE_TYPE \= 'STAGE_LEVEL'
Fn04B004_2=SELECT ROW_NUMBER() OVER (ORDER BY DATA_TYPE, PK_INTERFACE_LOAN) AS RowNum, PK_INTERFACE_LOAN,DATA_TYPE,ACC_NO,ID_NO,QUTA_APRV_NO,DUE_DATE,MTH_ACC_CAP_AMT,MTH_ACC_INT_AMT,MTH_ACC_FEE_AMT,OVER_DAYS,IS_DEBT,ENTERPRISE_BHV_CDE,COLLATERAL_TYPE,ENTERPRISE_CDE,PROD_CDE,REP_BHT_CDE,IS_OVER_5_EXTD,ENTERPRISE_DEBT_BARG_FLAG,INDIVIDUAL_DEBT_BARG_FLAG,IS_BARG_FLAG,IS_CREDIT_COND_CHG,RENEW_STATUS,LIQUIDATE_STATUS,BAD_DEBT_FLAG,PROFIT_DECLINE_FLAG,CREDIT_RANK,APRV_NO_TITLE,APRV_NT_AMT,CONT_REVO_TYPE,AVAILABLE_BAL_AMT,BLOCK_FLAG,CREDIT_CDE,BAL_AMT,STAGE_LEVEL,STAGE_LEVEL_REASON_DESC AS 'STAGE_LEVEL_REASON',STAGE2_METHOD,SURPLUS_YEAR,EL_PD_VALUE,PD_PROD_CDE,EL_LGD_VALUE,LGD_PROD_CDE,EL_CCF_VALUE,EL_EAD_AMT,EL_LOSSAMT FROM JHVW_GUI_LOAN_INTERFACE_DATA A INNER JOIN (SELECT MAP_KEY,MAP_DEPID FROM JH_REF_DEP_MAPDATA_MASTER M INNER JOIN JH_REF_DEP_MAPDATA_DETAIL D ON M.MAPDATA_TYPE \= D.MAPDATA_TYPE WHERE M.MAPDATA_TYPE \= 'DATA_RANGE' AND OWN_FLAG \= 'Y') DEP ON A.DEPID IN (DEP.MAP_KEY) WHERE 1 \= 1 AND (ACC_NO \= $$cmp01 OR 'ALL' \= $$cmp01) AND (ID_NO \= $$cmp02 OR 'ALL' \= $$cmp02) AND (QUTA_APRV_NO \= $$cmp03 OR 'ALL' \= $$cmp03) AND (STAGE_LEVEL \= $$cmp04 OR 'ALL' \= $$cmp04) AND MAP_DEPID \= $$SysDep
Fn04B004_3=SELECT ROW_NUMBER() OVER (ORDER BY PERIOD_NUM) AS RowNum, PERIOD_NUM ,PAY_DATE ,PAY_INTEREST ,PAY_PRINCIPAL ,PAY_PRINCIPAL_INTEREST_SUM ,SURPLUS_PRINCIPAL ,PD_VALUE ,NPV_TO_REPORT_DATE FROM JHVW_GUI_LOAN_CASHFLOW_PREVIEW WHERE 1 \= 1 AND (PK_INTERFACE_LOAN \= $$cmp01 OR 'ALL' \=  $$cmp01)
Fn04C001_1=SELECT ROW_NUMBER() OVER (ORDER BY FLOG_PK DESC, MERGE_GROUP ASC) AS RowNum, * FROM (SELECT FLOG_PK, CONVERT(INT, MERGE_GROUP) AS 'MERGE_GROUP', JLOG_PK, (CASE WHEN L.SCHDL_ID \= '0' THEN '手動' ELSE '排程' END) AS 'TYPE', (CASE WHEN L.SCHDL_ID \= '0' THEN '0' ELSE '1' END) AS 'TYPE_CODE', CAST(S.SCHDL_ID AS VARCHAR(100)) + ' ' + S.SCHDL_NAME AS 'SCHDL_ID_NAME', S.SCHDL_ID, CAST(F.FLOW_ID AS VARCHAR(100)) + ' ' + F.FLOW_NAME AS 'FLOW_ID_NAME', F.FLOW_ID, CAST(J.JOB_ID AS VARCHAR(100)) + ' ' + J.JOB_NAME AS 'JOB_ID_NAME', J.JOB_ID, L.START_EXE_DT AS 'START_TIME', L.END_EXE_DT AS 'END_TIME', (CASE WHEN L.SUCCESS \= 'Y' THEN '成功' WHEN L.SUCCESS \= 'N' THEN '失敗' WHEN L.SUCCESS \= 'I' THEN '中斷' WHEN L.SUCCESS \= 'S' THEN '跳過' END) AS 'RESULT', L.SUCCESS, L.LOG_MSG AS 'MESSAGE', L.LOG_NAME FROM JOB_LOG L LEFT JOIN JOB_REG J ON L.JOB_ID \= J.JOB_ID LEFT JOIN JOB_FLOW_MASTER F ON L.FLOW_ID \= F.FLOW_ID LEFT JOIN SCHDL_MASTER S ON L.SCHDL_ID \= S.SCHDL_ID) A WHERE 1 \= 1 AND (TYPE_CODE \= $$cmp01 OR $$cmp01 \= 'ALL') AND (SCHDL_ID \= $$cmp02 OR $$cmp02 \= 'ALL') AND (FLOW_ID \= $$cmp03 OR $$cmp03 \= 'ALL') AND (JOB_ID \= $$cmp04 OR $$cmp04 \= 'ALL') AND ((CONVERT(DATE, START_TIME, 120) BETWEEN $$cmp05 AND $$cmp06) OR ($$cmp05 \= 'ALL' AND $$cmp06 \= 'ALL')) AND (SUCCESS \= $$cmp07 OR $$cmp07 \= 'ALL')
Fn04C001_2=SELECT ROW_NUMBER() OVER (ORDER BY SCHDL_ORDER ASC) AS RowNum, * FROM (SELECT 'ALL' AS SCHDL_ID, '0' AS SCHDL_ORDER, 'ALL' AS SCHDL_ID_NAME UNION SELECT CAST(SCHDL_ID AS VARCHAR(100)) AS SCHDL_ID, SCHDL_ID AS SCHDL_ORDER, CAST(SCHDL_ID AS VARCHAR(100)) + ' ' + SCHDL_NAME AS SCHDL_ID_NAME FROM SCHDL_MASTER ) A
Fn04C001_3=SELECT ROW_NUMBER() OVER (ORDER BY FLOW_ORDER ASC) AS RowNum, * FROM (SELECT 'ALL' AS FLOW_ID, '0' AS FLOW_ORDER, 'ALL' AS FLOW_ID_NAME UNION SELECT CAST(FLOW_ID AS VARCHAR(100)) AS FLOW_ID, FLOW_ID AS FLOW_ORDER, CAST(FLOW_ID AS VARCHAR(100)) + ' ' + FLOW_NAME AS FLOW_ID_NAME FROM JOB_FLOW_MASTER ) A
Fn04C001_4=SELECT ROW_NUMBER() OVER (ORDER BY JOB_ORDER ASC) AS RowNum, * FROM (SELECT 'ALL' AS JOB_ID, '0' AS JOB_ORDER ,'ALL' AS JOB_ID_NAME UNION SELECT CAST(JOB_ID AS VARCHAR(100)) AS JOB_ID, JOB_ID AS JOB_ORDER, CAST(JOB_ID AS VARCHAR(100)) + ' ' + JOB_NAME AS JOB_ID_NAME FROM JOB_REG ) A
Fn04C002_1=SELECT ROW_NUMBER() OVER (ORDER BY PROPERTY_TYPE ASC) AS RowNum,PROPERTY_TYPE_DESC AS 'PROPERTY_TYPE',PROGRESS_STATUS,PROGRESS_DESC,SYNC_TIME FROM JH_OPA_MASTER A LEFT JOIN (SELECT CODE_VALUE,CODE_VALUE_DESC + '_' + CODE_VALUE AS 'PROPERTY_TYPE_DESC' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE \= 'PROPERTY_TYPE') PT ON A.PROPERTY_TYPE \= PT.CODE_VALUE WHERE 1 \= 1 AND (PROPERTY_TYPE \= $$cmp01 OR $$cmp01 \= 'ALL')
Fn04C002_2=SELECT ROW_NUMBER() OVER (ORDER BY OPA_DETAIL_ORDER ASC) AS RowNum, OPA_DETAIL_ITEM_ID ,OPA_DETAIL_ORDER ,OPA_DETAIL_ITEM_DESC ,EXEC_STATUS ,EXEC_DESC ,EXEC_END_TIME ,RESPONSE_DEPID FROM JH_OPA_DETAIL WHERE 1\=1 AND (PROPERTY_TYPE \= $$cmp01 OR ('ALL' \= $$cmp01))
Fn04C002_3=SELECT ROW_NUMBER() OVER (ORDER BY OPA_SUB_DETAIL_ORDER ASC) AS RowNum, * FROM JH_OPA_SUBDETAIL WHERE 1\=1 AND OPA_DETAIL_ITEM_ID \= $$cmp01
Fn04C002_4=SELECT ROW_NUMBER() OVER (ORDER BY PROPERTY_TYPE ASC) AS RowNum, *  FROM JHVW_GUI_CHK_CAL_PROGRESS WHERE MAP_DEPID \= $$SysDep
Fn04C003_1=SELECT TOP 3000 ROW_NUMBER() OVER (ORDER BY BRNO, EAI_MSGID, BD_ACC_CDE, PK_EAI_LOG DESC) AS RowNum, PK_ACCREC, PK_EAI_LOG, BRNO, BRNAME, BD_ACC_CDE, CURCD, EAI_STATUS, EAI_MSGID, SIGON_STATUS, COMM_STATUS, RQ_XML_FILE_NAME, RS_XML_FILE_NAME, START_DATE, END_DATE, DUR_SECS, LASTEST_FLAG FROM JHVW_EAI_LOG WHERE 1 \= 1 AND (LASTEST_FLAG \= $$cmp01 OR $$cmp01 \= 'ALL') AND (CONVERT (VARCHAR(5), BRNO) \= $$cmp02 OR $$cmp02 \= 'ALL') AND (BD_ACC_CDE \= $$cmp03 OR $$cmp03 \= 'ALL') AND (EAI_MSGID \= $$cmp04 OR $$cmp04 \= 'ALL') AND (CONVERT (VARCHAR(5), CURCD) \= $$cmp05 OR $$cmp05 \= 'ALL') AND (EAI_STATUS \= $$cmp06 OR $$cmp06 \= 'ALL')
Fn04C003_2=SELECT ROW_NUMBER() OVER (ORDER BY RowNum_N ASC) AS RowNum, * FROM (SELECT '0' AS 'RowNum_N', 'ALL' AS 'BRNO', 'ALL' AS 'BRNAME' UNION ALL SELECT ROW_NUMBER() OVER (ORDER BY BRNO ASC) AS 'RowNum_N', CONVERT (VARCHAR(5), BRNO) AS 'BRNO', CONVERT (VARCHAR(100), BRNAME) AS 'BRNAME' FROM JH_REF_BRANCH) M
Fn04C003_3=SELECT ROW_NUMBER() OVER (ORDER BY RowNum_N ASC) AS RowNum, * FROM (SELECT '0' AS 'RowNum_N', 'ALL' AS 'CODE_VALUE' UNION ALL SELECT ROW_NUMBER() OVER (ORDER BY CODE_VALUE ASC) AS 'ROWNUM_N', * FROM (SELECT CODE_VALUE FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE LIKE 'FV_REP%' GROUP BY CODE_VALUE) N) M
Fn04C003_4=SELECT ROW_NUMBER() OVER (ORDER BY RowNum_N ASC) AS RowNum, * FROM (SELECT '0' AS 'RowNum_N', 'ALL' AS 'CURCD', 'ALL' AS 'CNAME' UNION ALL SELECT ROW_NUMBER() OVER (ORDER BY CURCD ASC) AS 'RowNum_N', CONVERT (VARCHAR(5), CURCD) AS 'CURCD', CONVERT (VARCHAR(50), CNAME) AS 'CNAME' FROM JH_REF_EXRATE) M
Fn05A001_1=SELECT ROW_NUMBER() OVER (ORDER BY PK_SYS DESC) AS RowNum, CAL_ALIAS, PK_SYS FROM B_SYS_CONFIG
Fn05A001_2=SELECT ROW_NUMBER() OVER (ORDER BY SUBSTRING(JOB_NAME,1,CHARINDEX('_', JOB_NAME)) ASC) AS RowNum, B.MAP_DEPID, C.* FROM JH_REF_DEP_MAPDATA_MASTER A INNER JOIN  JH_REF_DEP_MAPDATA_DETAIL B ON A.MAPDATA_TYPE \= B.MAPDATA_TYPE AND A.MAPDATA_TYPE \= 'REPORT' AND B.OWN_FLAG \= 'Y' INNER JOIN JOB_REG C ON B.MAP_KEY \= C.JOB_ID INNER JOIN JOB_PARAM D ON C.JOB_ID \= D.JOB_ID AND D.PARAM_KEY \= 'APPLY_TYPE' AND D.PARAM_VAL \= 'IFRS' WHERE 1 \= 1 AND MAP_DEPID \= $$SysDep
Fn05A002_1=SELECT ROW_NUMBER() OVER (ORDER BY EVA_CDE ASC) AS RowNum, * FROM (SELECT 'ALL' AS 'EVA_CDE', 'ALL' AS 'EVA_DESC' UNION ALL SELECT EVA_CDE AS 'EVA_CDE', EVA_CDE+'_'+EVA_DESC AS 'EVA_DESC' FROM JH_EVA_MASTER GROUP BY EVA_CDE, EVA_DESC) A
Fn05A002_2=SELECT ROW_NUMBER() OVER (ORDER BY RN ASC) AS RowNum, BRNO, BRNAME FROM ( SELECT '0' AS RN, 'ALL' AS 'BRNO', 'ALL' AS 'BRNAME' UNION ALL SELECT ROW_NUMBER() OVER (ORDER BY CAST (BRNO AS INT) ASC) AS RN, CAST (BRNO AS VARCHAR) AS 'BRNO', CAST (BRNO AS VARCHAR)+'_'+BRNAME AS 'BRNAME' FROM JH_REF_BRANCH ) A
Fn05A002_3=SELECT ROW_NUMBER() OVER (ORDER BY EVA_CDE) AS RowNum, A.EVA_CDE, A.EVA_DESC, A.UNION_ACC_CDE, A.UNION_ACC_DESC, A.BD_ACC_CDE, A.PROD_CDE, A.PROD_CLASS_DESC, A.CLASS_NODE FROM (SELECT EVA_CDE, EVA_DESC, BRNO, BRNAME, UNION_ACC_CDE, UNION_ACC_DESC, BD_ACC_CDE, PROD_CDE, PROD_CLASS_DESC, CLASS_NODE FROM JHVW_EVA_BRN_LOSS WHERE 1 \= 1 AND (EVA_CDE \= $$cmp01 OR 'ALL' \= $$cmp01) AND (CAST (BRNO AS VARCHAR) \= $$cmp02 OR 'ALL' \= $$cmp02)) A GROUP BY A.EVA_CDE, A.EVA_DESC, A.UNION_ACC_CDE, A.UNION_ACC_DESC, A.BD_ACC_CDE, A.PROD_CDE, A.PROD_CLASS_DESC, A.CLASS_NODE
Fn05A002_4=SELECT ROW_NUMBER() OVER (ORDER BY CAST(BRNO AS INT) ASC) AS RowNum, BRNO, BRNAME, LEDGER_NT_AMT, S1_LEDGER_NT_AMT, S2_LEDGER_NT_AMT, S3_LEDGER_NT_AMT, S1_LOSS_RATE, S2_LOSS_RATE, S3_LOSS_RATE, S1_LOSS_NT_AMT, S2_LOSS_NT_AMT, S3_LOSS_NT_AMT FROM JHVW_EVA_BRN_LOSS WHERE 1 \= 1 AND EVA_CDE \= $$cmp01 AND (CAST (BRNO AS VARCHAR) \= $$cmp02 OR 'ALL' \= $$cmp02)
Fn05A002_5=SELECT ROW_NUMBER() OVER (ORDER BY A.EVA_CDE ASC) AS RowNum, A.EVA_CDE, A.EVA_DESC, B.ACC_SUB_CDE, B.ACC_SUB_DESC FROM JH_EVA_MASTER A INNER JOIN JH_EVA_DETAIL B ON A.EVA_CDE\=B.EVA_CDE WHERE 1\=1 AND A.EVA_CDE \= $$cmp01
Fn05A003_1=SELECT ROW_NUMBER() OVER (ORDER BY PK_SYS DESC) AS RowNum, CAL_ALIAS, PK_SYS FROM B_SYS_CONFIG
Fn05A003_2=SELECT ROW_NUMBER() OVER (ORDER BY SUBSTRING(JOB_NAME,1,CHARINDEX('_', JOB_NAME)) ASC) AS RowNum, B.MAP_DEPID, C.* FROM JH_REF_DEP_MAPDATA_MASTER A INNER JOIN  JH_REF_DEP_MAPDATA_DETAIL B ON A.MAPDATA_TYPE \= B.MAPDATA_TYPE AND A.MAPDATA_TYPE \= 'REPORT' AND B.OWN_FLAG \= 'Y' INNER JOIN JOB_REG C ON B.MAP_KEY \= C.JOB_ID INNER JOIN JOB_PARAM D ON C.JOB_ID \= D.JOB_ID AND D.PARAM_KEY \= 'APPLY_TYPE' AND D.PARAM_VAL \= 'RP34' WHERE 1 \= 1 AND MAP_DEPID \= $$SysDep
Fn05A007_1=SELECT ROW_NUMBER() OVER (ORDER BY RN ASC) AS RowNum, * FROM (SELECT '0' AS 'RN', 'ALL' AS 'BRNO', 'ALL' AS 'BRNAME' UNION SELECT ROW_NUMBER() OVER (ORDER BY BRNO ASC) AS 'RN', CONVERT(VARCHAR, BRNO) AS 'BRNO', BRNAME FROM JH_REF_BRANCH)AS A
Fn05A007_2=SELECT ROW_NUMBER() OVER (ORDER BY RN ASC) AS RowNum, * FROM (SELECT '0' AS 'RN', 'ALL' AS MASTER_RULE_CDE, 'ALL' AS MASTERRULE_DESC UNION SELECT ROW_NUMBER() OVER (ORDER BY PK_EVENTRULE_MASTER ASC) AS 'RN', MASTER_RULE_CDE, MASTER_RULE_CDE+MASTERRULE_DESC AS 'MASTERRULE_DESC' FROM JH_EVENTRULE_MASTER WHERE NOW_FLAG \= 'Y') A
Fn05A007_3=SELECT 100 AS 'SHOW_COUNT','100筆' AS 'SHOW_DESC' UNION SELECT 500 AS 'SHOW_COUNT','500筆' AS 'SHOW_DESC' UNION SELECT 1000 AS 'SHOW_COUNT','1000筆' AS 'SHOW_DESC' UNION SELECT 3000 AS 'SHOW_COUNT','3000筆' AS 'SHOW_DESC' UNION SELECT 5000 AS 'SHOW_COUNT','5000筆' AS 'SHOW_DESC'
Fn06A004_2=insert_FUNCTIONS
Fn06A004_3=update_FUNCTIONS
Fn06A004_4=delete_del_FUNCTIONS
Fn06B001_2=SELECT ROW_NUMBER() OVER ( ORDER BY DEPID ASC ) AS RowNum ,DEPID, DEPID + '  ' + DEPARTNAME AS DEPARTNAME FROM DEPARTMENT WHERE 1\=1
Fn06B001_4=insert_USERS
Fn06B001_5=update_USERS
Fn06B001_6=delete_del_USERS
Fn06B001_DS_CUD=BEGIN TRY\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tINSERT INTO USERS (\n\t\tDATA_STATUS\n\t\t,COMPANY_ID\n\t\t,USERID\n\t\t,USERNAME\n\t\t,[PASSWORD]\n\t\t,COMPANY\n\t\t,DEPID\n\t\t,EMAIL\n\t\t,TEL1\n\t\t,TEL2\n\t\t,ISLOCK\n\t\t,wrong_times\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t)\n\tVALUES (\n\t\t'$$DATA_STATUS$$'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'$$USERID$$'\n\t\t,N'$$USERNAME$$'\n\t\t,'$$PASSWORD$$'\n\t\t,'$$COMPANY$$'\n\t\t,'$$DEPID$$'\n\t\t,'$$EMAIL$$'\n\t\t,'$$TEL1$$'\n\t\t,'$$TEL2$$'\n\t\t,'$$ISLOCK$$'\n\t\t,'$$wrong_times$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$COMPANY_ID$$'\n\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t);\n\n\t\tINSERT INTO DATA_CHANGE_LOG\n            (FUNC_ID, \n             PROC_TYPE, \n             USER_ID, \n             DATA_NO, \n             EVENT_DT, \n             MEMO, \n\t\t\t ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             SessionID, \n             ProcPK, \n             PROC_TARGET\n            )\n            VALUES\n            ('${PARAM_FUNC_ID}', \n             'insert', \n             '${PARAM_SOURCE_COMING}', \n             IDENT_CURRENT('USERS') ,\n\n             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '$$MEMO$$', \n\t\t\t '${PARAM_SOURCE_COMING}', \n             '${PARAM_COMPANY}', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '${PARAM_SESSION_ID}', \n             '${LOGPK}', \n             'USERS'\n\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            );\n\n\t\t\t/* 1.4 Action Return */\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,'$$USERID$$'\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\nEND\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\tUPDATE USERS\n\t\tSET USERNAME \= N'$$USERNAME$$'\n\t\t\t,DEPID \= '$$DEPID$$'\n\t\t\t,TEL1 \= '$$TEL1$$'\n\t\t\t,TEL2 \= '$$TEL2$$'\n\t\t\t,ISLOCK \= '$$ISLOCK$$'\n\t\t\t,EMAIL \= '$$EMAIL$$'\n\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\tWHERE 1 \= 1\n\t\t\tAND USERID \= '$$USERID$$';\n\n\t\tINSERT INTO DATA_CHANGE_LOG\n            (FUNC_ID, \n             PROC_TYPE, \n             USER_ID, \n             DATA_NO, \n             EVENT_DT, \n             MEMO, \n\t\t\t ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             SessionID, \n             ProcPK, \n             PROC_TARGET\n            )\n            VALUES\n            ('${PARAM_FUNC_ID}', \n             'update', \n             '${PARAM_SOURCE_COMING}', \n             '$$USERID$$',\n\n             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '$$MEMO$$', \n\t\t\t '${PARAM_SOURCE_COMING}', \n             '${PARAM_COMPANY}', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '${PARAM_SESSION_ID}', \n             '${LOGPK}', \n             'USERS'\n\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            );\n\n\t\t\t/* 1.4 Action Return */\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,'$$USERID$$'\n\t\t\t,'U'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN\n\t\t\tDELETE USERS\n\t\t\tWHERE USERID \= '$$USERID$$';\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG\n            (FUNC_ID, \n             PROC_TYPE, \n             USER_ID, \n             DATA_NO, \n             EVENT_DT, \n             MEMO, \n\t\t\t ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             SessionID, \n             ProcPK, \n             PROC_TARGET\n            )\n            VALUES\n            ('${PARAM_FUNC_ID}', \n             'update', \n             '${PARAM_SOURCE_COMING}', \n             '$$USERID$$',\n\n             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '$$MEMO$$', \n\t\t\t '${PARAM_SOURCE_COMING}', \n             '${PARAM_COMPANY}', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '${PARAM_SESSION_ID}', \n             '${LOGPK}', \n             'USERS'\n\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            );\n\n\t\t\t/* 1.4 Action Return */\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,'$$USERID$$'\n\t\t\t,'D'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\n\t\tEND\n\n\t\tSELECT @RETURN_CODE \= RETURN_CODE\n\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\tFROM MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\tFOR JSON AUTO\n\t\t\t)\n\tFROM MEM_API_RESULT\n\tWHERE hashValues \= @FROM_OUTSIDE\nEND TRY\n\nBEGIN CATCH\n\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t,'$$USERID$$' AS DATA_UNIQUE_KEY\n\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t) AS A /* WITH (ROWLOCK) */\n\t\t\tFOR JSON AUTO\n\t\t\t)\nEND CATCH
Fn06B002_2=insert_GROUPS
Fn06B002_3=update_GROUPS
Fn06B002_4=delete_del_GROUPS
Fn06B003_4=insert_USERGROUP
Fn06B003_5=update_USERGROUP
Fn06B003_6=delete_del_USERGROUP
Fn06B006_2=insert_JH_SYS_AGENT
Fn06B006_3=update_JH_SYS_AGENT
Fn06B006_4=delete_del_JH_SYS_AGENT
Fn06C001_2=insert_DEPARTMENT
Fn06C001_3=update_DEPARTMENT
Fn06C001_4=delete_del_DEPARTMENT
Fn06D001_10=update_JOB_PARAM
Fn06D001_11=delete_del_JOB_PARAM
Fn06D001_12=insert_JOB_FOLDER_DEFINE
Fn06D001_13=update_JOB_FOLDER_DEFINE
Fn06D001_14=delete_del_JOB_FOLDER_DEFINE
Fn06D001_15=update_JOB_REG^update_JOB_PDI_INFO^insert_JOB_PDI_INFO^insert_JOB_FOLDER_DEFINE
Fn06D001_16=update_JOB_REG^update_JOB_PDI_INFO
Fn06D001_3=insert_JOB_REG
Fn06D001_4=update_JOB_REG
Fn06D001_5=delete_del_JOB_REG
Fn06D001_9=insert_JOB_PARAM
Fn06E001_10=flow_
Fn06E001_3=insert_JOB_FLOW_MASTER
Fn06E001_4=update_JOB_FLOW_MASTER
Fn06E001_5=delete_del_JOB_FLOW_MASTER
Fn06E001_7=insert_JOB_FLOW
Fn06E001_8=update_JOB_FLOW
Fn06E001_9=delete_del_JOB_FLOW
Fn06F001_10=delete_del_SCHDL_FLOW
Fn06F001_5=insert_SCHDL_MASTER
Fn06F001_6=update_SCHDL_MASTER
Fn06F001_7=delete_del_SCHDL_MASTER
Fn06F001_8=insert_SCHDL_FLOW
Fn06F001_9=update_SCHDL_FLOW
Fn06G001_1=SELECT ROW_NUMBER() OVER (ORDER BY MAPDATA_TYPE ASC) AS RowNum, MAPDATA_TYPE,MAPDATA_DESC FROM JH_REF_DEP_MAPDATA_MASTER WHERE 1\=1 AND IS_MAINTAINABLE \= 'Y'
Fn06G001_4=update_JH_REF_DEP_MAPDATA_DETAIL
Fn09A001_D1_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'D1_ADD'\nBEGIN\n\tINSERT JH_WS02_SCHDL_API_LIST\n\tWITH (ROWLOCK) (\n\t\t\tSCHDL_PK\n\t\t\t,API_PK\n\t\t\t,API_NAME\n\t\t\t,API_TYPE\n\t\t\t,API_PASS\n\t\t\t,API_STOP\n\t\t\t,API_WS_DF_URL\n\t\t\t,MAIL_T_ID\n\t\t\t,MAIL_NOTIFICATION\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t)\n\tVALUES (\n\t\t'$$PK$$'\n\t\t,CASE '$$API_TYPE$$'\n\t\t\tWHEN 'CODE'\n\t\t\t\tTHEN (\n\t\t\t\t\t\tSELECT PK\n\t\t\t\t\t\tFROM JH_WS02_CODE_LIST\n\t\t\t\t\t\tWHERE CODE_ID \= '$$API_NAME$$'\n\t\t\t\t\t\t)\n\t\t\tWHEN 'FLOW'\n\t\t\t\tTHEN (\n\t\t\t\t\t\tSELECT PK\n\t\t\t\t\t\tFROM JH_WS02_FLOW_LIST\n\t\t\t\t\t\tWHERE FLOW_ID \= '$$API_NAME$$'\n\t\t\t\t\t\t)\n\t\t\tEND\n\t\t,'$$API_NAME$$'\n\t\t,'$$API_TYPE$$'\n\t\t,'N'\n\t\t,'N'\n\t\t,(\n\t\t\tSELECT WEB_SERVICE_IP + '/' + WEB_SERVICE_NAME + '/jh/' AS WS_URL\n\t\t\tFROM JH_WS02_WEBSERVICE_INFO\n\t\t\t)\n\t\t,'$$MAIL_T_ID$$'\n\t\t,'$$MAIL_NOTIFICATION$$'\n\t\t,'root'\n\t\t,'$$COMPANY_ID$$'\n\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t)\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'NONESID'\n\t\t,'26502'\n\t\t,'$$FunctionID$$'\n\t\t,'insert'\n\t\t,'JH_WS02_SCHDL_API_LIST'\n\t\t,'root'\n\t\t,IDENT_CURRENT('JH_WS02_SCHDL_API_LIST')\n\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t,'$$MEMO$$'\n\t\t);\nEND;\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_MOD'\n\tBEGIN\n\t\tSET QUOTED_IDENTIFIER OFF\n\n\t\tEXEC (\n\t\t\t\t"\nSET QUOTED_IDENTIFIER OFF\nDECLARE @PROC_TARGET AS VARCHAR(50);\nDECLARE @WHERE_CONDITION AS VARCHAR(50);\n\nSET @PROC_TARGET \= 'JH_WS02_SCHDL_API_LIST WITH(ROWLOCK)'; \nSET @WHERE_CONDITION \= "" WHERE PK\='$$PK$$'"";\nDECLARE @UPDATE_SQL varchar(MAX),\n        @UPDATE_COUNT_A varchar(MAX) \='',\n        @UPDATE_COUNT_B varchar(MAX) \= \n           ""API_TYPE   \= '$$API_TYPE$$',\n            API_NAME    \= '$$API_NAME$$',\n\t\t\tMAIL_T_ID\t\= '$$MAIL_T_ID$$',\n\t\t\tMAIL_NOTIFICATION \= '$$MAIL_NOTIFICATION$$',\n            LAST_MOD_USER_ID\='root',\n            LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$',\n            LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)"";\nDECLARE @CIndex smallint\nWHILE (@UPDATE_COUNT_B<>'')\n\tBEGIN\n\t\tSET @CIndex\=CHARINDEX(',',@UPDATE_COUNT_B)\n\t\tIF @CIndex\=0 SET @CIndex\=LEN(@UPDATE_COUNT_B)+1\n\nSELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+\n       CASE\n           WHEN CHARINDEX('$$', SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)) <\= 0 THEN SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)+','\n           ELSE ''\n       END   \n\t\t\n\t\tIF @CIndex\=LEN(@UPDATE_COUNT_B)+1 BREAK\n\t\tSET @UPDATE_COUNT_B\=SUBSTRING(@UPDATE_COUNT_B,@CIndex+1,LEN(@UPDATE_COUNT_B)-@CIndex)\n\tEND\n\nIF LEN(@UPDATE_COUNT_A) > 0 \nBEGIN\n    SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) \n    SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION\n    EXEC (@UPDATE_SQL);\nEND  \n SET QUOTED_IDENTIFIER ON   \n "\n\t\t\t\t)\n\n\t\tSET QUOTED_IDENTIFIER ON\n\n\t\tUPDATE JH_WS02_SCHDL_API_LIST\n\t\tSET API_PK \= CASE API_TYPE\n\t\t\t\tWHEN 'CODE'\n\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\tSELECT PK\n\t\t\t\t\t\t\tFROM JH_WS02_CODE_LIST\n\t\t\t\t\t\t\tWHERE CODE_ID \= API_NAME\n\t\t\t\t\t\t\t)\n\t\t\t\tWHEN 'FLOW'\n\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\tSELECT PK\n\t\t\t\t\t\t\tFROM JH_WS02_FLOW_LIST\n\t\t\t\t\t\t\tWHERE FLOW_ID \= API_NAME\n\t\t\t\t\t\t\t)\n\t\t\t\tEND\n\t\t\t,API_WS_DF_URL \= (\n\t\t\t\tSELECT WEB_SERVICE_IP + '/' + WEB_SERVICE_NAME + '/jh/' AS WS_URL\n\t\t\t\tFROM JH_WS02_WEBSERVICE_INFO\n\t\t\t\t)\n\t\tWHERE PK \= '$$PK$$'\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'NONESID'\n\t\t\t,'26502'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'JH_WS02_SCHDL_API_LIST'\n\t\t\t,'root'\n\t\t\t,'$$PK$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND;\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_DEL'\n\t\tBEGIN\n\t\t\tDELETE JH_WS02_SCHDL_API_LIST\n\t\t\tWITH (ROWLOCK)\n\t\t\tWHERE PK \= '$$PK$$'\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\tSessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,FUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,PROC_TARGET\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'$$FunctionID$$'\n\t\t\t\t,'delete'\n\t\t\t\t,'JH_WS02_SCHDL_API_LIST'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'$$PK$$'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND;\n
Fn09A001_DS_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD' BEGIN\nINSERT INTO JH_WS02_SCHDL_LIST WITH(ROWLOCK) (SCHDL_ID,\n                                              SCHDL_STATUS,\n                                              SCHDL_PRINT_LIST_NUM,\n                                              SCHDL_PRINT_LIST_UNIT,\n                                              SCHDL_STATUS_HELP,\n                                              SCHDL_PASS,\n                                              SCHDL_STOP,\n                                              SCHDL_HELP,\n                                              SCHDL_FREQUENCY_DT_UNIT,\n                                              SCHDL_FREQUENCY_DT_VALUE1,\n                                              SCHDL_FREQUENCY_DT_VALUE2,\n                                              SCHDL_FREQUENCY_DT_VALUE3,\n                                              SCHDL_START_DT_YMD,\n                                              SCHDL_START_DT_HMS,\n                                              SCHDL_STOP_RULE_UNIT,\n                                              SCHDL_STOP_RULE_VALUE1,\n                                              SCHDL_STOP_RULE_VALUE2,\n                                              ADD_USER_ID,\n                                              ADD_USER_COMPANY_ID,\n                                              ADD_DT)\nVALUES('$$SCHDL_ID$$', 'NOTSCHEDULE', '1', 'SEASON', '不執行', '$$SCHDL_PASS$$', '$$SCHDL_STOP$$', '$$SCHDL_HELP$$', '$$SCHDL_FREQUENCY_DT_UNIT$$', CASE '$$SCHDL_FREQUENCY_DT_UNIT$$' WHEN 'GAP' THEN '$$GAP_SCHDL_FREQUENCY_DT_VALUE1$$' WHEN 'LASTMONTH' THEN '' WHEN 'ANYDAY' THEN '$$ANYDAY_SCHDL_FREQUENCY_DT_VALUE1$$' END, CASE '$$SCHDL_FREQUENCY_DT_UNIT$$' WHEN 'GAP' THEN '$$GAP_SCHDL_FREQUENCY_DT_VALUE2$$' WHEN 'LASTMONTH' THEN '$$LASTMONTH_SCHDL_FREQUENCY_DT_VALUE2$$' WHEN 'ANYDAY' THEN '$$ANYDAY_SCHDL_FREQUENCY_DT_VALUE2$$' END, CASE '$$SCHDL_FREQUENCY_DT_UNIT$$' WHEN 'GAP' THEN '$$GAP_SCHDL_FREQUENCY_DT_VALUE3$$' WHEN 'LASTMONTH' THEN '$$LASTMONTH_SCHDL_FREQUENCY_DT_VALUE3$$' WHEN 'ANYDAY' THEN '$$ANYDAY_SCHDL_FREQUENCY_DT_VALUE3$$' END, '$$SCHDL_START_DT_YMD$$', CAST('$$SCHDL_START_DT_HMS_1$$\:$$SCHDL_START_DT_HMS_2$$' AS TIME(0)), CASE '$$SCHDL_STOP_TYPE$$' WHEN '0' THEN 'YMDHMS' WHEN '1' THEN 'BOUT' WHEN '2' THEN 'BOUT' END, CASE '$$SCHDL_STOP_TYPE$$' WHEN '0' THEN '$$YMDHMS_SCHDL_STOP_RULE_VALUE1$$' WHEN '1' THEN '$$BOUT_SCHDL_STOP_RULE_VALUE1$$' WHEN '2' THEN '-1' END, CASE '$$SCHDL_STOP_TYPE$$' WHEN '0' THEN CAST('$$YMDHMS_SCHDL_STOP_RULE_VALUE2_1$$\:$$YMDHMS_SCHDL_STOP_RULE_VALUE2_2$$' AS TIME(0)) WHEN '1' THEN NULL WHEN '2' THEN NULL END, 'root', '$$COMPANY_ID$$', CONVERT(VARCHAR,GETDATE(),120)) INSERT INTO DATA_CHANGE_LOG(SessionID, ProcPK, FUNC_ID, PROC_TYPE, PROC_TARGET, USER_ID, DATA_NO, EVENT_DT, MEMO) VALUES ('NONESID', '26502', '$$FunctionID$$', 'insert', 'JH_WS02_SCHDL_LIST', 'root', IDENT_CURRENT('JH_WS02_SCHDL_LIST'), GETDATE(), '$$MEMO$$');\n\nEND;\n\nELSE IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL' BEGIN\nDELETE JH_WS02_SCHDL_LIST WITH(ROWLOCK)\nWHERE PK \= '$$PK$$';\n\n\nDELETE JH_WS02_SCHDL_API_LIST WITH(ROWLOCK)\nWHERE SCHDL_PK \= '$$PK$$';\n\n\nDELETE JH_WS02_SCHDL_RECORD WITH(ROWLOCK)\nWHERE SCHDL_PK \= '$$PK$$';\n\n\nINSERT INTO DATA_CHANGE_LOG(SessionID, ProcPK, FUNC_ID, PROC_TYPE, PROC_TARGET, USER_ID, DATA_NO, EVENT_DT, MEMO)\nVALUES ('NONESID', '26502', '$$FunctionID$$', 'delete', 'JH_WS02_SCHDL_LIST', 'root', '$$PK$$', GETDATE(), '$$MEMO$$');\n\nEND;\n\nELSE IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD' BEGIN\nSET QUOTED_IDENTIFIER OFF EXEC("\nSET QUOTED_IDENTIFIER OFF\nDECLARE @PROC_TARGET AS VARCHAR(50);\nDECLARE @WHERE_CONDITION AS VARCHAR(50);\n\nSET @PROC_TARGET \= 'JH_WS02_SCHDL_LIST  WITH(ROWLOCK)'; \nSET @WHERE_CONDITION \= ""WHERE PK \= '$$PK$$'"";\nDECLARE @UPDATE_SQL varchar(MAX),\n        @UPDATE_COUNT_A varchar(MAX) \='',\n        @UPDATE_COUNT_B varchar(MAX) \= \n           ""SCHDL_HELP \= '$$SCHDL_HELP$$',\n\t\t   SCHDL_PASS \= '$$SCHDL_PASS$$',\n\t\t   SCHDL_STOP \= '$$SCHDL_STOP$$',\n            SCHDL_FREQUENCY_DT_UNIT \= '$$SCHDL_FREQUENCY_DT_UNIT$$',\n            SCHDL_FREQUENCY_DT_VALUE1 \= CASE '$$SCHDL_FREQUENCY_DT_UNIT$$' \n                                            WHEN 'GAP'          THEN '$$GAP_SCHDL_FREQUENCY_DT_VALUE1$$'\n                                            WHEN 'LASTMONTH'    THEN ''\n                                            WHEN 'ANYDAY'       THEN '$$ANYDAY_SCHDL_FREQUENCY_DT_VALUE1$$'\n                                        END,\n             SCHDL_FREQUENCY_DT_VALUE2 \= CASE '$$SCHDL_FREQUENCY_DT_UNIT$$' \n                                            WHEN 'GAP'          THEN '$$GAP_SCHDL_FREQUENCY_DT_VALUE2$$'\n                                            WHEN 'LASTMONTH'    THEN '$$LASTMONTH_SCHDL_FREQUENCY_DT_VALUE2$$'\n                                            WHEN 'ANYDAY'       THEN '$$ANYDAY_SCHDL_FREQUENCY_DT_VALUE2$$'\n                                        END,\n             SCHDL_FREQUENCY_DT_VALUE3 \= CASE '$$SCHDL_FREQUENCY_DT_UNIT$$' \n                                            WHEN 'GAP'          THEN '$$GAP_SCHDL_FREQUENCY_DT_VALUE3$$'\n                                            WHEN 'LASTMONTH'    THEN '$$LASTMONTH_SCHDL_FREQUENCY_DT_VALUE3$$'\n                                            WHEN 'ANYDAY'       THEN '$$ANYDAY_SCHDL_FREQUENCY_DT_VALUE3$$'\n                                        END,\n             SCHDL_START_DT_YMD \= '$$SCHDL_START_DT_YMD$$',\n             SCHDL_START_DT_HMS \=  CAST('$$SCHDL_START_DT_HMS_1$$\:$$SCHDL_START_DT_HMS_2$$' AS TIME(0)),\n             SCHDL_STOP_RULE_UNIT \= CASE '$$SCHDL_STOP_TYPE$$'\n                                            WHEN '0' THEN 'YMDHMS'\n                                            WHEN '1' THEN 'BOUT'\n                                            WHEN '2' THEN 'BOUT'\n                                    END,\n             SCHDL_STOP_RULE_VALUE1 \= CASE '$$SCHDL_STOP_TYPE$$' \n                                            WHEN '0'    THEN '$$YMDHMS_SCHDL_STOP_RULE_VALUE1$$'\n                                            WHEN '1'    THEN '$$BOUT_SCHDL_STOP_RULE_VALUE1$$'\n                                            WHEN '2'    THEN '-1'\n                                        END,\n             SCHDL_STOP_RULE_VALUE2 \= CASE '$$SCHDL_STOP_TYPE$$' \n                                            WHEN '0'       THEN CAST('$$YMDHMS_SCHDL_STOP_RULE_VALUE2_1$$\:$$YMDHMS_SCHDL_STOP_RULE_VALUE2_2$$' AS TIME(0))\n                                            WHEN '1'       THEN NULL\n                                            WHEN '2'       THEN NULL\n                                        END,\n            LAST_MOD_USER_ID\='root',\n            LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$',\n            LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)"";\nDECLARE @CIndex smallint\nWHILE (@UPDATE_COUNT_B<>'')\n\tBEGIN\n\t\tSET @CIndex\=CHARINDEX(',',@UPDATE_COUNT_B)\n\t\tIF @CIndex\=0 SET @CIndex\=LEN(@UPDATE_COUNT_B)+1\n\nSELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+\n       CASE\n           WHEN CHARINDEX('$$', SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)) <\= 0 THEN SUBSTRING(@UPDATE_COUNT_B,1,@CIndex-1)+','\n           ELSE ''\n       END   \n\t\t\n\t\tIF @CIndex\=LEN(@UPDATE_COUNT_B)+1 BREAK\n\t\tSET @UPDATE_COUNT_B\=SUBSTRING(@UPDATE_COUNT_B,@CIndex+1,LEN(@UPDATE_COUNT_B)-@CIndex)\n\tEND\n\nIF LEN(@UPDATE_COUNT_A) > 0 \nBEGIN\n    SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) \n    SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION\n    EXEC (@UPDATE_SQL);\nEND  \n SET QUOTED_IDENTIFIER ON   \n ")\nSET QUOTED_IDENTIFIER ON\nINSERT INTO DATA_CHANGE_LOG(SessionID, ProcPK, FUNC_ID, PROC_TYPE, PROC_TARGET, USER_ID, DATA_NO, EVENT_DT, MEMO)\nVALUES ('NONESID', '26502', '$$FunctionID$$', 'update', 'JH_WS02_SCHDL_LIST', 'root', '$$PK$$', GETDATE(), '$$MEMO$$');\n\nEND;
Fn09X007_CUD=/*  UPDATED AT 20191001 \n\t1. 針對 INT、NUMERIC、DECIMAL 數值欄位修正修改語法\n\t2. 針對日期欄位修正修改語法\n*/\nBEGIN TRY\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n\tBEGIN\n        /* 1.1 功能主要異動 Table */\n        /* 1.1 功能主要異動 MASTER_TABLE_NAME */\n        /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        /*  這一段 update 可用noli的excel 檔中的  INSERT 產生器，來產生對應的欄位及語法  */\n        Insert into JH_WS02_FM_LIST(\n        FM_TEXT\n        ,FM_LEAF\n        ,FM_EXPANDABLE\n        ,FM_SET_POINT\n        ,FM_DEP_CODE\n        ,FM_VALUE1\n        ,FM_VALUE2\n        ,FM_VALUE3\n        ,FM_LV\n        ,FM_REAL_PATH\n        ,FM_HELP\n        ,ADD_USER_ID\n        ,ADD_USER_COMPANY_ID\n        ,ADD_DT\n        ,DATA_STATUS\n        ) \n        VALUES(\n        '$$FM_TEXT$$'\n        ,'$$FM_LEAF$$'\n        ,'$$FM_EXPANDABLE$$'\n        ,'$$FM_SET_POINT$$'\n        ,'$$FM_DEP_CODE$$'\n        ,'$$FM_VALUE1$$'\n        ,'$$FM_VALUE2$$'\n        ,'$$FM_VALUE3$$'\n        ,'$$FM_LV$$'\n        ,'$$FM_REAL_PATH$$'\n        ,'$$FM_HELP$$'\n        ,'${PARAM_SOURCE_COMING}'\n        ,'$$COMPANY_ID$$'\n        ,CONVERT(VARCHAR(20), GETDATE(), 120)\n        ,0\n        );\n        /* 1.2 DATA_CHANGE_LOG */\n        /* 1.2 DATA_CHANGE_LOG for Master Table */\n        INSERT INTO DATA_CHANGE_LOG(\n                FUNC_ID\n               ,PROC_TYPE\n               ,USER_ID\n               ,DATA_NO\n               ,EVENT_DT\n               ,MEMO\n        )\n        VALUES(\n                '$$FunctionID$$'\n               ,'insert'\n               ,'${PARAM_SOURCE_COMING}'\n               ,IDENT_CURRENT('JH_WS02_FM_LIST') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n               ,CONVERT(VARCHAR(20),GETDATE(),120)\n               ,'$$MEMO$$'\n         /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        );\n        /* 1.3 DATA Detail LOG (before modified) */\n        /* 1.3 DATA Detail LOG for Master Table(before modified) */\n        /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n        INSERT INTO LOG_JH_WS02_FM_LIST \n                 ( FUNC_ID \n                  ,CRUD_STATE \n                  ,PK\n                  ,FM_PARENT_PK\n                  ,FM_TEXT\n                  ,FM_LEAF\n                  ,FM_EXPANDABLE\n                  ,FM_SET_POINT\n                  ,FM_DEP_CODE\n                  ,FM_VALUE1\n                  ,FM_VALUE2\n                  ,FM_VALUE3\n                  ,FM_LV\n                  ,FM_REAL_PATH\n                  ,FM_HELP\n                  ,ADD_USER_ID\n                  ,ADD_USER_COMPANY_ID\n                  ,ADD_DT\n                  ,DATA_STATUS\n                  ,DATA_CHANGE_LOG_ID )\n        VALUES(\n                  '$$FunctionID$$'\n                  ,'C'\n                  ,'$$PK$$'\n                  ,'$$FM_PARENT_PK$$'\n                  ,'$$FM_TEXT$$'\n                  ,'$$FM_LEAF$$'\n                  ,'$$FM_EXPANDABLE$$'\n                  ,'$$FM_SET_POINT$$'\n                  ,'$$FM_DEP_CODE$$'\n                  ,'$$FM_VALUE1$$'\n                  ,'$$FM_VALUE2$$'\n                  ,'$$FM_VALUE3$$'\n                  ,'$$FM_LV$$'\n                  ,'$$FM_REAL_PATH$$'\n                  ,'$$FM_HELP$$'\n                  ,'${PARAM_SOURCE_COMING}'\n                  ,'$$COMPANY_ID$$'\n                  ,CONVERT(VARCHAR(20), GETDATE(), 120)\n                  ,'0'\n                  ,IDENT_CURRENT('DATA_CHANGE_LOG'));\n        /* 1.4 Action Return */\n        /* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n           INSERT INTO \#\#TMP_RESULT \n              ( ProcPK\n                ,hashValues\n                ,RETURN_CODE \n                ,RETURN_MSG \n                ,DATA_UNIQUE_KEY \n                ,DATA_ACTION_TYPE \n                ,MEMO)\n           VALUES ( \n                '${LOGPK}' \n                ,@FROM_OUTSIDE\n                ,'0'       \n                ,'SUCCESS'\n                ,'$$PK$$'\n                ,'C' \n                ,'$$MEMO$$');\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN\n            /* 2.1 DATA_CHANGE_LOG */\n            /* 2.1 DATA_CHANGE_LOG */\n            INSERT INTO DATA_CHANGE_LOG(\n                    FUNC_ID\n                   ,PROC_TYPE\n                   ,USER_ID\n                   ,DATA_NO\n                   ,EVENT_DT\n                   ,MEMO\n            )\n            VALUES(\n                    '$$FunctionID$$'\n                   ,'delete'\n                   ,'${PARAM_SOURCE_COMING}'\n                   ,CONVERT(VARCHAR(20),GETDATE(),120)\n                   ,'$$MEMO$$'\n            );\n\n\t\t\tIF EXISTS (\n\t\t\t/* 手動修改 */\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM TESTTABLE\n\t\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$'\n\t\t\t\t\t\tAND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t\t)\n\t\t\t/* 手動修改 - End */\n\t\t\tBEGIN\n            /* 2.2 DATA Detail LOG (before modified) */\n            /* 2.2 DATA Detail LOG (before modified) */\n              /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */ \n            --IF EXISTS (SELECT * FROM JH_WS02_FM_LIST WHERE PK \= '$$PK$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n               INSERT INTO LOG_JH_WS02_FM_LIST\n                    ( FUNC_ID\n                      ,CRUD_STATE\n                      ,PK\n                      ,FM_PARENT_PK\n                      ,FM_TEXT\n                      ,FM_LEAF\n                      ,FM_EXPANDABLE\n                      ,FM_SET_POINT\n                      ,FM_DEP_CODE\n                      ,FM_VALUE1\n                      ,FM_VALUE2\n                      ,FM_VALUE3\n                      ,FM_LV\n                      ,FM_REAL_PATH\n                      ,FM_HELP\n                      ,ADD_USER_ID\n                      ,ADD_USER_COMPANY_ID\n                      ,ADD_DT\n                      ,LAST_MOD_USER_ID\n                      ,LAST_MOD_USER_COMPANY_ID\n                      ,LAST_MOD_DT\n                      ,DEL_USER_ID\n                      ,DEL_USER_COMPANY_ID\n                      ,DEL_DT\n                      ,DATA_STATUS\n                      ,DATA_CHANGE_LOG_ID)\n               SELECT '$$FunctionID$$' AS FUNC_ID\n                      ,'D' AS CRUD_STATE\n                      ,PK\n                      ,FM_PARENT_PK\n                      ,FM_TEXT\n                      ,FM_LEAF\n                      ,FM_EXPANDABLE\n                      ,FM_SET_POINT\n                      ,FM_DEP_CODE\n                      ,FM_VALUE1\n                      ,FM_VALUE2\n                      ,FM_VALUE3\n                      ,FM_LV\n                      ,FM_REAL_PATH\n                      ,FM_HELP\n                      ,ADD_USER_ID\n                      ,ADD_USER_COMPANY_ID\n                      ,ADD_DT\n                      ,LAST_MOD_USER_ID\n                      ,LAST_MOD_USER_COMPANY_ID\n                      ,LAST_MOD_DT\n                      ,DEL_USER_ID\n                      ,DEL_USER_COMPANY_ID\n                      ,DEL_DT\n                      ,DATA_STATUS\n                      ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n                 FROM JH_WS02_FM_LIST \n               WHERE PK \= '$$PK$$'\n            /* 2.3 Action Return */\n            /* 2.3 Action Return */\n               INSERT INTO \#\#TMP_RESULT \n                  ( ProcPK\n                    ,hashValues\n                    ,RETURN_CODE \n                    ,RETURN_MSG \n                    ,DATA_UNIQUE_KEY \n                    ,DATA_ACTION_TYPE \n                    ,MEMO)\n               VALUES ( \n                     '${LOGPK}' \n                    ,@FROM_OUTSIDE\n                    ,'0' \n                    ,'SUCCESS' \n                    ,'$$PK$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n                    ,'D' \n                    ,'$$MEMO$$');\n\t\t\tEND\n\t\t\tELSE\n\t\t\tBEGIN\n                /* 2.4 Action Return */\n                /* 2.4 Action Return */\n                   INSERT INTO \#\#TMP_RESULT \n                      ( ProcPK\n                        ,hashValues\n                        ,RETURN_CODE\n                        ,RETURN_MSG\n                        ,DATA_UNIQUE_KEY\n                        ,DATA_ACTION_TYPE \n                        ,MEMO)\n                   VALUES ( \n                        '${LOGPK}' \n                        ,@FROM_OUTSIDE\n                        ,'-1'\n                        ,'資料正在審核流程中，無法刪除'\n                        ,'$$PK$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n                        ,'D' \n                        ,'$$MEMO$$');\n\t\t\tEND\n\n                /* 2.5 功能主要異動 Table */\n                /* 2.5 功能主要異動 Table */\n                /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n                   DELETE  JH_WS02_FM_LIST\n                   WHERE PK \= '$$PK$$';\n\t\tEND\n\t\tELSE\n\t\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\t\t\tBEGIN\n                /* 3.1 DATA_CHANGE_LOG */\n                /* 3.1 DATA_CHANGE_LOG */\n                INSERT INTO DATA_CHANGE_LOG(\n                        FUNC_ID\n                       ,PROC_TYPE\n                       ,USER_ID\n                       ,DATA_NO\n                       ,EVENT_DT\n                       ,MEMO\n                )\n                VALUES(\n                        '$$FunctionID$$'\n                       ,'update'\n                       ,'${PARAM_SOURCE_COMING}'\n                       ,'$$PK_COLUMN$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n                       ,CONVERT(VARCHAR(20),GETDATE(),120)\n                       ,'$$MEMO$$'\n                       ,'${PARAM_SESSION_ID}'\n                       ,'${LOGPK}'\n                       ,'TESTTABLE' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n                );\n\t\t\t\tIF EXISTS (\n\t\t\t\t/* 手動修改 */\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM TESTTABLE\n\t\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$'\n\t\t\t\t\t\tAND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t\t)\n\t\t\t\t/* 手動修改 - End */\n\t\t\t\tBEGIN\n                /* 3.2 DATA Detail LOG (before modified) */\n                /* 3.2 DATA Detail LOG (before modified) */\n                /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n                --IF EXISTS (SELECT * FROM JH_WS02_FM_LIST WHERE PK \= '$$PK$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n                   INSERT INTO LOG_JH_WS02_FM_LIST\n                        ( FUNC_ID\n                          ,CRUD_STATE\n                          ,PK\n                          ,FM_PARENT_PK\n                          ,FM_TEXT\n                          ,FM_LEAF\n                          ,FM_EXPANDABLE\n                          ,FM_SET_POINT\n                          ,FM_DEP_CODE\n                          ,FM_VALUE1\n                          ,FM_VALUE2\n                          ,FM_VALUE3\n                          ,FM_LV\n                          ,FM_REAL_PATH\n                          ,FM_HELP\n                          ,ADD_USER_ID\n                          ,ADD_USER_COMPANY_ID\n                          ,ADD_DT\n                          ,LAST_MOD_USER_ID\n                          ,LAST_MOD_USER_COMPANY_ID\n                          ,LAST_MOD_DT\n                          ,DEL_USER_ID\n                          ,DEL_USER_COMPANY_ID\n                          ,DEL_DT\n                          ,DATA_STATUS\n                          ,DATA_CHANGE_LOG_ID)\n                   SELECT '$$FunctionID$$' AS FUNC_ID\n                          ,'U' AS CRUD_STATE\n                          ,PK\n                          ,FM_PARENT_PK\n                          ,FM_TEXT\n                          ,FM_LEAF\n                          ,FM_EXPANDABLE\n                          ,FM_SET_POINT\n                          ,FM_DEP_CODE\n                          ,FM_VALUE1\n                          ,FM_VALUE2\n                          ,FM_VALUE3\n                          ,FM_LV\n                          ,FM_REAL_PATH\n                          ,FM_HELP\n                          ,ADD_USER_ID\n                          ,ADD_USER_COMPANY_ID\n                          ,ADD_DT\n                          ,LAST_MOD_USER_ID\n                          ,LAST_MOD_USER_COMPANY_ID\n                          ,LAST_MOD_DT\n                          ,DEL_USER_ID\n                          ,DEL_USER_COMPANY_ID\n                          ,DEL_DT\n                          ,DATA_STATUS\n                          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n                     FROM JH_WS02_FM_LIST \n                   WHERE PK \= '$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n                    /* 3.3 Action Return */\n                    /* 3.3 Action Return */\n                       INSERT INTO \#\#TMP_RESULT \n                           ( ProcPK\n                             ,hashValues\n                             ,RETURN_CODE\n                             ,RETURN_MSG\n                             ,DATA_UNIQUE_KEY\n                             ,DATA_ACTION_TYPE \n                             ,MEMO)\n                       VALUES ( \n                             '${LOGPK}' \n                             ,@FROM_OUTSIDE\n                             ,'0' \n                             ,'SUCCESS'\n                             ,'$$PK$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n                             ,'U' \n                             ,'$$MEMO$$');\n\t\t\t\tEND\n\t\t\t\tELSE\n\t\t\t\tBEGIN\n                /* 3.4 Action Return */\n                /* 3.4 Action Return */\n                   INSERT INTO \#\#TMP_RESULT \n                      ( ProcPK\n                        ,hashValues\n                        ,RETURN_CODE \n                        ,RETURN_MSG \n                        ,DATA_UNIQUE_KEY \n                        ,DATA_ACTION_TYPE \n                        ,MEMO)\n                   VALUES ( \n                        '${LOGPK}' \n                        ,@FROM_OUTSIDE\n                        ,'-1'\n                        ,'資料正在審核流程中，無法修改' \n                        ,'$$PK$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n                        ,'U' \n                        ,'$$MEMO$$');\n\t\t\t\tEND\n\n                    /* 3.5 功能主要異動 Table */\n                    /* 3.5 功能主要異動 Table */\n                    /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n                    UPDATE JH_WS02_FM_LIST \n                        SET FM_PARENT_PK\=(CASE WHEN ISNUMERIC('$$FM_PARENT_PK$$')\=1 THEN (CASE WHEN ISNULL(FM_PARENT_PK,'0')\='$$FM_PARENT_PK$$'  THEN (CASE WHEN '$$FM_PARENT_PK$$'\='0' THEN '0' ELSE FM_PARENT_PK END) ELSE '$$FM_PARENT_PK$$'  END) ELSE FM_PARENT_PK END)\n                        ,FM_TEXT\=(CASE WHEN SUBSTRING('$$FM_TEXT$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN FM_TEXT ELSE SUBSTRING('$$FM_TEXT$$',1,100) END)\n                        ,FM_LEAF\=(CASE WHEN SUBSTRING('$$FM_LEAF$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN FM_LEAF ELSE SUBSTRING('$$FM_LEAF$$',1,10) END)\n                        ,FM_EXPANDABLE\=(CASE WHEN SUBSTRING('$$FM_EXPANDABLE$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN FM_EXPANDABLE ELSE SUBSTRING('$$FM_EXPANDABLE$$',1,10) END)\n                        ,FM_SET_POINT\=(CASE WHEN SUBSTRING('$$FM_SET_POINT$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN FM_SET_POINT ELSE SUBSTRING('$$FM_SET_POINT$$',1,50) END)\n                        ,FM_DEP_CODE\=(CASE WHEN SUBSTRING('$$FM_DEP_CODE$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN FM_DEP_CODE ELSE SUBSTRING('$$FM_DEP_CODE$$',1,100) END)\n                        ,FM_VALUE1\=(CASE WHEN SUBSTRING('$$FM_VALUE1$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN FM_VALUE1 ELSE SUBSTRING('$$FM_VALUE1$$',1,100) END)\n                        ,FM_VALUE2\=(CASE WHEN SUBSTRING('$$FM_VALUE2$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN FM_VALUE2 ELSE SUBSTRING('$$FM_VALUE2$$',1,100) END)\n                        ,FM_VALUE3\=(CASE WHEN SUBSTRING('$$FM_VALUE3$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN FM_VALUE3 ELSE SUBSTRING('$$FM_VALUE3$$',1,100) END)\n                        ,FM_LV\=(CASE WHEN SUBSTRING('$$FM_LV$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN FM_LV ELSE SUBSTRING('$$FM_LV$$',1,100) END)\n                        ,FM_REAL_PATH\=(CASE WHEN SUBSTRING('$$FM_REAL_PATH$$',1,4000)\=SUBSTRING('\#NO_DATA\#',1,4000) THEN FM_REAL_PATH ELSE SUBSTRING('$$FM_REAL_PATH$$',1,4000) END)\n                        ,FM_HELP\=(CASE WHEN SUBSTRING('$$FM_HELP$$',1,4000)\=SUBSTRING('\#NO_DATA\#',1,4000) THEN FM_HELP ELSE SUBSTRING('$$FM_HELP$$',1,4000) END)\n                        ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n                        ,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n                        ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n                        ,DATA_STATUS\='0'\n                    WHERE PK\='$$PK$$'  -----------------;\n\t\tEND\n\t\t\t\n\tSELECT @RETURN_CODE \= RETURN_CODE ,\n\t\t   @RETURN_MSG \= RETURN_MSG ,\n\t\t   @RETURN_TEST \=\n\t  (SELECT ProcPK ,\n\t\t\t  hashValues ,\n\t\t\t  RETURN_CODE ,\n\t\t\t  RETURN_MSG ,\n\t\t\t  DATA_UNIQUE_KEY ,\n\t\t\t  DATA_ACTION_TYPE ,\n\t\t\t  MEMO\n\t   FROM \#\#TMP_RESULT\n\t   WHERE hashValues \= @FROM_OUTSIDE\n\t\t FOR JSON AUTO )\n\tFROM \#\#TMP_RESULT\n\tWHERE hashValues \= @FROM_OUTSIDE\n\t\nEND TRY \n\nBEGIN CATCH\n\n\tSELECT @RETURN_CODE \= ERROR_NUMBER() ,\n\t\t   @RETURN_MSG \= ERROR_MESSAGE() ,\n\t\t   @RETURN_TEST \=\n\t  (SELECT *\n\t   FROM\n\t\t (SELECT '${LOGPK}' AS ProcPK ,\n\t\t\t\t @FROM_OUTSIDE AS hashValues ,\n\t\t\t\t ERROR_NUMBER() AS RETURN_CODE ,\n\t\t\t\t ERROR_MESSAGE() AS RETURN_MSG ,\n\t\t\t\t '$$COLUMN1$$' AS DATA_UNIQUE_KEY ,\n\t\t\t\t '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n\t\t\t\t '$$MEMO$$' AS MEMO) AS A\n\t   FOR JSON AUTO)\nEND CATCH
FUNCTION_AUTHOR=SELECT ROW_NUMBER() OVER (ORDER BY USER_ID ASC) AS RowNum, M.GROUPID,M.[USER_ID], '{'+LEFT(M.GROUPAUTH,LEN(M.GROUPAUTH)-1) +'}' AS GROUP_AUTH  FROM   ( SELECT $$SysGroup AS [GROUPID] , $$SysUser AS [USER_ID] ,( SELECT  CASE WHEN [qry]\=1 THEN '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_qry_disabled"\:false,' else '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_qry_disabled"\:true,' END  +CASE WHEN [prn]\=1 THEN '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_prn_disabled"\:false,' ELSE '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_prn_disabled"\:true,' end  +CASE WHEN [exp]\=1 THEN '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_exp_disabled"\:false,' ELSE '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_exp_disabled"\:true,' END  +CASE WHEN [add]\=1 THEN '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_add_disabled"\:false,' ELSE '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_add_disabled"\:true,' End  +CASE WHEN [del]\=1 THEN '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_del_disabled"\:false,' ELSE '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_del_disabled"\:true,' END  +CASE WHEN [mod]\=1 THEN '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_mod_disabled"\:false,' ELSE '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_mod_disabled"\:true,' END  +CASE WHEN [aut]\=1 THEN '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_aut_disabled"\:false,' ELSE '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_aut_disabled"\:true,' END  +CASE WHEN [apr]\=1 THEN '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_apr_disabled"\:false,' ELSE '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_apr_disabled"\:true,' END  +CASE WHEN [rej]\=1 THEN '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_rej_disabled"\:false' ELSE '"'+(SUBSTRING(FUNC_ID, 1, 4)+UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID))))+'_rej_disabled"\:true' END   +','    FROM  (SELECT    A.[GROUPID],B.[USER_ID], A.[FUNC_ID],   ISNULL(B.U_QRY ,A.QRY) AS QRY ,ISNULL(B.U_PRN ,A.PRN) AS PRN ,ISNULL(B.U_EXP ,A.[EXP]) AS [EXP] ,ISNULL(B.U_ADD ,A.[ADD]) AS [ADD],   ISNULL(B.U_DEL ,A.[DEL]) AS [DEL] ,ISNULL(B.U_MOD ,A.[MOD]) AS [MOD] ,ISNULL(B.U_AUT ,A.[AUT]) AS [AUT] ,ISNULL(B.U_APR ,A.[APR]) AS [APR],ISNULL(B.U_REJ ,A.[REJ]) AS [REJ]  FROM GROUP_FUNC_AUTH A LEFT OUTER JOIN   (SELECT  GROUPID,USER_ID,FUNC_ID,COMPANY_ID,[QRY] AS U_QRY ,[PRN] AS U_PRN ,[EXP] AS U_EXP ,[ADD] AS U_ADD,[DEL] AS U_DEL,[MOD] AS U_MOD,[AUT] AS U_AUT,[APR] AS U_APR,[REJ] AS U_REJ      FROM USER_FUNC_AUTH    WHERE USER_ID \= $$SysUser      AND GROUPID \= $$SysGroup ) B   ON (A.GROUPID\=B.GROUPID  AND A.FUNC_ID\=B.FUNC_ID AND A.COMPANY_ID \= B.COMPANY_ID) WHERE A.GROUPID \=$$SysGroup AND (A.FUNC_ID LIKE (%$$cmp01%) OR 'ALL' \= $$cmp01)  ) N  FOR XML PATH ('') ) GROUPAUTH   ) M
GEN_MAIL_OPENACC=BEGIN\n\tDECLARE @RETURN_CODE INT\n\t\t,@RETURN_MSG VARCHAR(1000)\n\t\t,@SP_RETURN_CODE INT\n\t\t,@SP_RETURN_MSG NVARCHAR(1000) /**/\n\n\tBEGIN TRANSACTION TEST /**/\n\n\tEXEC [ESSP_EXEC_SP_LOG] @RETURN_CODE OUTPUT\n\t\t,@RETURN_MSG OUTPUT\n\t\t,'I'\n\t\t,'$$EXEC_API_SPNAME$$'\n\t\t,NULL\n\t\t,NULL\n\t\t,NULL\n\t\t,NULL;\n\n\t/**/\n\tCOMMIT TRANSACTION TEST /**/\n\n\tSET QUOTED_IDENTIFIER OFF\n\n\tEXEC [ESSP_GEN_NOTICE_MAIL] @MAIL_TYPE \= N'$$MAIL_TYPE$$'\n\t\t,@SUB_TYPE \= N'$$SUB_TYPE$$'\n\t\t,@GROUPID \= N'$$GROUPID$$'\n\t\t,@CC_GROUPID \= N'$$CC_GROUPID$$'\n\t\t,@RETURN_CODE \= @RETURN_CODE OUTPUT\n\t\t,@RETURN_MSG \= @RETURN_MSG OUTPUT\n\n\tSET QUOTED_IDENTIFIER ON\n\n\tBEGIN TRANSACTION TEST2 /**/\n\n\tEXEC [ESSP_EXEC_SP_LOG] @SP_RETURN_CODE OUTPUT\n\t\t,@SP_RETURN_MSG OUTPUT\n\t\t,'U'\n\t\t,'$$EXEC_API_SPNAME$$'\n\t\t,@RETURN_CODE\n\t\t,@RETURN_MSG\n\t\t,NULL\n\t\t,NULL;\n\n\t/**/\n\tCOMMIT TRANSACTION TEST2 /**/\n\n\tIF (@RETURN_CODE <> 0)\n\tBEGIN\n\t\tRAISERROR (\n\t\t\t\t@RETURN_MSG\n\t\t\t\t,16\n\t\t\t\t,1\n\t\t\t\t)\n\tEND\nEND\n
GENERATE_MAIL=SET QUOTED_IDENTIFIER OFF\n\nEXEC (" DECLARE @RETURN_CODE INT, @RETURN_MSG VARCHAR(1000) EXEC [JHSP_GEN_NOTICE_MAIL] @MAIL_TYPE \= N'$$MAIL_TYPE$$', @SUB_TYPE \= N'$$SUB_TYPE$$', @LOGIN_ID \= N'$$LOGIN_ID$$', @DATADT \= N'$$DATADT$$', @AIMSID \= N'$$AIMSID$$', @GROUPID \= N'$$GROUPID$$', @CC_GROUPID \= N'$$CC_GROUPID$$', @RETURN_CODE \= @RETURN_CODE OUTPUT, @RETURN_MSG \= @RETURN_MSG OUTPUT;")\n\nSET QUOTED_IDENTIFIER ON\n
GET_F2T_CHK_FILE_LIST=SELECT *,\nTABLE_NAME AS 'IN_TABLE_NAME',\nCODE_ID AS 'IN_ACTION_CODE',\nFILE_NAME AS 'IN_FILE_NAME'\n ,(\n SELECT COUNT(*) FROM JH_WS02_CODE_LIST AS A \n LEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS AS B ON A.PK \= B.CODE_ID_PK\n LEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS AS C ON A.PK \= C.CODE_ID_PK\n LEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS AS D ON A.PK \= D.CODE_ID_PK\n LEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS AS E ON A.PK \= E.CODE_ID_PK\n LEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS AS F ON A.PK \= F.CODE_ID_PK\n LEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS AS G ON A.PK \= G.CODE_ID_PK\n WHERE A.CODE_ID LIKE 'F2T_TMP%' AND B.INPUT_FIELD \= 'PARAM_FILE_NAME' \n AND C.INPUT_FIELD \= 'PARAM_TABLE_NAME' AND D.INPUT_FIELD \= 'PM_DEPT_LIST' \n AND CHARINDEX('${PARAM_DIVISION_NAME}',D.INPUT_DEFAULT_VAL) <> 0 \n AND E.INPUT_FIELD \= 'PARAM_FILE_NAME'\n AND F.INPUT_FIELD \= 'API_FILE_PATH'\n AND G.INPUT_FIELD \= 'PM_VIEW_NAME'\n\n ) AS totalProperty\n FROM (\n SELECT ROW_NUMBER() OVER (ORDER BY A.CODE_ID) AS RowNum,\n A.CODE_ID,A.API_DESC,B.INPUT_DEFAULT_VAL AS 'FILE_NAME',C.INPUT_DEFAULT_VAL AS 'TABLE_NAME',\n E.INPUT_DEFAULT_VAL AS 'FILE_LIST',F.INPUT_DEFAULT_VAL AS 'FILE_FOLDER',G.INPUT_DEFAULT_VAL AS 'VIEW_NAME'\n FROM JH_WS02_CODE_LIST AS A \n LEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS AS B ON A.PK \= B.CODE_ID_PK\n LEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS AS C ON A.PK \= C.CODE_ID_PK\n LEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS AS D ON A.PK \= D.CODE_ID_PK\n LEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS AS E ON A.PK \= E.CODE_ID_PK\n LEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS AS F ON A.PK \= F.CODE_ID_PK\n LEFT JOIN JH_WS02_CODE_RANGE_ANALYSIS AS G ON A.PK \= G.CODE_ID_PK\n WHERE A.CODE_ID LIKE 'F2T_TMP%' AND B.INPUT_FIELD \= 'PARAM_FILE_NAME' \n AND C.INPUT_FIELD \= 'PARAM_TABLE_NAME' AND D.INPUT_FIELD \= 'PM_DEPT_LIST' \n AND CHARINDEX('${PARAM_DIVISION_NAME}',D.INPUT_DEFAULT_VAL) <> 0 \n AND E.INPUT_FIELD \= 'PARAM_FILE_NAME'\n AND F.INPUT_FIELD \= 'API_FILE_PATH'\n AND G.INPUT_FIELD \= 'PM_VIEW_NAME'\n\n ) AS new1\n WHERE RowNum > $$start$$\nAND RowNum <\= ($$start$$ + $$limit$$);\n
GET_F2T_CHK_FILE_RESULT=Funs/GetFileChkResult/Entrances.kjb
GET_IS00PF_STATE=Funs/GetIS00PFResult/Entrances.kjb
HYAKKI_NOCTURNAL=Funs/FlowForAPI/Entrances.kjb
import_test_0618=import_test_0618\nimport_test_0618\nimport_test_0618\n
import_test_0618_1=import_test_0618_1\nimport_test_0618_1\nimport_test_0618_1\n
import_test_0618_sys=import_test_0618_sys\nimport_test_0618_sys\nimport_test_0618_sys
JHSP_BATCHGROUP_SYS_OPENACC=/PLUGINS/API_SP/API_SP.kjb
JHSP_DATA_BACKUP=/PLUGINS/API_SP/API_SP.kjb
JHSP_DEL_SYSCONFIG=/PLUGINS/API_SP/API_SP.kjb
JHSP_GUI_CLOSEACC_CHECK=/PLUGINS/API_SP/API_SP.kjb
JHSP_GUI_OPENACC_ALIAS_CHECK=/PLUGINS/API_SP/API_SP.kjb
JHSP_GUI_OPENACC_CHECK=/PLUGINS/API_SP/API_SP.kjb
JHSP_GUI_OPENACC_DELETE=/PLUGINS/API_SP/API_SP.kjb
JHSP_GUI_OPENACC_UPDATE=/PLUGINS/API_SP/API_SP.kjb
JHSP_GUI_REOPENACC_CHECK=PLUGINS/API_SP/API_SP.kjb
JHSP_INS_HIST_LOG=/PLUGINS/API_SP/API_SP.kjb
JHSP_UPD_HIST_LOG=/PLUGINS/API_SP/API_SP.kjb
JHSP_UPD_SYSPARM=/PLUGINS/API_SP/API_SP.kjb
JHSP_UPD_WORKINGFLAG=/PLUGINS/API_SP/API_SP.kjb
JSON_T_001={\n  "action_code"\: "GOOGLE_MAP_API",\n  "RETURN_CODE"\: "0",\n  "RETURN_MSG"\: "執行成功",\n  "totalProperty"\: 1,\n  "success"\: true,\n  "Row"\: [{\n    "FFF"\: "DDDD",\n    "TTT"\: "EEE",\n    "A"\: [\n      {\n        "error_message"\: "",\n        "formatted_address"\: "103台灣台北市大同區承德路一段35號",\n        "lng"\: "121.5172929",\n        "lat"\: "25.0511146",\n        "status"\: "OK"\n      },\n      {\n        "error_message"\: "",\n        "formatted_address"\: "104台灣台北市大同區承德路一段35號",\n        "lng"\: "121.5172929",\n        "lat"\: "25.0511146",\n        "status"\: "OK"\n      }\n    ],\n    "B"\: [\n      {\n        "error_message"\: "",\n        "formatted_address"\: "106台灣台北市大同區承德路一段35號",\n        "lng"\: "121.5172929",\n        "lat"\: "25.0511146",\n        "status"\: "OK"\n      },\n      {\n        "error_message"\: "",\n        "formatted_address"\: "105台灣台北市大同區承德路一段35號",\n        "lng"\: "121.5172929",\n        "lat"\: "25.0511146",\n        "status"\: "OK"\n      }\n    ]\n  },\n  {\n    "FFF"\: "BBB",\n    "TTT"\: "NNNNNNN",\n    "A"\: [\n      {\n        "error_message"\: "",\n        "formatted_address"\: "103台灣台北市大同區承德路一段35號",\n        "lng"\: "121.5172929",\n        "lat"\: "25.0511146",\n        "status"\: "OK"\n      },\n      {\n        "error_message"\: "",\n        "formatted_address"\: "104台灣台北市大同區承德路一段35號",\n        "lng"\: "121.5172929",\n        "lat"\: "25.0511146",\n        "status"\: "OK"\n      }\n    ],\n    "B"\: [\n      {\n        "error_message"\: "",\n        "formatted_address"\: "106台灣台北市大同區承德路一段35號",\n        "lng"\: "121.5172929",\n        "lat"\: "25.0511146",\n        "status"\: "OK"\n      },\n      {\n        "error_message"\: "",\n        "formatted_address"\: "105台灣台北市大同區承德路一段35號",\n        "lng"\: "121.5172929",\n        "lat"\: "25.0511146",\n        "status"\: "OK"\n      }\n    ]\n  }]\n}
LIST=SELECT ROW_NUMBER() OVER (ORDER BY PK ASC) AS ROWNUM, CODE_ID, JNDI_USE, SQL_PROP_KEY, INPUT_FIELD, CODE_HELP, EX_URL, WEB_SERVICE_CODE FROM JH_WS02_CODE_LIST
LOGIN_GROUP=SELECT A.GROUPID,A.GROUPNAME,B.MAIN_SET FROM VW_VERIFY_USERS AS A INNER JOIN USERGROUP B ON A.USERID \= B.USERID and A.GROUPID \= B.GROUPID WHERE A.USERID \= $$cmp01
LOV_REPORT=PLUGINS/LOV/LOV_MAIN.kjb
MANUAL_UPLOAD_INV_SRC_ACNOCTL=PLUGINS/MANUAL_UPLOAD/INV_SRC_ACNOCTL/INV_SRC_ACNOCTL_MAIN.kjb
MANUAL_UPLOAD_INV_SRC_COSTRATE=PLUGINS/MANUAL_UPLOAD/INV_SRC_COSTRATE/INV_SRC_COSTRATE_MAIN.kjb
MANUAL_UPLOAD_INV_SRC_FUND=PLUGINS/MANUAL_UPLOAD/INV_SRC_FUND/INV_SRC_FUND_MAIN.kjb
MANUAL_UPLOAD_INV_SRC_STKSAVE=PLUGINS/MANUAL_UPLOAD/INV_SRC_STKSAVE/INV_SRC_STKSAVE_MAIN.kjb
MENU_TREE=SELECT ROW_NUMBER() OVER ( ORDER BY SEQ_ID, FUNC_ID ASC ) AS RowNum, * FROM ( SELECT FUNC_ID, PARENT_ID AS PARENT_FUNC_ID , COMPANY_ID, SEQ_ID, FUNC_NAME, DESC_FUNC_NAME, FUNC_EN_NAME, IS_LEAF FROM FUNCTIONS WHERE FUNC_ID LIKE (%$$cmp01%) AND IS_LEAF \= 'N' AND IS_DISABLED \= 'N' AND PARENT_ID IS NOT NULL UNION SELECT A.* FROM ( SELECT FUNC_ID, PARENT_ID AS PARENT_FUNC_ID , COMPANY_ID, SEQ_ID, FUNC_NAME, DESC_FUNC_NAME, FUNC_EN_NAME, IS_LEAF FROM FUNCTIONS WHERE FUNC_ID LIKE (%$$cmp01%) AND LEN(FUNC_ID) <> 4 AND IS_DISABLED \= 'N' AND IS_LEAF \= 'Y' AND FUNC_ID IS NOT NULL ) A LEFT OUTER JOIN ( SELECT GROUPID, FUNC_ID, QRY FROM ( SELECT A.GROUPID, A.FUNC_ID, ( CASE WHEN B.QRY IS NULL THEN A.QRY ELSE B.QRY END) AS QRY, A.QRY AS GROUP_QRY, B.USER_ID, B.GROUPID AS USER_GROUP, B.FUNC_ID AS USER_FUNC_ID, B.QRY AS USER_QRY FROM GROUP_FUNC_AUTH A LEFT OUTER JOIN USER_FUNC_AUTH B ON A.GROUPID \= B.GROUPID AND A.FUNC_ID \= B.FUNC_ID AND B.USER_ID \= $$SysUser ) FN_AUTH WHERE 1 \= 1 AND QRY \= 1 AND GROUPID \= $$SysGroup ) B ON A.FUNC_ID \= B.FUNC_ID WHERE B.GROUPID \= $$SysGroup ) FN
MiniService_Log=SysAPI/miniservice/main_log.kjb
MiniServiceProLog=SELECT '$$PARAM_RECORD$$' AS 'RECORD'
Model_COLUMN_DEFINE=/**\n * Last SVN Version\t\t\:    v2.2\n * Last Updated by\t\t\:    Steve\n * Last Updated Date\t\:    20200513\n * 修正：\n *         1. 不可取出下列名稱，會跟 MiddleWare 衝突\n *\t\t\t\tRETURN_CODE\n */\nSELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT DISTINCT META.COLUMN_NAME AS [name]\n\t\t\t\t,(\n\t\t\t\t\tCASE \n\t\t\t\t\t\tWHEN META.DATA_TYPE \= 'char'\n\t\t\t\t\t\t\tTHEN 'string'\n\t\t\t\t\t\tWHEN META.DATA_TYPE \= 'nchar'\n\t\t\t\t\t\t\tTHEN 'string'\n\t\t\t\t\t\tWHEN META.DATA_TYPE \= 'nvarchar'\n\t\t\t\t\t\t\tTHEN 'string'\n\t\t\t\t\t\tWHEN META.DATA_TYPE \= 'varchar'\n\t\t\t\t\t\t\tTHEN 'string'\n\t\t\t\t\t\tWHEN META.DATA_TYPE \= 'date'\n\t\t\t\t\t\t\tTHEN 'date'\n\t\t\t\t\t\tWHEN META.DATA_TYPE \= 'datetime'\n\t\t\t\t\t\t\tTHEN 'date'\n\t\t\t\t\t\tWHEN META.DATA_TYPE \= 'numeric'\n\t\t\t\t\t\t\tTHEN 'number'\n\t\t\t\t\t\tWHEN META.DATA_TYPE \= 'decimal'\n\t\t\t\t\t\t\tTHEN 'number'\n\t\t\t\t\t\tWHEN META.DATA_TYPE \= 'bigint'\n\t\t\t\t\t\t\tTHEN 'int'\n\t\t\t\t\t\tWHEN META.DATA_TYPE \= 'int'\n\t\t\t\t\t\t\tTHEN 'int'\n\t\t\t\t\t\tELSE 'auto'\n\t\t\t\t\t\tEND\n\t\t\t\t\t) AS [type]\n\t\t\tFROM SYS.tables AS TB\n\t\t\tLEFT JOIN information_schema.columns AS META ON TB.NAME \= META.TABLE_NAME\n\t\t\tWHERE 1 \= 1 AND TB.NAME NOT IN ('RETURN_CODE')\n\t\t\t\tAND (\n\t\t\t\t\tTB.NAME \= '$$TABLE_NAME$$'\n\t\t\t\t\tOR 'ALL' \= '$$TABLE_NAME$$'\n\t\t\t\t\t)\n\t\t\t) A\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY [name]\n\t\t\t) AS RowNum\n\t\t,[type]\n\t\t,[name]\n\tFROM (\n\t\tSELECT DISTINCT META.COLUMN_NAME AS [name]\n\t\t\t,(\n\t\t\t\tCASE \n\t\t\t\t\tWHEN META.DATA_TYPE \= 'char'\n\t\t\t\t\t\tTHEN 'string'\n\t\t\t\t\tWHEN META.DATA_TYPE \= 'nchar'\n\t\t\t\t\t\tTHEN 'string'\n\t\t\t\t\tWHEN META.DATA_TYPE \= 'nvarchar'\n\t\t\t\t\t\tTHEN 'string'\n\t\t\t\t\tWHEN META.DATA_TYPE \= 'varchar'\n\t\t\t\t\t\tTHEN 'string'\n\t\t\t\t\tWHEN META.DATA_TYPE \= 'date'\n\t\t\t\t\t\tTHEN 'date'\n\t\t\t\t\tWHEN META.DATA_TYPE \= 'datetime'\n\t\t\t\t\t\tTHEN 'date'\n\t\t\t\t\tWHEN META.DATA_TYPE \= 'numeric'\n\t\t\t\t\t\tTHEN 'number'\n\t\t\t\t\tWHEN META.DATA_TYPE \= 'decimal'\n\t\t\t\t\t\tTHEN 'number'\n\t\t\t\t\tWHEN META.DATA_TYPE \= 'bigint'\n\t\t\t\t\t\tTHEN 'int'\n\t\t\t\t\tWHEN META.DATA_TYPE \= 'int'\n\t\t\t\t\t\tTHEN 'int'\n\t\t\t\t\tELSE 'auto'\n\t\t\t\t\tEND\n\t\t\t\t) AS [type]\n\t\tFROM SYS.tables AS TB\n\t\tLEFT JOIN information_schema.columns AS META ON TB.NAME \= META.TABLE_NAME\n\t\tWHERE 1 \= 1 AND TB.NAME NOT IN ('RETURN_CODE')\n\t\t\tAND (\n\t\t\t\tTB.NAME \= '$$TABLE_NAME$$'\n\t\t\t\tOR 'ALL' \= '$$TABLE_NAME$$'\n\t\t\t\t)\n\t\t) A\n\t) AS new1\n\n
Model_Combo=/*change in 20190820 BY STEVE*/\nSELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM TESTTABLE WITH (NOLOCK)\n\t\tWHERE (\n\t\t\t\tCOLUMN1 LIKE '%$$WILDCARDFILTER$$%'\n\t\t\t\tOR 'ALL' \= '$$WILDCARDFILTER$$'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY COLUMN1 ASC\n\t\t\t) AS RowNum\n\t\t,COLUMN1\n\t\t,COLUMN2\n\tFROM TESTTABLE WITH (NOLOCK)\n\tWHERE (\n\t\t\tCOLUMN1 LIKE '%$$WILDCARDFILTER$$%'\n\t\t\tOR 'ALL' \= '$$WILDCARDFILTER$$'\n\t\t\t)\n\t) AS new1\nWHERE RowNum > '$$start$$'\n\tAND RowNum <\= ('$$start$$' + '$$limit$$');
Model_CUD=/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Steve\n * Last Updated Date \:    20200512\n * 修正：\n *         1. DATA_STATUS 變數化\n *         2. DATA_CHANGE_LOG_ID 位置移至最前\n */\nBEGIN TRY\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n/* 1.1 功能主要異動 MASTER_TABLE_NAME */\nInsert into TESTTABLE /* WITH (ROWLOCK) */\n(\nCOLUMN1\n,COLUMN2\n,COLUMN3\n,COLUMN4\n,COLUMN5\n,COLUMN6\n,COLUMN7\n,COLUMN8\n,COLUMN9\n,COLUMN10\n,COLUMN11\n,ADD_USER_ID\n,ADD_USER_COMPANY_ID\n,ADD_DT\n,COMPANY_ID\n,DATA_STATUS\n) \nVALUES(\n'$$COLUMN1$$'\n,'$$COLUMN2$$'\n,'$$COLUMN3$$'\n,'$$COLUMN4$$'\n,N'$$COLUMN5$$'\n,'$$COLUMN6$$'\n,'$$COLUMN7$$'\n,'$$COLUMN8$$'\n,'$$COLUMN9$$'\n,'$$COLUMN10$$'\n,'$$COLUMN11$$'\n,'${PARAM_SOURCE_COMING}'\n,'${PARAM_COMPANY}'\n,CONVERT(VARCHAR(20), GETDATE(), 120)\n,'$$COMPANY_ID$$'\n,'$$DATA_STATUS$$'\n);\n/* 1.2 DATA_CHANGE_LOG for Master Table */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'insert'\n       ,'${PARAM_SOURCE_COMING}'\n       ,IDENT_CURRENT('TESTTABLE')\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'TESTTABLE'\n);\n/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\nINSERT INTO LOG_TESTTABLE  /* WITH (ROWLOCK) */ \n         ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID \n          ,CRUD_STATE \n          ,PK_COLUMN\n          ,COLUMN1\n          ,COLUMN2\n          ,COLUMN3\n          ,COLUMN4\n          ,COLUMN5\n          ,COLUMN6\n          ,COLUMN7\n          ,COLUMN8\n          ,COLUMN9\n          ,COLUMN10\n          ,COLUMN11\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,DATA_STATUS\n           )\nVALUES(\n          IDENT_CURRENT('DATA_CHANGE_LOG')\n          ,'${PARAM_FUNC_ID}'\n          ,'C'\n          ,IDENT_CURRENT('TESTTABLE')\n          ,'$$COLUMN1$$'\n          ,'$$COLUMN2$$'\n          ,'$$COLUMN3$$'\n          ,'$$COLUMN4$$'\n          ,N'$$COLUMN5$$'\n          ,'$$COLUMN6$$'\n          ,'$$COLUMN7$$'\n          ,'$$COLUMN8$$'\n          ,'$$COLUMN9$$'\n          ,'$$COLUMN10$$'\n          ,'$$COLUMN11$$'\n          ,'${PARAM_SOURCE_COMING}'\n          ,'${PARAM_COMPANY}'\n          ,CONVERT(VARCHAR(20), GETDATE(), 120)\n          ,'$$COMPANY_ID$$'\n          ,'$$DATA_STATUS$$'\n          );\n\n/* 1.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES (        \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0'\n        ,'SUCCESS'\n        ,CONCAT(IDENT_CURRENT('TESTTABLE'), '\:', '$$COLUMN1$$')\n        ,'C' \n        ,'$$MEMO$$');\nEND\n ELSE\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_COLUMN$$'\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'TESTTABLE'\n);\nIF EXISTS (\n\nSELECT * FROM TESTTABLE WITH (NOLOCK) WHERE PK_COLUMN \= '$$PK_COLUMN$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/* 2.2 DATA Detail LOG (before modified) */\n   INSERT INTO LOG_TESTTABLE /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,PK_COLUMN\n          ,COLUMN1\n          ,COLUMN2\n          ,COLUMN3\n          ,COLUMN4\n          ,COLUMN5\n          ,COLUMN6\n          ,COLUMN7\n          ,COLUMN8\n          ,COLUMN9\n          ,COLUMN10\n          ,COLUMN11\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,COMPANY_ID\n          ,DATA_STATUS\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,PK_COLUMN\n          ,COLUMN1\n          ,COLUMN2\n          ,COLUMN3\n          ,COLUMN4\n          ,COLUMN5\n          ,COLUMN6\n          ,COLUMN7\n          ,COLUMN8\n          ,COLUMN9\n          ,COLUMN10\n          ,COLUMN11\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,COMPANY_ID\n          ,DATA_STATUS\n     FROM TESTTABLE  WITH (NOLOCK)\n   WHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\n/* 2.3 功能主要異動 Table */\n   DELETE  TESTTABLE WITH (ROWLOCK)\n   WHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$COLUMN1$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 2.5 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$COLUMN1$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\n   END\nEND\nELSE\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\nBEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_COLUMN$$'\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'TESTTABLE'\n);\nIF EXISTS (\nSELECT * FROM TESTTABLE WITH (NOLOCK) WHERE PK_COLUMN \= '$$PK_COLUMN$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n\n   INSERT INTO LOG_TESTTABLE /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,PK_COLUMN\n          ,COLUMN1\n          ,COLUMN2\n          ,COLUMN3\n          ,COLUMN4\n          ,COLUMN5\n          ,COLUMN6\n          ,COLUMN7\n          ,COLUMN8\n          ,COLUMN9\n          ,COLUMN10\n          ,COLUMN11\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,COMPANY_ID\n          ,DATA_STATUS\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,PK_COLUMN\n          ,COLUMN1\n          ,COLUMN2\n          ,COLUMN3\n          ,COLUMN4\n          ,COLUMN5\n          ,COLUMN6\n          ,COLUMN7\n          ,COLUMN8\n          ,COLUMN9\n          ,COLUMN10\n          ,COLUMN11\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,COMPANY_ID\n          ,DATA_STATUS\n     FROM TESTTABLE WITH (NOLOCK)\n   WHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\n/* 3.3 功能主要異動 Table */\nUPDATE TESTTABLE WITH (ROWLOCK)\n    SET COLUMN1\=(CASE WHEN SUBSTRING('$$COLUMN1$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COLUMN1 ELSE SUBSTRING('$$COLUMN1$$',1,50) END)\n    ,COLUMN2\=(CASE WHEN ISNUMERIC('$$COLUMN2$$')\=1 THEN (CASE WHEN ISNULL(COLUMN2,'0')\='$$COLUMN2$$'  THEN (CASE WHEN '$$COLUMN2$$'\='0' THEN '0' ELSE COLUMN2 END) ELSE '$$COLUMN2$$'  END) ELSE COLUMN2 END)\n    ,COLUMN3\=(CASE WHEN ISDATE('$$COLUMN3$$')\=1 THEN (CASE WHEN ISNULL(COLUMN3,CONVERT(DATETIME, '', 23))\='$$COLUMN3$$' THEN COLUMN3 ELSE CONVERT(datetime,'$$COLUMN3$$') END) ELSE COLUMN3 END)\n    ,COLUMN4\=(CASE WHEN SUBSTRING('$$COLUMN4$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COLUMN4 ELSE SUBSTRING('$$COLUMN4$$',1,50) END)\n    ,COLUMN5\=(CASE WHEN SUBSTRING(N'$$COLUMN5$$',1,10000)\=SUBSTRING('\#NO_DATA\#',1,10000) THEN COLUMN5 ELSE SUBSTRING(N'$$COLUMN5$$',1,10000) END)\n    ,COLUMN6\=(CASE WHEN SUBSTRING('$$COLUMN6$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COLUMN6 ELSE SUBSTRING('$$COLUMN6$$',1,50) END)\n    ,COLUMN7\=(CASE WHEN SUBSTRING('$$COLUMN7$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COLUMN7 ELSE SUBSTRING('$$COLUMN7$$',1,50) END)\n    ,COLUMN8\=(CASE WHEN SUBSTRING('$$COLUMN8$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COLUMN8 ELSE SUBSTRING('$$COLUMN8$$',1,50) END)\n    ,COLUMN9\=(CASE WHEN SUBSTRING('$$COLUMN9$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COLUMN9 ELSE SUBSTRING('$$COLUMN9$$',1,50) END)\n    ,COLUMN10\=(CASE WHEN SUBSTRING('$$COLUMN10$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COLUMN10 ELSE SUBSTRING('$$COLUMN10$$',1,50) END)\n    ,COLUMN11\=(CASE WHEN ISNUMERIC('$$COLUMN11$$')\=1 THEN (CASE WHEN ISNULL(COLUMN11,'0')\='$$COLUMN11$$'  THEN (CASE WHEN '$$COLUMN11$$'\='0' THEN '0' ELSE COLUMN11 END) ELSE '$$COLUMN11$$'  END) ELSE COLUMN11 END)\n    ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n    ,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n    ,COMPANY_ID\=(CASE WHEN SUBSTRING('$$COMPANY_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$',1,50) END)\n    ,DATA_STATUS\=(CASE WHEN SUBSTRING('$$DATA_STATUS$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN DATA_STATUS ELSE SUBSTRING('$$DATA_STATUS$$',1,1) END)\nWHERE PK_COLUMN\='$$PK_COLUMN$$' ;\n\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n         ,'$$COLUMN1$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 3.5 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$COLUMN1$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$COLUMN1$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
Model_GRID_LIST=/*test20200118-4*/\nSELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM TESTTABLE WITH (NOLOCK)\n\t\tWHERE (\n\t\t\t\tDATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t\t\t\t)\n\t\t\t\tAND (COLUMN1 LIKE '$$COLUMN1$$%' OR '$$COLUMN1$$' \= 'ALL')\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_COLUMN\n\t\t\t) AS RowNum\n\t\t,PK_COLUMN\n\t\t,COLUMN1\n\t\t,CAST(COLUMN2 AS VARCHAR) AS COLUMN2\n\t\t,CONVERT(VARCHAR, COLUMN3, 120) AS COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT\n\t\t,DEL_USER_ID\n\t\t,DEL_USER_COMPANY_ID\n\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT\n\t\t,COMPANY_ID\n\t\t,DATA_STATUS\n\tFROM TESTTABLE WITH (NOLOCK)\n\tWHERE (\n\t\t\tDATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t\t\t)\n\t\tAND (COLUMN1 LIKE '$$COLUMN1$$%' OR '$$COLUMN1$$' \= 'ALL')\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
ModelM_Combo=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM DEPARTMENT\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY DEPARTMENT_IDX ASC\n\t\t\t) AS RowNum\n\t\t,SUBSTRING(DEPID, 1, 1) AS DEP_CODE\n\t\t,*\n\tFROM DEPARTMENT\n\tWHERE 1 \= 1\n\t) AS new1 /*WHERE RowNum > $$start$$   AND RowNum < \= ($$start$$+$$limit$$)*/;\n
ModelM_CUD=/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Steve\n * Last Updated Date \:    20200512\n * 修正：\n *         1. DATA_STATUS 變數化\n *         2. DATA_CHANGE_LOG_ID 位置移至最前\n */\nBEGIN TRY\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n\tBEGIN\n\t\t/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t\tINSERT INTO TESTTABLE /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tCOLUMN1\n\t\t\t,COLUMN2\n\t\t\t,COLUMN3\n\t\t\t,COLUMN4\n\t\t\t,COLUMN5\n\t\t\t,COLUMN6\n\t\t\t,COLUMN7\n\t\t\t,COLUMN8\n\t\t\t,COLUMN9\n\t\t\t,COLUMN10\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,COMPANY_ID\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$COLUMN1$$'\n\t\t\t,'$$COLUMN2$$'\n\t\t\t,'$$COLUMN3$$'\n\t\t\t,'$$COLUMN4$$'\n\t\t\t,'$$COLUMN5$$'\n\t\t\t,'$$COLUMN6$$'\n\t\t\t,'$$COLUMN7$$'\n\t\t\t,'$$COLUMN8$$'\n\t\t\t,'$$COLUMN9$$'\n\t\t\t,'$$COLUMN10$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,'$$DATA_STATUS$$'\n\t\t\t);\n\n\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'insert'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'TESTTABLE'\n\t\t\t);\n\n\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\tINSERT INTO LOG_TESTTABLE /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tDATA_CHANGE_LOG_ID\n\t\t\t,FUNC_ID\n\t\t\t,CRUD_STATE\n\t\t\t,PK_COLUMN\n\t\t\t,COLUMN1\n\t\t\t,COLUMN2\n\t\t\t,COLUMN3\n\t\t\t,COLUMN4\n\t\t\t,COLUMN5\n\t\t\t,COLUMN6\n\t\t\t,COLUMN7\n\t\t\t,COLUMN8\n\t\t\t,COLUMN9\n\t\t\t,COLUMN10\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,COMPANY_ID\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tVALUES (\n\t\t\tIDENT_CURRENT('DATA_CHANGE_LOG')\n\t\t\t,'${PARAM_FUNC_ID}'\n\t\t\t,'C'\n\t\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t\t,'$$COLUMN1$$'\n\t\t\t,'$$COLUMN2$$'\n\t\t\t,'$$COLUMN3$$'\n\t\t\t,'$$COLUMN4$$'\n\t\t\t,'$$COLUMN5$$'\n\t\t\t,'$$COLUMN6$$'\n\t\t\t,'$$COLUMN7$$'\n\t\t\t,'$$COLUMN8$$'\n\t\t\t,'$$COLUMN9$$'\n\t\t\t,'$$COLUMN10$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,'$$DATA_STATUS$$'\n\t\t\t);\n\n\t\t/* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN\n\t\t\t/* 2.1 DATA_CHANGE_LOG */\n\t\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tFUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t,SessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,PROC_TARGET\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'$$FunctionID$$'\n\t\t\t\t,'delete'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'$$PK_COLUMN$$'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'TESTTABLE'\n\t\t\t\t);\n\n\t\t\tIF EXISTS (\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM TESTTABLE WITH (NOLOCK)\n\t\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$'\n\t\t\t\t\t\tAND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t\t)\n\t\t\tBEGIN\n\t\t\t\t/* 2.2 DATA Detail LOG (before modified) */\n\t\t\t\tINSERT INTO LOG_TESTTABLE /* WITH (ROWLOCK) */\n\t\t\t\t\t(\n\t\t\t\t\tDATA_CHANGE_LOG_ID\n\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t,CRUD_STATE\n\t\t\t\t\t,PK_COLUMN\n\t\t\t\t\t,COLUMN1\n\t\t\t\t\t,COLUMN2\n\t\t\t\t\t,COLUMN3\n\t\t\t\t\t,COLUMN4\n\t\t\t\t\t,COLUMN5\n\t\t\t\t\t,COLUMN6\n\t\t\t\t\t,COLUMN7\n\t\t\t\t\t,COLUMN8\n\t\t\t\t\t,COLUMN9\n\t\t\t\t\t,COLUMN10\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t,DEL_DT\n\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t)\n\t\t\t\tSELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t\t\t,'$$FunctionID$$' AS FUNC_ID\n\t\t\t\t\t,'D' AS CRUD_STATE\n\t\t\t\t\t,PK_COLUMN\n\t\t\t\t\t,COLUMN1\n\t\t\t\t\t,COLUMN2\n\t\t\t\t\t,COLUMN3\n\t\t\t\t\t,COLUMN4\n\t\t\t\t\t,COLUMN5\n\t\t\t\t\t,COLUMN6\n\t\t\t\t\t,COLUMN7\n\t\t\t\t\t,COLUMN8\n\t\t\t\t\t,COLUMN9\n\t\t\t\t\t,COLUMN10\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t,DEL_DT\n\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\tFROM TESTTABLE WITH (NOLOCK)\n\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\n\t\t\t\t/* 2.3 Action Return */\n\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t\t(\n\t\t\t\t\tProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'0'\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t,'$$COLUMN1$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND\n\t\t\tELSE\n\t\t\tBEGIN\n\t\t\t\t/* 2.4 Action Return */\n\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t\t(\n\t\t\t\t\tProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'-1'\n\t\t\t\t\t,'資料正在審核流程中，無法刪除'\n\t\t\t\t\t,'$$COLUMN1$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND\n\n\t\t\t/* 2.5 功能主要異動 Table */\n\t\t\tDELETE TESTTABLE\n\t\t\tWITH (ROWLOCK)\n\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\t\tEND\n\t\tELSE\n\t\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\t\t\tBEGIN\n\t\t\t\t/* 3.1 DATA_CHANGE_LOG */\n\t\t\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t\t\t(\n\t\t\t\t\tFUNC_ID\n\t\t\t\t\t,PROC_TYPE\n\t\t\t\t\t,USER_ID\n\t\t\t\t\t,DATA_NO\n\t\t\t\t\t,EVENT_DT\n\t\t\t\t\t,MEMO\n\t\t\t\t\t,SessionID\n\t\t\t\t\t,ProcPK\n\t\t\t\t\t,PROC_TARGET\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'$$FunctionID$$'\n\t\t\t\t\t,'update'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'$$PK_COLUMN$$'\n\t\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t\t,'${LOGPK}'\n\t\t\t\t\t,'TESTTABLE'\n\t\t\t\t\t);\n\n\t\t\t\tIF EXISTS (\n\t\t\t\t\t\tSELECT *\n\t\t\t\t\t\tFROM TESTTABLE WITH (NOLOCK)\n\t\t\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$'\n\t\t\t\t\t\t\tAND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t\t\t)\n\t\t\t\tBEGIN\n\t\t\t\t\t/* 3.2 DATA Detail LOG (before modified) */\n\t\t\t\t\tINSERT INTO LOG_TESTTABLE /* WITH (ROWLOCK) */\n\t\t\t\t\t\t(\n\t\t\t\t\t\tDATA_CHANGE_LOG_ID\n\t\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t\t,CRUD_STATE\n\t\t\t\t\t\t,PK_COLUMN\n\t\t\t\t\t\t,COLUMN1\n\t\t\t\t\t\t,COLUMN2\n\t\t\t\t\t\t,COLUMN3\n\t\t\t\t\t\t,COLUMN4\n\t\t\t\t\t\t,COLUMN5\n\t\t\t\t\t\t,COLUMN6\n\t\t\t\t\t\t,COLUMN7\n\t\t\t\t\t\t,COLUMN8\n\t\t\t\t\t\t,COLUMN9\n\t\t\t\t\t\t,COLUMN10\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t\t,DEL_DT\n\t\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t\t)\n\t\t\t\t\tSELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t\t\t\t,'$$FunctionID$$' AS FUNC_ID\n\t\t\t\t\t\t,'U' AS CRUD_STATE\n\t\t\t\t\t\t,PK_COLUMN\n\t\t\t\t\t\t,COLUMN1\n\t\t\t\t\t\t,COLUMN2\n\t\t\t\t\t\t,COLUMN3\n\t\t\t\t\t\t,COLUMN4\n\t\t\t\t\t\t,COLUMN5\n\t\t\t\t\t\t,COLUMN6\n\t\t\t\t\t\t,COLUMN7\n\t\t\t\t\t\t,COLUMN8\n\t\t\t\t\t\t,COLUMN9\n\t\t\t\t\t\t,COLUMN10\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t\t,DEL_DT\n\t\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\tFROM TESTTABLE WITH (NOLOCK)\n\t\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\n\t\t\t\t\t/* 3.3 Action Return */\n\t\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t\t\t(\n\t\t\t\t\t\tProcPK\n\t\t\t\t\t\t,hashValues\n\t\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t\t,MEMO\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES (\n\t\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t\t,'0'\n\t\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t\t,'$$COLUMN1$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t,'U'\n\t\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t\t);\n\t\t\t\tEND\n\t\t\t\tELSE\n\t\t\t\tBEGIN\n\t\t\t\t\t/* 3.4 Action Return */\n\t\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t\t\t(\n\t\t\t\t\t\tProcPK\n\t\t\t\t\t\t,hashValues\n\t\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t\t,MEMO\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES (\n\t\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t\t,'-1'\n\t\t\t\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t\t\t\t,'$$COLUMN1$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t,'U'\n\t\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t\t);\n\t\t\t\tEND\n\n\t\t\t\t/* 3.5 功能主要異動 Table */\n\t\t\t\tUPDATE TESTTABLE\n\t\t\t\tWITH (ROWLOCK)\n\n\t\t\t\tSET COLUMN1 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN1$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN1\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN1$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN2 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN2$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN2, '0') \= '$$COLUMN2$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN2$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN2$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN2\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN3 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISDATE('$$COLUMN3$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN3, CONVERT(DATETIME, '', 23)) \= '$$COLUMN3$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN COLUMN3\n\t\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$COLUMN3$$')\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN3\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN4 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN4$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN4\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN4$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN5 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN5$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN COLUMN5\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN5$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN6 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN6$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN6\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN6$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN7 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN7$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN7\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN7$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN8 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN8$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN8\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN8$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN9 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN9$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN9\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN9$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN10 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN10$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN10\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN10$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN11 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN11$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN11, '0') \= '$$COLUMN11$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN11$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN11\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN11$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN11\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,COMPANY_ID \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COMPANY_ID$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COMPANY_ID\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COMPANY_ID$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,DATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\t\t\tEND\n\n\tSELECT @RETURN_CODE \= RETURN_CODE\n\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\tFROM MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\tFOR JSON AUTO\n\t\t\t)\n\tFROM MEM_API_RESULT\n\tWHERE hashValues \= @FROM_OUTSIDE\nEND TRY\n\nBEGIN CATCH\n\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t,'$$COLUMN1$$' AS DATA_UNIQUE_KEY\n\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t) AS A /* WITH (ROWLOCK) */\n\t\t\tFOR JSON AUTO\n\t\t\t)\nEND CATCH\n/*test1*/
ModelM_LS=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM TESTTABLE\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_COLUMN ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM TESTTABLE\n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tCOLUMN1 \= '$$COLUMN1$$'\n\t\t\tOR 'ALL' \= '$$COLUMN1$$'\n\t\t\t)\n\t\tAND (\n\t\t\tCOLUMN2 \= '$$COLUMN2$$'\n\t\t\tOR 'ALL' \= '$$COLUMN2$$'\n\t\t\t)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);/*test2*/
ModelMD1_D1=SELECT *\n\t,(\n\t\tSELECT count(*)\n\t\tFROM TESTTABLE2\n\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY D_PK_COLUMN\n\t\t\t) AS RowNum\n\t\t,D_PK_COLUMN\n\t\t,PK_COLUMN\n\t\t,COLUMN1\n\t\t,COLUMN2\n\t\t,COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,COMPANY_ID\n\t\t,DATA_STATUS\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t,LAST_MOD_DT\n\t\t,DEL_USER_ID\n\t\t,DEL_USER_COMPANY_ID\n\t\t,DEL_DT\n\tFROM TESTTABLE2\n\tWHERE PK_COLUMN \= '$$PK_COLUMN$$'\n\t) AS new1\nWHERE 1 \= 1\n\tAND RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n
ModelMD1_D1_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'D1_ADD'\nBEGIN\n\tINSERT INTO TESTTABLE2 (\n\t\tDATA_STATUS\n\t\t,COMPANY_ID\n\t\t,PK_COLUMN\n\t\t,COLUMN1\n\t\t,COLUMN2\n\t\t,COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t)\n\tVALUES (\n\t\t'$$DATA_STATUS$$'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'$$PK_COLUMN$$'\n\t\t,'$$COLUMN1$$'\n\t\t,'$$COLUMN2$$'\n\t\t,'$$COLUMN3$$'\n\t\t,'$$COLUMN4$$'\n\t\t,'$$COLUMN5$$'\n\t\t,'$$COLUMN6$$'\n\t\t,'$$COLUMN7$$'\n\t\t,'$$COLUMN8$$'\n\t\t,'$$COLUMN9$$'\n\t\t,'$$COLUMN10$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$COMPANY_ID$$'\n\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'insert'\n\t\t,'$$A_TABLE$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,IDENT_CURRENT('$$A_TABLE$$')\n\t\t,GETDATE()\n\t\t);\nEND\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_MOD'\n\tBEGIN\n\t\tSET QUOTED_IDENTIFIER OFF\n\n\t\tEXEC (\n\t\t\t\t"  SET QUOTED_IDENTIFIER OFF DECLARE @PROC_TARGET AS VARCHAR(50);  DECLARE @WHERE_CONDITION AS VARCHAR(50);   SET @PROC_TARGET \= 'TESTTABLE2';   SET @WHERE_CONDITION \= "" WHERE 1\=1   AND D_PK_COLUMN \= '$$D_PK_COLUMN$$'"";  DECLARE @UPDATE_SQL varchar(MAX),                     @UPDATE_COUNT_A varchar(MAX) \='',                                     @UPDATE_COUNT_B varchar(MAX) \= ""COLUMN1\='$$COLUMN1$$',                                                                      COLUMN2\='$$COLUMN2$$',                                                                      COLUMN3\='$$COLUMN3$$',                                                                      COLUMN4\='$$COLUMN4$$',                                                                      COLUMN5\='$$COLUMN5$$',                                                                      COLUMN6\='$$COLUMN6$$',                                                                      COLUMN7\='$$COLUMN7$$',                                                                      COLUMN8\='$$COLUMN8$$',                                                                      COLUMN9\='$$COLUMN9$$',                                                                      COLUMN10\='$$COLUMN10$$',                                                                      LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}',                                                                      LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$',                                                                      LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)"";  DECLARE @CIndex smallint WHILE (@UPDATE_COUNT_B<>'') BEGIN SET @CIndex\=CHARINDEX(',', @UPDATE_COUNT_B) IF @CIndex\=0 SET @CIndex\=LEN(@UPDATE_COUNT_B)+1 SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+ CASE WHEN CHARINDEX('$$', SUBSTRING(@UPDATE_COUNT_B, 1, @CIndex-1)) <\= 0 THEN SUBSTRING(@UPDATE_COUNT_B, 1, @CIndex-1)+',' ELSE '' END    \t\t \t\tIF @CIndex\=LEN(@UPDATE_COUNT_B)+1 BREAK SET @UPDATE_COUNT_B\=SUBSTRING(@UPDATE_COUNT_B, @CIndex+1, LEN(@UPDATE_COUNT_B)-@CIndex) END  IF LEN(@UPDATE_COUNT_A) > 0 BEGIN SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION EXEC (@UPDATE_SQL);  END SET QUOTED_IDENTIFIER ON"\n\t\t\t\t)\n\n\t\tSET QUOTED_IDENTIFIER ON\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'insert'\n\t\t\t,'TESTTABLE2'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$D_PK_COLUMN$$'\n\t\t\t,GETDATE()\n\t\t\t);\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_DEL'\n\t\tBEGIN\n\t\t\tDELETE TESTTABLE2\n\t\t\tWHERE D_PK_COLUMN \= '$$D_PK_COLUMN$$';\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\tSessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,FUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,PROC_TARGET\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'$$FunctionID$$'\n\t\t\t\t,'insert'\n\t\t\t\t,'$$A_TABLE$$'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'$$D_PK_COLUMN$$'\n\t\t\t\t,GETDATE()\n\t\t\t\t);\n\t\tEND\n
ModelMD1_DS_CB1=SELECT *,\n\n  (SELECT COUNT (*)\n   FROM USERS WHERE  1\=1\n     AND (DEPID LIKE '%$$QUERYPARAM$$%'\n          OR 'ALL' \= '$$QUERYPARAM$$')) AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY USERID ASC) AS RowNum,\n                            USERID,\n                            USERID + ' ' + USERNAME AS USERNAME\n   FROM USERS\n   WHERE 1\=1\n     AND (DEPID LIKE '%$$QUERYPARAM$$%'\n          OR 'ALL' \= '$$QUERYPARAM$$') )AS new1 WHERE RowNum > $$start$$   AND RowNum < \= ($$start$$+$$limit$$)
ModelMD1_DS_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tINSERT INTO TESTTABLE (\n\t\tDATA_STATUS\n\t\t,COMPANY_ID\n\t\t,COLUMN1\n\t\t,COLUMN2\n\t\t,COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t)\n\tVALUES (\n\t\t'$$DATA_STATUS$$'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'$$COLUMN1$$'\n\t\t,'$$COLUMN2$$'\n\t\t,'$$COLUMN3$$'\n\t\t,'$$COLUMN4$$'\n\t\t,'$$COLUMN5$$'\n\t\t,'$$COLUMN6$$'\n\t\t,'$$COLUMN7$$'\n\t\t,'$$COLUMN8$$'\n\t\t,'$$COLUMN9$$'\n\t\t,'$$COLUMN10$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$COMPANY_ID$$'\n\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'insert'\n\t\t,'TESTTABLE'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\nEND\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\tSET QUOTED_IDENTIFIER OFF\n\n\t\tEXEC (\n\t\t\t\t" SET QUOTED_IDENTIFIER OFF   DECLARE @PROC_TARGET AS VARCHAR(50); DECLARE @WHERE_CONDITION AS VARCHAR(50); SET @PROC_TARGET \= 'TESTTABLE'; SET @WHERE_CONDITION \= "" WHERE 1\=1   AND PK_COLUMN \= '$$PK_COLUMN$$'"";  DECLARE @UPDATE_SQL varchar(MAX), @UPDATE_COUNT_A varchar(MAX) \='', @UPDATE_COUNT_B varchar(MAX) \= ""COLUMN1\='$$COLUMN1$$',                                  COLUMN2\='$$COLUMN2$$',                                  COLUMN3\='$$COLUMN3$$',                                  COLUMN4\='$$COLUMN4$$',                                  COLUMN5\='$$COLUMN5$$',                                  COLUMN6\='$$COLUMN6$$',                                  COLUMN7\='$$COLUMN7$$',                                  COLUMN8\='$$COLUMN8$$',                                  COLUMN9\='$$COLUMN9$$',                                  COLUMN10\='$$COLUMN10$$',                                  LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}',                                  LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$',                                  LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)"";  DECLARE @CIndex smallint WHILE (@UPDATE_COUNT_B<>'') BEGIN SET @CIndex\=CHARINDEX(',', @UPDATE_COUNT_B) IF @CIndex\=0 SET @CIndex\=LEN(@UPDATE_COUNT_B)+1 SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+ CASE WHEN CHARINDEX('$$', SUBSTRING(@UPDATE_COUNT_B, 1, @CIndex-1)) <\= 0 THEN SUBSTRING(@UPDATE_COUNT_B, 1, @CIndex-1)+',' ELSE '' END IF @CIndex\=LEN(@UPDATE_COUNT_B)+1 BREAK SET @UPDATE_COUNT_B\=SUBSTRING(@UPDATE_COUNT_B, @CIndex+1, LEN(@UPDATE_COUNT_B)-@CIndex) END  IF LEN(@UPDATE_COUNT_A) > 0 BEGIN SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION EXEC (@UPDATE_SQL);  END SET QUOTED_IDENTIFIER ON"\n\t\t\t\t)\n\n\t\tSET QUOTED_IDENTIFIER ON\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'TESTTABLE'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t\t,GETDATE()\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN\n\t\t\tDELETE TESTTABLE\n\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';/*主檔被刪除，明細檔也需一併刪除*/\n\n\t\t\tDELETE TESTTABLE2\n\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\tSessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,FUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,PROC_TARGET\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'$$FunctionID$$'\n\t\t\t\t,'delete'\n\t\t\t\t,'TESTTABLE'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t\t\t,GETDATE()\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n
ModelMD1_LS=SELECT *\n\t,(\n\t\tSELECT count(*)\n\t\tFROM TESTTABLE\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_COLUMN\n\t\t\t) AS RowNum\n\t\t,PK_COLUMN\n\t\t,COLUMN1\n\t\t,COLUMN2\n\t\t,COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,COMPANY_ID\n\t\t,DATA_STATUS\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t,LAST_MOD_DT\n\t\t,DEL_USER_ID\n\t\t,DEL_USER_COMPANY_ID\n\t\t,DEL_DT\n\tFROM TESTTABLE\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n
ModelMD_C_testing=/*test*/
ModelMDS1_D1=SELECT *\n\t,(\n\t\tSELECT count(*)\n\t\tFROM TESTTABLE2\n\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY D_PK_COLUMN\n\t\t\t) AS RowNum\n\t\t,D_PK_COLUMN\n\t\t,PK_COLUMN\n\t\t,COLUMN1\n\t\t,COLUMN2\n\t\t,COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,COMPANY_ID\n\t\t,DATA_STATUS\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t,LAST_MOD_DT\n\t\t,DEL_USER_ID\n\t\t,DEL_USER_COMPANY_ID\n\t\t,DEL_DT\n\tFROM TESTTABLE2\n\tWHERE PK_COLUMN \= '$$PK_COLUMN$$'\n\t) AS new1\nWHERE 1 \= 1\n\tAND RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n
ModelMDS1_D1_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'D1_ADD'\nBEGIN\n\tINSERT INTO TESTTABLE2 (\n\t\tDATA_STATUS\n\t\t,COMPANY_ID\n\t\t,PK_COLUMN\n\t\t,COLUMN1\n\t\t,COLUMN2\n\t\t,COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t)\n\tVALUES (\n\t\t'$$DATA_STATUS$$'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'$$PK_COLUMN$$'\n\t\t,'$$COLUMN1$$'\n\t\t,'$$COLUMN2$$'\n\t\t,'$$COLUMN3$$'\n\t\t,'$$COLUMN4$$'\n\t\t,'$$COLUMN5$$'\n\t\t,'$$COLUMN6$$'\n\t\t,'$$COLUMN7$$'\n\t\t,'$$COLUMN8$$'\n\t\t,'$$COLUMN9$$'\n\t\t,'$$COLUMN10$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$COMPANY_ID$$'\n\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'insert'\n\t\t,'$$A_TABLE$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,IDENT_CURRENT('$$A_TABLE$$')\n\t\t,GETDATE()\n\t\t);\nEND\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_MOD'\n\tBEGIN\n\t\tEXEC (\n\t\t\t\t'DECLARE @PROC_TARGET AS VARCHAR(50);  SET @PROC_TARGET \= ''TESTTABLE2'';  DECLARE @UPDATE_SQL varchar(MAX),         @UPDATE_COUNT_A varchar(MAX) \='''',         @UPDATE_COUNT_B varchar(MAX) \=             ''COLUMN1\=''''$$COLUMN1$$'''',             COLUMN2\=''''$$COLUMN2$$'''',             COLUMN3\=''''$$COLUMN3$$'''',             COLUMN4\=''''$$COLUMN4$$'''',             COLUMN5\=''''$$COLUMN5$$'''',             COLUMN6\=''''$$COLUMN6$$'''',             COLUMN7\=''''$$COLUMN7$$'''',             COLUMN8\=''''$$COLUMN8$$'''',             COLUMN9\=''''$$COLUMN9$$'''',             COLUMN10\=''''$$COLUMN10$$'''',             LAST_MOD_USER_ID\=''''${PARAM_SOURCE_COMING}'''',             LAST_MOD_USER_COMPANY_ID\=''''$$COMPANY_ID$$'''',             LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)''; SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+        CASE            WHEN CHARINDEX(''$$'', VALUE) <\= 0 THEN VALUE+'',''            ELSE ''''        END                                    FROM STRING_SPLIT(@UPDATE_COUNT_B, '',''); IF LEN(@UPDATE_COUNT_A) > 0  BEGIN     SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1)      SET @UPDATE_SQL \= ''UPDATE '' +@PROC_TARGET+ '' SET ''+ @UPDATE_COUNT_A +'' WHERE D_PK_COLUMN \= ''''$$D_PK_COLUMN$$'''';''     EXEC (@UPDATE_SQL);       END      '\n\t\t\t\t)\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'insert'\n\t\t\t,'TESTTABLE2'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('TESTTABLE2')\n\t\t\t,GETDATE()\n\t\t\t);\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_DEL'\n\t\tBEGIN\n\t\t\tDELETE TESTTABLE2\n\t\t\tWHERE D_PK_COLUMN \= '$$D_PK_COLUMN$$';\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\tSessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,FUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,PROC_TARGET\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'$$FunctionID$$'\n\t\t\t\t,'insert'\n\t\t\t\t,'$$A_TABLE$$'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,IDENT_CURRENT('$$A_TABLE$$')\n\t\t\t\t,GETDATE()\n\t\t\t\t);\n\t\tEND\n
ModelMDS1_DS_CB1=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM DEPARTMENT\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY DEPARTMENT_IDX ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM DEPARTMENT\n\tWHERE 1 \= 1\n\t) AS new1 /*WHERE RowNum > $$start$$   AND RowNum < \= ($$start$$+$$limit$$)*/\n
ModelMDS1_DS_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tINSERT INTO TESTTABLE (\n\t\tDATA_STATUS\n\t\t,COMPANY_ID\n\t\t,COLUMN1\n\t\t,COLUMN2\n\t\t,COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t)\n\tVALUES (\n\t\t'$$DATA_STATUS$$'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'$$COLUMN1$$'\n\t\t,'$$COLUMN2$$'\n\t\t,'$$COLUMN3$$'\n\t\t,'$$COLUMN4$$'\n\t\t,'$$COLUMN5$$'\n\t\t,'$$COLUMN6$$'\n\t\t,'$$COLUMN7$$'\n\t\t,'$$COLUMN8$$'\n\t\t,'$$COLUMN9$$'\n\t\t,'$$COLUMN10$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$COMPANY_ID$$'\n\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'insert'\n\t\t,'TESTTABLE'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\nEND\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_ADD'\n\tBEGIN\n\t\tINSERT INTO TESTTABLE2 (\n\t\t\tDATA_STATUS\n\t\t\t,COMPANY_ID\n\t\t\t,PK_COLUMN\n\t\t\t,COLUMN1\n\t\t\t,COLUMN2\n\t\t\t,COLUMN3\n\t\t\t,COLUMN4\n\t\t\t,COLUMN5\n\t\t\t,COLUMN6\n\t\t\t,COLUMN7\n\t\t\t,COLUMN8\n\t\t\t,COLUMN9\n\t\t\t,COLUMN10\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$DATA_STATUS$$'\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t\t,'$$COLUMN1$$'\n\t\t\t,'$$COLUMN2$$'\n\t\t\t,'$$COLUMN3$$'\n\t\t\t,'$$COLUMN4$$'\n\t\t\t,'$$COLUMN5$$'\n\t\t\t,'$$COLUMN6$$'\n\t\t\t,'$$COLUMN7$$'\n\t\t\t,'$$COLUMN8$$'\n\t\t\t,'$$COLUMN9$$'\n\t\t\t,'$$COLUMN10$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t\t);\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'insert'\n\t\t\t,'TESTTABLE2'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('TESTTABLE2')\n\t\t\t,GETDATE()\n\t\t\t);\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\t\tBEGIN\n\t\t\tSET QUOTED_IDENTIFIER OFF\n\n\t\t\tEXEC (\n\t\t\t\t\t" SET QUOTED_IDENTIFIER OFF   DECLARE @PROC_TARGET AS VARCHAR(50); DECLARE @WHERE_CONDITION AS VARCHAR(50); SET @PROC_TARGET \= 'TESTTABLE'; SET @WHERE_CONDITION \= "" WHERE 1\=1   AND PK_COLUMN \= '$$PK_COLUMN$$'"";  DECLARE @UPDATE_SQL varchar(MAX), @UPDATE_COUNT_A varchar(MAX) \='', @UPDATE_COUNT_B varchar(MAX) \= ""COLUMN1\='$$COLUMN1$$',                                  COLUMN2\='$$COLUMN2$$',                                  COLUMN3\='$$COLUMN3$$',                                  COLUMN4\='$$COLUMN4$$',                                  COLUMN5\='$$COLUMN5$$',                                  COLUMN6\='$$COLUMN6$$',                                  COLUMN7\='$$COLUMN7$$',                                  COLUMN8\='$$COLUMN8$$',                                  COLUMN9\='$$COLUMN9$$',                                  COLUMN10\='$$COLUMN10$$',                                  LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}',                                  LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$',                                  LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)"";  DECLARE @CIndex smallint WHILE (@UPDATE_COUNT_B<>'') BEGIN SET @CIndex\=CHARINDEX(',', @UPDATE_COUNT_B) IF @CIndex\=0 SET @CIndex\=LEN(@UPDATE_COUNT_B)+1 SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+ CASE WHEN CHARINDEX('$$', SUBSTRING(@UPDATE_COUNT_B, 1, @CIndex-1)) <\= 0 THEN SUBSTRING(@UPDATE_COUNT_B, 1, @CIndex-1)+',' ELSE '' END IF @CIndex\=LEN(@UPDATE_COUNT_B)+1 BREAK SET @UPDATE_COUNT_B\=SUBSTRING(@UPDATE_COUNT_B, @CIndex+1, LEN(@UPDATE_COUNT_B)-@CIndex) END  IF LEN(@UPDATE_COUNT_A) > 0 BEGIN SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION EXEC (@UPDATE_SQL);  END SET QUOTED_IDENTIFIER ON"\n\t\t\t\t\t)\n\n\t\t\tSET QUOTED_IDENTIFIER ON\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\tSessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,FUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,PROC_TARGET\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'$$FunctionID$$'\n\t\t\t\t,'update'\n\t\t\t\t,'TESTTABLE'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t\t\t,GETDATE()\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\t\tELSE\n\t\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\t\tBEGIN\n\t\t\t\tDELETE TESTTABLE\n\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';/*主檔被刪除，明細檔也需一併刪除*/\n\n\t\t\t\tDELETE TESTTABLE2\n\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\n\t\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\t\tSessionID\n\t\t\t\t\t,ProcPK\n\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t,PROC_TYPE\n\t\t\t\t\t,PROC_TARGET\n\t\t\t\t\t,USER_ID\n\t\t\t\t\t,DATA_NO\n\t\t\t\t\t,EVENT_DT\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t\t,'${LOGPK}'\n\t\t\t\t\t,'$$FunctionID$$'\n\t\t\t\t\t,'delete'\n\t\t\t\t\t,'TESTTABLE'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t\t\t\t,GETDATE()\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND\n
ModelMDS1_LS=SELECT *\n\t,(\n\t\tSELECT count(*)\n\t\tFROM TESTTABLE\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_COLUMN\n\t\t\t) AS RowNum\n\t\t,PK_COLUMN\n\t\t,COLUMN1\n\t\t,COLUMN2\n\t\t,COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,COMPANY_ID\n\t\t,DATA_STATUS\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t,LAST_MOD_DT\n\t\t,DEL_USER_ID\n\t\t,DEL_USER_COMPANY_ID\n\t\t,DEL_DT\n\tFROM TESTTABLE\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n
ModelMW_CD_Combo=/*change in 20190820 BY STEVE*/\nSELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM TESTTABLE WITH (NOLOCK)\n\t\tWHERE (\n\t\t\t\tCOLUMN1 LIKE '%$$WILDCARDFILTER$$%'\n\t\t\t\tOR 'ALL' \= '$$WILDCARDFILTER$$'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY COLUMN1 ASC\n\t\t\t) AS RowNum\n\t\t,COLUMN1\n\t\t,COLUMN2\n\tFROM TESTTABLE WITH (NOLOCK)\n\tWHERE (\n\t\t\tCOLUMN1 LIKE '%$$WILDCARDFILTER$$%'\n\t\t\tOR 'ALL' \= '$$WILDCARDFILTER$$'\n\t\t\t)\n\t) AS new1\nWHERE RowNum > '$$start$$'\n\tAND RowNum <\= ('$$start$$' + '$$limit$$');\n
ModelMW_CUD=/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Steve\n * Last Updated Date \:    20200512\n * 修正：\n *         1. DATA_STATUS 變數化\n *         2. DATA_CHANGE_LOG_ID 位置移至最前\n */\nBEGIN TRY\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n\tBEGIN\n\t\t/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t\tINSERT INTO TESTTABLE /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tCOLUMN1\n\t\t\t,COLUMN2\n\t\t\t,COLUMN3\n\t\t\t,COLUMN4\n\t\t\t,COLUMN5\n\t\t\t,COLUMN6\n\t\t\t,COLUMN7\n\t\t\t,COLUMN8\n\t\t\t,COLUMN9\n\t\t\t,COLUMN10\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,COMPANY_ID\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$COLUMN1$$'\n\t\t\t,'$$COLUMN2$$'\n\t\t\t,'$$COLUMN3$$'\n\t\t\t,'$$COLUMN4$$'\n\t\t\t,'$$COLUMN5$$'\n\t\t\t,'$$COLUMN6$$'\n\t\t\t,'$$COLUMN7$$'\n\t\t\t,'$$COLUMN8$$'\n\t\t\t,'$$COLUMN9$$'\n\t\t\t,'$$COLUMN10$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,'$$DATA_STATUS$$'\n\t\t\t);\n\n\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'insert'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'TESTTABLE'\n\t\t\t);\n\n\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\tINSERT INTO LOG_TESTTABLE /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tDATA_CHANGE_LOG_ID\n\t\t\t,FUNC_ID\n\t\t\t,CRUD_STATE\n\t\t\t,PK_COLUMN\n\t\t\t,COLUMN1\n\t\t\t,COLUMN2\n\t\t\t,COLUMN3\n\t\t\t,COLUMN4\n\t\t\t,COLUMN5\n\t\t\t,COLUMN6\n\t\t\t,COLUMN7\n\t\t\t,COLUMN8\n\t\t\t,COLUMN9\n\t\t\t,COLUMN10\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,COMPANY_ID\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tVALUES (\n\t\t\tIDENT_CURRENT('DATA_CHANGE_LOG')\n\t\t\t,'${PARAM_FUNC_ID}'\n\t\t\t,'C'\n\t\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t\t,'$$COLUMN1$$'\n\t\t\t,'$$COLUMN2$$'\n\t\t\t,'$$COLUMN3$$'\n\t\t\t,'$$COLUMN4$$'\n\t\t\t,'$$COLUMN5$$'\n\t\t\t,'$$COLUMN6$$'\n\t\t\t,'$$COLUMN7$$'\n\t\t\t,'$$COLUMN8$$'\n\t\t\t,'$$COLUMN9$$'\n\t\t\t,'$$COLUMN10$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,'$$DATA_STATUS$$'\n\t\t\t);\n\n\t\t/* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN\n\t\t\t/* 2.1 DATA_CHANGE_LOG */\n\t\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tFUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t,SessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,PROC_TARGET\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'$$FunctionID$$'\n\t\t\t\t,'delete'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'$$PK_COLUMN$$'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'TESTTABLE'\n\t\t\t\t);\n\n\t\t\tIF EXISTS (\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM TESTTABLE WITH (NOLOCK)\n\t\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$'\n\t\t\t\t\t\tAND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t\t)\n\t\t\tBEGIN\n\t\t\t\t/* 2.2 DATA Detail LOG (before modified) */\n\t\t\t\tINSERT INTO LOG_TESTTABLE /* WITH (ROWLOCK) */\n\t\t\t\t\t(\n\t\t\t\t\tDATA_CHANGE_LOG_ID\n\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t,CRUD_STATE\n\t\t\t\t\t,PK_COLUMN\n\t\t\t\t\t,COLUMN1\n\t\t\t\t\t,COLUMN2\n\t\t\t\t\t,COLUMN3\n\t\t\t\t\t,COLUMN4\n\t\t\t\t\t,COLUMN5\n\t\t\t\t\t,COLUMN6\n\t\t\t\t\t,COLUMN7\n\t\t\t\t\t,COLUMN8\n\t\t\t\t\t,COLUMN9\n\t\t\t\t\t,COLUMN10\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t,DEL_DT\n\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t)\n\t\t\t\tSELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t\t\t,'$$FunctionID$$' AS FUNC_ID\n\t\t\t\t\t,'D' AS CRUD_STATE\n\t\t\t\t\t,PK_COLUMN\n\t\t\t\t\t,COLUMN1\n\t\t\t\t\t,COLUMN2\n\t\t\t\t\t,COLUMN3\n\t\t\t\t\t,COLUMN4\n\t\t\t\t\t,COLUMN5\n\t\t\t\t\t,COLUMN6\n\t\t\t\t\t,COLUMN7\n\t\t\t\t\t,COLUMN8\n\t\t\t\t\t,COLUMN9\n\t\t\t\t\t,COLUMN10\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t,DEL_DT\n\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\tFROM TESTTABLE WITH (NOLOCK)\n\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\n\t\t\t\t/* 2.3 Action Return */\n\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t\t(\n\t\t\t\t\tProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'0'\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t,'$$COLUMN1$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND\n\t\t\tELSE\n\t\t\tBEGIN\n\t\t\t\t/* 2.4 Action Return */\n\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t\t(\n\t\t\t\t\tProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'-1'\n\t\t\t\t\t,'資料正在審核流程中，無法刪除'\n\t\t\t\t\t,'$$COLUMN1$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND\n\n\t\t\t/* 2.5 功能主要異動 Table */\n\t\t\tDELETE TESTTABLE\n\t\t\tWITH (ROWLOCK)\n\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\t\tEND\n\t\tELSE\n\t\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\t\t\tBEGIN\n\t\t\t\t/* 3.1 DATA_CHANGE_LOG */\n\t\t\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t\t\t(\n\t\t\t\t\tFUNC_ID\n\t\t\t\t\t,PROC_TYPE\n\t\t\t\t\t,USER_ID\n\t\t\t\t\t,DATA_NO\n\t\t\t\t\t,EVENT_DT\n\t\t\t\t\t,MEMO\n\t\t\t\t\t,SessionID\n\t\t\t\t\t,ProcPK\n\t\t\t\t\t,PROC_TARGET\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'$$FunctionID$$'\n\t\t\t\t\t,'update'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'$$PK_COLUMN$$'\n\t\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t\t,'${LOGPK}'\n\t\t\t\t\t,'TESTTABLE'\n\t\t\t\t\t);\n\n\t\t\t\tIF EXISTS (\n\t\t\t\t\t\tSELECT *\n\t\t\t\t\t\tFROM TESTTABLE WITH (NOLOCK)\n\t\t\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$'\n\t\t\t\t\t\t\tAND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t\t\t)\n\t\t\t\tBEGIN\n\t\t\t\t\t/* 3.2 DATA Detail LOG (before modified) */\n\t\t\t\t\tINSERT INTO LOG_TESTTABLE /* WITH (ROWLOCK) */\n\t\t\t\t\t\t(\n\t\t\t\t\t\tDATA_CHANGE_LOG_ID\n\t\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t\t,CRUD_STATE\n\t\t\t\t\t\t,PK_COLUMN\n\t\t\t\t\t\t,COLUMN1\n\t\t\t\t\t\t,COLUMN2\n\t\t\t\t\t\t,COLUMN3\n\t\t\t\t\t\t,COLUMN4\n\t\t\t\t\t\t,COLUMN5\n\t\t\t\t\t\t,COLUMN6\n\t\t\t\t\t\t,COLUMN7\n\t\t\t\t\t\t,COLUMN8\n\t\t\t\t\t\t,COLUMN9\n\t\t\t\t\t\t,COLUMN10\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t\t,DEL_DT\n\t\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t\t)\n\t\t\t\t\tSELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t\t\t\t,'$$FunctionID$$' AS FUNC_ID\n\t\t\t\t\t\t,'U' AS CRUD_STATE\n\t\t\t\t\t\t,PK_COLUMN\n\t\t\t\t\t\t,COLUMN1\n\t\t\t\t\t\t,COLUMN2\n\t\t\t\t\t\t,COLUMN3\n\t\t\t\t\t\t,COLUMN4\n\t\t\t\t\t\t,COLUMN5\n\t\t\t\t\t\t,COLUMN6\n\t\t\t\t\t\t,COLUMN7\n\t\t\t\t\t\t,COLUMN8\n\t\t\t\t\t\t,COLUMN9\n\t\t\t\t\t\t,COLUMN10\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t\t,DEL_DT\n\t\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\tFROM TESTTABLE WITH (NOLOCK)\n\t\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\n\t\t\t\t\t/* 3.3 Action Return */\n\t\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t\t\t(\n\t\t\t\t\t\tProcPK\n\t\t\t\t\t\t,hashValues\n\t\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t\t,MEMO\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES (\n\t\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t\t,'0'\n\t\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t\t,'$$COLUMN1$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t,'U'\n\t\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t\t);\n\t\t\t\tEND\n\t\t\t\tELSE\n\t\t\t\tBEGIN\n\t\t\t\t\t/* 3.4 Action Return */\n\t\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t\t\t(\n\t\t\t\t\t\tProcPK\n\t\t\t\t\t\t,hashValues\n\t\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t\t,MEMO\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES (\n\t\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t\t,'-1'\n\t\t\t\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t\t\t\t,'$$COLUMN1$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t,'U'\n\t\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t\t);\n\t\t\t\tEND\n\n\t\t\t\t/* 3.5 功能主要異動 Table */\n\t\t\t\tUPDATE TESTTABLE\n\t\t\t\tWITH (ROWLOCK)\n\n\t\t\t\tSET COLUMN1 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN1$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN1\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN1$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN2 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN2$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN2, '0') \= '$$COLUMN2$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN2$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN2$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN2\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN3 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISDATE('$$COLUMN3$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN3, CONVERT(DATETIME, '', 23)) \= '$$COLUMN3$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN COLUMN3\n\t\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$COLUMN3$$')\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN3\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN4 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN4$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN4\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN4$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN5 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN5$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN COLUMN5\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN5$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN6 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN6$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN6\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN6$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN7 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN7$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN7\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN7$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN8 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN8$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN8\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN8$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN9 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN9$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN9\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN9$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN10 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN10$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN10\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN10$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN11 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN11$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN11, '0') \= '$$COLUMN11$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN11$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN11\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN11$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN11\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN12 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN12$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN12, '0') \= '$$COLUMN12$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN12$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN12\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN12$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN12\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN13 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISDATE('$$COLUMN13$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN13, CONVERT(DATETIME, '', 23)) \= '$$COLUMN13$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN COLUMN13\n\t\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$COLUMN13$$')\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN13\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN14 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN14$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN14\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN14$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN15 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN15$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN COLUMN15\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN15$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN16 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN16$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN16, '0') \= '$$COLUMN16$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN16$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN16\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN16$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN16\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN17 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISDATE('$$COLUMN17$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN17, CONVERT(DATETIME, '', 23)) \= '$$COLUMN17$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN COLUMN17\n\t\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$COLUMN17$$')\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN17\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN18 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN18$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN18\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN18$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN19 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN19$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN COLUMN19\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN19$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN20 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN20$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN20, '0') \= '$$COLUMN20$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN20$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN20\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN20$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN20\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN21 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISDATE('$$COLUMN21$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN21, CONVERT(DATETIME, '', 23)) \= '$$COLUMN21$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN COLUMN21\n\t\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$COLUMN21$$')\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN21\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN22 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN22$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN22\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN22$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN23 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN23$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN COLUMN23\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN23$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN24 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN24$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN24, '0') \= '$$COLUMN24$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN24$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN24\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN24$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN24\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN25 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISDATE('$$COLUMN25$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN25, CONVERT(DATETIME, '', 23)) \= '$$COLUMN25$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN COLUMN25\n\t\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$COLUMN25$$')\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN25\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN26 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN26$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN26\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN26$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN27 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN27$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN COLUMN27\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN27$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN28 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN28$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN28, '0') \= '$$COLUMN28$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN28$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN28\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN28$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN28\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN29 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISDATE('$$COLUMN29$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN29, CONVERT(DATETIME, '', 23)) \= '$$COLUMN29$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN COLUMN29\n\t\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$COLUMN29$$')\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN29\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN30 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN30$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN30\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN30$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN31 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN31$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN COLUMN31\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN31$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN32 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN32$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN32, '0') \= '$$COLUMN32$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN32$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN32\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN32$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN32\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN33 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISDATE('$$COLUMN33$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN33, CONVERT(DATETIME, '', 23)) \= '$$COLUMN33$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN COLUMN33\n\t\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$COLUMN33$$')\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN33\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN34 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN34$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN34\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN34$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN35 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN35$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN COLUMN35\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN35$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN36 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISDATE('$$COLUMN36$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN36, CONVERT(DATETIME, '', 23)) \= '$$COLUMN36$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN COLUMN36\n\t\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$COLUMN36$$')\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN36\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN37 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN37$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN37\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN37$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN38 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN38$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN COLUMN38\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN38$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN39 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN39$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN39, '0') \= '$$COLUMN39$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN39$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN39\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN39$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN39\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN40 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISDATE('$$COLUMN40$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN40, CONVERT(DATETIME, '', 23)) \= '$$COLUMN40$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN COLUMN40\n\t\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$COLUMN40$$')\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN40\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN47 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN47$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN47\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN47$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN48 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN48$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN COLUMN48\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN48$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN49 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN49$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN49, '0') \= '$$COLUMN49$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN49$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN49\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN49$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN49\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN50 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISDATE('$$COLUMN50$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN50, CONVERT(DATETIME, '', 23)) \= '$$COLUMN50$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN COLUMN50\n\t\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$COLUMN50$$')\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN50\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN51 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN51$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN51\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN51$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN52 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN52$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN COLUMN52\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN52$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN53 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN53$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN53, '0') \= '$$COLUMN53$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN53$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN53\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN53$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN53\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN54 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISDATE('$$COLUMN54$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN54, CONVERT(DATETIME, '', 23)) \= '$$COLUMN54$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN COLUMN54\n\t\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$COLUMN54$$')\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN54\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN55 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN55$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN55\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN55$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN56 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN56$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN COLUMN56\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN56$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN57 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$COLUMN57$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN57, '0') \= '$$COLUMN57$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$COLUMN57$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE COLUMN57\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$COLUMN57$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN57\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN58 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISDATE('$$COLUMN58$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(COLUMN58, CONVERT(DATETIME, '', 23)) \= '$$COLUMN58$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN COLUMN58\n\t\t\t\t\t\t\t\t\t\t\tELSE CONVERT(DATETIME, '$$COLUMN58$$')\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE COLUMN58\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN59 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN59$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COLUMN59\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN59$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,COLUMN60 \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COLUMN60$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN COLUMN60\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COLUMN60$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,COMPANY_ID \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$COMPANY_ID$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN COMPANY_ID\n\t\t\t\t\t\t\tELSE SUBSTRING('$$COMPANY_ID$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,DATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\t\t\tEND\n\n\tSELECT @RETURN_CODE \= RETURN_CODE\n\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\tFROM MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\tFOR JSON AUTO\n\t\t\t)\n\tFROM MEM_API_RESULT\n\tWHERE hashValues \= @FROM_OUTSIDE\nEND TRY\n\nBEGIN CATCH\n\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t,'$$COLUMN1$$' AS DATA_UNIQUE_KEY\n\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t) AS A /* WITH (ROWLOCK) */\n\t\t\tFOR JSON AUTO\n\t\t\t)\nEND CATCH\n
ModelMW_DS=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM TESTTABLE WITH (NOLOCK)\n\t\tWHERE (\n\t\t\t\tDATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_COLUMN\n\t\t\t) AS RowNum\n\t\t,PK_COLUMN\n\t\t,COLUMN1\n\t\t,CAST(COLUMN2 AS VARCHAR) AS COLUMN2\n\t\t,CONVERT(VARCHAR, COLUMN3, 120) AS COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT\n\t\t,DEL_USER_ID\n\t\t,DEL_USER_COMPANY_ID\n\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT\n\t\t,COMPANY_ID\n\t\t,DATA_STATUS\n\tFROM TESTTABLE WITH (NOLOCK)\n\tWHERE (\n\t\t\tDATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t\t\t)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n
ModelQD_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tINSERT INTO TESTTABLE (\n\t\tDATA_STATUS\n\t\t,COMPANY_ID\n\t\t,COLUMN1\n\t\t,COLUMN2\n\t\t,COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t)\n\tVALUES (\n\t\t'$$DATA_STATUS$$'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'$$COLUMN1$$'\n\t\t,'$$COLUMN2$$'\n\t\t,'$$COLUMN3$$'\n\t\t,'$$COLUMN4$$'\n\t\t,'$$COLUMN5$$'\n\t\t,'$$COLUMN6$$'\n\t\t,'$$COLUMN7$$'\n\t\t,'$$COLUMN8$$'\n\t\t,'$$COLUMN9$$'\n\t\t,'$$COLUMN10$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$COMPANY_ID$$'\n\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'insert'\n\t\t,'TESTTABLE'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\nEND\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\tEXEC (\n\t\t\t\t' DECLARE @UPDATE_SQL varchar(MAX),         @UPDATE_COUNT_A varchar(MAX) \='''',         @UPDATE_COUNT_B varchar(MAX) \=             ''COLUMN1\=''''$$COLUMN1$$'''',             COLUMN2\=''''$$COLUMN2$$'''',             COLUMN3\=''''$$COLUMN3$$'''',             COLUMN4\=''''$$COLUMN4$$'''',             COLUMN5\=''''$$COLUMN5$$'''',             COLUMN6\=''''$$COLUMN6$$'''',             COLUMN7\=''''$$COLUMN7$$'''',             COLUMN8\=''''$$COLUMN8$$'''',             COLUMN9\=''''$$COLUMN9$$'''',             COLUMN10\=''''$$COLUMN10$$'''',             LAST_MOD_USER_ID\=''''${PARAM_SOURCE_COMING}'''',             LAST_MOD_USER_COMPANY_ID\=''''$$COMPANY_ID$$'''',             LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)''; SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+        CASE            WHEN CHARINDEX(''$$'', VALUE) <\= 0 THEN VALUE+'',''            ELSE ''''        END                                    FROM STRING_SPLIT(@UPDATE_COUNT_B, '',''); IF LEN(@UPDATE_COUNT_A) > 0  BEGIN     SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1)      SET @UPDATE_SQL \= ''UPDATE TESTTABLE SET ''+ @UPDATE_COUNT_A +'' WHERE PK_COLUMN \= ''''$$PK_COLUMN$$'''';''     EXEC (@UPDATE_SQL);       END      '\n\t\t\t\t)\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'TESTTABLE'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t\t,GETDATE()\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN\n\t\t\tDELETE TESTTABLE\n\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\tSessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,FUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,PROC_TARGET\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'$$FunctionID$$'\n\t\t\t\t,'delete'\n\t\t\t\t,'TESTTABLE'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t\t\t,GETDATE()\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n
ModelQD_DS=SELECT *\n\t,(\n\t\tSELECT count(*)\n\t\tFROM TESTTABLE\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_COLUMN\n\t\t\t) AS RowNum\n\t\t,PK_COLUMN\n\t\t,COLUMN1\n\t\t,COLUMN2\n\t\t,COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,COMPANY_ID\n\t\t,DATA_STATUS\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t,LAST_MOD_DT\n\t\t,DEL_USER_ID\n\t\t,DEL_USER_COMPANY_ID\n\t\t,DEL_DT\n\tFROM TESTTABLE\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n
ModelQDS_DS=SELECT *\n\t,(\n\t\tSELECT count(*)\n\t\tFROM TESTTABLE\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_COLUMN\n\t\t\t) AS RowNum\n\t\t,PK_COLUMN\n\t\t,COLUMN1\n\t\t,COLUMN2\n\t\t,COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,COMPANY_ID\n\t\t,DATA_STATUS\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t,LAST_MOD_DT\n\t\t,DEL_USER_ID\n\t\t,DEL_USER_COMPANY_ID\n\t\t,DEL_DT\n\tFROM TESTTABLE\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n
ModelQDS_DS_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tINSERT INTO TESTTABLE (\n\t\tDATA_STATUS\n\t\t,COMPANY_ID\n\t\t,COLUMN1\n\t\t,COLUMN2\n\t\t,COLUMN3\n\t\t,COLUMN4\n\t\t,COLUMN5\n\t\t,COLUMN6\n\t\t,COLUMN7\n\t\t,COLUMN8\n\t\t,COLUMN9\n\t\t,COLUMN10\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t)\n\tVALUES (\n\t\t'$$DATA_STATUS$$'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'$$COLUMN1$$'\n\t\t,'$$COLUMN2$$'\n\t\t,'$$COLUMN3$$'\n\t\t,'$$COLUMN4$$'\n\t\t,'$$COLUMN5$$'\n\t\t,'$$COLUMN6$$'\n\t\t,'$$COLUMN7$$'\n\t\t,'$$COLUMN8$$'\n\t\t,'$$COLUMN9$$'\n\t\t,'$$COLUMN10$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$COMPANY_ID$$'\n\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG (\n\t\tSessionID\n\t\t,ProcPK\n\t\t,FUNC_ID\n\t\t,PROC_TYPE\n\t\t,PROC_TARGET\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t)\n\tVALUES (\n\t\t'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'$$FunctionID$$'\n\t\t,'insert'\n\t\t,'TESTTABLE'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,IDENT_CURRENT('TESTTABLE')\n\t\t,GETDATE()\n\t\t,'$$MEMO$$'\n\t\t);\nEND\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\tSET QUOTED_IDENTIFIER OFF\n\n\t\tEXEC (\n\t\t\t\t"  SET QUOTED_IDENTIFIER OFF DECLARE @PROC_TARGET AS VARCHAR(50);  DECLARE @WHERE_CONDITION AS VARCHAR(50);   SET @PROC_TARGET \= 'TESTTABLE';   SET @WHERE_CONDITION \= "" WHERE 1\=1   AND PK_COLUMN \= '$$PK_COLUMN$$'"";  DECLARE @UPDATE_SQL varchar(MAX),                     @UPDATE_COUNT_A varchar(MAX) \='',                                     @UPDATE_COUNT_B varchar(MAX) \= ""COLUMN1\='$$COLUMN1$$',                                                                      COLUMN2\='$$COLUMN2$$',                                                                      COLUMN3\='$$COLUMN3$$',                                                                      COLUMN4\='$$COLUMN4$$',                                                                      COLUMN5\='$$COLUMN5$$',                                                                      COLUMN6\='$$COLUMN6$$',                                                                      COLUMN7\='$$COLUMN7$$',                                                                      COLUMN8\='$$COLUMN8$$',                                                                      COLUMN9\='$$COLUMN9$$',                                                                      COLUMN10\='$$COLUMN10$$',                                                                      LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}',                                                                      LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$',                                                                      LAST_MOD_DT\=CONVERT(VARCHAR(19), GETDATE(), 120)"";  DECLARE @CIndex smallint WHILE (@UPDATE_COUNT_B<>'') BEGIN SET @CIndex\=CHARINDEX(',', @UPDATE_COUNT_B) IF @CIndex\=0 SET @CIndex\=LEN(@UPDATE_COUNT_B)+1 SELECT @UPDATE_COUNT_A \= @UPDATE_COUNT_A+ CASE WHEN CHARINDEX('$$', SUBSTRING(@UPDATE_COUNT_B, 1, @CIndex-1)) <\= 0 THEN SUBSTRING(@UPDATE_COUNT_B, 1, @CIndex-1)+',' ELSE '' END    \t\t \t\tIF @CIndex\=LEN(@UPDATE_COUNT_B)+1 BREAK SET @UPDATE_COUNT_B\=SUBSTRING(@UPDATE_COUNT_B, @CIndex+1, LEN(@UPDATE_COUNT_B)-@CIndex) END  IF LEN(@UPDATE_COUNT_A) > 0 BEGIN SET @UPDATE_COUNT_A \= subString(@UPDATE_COUNT_A, 1, LEN(@UPDATE_COUNT_A)-1) SET @UPDATE_SQL \= 'UPDATE ' +@PROC_TARGET+ ' SET '+ @UPDATE_COUNT_A +' '+ @WHERE_CONDITION EXEC (@UPDATE_SQL);  END SET QUOTED_IDENTIFIER ON"\n\t\t\t\t)\n\n\t\tSET QUOTED_IDENTIFIER ON\n\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tSessionID\n\t\t\t,ProcPK\n\t\t\t,FUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,PROC_TARGET\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'TESTTABLE'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$PK_COLUMN$$'\n\t\t\t,GETDATE()\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN\n\t\t\tDELETE TESTTABLE\n\t\t\tWHERE PK_COLUMN \= '$$PK_COLUMN$$';\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\tSessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,FUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,PROC_TARGET\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'$$FunctionID$$'\n\t\t\t\t,'delete'\n\t\t\t\t,'TESTTABLE'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'$$PK_COLUMN$$'\n\t\t\t\t,GETDATE()\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n
ModelSteveTest=BEGIN\nDECLARE @USERID varchar(20), @RETURN_CODE INT, @RETURN_MSG VARCHAR(1000)\n\nSET @USERID \= 'steve'\n\nDECLARE @TB_DATA TABLE(    SRC_TB_NAME      varchar(50),   FORM_NO          varchar(30),   FORM_DESC        nvarchar(255),\n                           WF_STEP_DESC     nvarchar(255), APPLICANT_USERID varchar(20),   DEADLINE         datetime,\n                           WF_DATA_SEQ      int,           WF_DATA_STEP_SEQ int,           WF_DATA_STEP_EXE_SEQ int,\n                           EXECUTOR_TYPE    varchar(20),   EXEC_TYPE        varchar(20),   EXECUTOR_VALUE   nvarchar(255),\n                           WF_ID            varchar(20),   WF_STEP_SEQ      int,           FORM_PK_COL_NAME varchar(30),\n                           FORM_PK          int)\n\nINSERT INTO @TB_DATA\nEXEC JHSP_GET_WF_TODOLIST @USERID, @RETURN_CODE, @RETURN_MSG\n\nSELECT  *  \nFROM (SELECT   COUNT(*) OVER()                        AS totalProperty\n             , ROW_NUMBER() OVER ( ORDER BY DEADLINE) AS RowNum\n             , SRC_TB_NAME\n             , FORM_NO\n             , FORM_DESC\n             , WF_STEP_DESC\n             , APPLICANT_USERID\n             , DEADLINE\n             , WF_DATA_SEQ\n             , WF_DATA_STEP_SEQ\n             , WF_DATA_STEP_EXE_SEQ\n             , EXECUTOR_TYPE\n             , EXEC_TYPE\n             , EXECUTOR_VALUE\n             , WF_ID\n             , WF_STEP_SEQ\n             , FORM_PK_COL_NAME\n             , FORM_PK\n             , D.CODE_VALUE_DESC AS SRC_TB_NAME_DESC\n        FROM @TB_DATA T\n        LEFT JOIN JH_REF_CODE_DETAIL D ON (D.CODE_TYPE \= 'SRC_TB_NAME' AND D.CODE_VALUE \=  T.SRC_TB_NAME)\n) AS new1  \nWHERE RowNum > 0 AND RowNum <\= (0 + 15);\nEND
MS_DB1=SELECT B.PK_PROP,\n       A.PROP_TYPE,\n       A.PROP_ID,\n       MAX(CASE\n               WHEN B.PROP_KEY \='DRIVER' THEN PROP_VALUE\n               ELSE ''\n           END) AS DRIVER,\n       A.JNDI_NAME AS JNDINAME,\n       MAX(CASE\n               WHEN B.PROP_KEY \='MaxActive' THEN PROP_VALUE\n               ELSE ''\n           END) AS MAXACTIVE,\n       MAX(CASE\n               WHEN B.PROP_KEY \='MaxIdle' THEN PROP_VALUE\n               ELSE ''\n           END) AS MAXIDLE,\n       MAX(CASE\n               WHEN B.PROP_KEY \='MaxWait' THEN PROP_VALUE\n               ELSE ''\n           END) AS MAXWAIT,\n       MAX(CASE\n               WHEN B.PROP_KEY \='MinIdle' THEN PROP_VALUE\n               ELSE ''\n           END) AS MINIDLE,\n       MAX(CASE\n               WHEN B.PROP_KEY \='URL' THEN PROP_VALUE\n               ELSE ''\n           END) AS URL,\n       MAX(CASE\n               WHEN B.PROP_KEY \='USER' THEN PROP_VALUE\n               ELSE ''\n           END) AS [USER],\n       MAX(CASE\n               WHEN B.PROP_KEY \='PASSWORD' THEN PROP_VALUE\n               ELSE ''\n           END) AS [PASSWORD],\n       MAX(CASE\n               WHEN (B.PROP_KEY \='PASSWORD'\n                     AND B.ENCRYPTED\='Y') THEN 'Y'\n               ELSE 'N'\n           END) AS PWDENCRYPTED,\n       MAX(CASE\n               WHEN B.PROP_KEY \='initialSize' THEN PROP_VALUE\n               ELSE ''\n           END) AS INITIALSIZE,\n       MAX(CASE\n               WHEN B.PROP_KEY \='testOnBorrow' THEN PROP_VALUE\n               ELSE ''\n           END) AS TESTONBORROW,\n       MAX(CASE\n               WHEN B.PROP_KEY \='testWhileIdle' THEN PROP_VALUE\n               ELSE ''\n           END) AS TESTWHILEIDLE,\n       MAX(CASE\n               WHEN B.PROP_KEY \='testOnReturn' THEN PROP_VALUE\n               ELSE ''\n           END) AS TESTONRETURN,\n       MAX(CASE\n               WHEN B.PROP_KEY \='timeBetweenEvictionRunsMillis' THEN PROP_VALUE\n               ELSE ''\n           END) AS TIMEBETWEENEVICTIONRUNSMILLIS,\n       MAX(CASE\n               WHEN B.PROP_KEY \='minEvictableIdleTimeMillis' THEN PROP_VALUE\n               ELSE ''\n           END) AS MINEVICTABLEIDLETIMEMILLIS,\n       MAX(CASE\n               WHEN B.PROP_KEY \='validationQuery' THEN PROP_VALUE\n               ELSE ''\n           END) AS VALIDATIONQUERY,\n       MAX(CASE\n               WHEN B.PROP_KEY \='logAbandoned' THEN PROP_VALUE\n               ELSE ''\n           END) AS LOGABANDONED,\n       MAX(CASE\n               WHEN B.PROP_KEY \='removeAbandoned' THEN PROP_VALUE\n               ELSE ''\n           END) AS REMOVEABANDONED,\n       MAX(CASE\n               WHEN B.PROP_KEY \='removeAbandonedTimeout' THEN PROP_VALUE\n               ELSE ''\n           END) AS REMOVEABANDONEDTIMEOUT,\n       MAX(CASE\n               WHEN B.PROP_KEY \='OwnerName' THEN PROP_VALUE\n               ELSE ''\n           END) AS OWNERNAME,\n       MAX(CASE\n               WHEN B.PROP_KEY \='DBName' THEN PROP_VALUE\n               ELSE ''\n           END) AS DBNAME,\n       MAX(CASE\n               WHEN B.PROP_KEY \= 'alternateUsernameAllowed' THEN PROP_VALUE\n               ELSE ''\n           END) AS ALTERNATEUSERNAMEALLOWED,\n       MAX(CASE\n               WHEN B.PROP_KEY \= 'Auth' THEN PROP_VALUE\n               ELSE 'DB'\n           END) AS AUTH,\n       MAX(CASE\n               WHEN B.PROP_KEY \= 'MaxGetConnCount' THEN PROP_VALUE\n               ELSE ''\n           END) AS MAXGETCONNCOUNT,\n       MAX(CASE\n               WHEN B.PROP_KEY \= 'retryConnInterval' THEN PROP_VALUE\n               ELSE ''\n           END) AS RETRYCONNINTERVAL,\n\t\tMAX(CASE\n               WHEN B.PROP_KEY \= 'autoCommit' THEN PROP_VALUE\n               ELSE ''\n           END) AS AUTOCOMMIT\nFROM PROP_MASTER A\nINNER JOIN PROP_DETAIL B ON (A.PK_PROP \= B.PK_PROP)\nLEFT JOIN JH_WS02_REF_MAPDATA_TYPE C ON A.PROP_TYPE \= C.VALUE\nWHERE C.IS_BINDING \= 'Y'\n  AND (A.PK_PROP \= ?\n       OR '0' \= ?)\n  AND A.ENABLED_FLAG\='Y'\nGROUP BY B.PK_PROP,\n         A.PROP_ID,\n         A.PROP_TYPE,\n         A.JNDI_NAME
MW_backup_del=SysAPI/backup/main_log.kjb
MW_CMD=Funs/ExecCmd/Entrance.kjb
MW_CODE_MAP2=SELECT * FROM JH_WS02_CodeMap WHERE isUse \= 'Y'
MW_CODE_MAP=SELECT REPLACE(REPLACE(REPLACE((SELECT CONCAT(A.char_big5, ',' , A.Code_big5 , ',' , A.Code_utf16 , ',' , A.Code_CNS , ',' , A.F5 , ',' , A.F6 , ',' , A.F7 , ',' , A.F8 , ',' , A.F9 , ',' , A.MapCode_utf8 , ',' , A.ConvertCode_utf8) AS CODELIST \nFROM CodeMap AS A WITH(NOLOCK) FOR XML PATH('')),'</CODELIST><CODELIST>','exampleisbetterthanprecept'),'</CODELIST>',''),'<CODELIST>','') AS CLISTS\n
MW_CRUD=Funs/ExecCRUD/Entrance.kjb
MW_DB_COPY=Funs/DbCopy/Entrances.kjb
MW_DB_COPY_Chris_Test=Funs/DbCopy/Entrances.kjb
MW_DB_COPY_SELECT=SELECT * FROM DB_COPY_SET WITH(NOLOCK) WHERE EXEC_TYPE \= 'X' OR (EXEC_TYPE \= 'O' AND EXEC_REPEAT \= 'Y')
MW_DB_COPY_SELECT_V2=SELECT * FROM JH_WS02_DB_COPY_SET WITH(NOLOCK) WHERE EXEC_TYPE \= 'X' OR (EXEC_TYPE \= 'O' AND EXEC_REPEAT \= 'Y')
MW_DB_COPY_SELECT_V3=SELECT * FROM JH_WS02_DB_COPY_SET2 WITH(NOLOCK) WHERE (EXEC_TYPE \= 'X' OR (EXEC_TYPE \= 'O' AND EXEC_REPEAT \= 'Y')) AND EXEC_GROUP \= 'VER2'
MW_DB_COPY_V2=Funs/DbCopyJoin/Entrances.kjb
MW_DB_COPY_V3=Funs/DbCopyJoin3/Entrances.kjb
MW_FILE_COPY=Funs/FileCopyJoin1/Entrances.kjb
MW_FILE_COPY_ESUN=Funs/FileCopyJoin2/Entrances.kjb
MW_FILE_COPY_SELECT=SELECT * FROM JH_WS02_FILE_COPY_SET WITH(NOLOCK) WHERE (EXEC_TYPE \= 'X' OR (EXEC_TYPE \= 'O' AND EXEC_REPEAT \= 'Y')) AND EXEC_GROUP \= 'VER1'\n\n/* 原本\nSELECT * FROM FILE_COPY_SET WITH(NOLOCK) WHERE EXEC_TYPE \= 'X' OR (EXEC_TYPE \= 'O' AND EXEC_REPEAT \= 'Y')\n*/
MW_FILE_COPY_SELECT_ESUN=SELECT * FROM JH_WS02_FILE_COPY_SET WITH(NOLOCK) WHERE (EXEC_TYPE \= 'X' OR (EXEC_TYPE \= 'O' AND EXEC_REPEAT \= 'Y')) AND EXEC_GROUP \= 'VER2'\n\n/* 原本\nUPDATE FILE_COPY_SET_ESUN WITH(ROWLOCK) \nSET DT_START \= NULL,DT_END \= NULL,EXEC_CODE \= NULL, EXEC_RESULT \= NULL \nWHERE EXEC_TYPE \= 'X' OR (EXEC_TYPE \= 'O' AND EXEC_REPEAT \= 'Y');\n\nSELECT  * FROM FILE_COPY_SET_ESUN WITH(NOLOCK) \nWHERE EXEC_TYPE \= 'X' OR (EXEC_TYPE \= 'O' AND EXEC_REPEAT \= 'Y')\nORDER BY TARGET_TABLE_NAME ASC\n*/
MW_FILE_COPY_SELECT_V2=SELECT * FROM JH_WS02_FILE_COPY_SET WITH(NOLOCK) WHERE (EXEC_TYPE \= 'X' OR (EXEC_TYPE \= 'O' AND EXEC_REPEAT \= 'Y')) AND EXEC_GROUP \= 'VER2'
MW_FILE_COPY_SELECT_V3=SELECT * FROM JH_WS02_FILE_COPY_SET2 WITH(NOLOCK) WHERE (EXEC_TYPE \= 'X' OR (EXEC_TYPE \= 'O' AND EXEC_REPEAT \= 'Y')) AND EXEC_GROUP \= 'VER3'
MW_FILE_COPY_V2=Funs/FileCopyJoin2/Entrances.kjb
MW_FILE_COPY_V3=Funs/FileCopyJoin3/Entrances.kjb
MW_FILE_DOWNLOAD=Funs/File/DownLoad/Entrance.kjb
MW_FILE_DOWNLOAD_GET_VL_LIST=SELECT * FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$'
MW_FILE_UPLOAD=Funs/File/UpLoad/Entrance.kjb
MW_FILE_UPLOAD_GET_LIST=DECLARE @PARAM_DIR_PATH VARCHAR(500),@PARAM_ORG_TYPE VARCHAR(100)\nSET @PARAM_DIR_PATH \= '$$PARAM_DIR_PATH$$'\nSET @PARAM_ORG_TYPE \= '$$PARAM_ORG_TYPE$$'\nSELECT * FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_ORG_TYPE \= @PARAM_ORG_TYPE AND (L_TEXT \= @PARAM_DIR_PATH OR L_ORG_CODE \= @PARAM_DIR_PATH)\n
MW_LOAD_DEFVALS_GET_AP_LIST=SELECT * FROM JH_WS02_WEBSERVICE_INFO WITH(NOLOCK)
MW_LOAD_DEFVALS_GET_DEFVAL_LIST=SELECT * FROM JH_WS02_MW_DEFVALS WITH(NOLOCK) WHERE IS_USE \= 'Y'
MW_LOAD_DEFVALS_GET_JNDI_LIST=SELECT B.PROP_VALUE AS 'JNDI_USE' \nFROM PROP_MASTER A WITH(NOLOCK) \nLEFT JOIN PROP_DETAIL B WITH(NOLOCK) ON A.PK_PROP \= B.PK_PROP \nWHERE A.ENABLED_FLAG \= 'Y' AND B.PROP_KEY \= 'JNDIName'
MW_LOAD_DEFVALS_GET_LINE_LIST=SELECT \n\tA.PROP_ID,A.JNDI_NAME,A.PROP_DESC,A.PROP_FILE,A.PROP_TYPE,A.ENABLED_FLAG,\n\tB.SEQ,B.PROP_KEY,B.PROP_VALUE,B.ENCRYPTED\nFROM PROP_MASTER A WITH(NOLOCK) \nLEFT JOIN PROP_DETAIL AS B WITH(NOLOCK) ON A.PK_PROP \= B.PK_PROP \nWHERE A.PROP_TYPE IN ('SSH','PATH','CMD')
MW_MAIL_CREATE_TEMPLATE=DECLARE @PK_SENDMAIL_CONTENT INT\nSET @PK_SENDMAIL_CONTENT \= (SELECT MAX(PK_SENDMAIL_CONTENT) + 1 FROM JH_SENDMAIL_CONTENT WITH(NOLOCK))\n\nINSERT INTO JH_SENDMAIL_CONTENT\n(PK_SENDMAIL_CONTENT,MAIL_TYPE,SUB_TYPE,SUBJECT,CONTENT\n,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT)\nVALUES\n(@PK_SENDMAIL_CONTENT,'$$GROUP_MAIL_TYPE$$','$$GROUP_SUB_TYPE$$','$$GROUP_SUBJECT$$','$$GROUP_CONTENT$$'\n,'${PARAM_COMPANY}','${PARAM_SOURCE_COMING}','${PARAM_COMPANY}',CONVERT(VARCHAR,GETDATE(),120))
MW_MAIL_DELETE_TEMPLATE=DELETE JH_SENDMAIL_CONTENT WHERE PK_SENDMAIL_CONTENT \= '$$GROUP_PK_SENDMAIL_CONTENT$$'
MW_MAIL_SELECT_LIST=DECLARE @PK_SENDMAIL_CONTENT VARCHAR(100)\nSET @PK_SENDMAIL_CONTENT \= (CASE '$$GROUP_PK_SENDMAIL_CONTENT$$' WHEN '' THEN '0' ELSE '$$GROUP_PK_SENDMAIL_CONTENT$$' END)\n\nSELECT * FROM JH_SENDMAIL_CONTENT WITH(NOLOCK) WHERE @PK_SENDMAIL_CONTENT \= '0' OR PK_SENDMAIL_CONTENT \= @PK_SENDMAIL_CONTENT
MW_MAIL_SELECT_TEMPLATE=DECLARE @PK_SENDMAIL_CONTENT VARCHAR(100)\nSET @PK_SENDMAIL_CONTENT \= (CASE '$$GROUP_PK_SENDMAIL_CONTENT$$' WHEN '' THEN '0' ELSE '$$GROUP_PK_SENDMAIL_CONTENT$$' END)\n\nSELECT * FROM JH_SENDMAIL_CONTENT WITH(NOLOCK) WHERE @PK_SENDMAIL_CONTENT \= '0' OR PK_SENDMAIL_CONTENT \= @PK_SENDMAIL_CONTENT
MW_MAIL_UPDATE=UPDATE JH_SENDMAIL_CONTENT\nSET\n\tMAIL_TYPE \= '$$PARAM_MAIL_TYPE$$',\n\tSUB_TYPE \= '$$PARAM_SUB_TYPE$$',\n\tSUBJECT \= '$$PARAM_SUBJECT$$',\n\tCONTENT \= '$$PARAM_CONTENT$$',\n\tLAST_MOD_USER_COMPANY_ID \= '${PARAM_COMPANY}',\n\tLAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}',\n\tLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE\n\tPK_SENDMAIL_CONTENT \= '$$PARAM_PK_SENDMAIL_CONTENT$$'
MW_MAIL_UPDATE_TEMPLATE=UPDATE JH_SENDMAIL_CONTENT\nSET\n\tMAIL_TYPE \= '$$GROUP_MAIL_TYPE$$',\n\tSUB_TYPE \= '$$GROUP_SUB_TYPE$$',\n\tSUBJECT \= '$$GROUP_SUBJECT$$',\n\tCONTENT \= '$$GROUP_CONTENT$$',\n\tLAST_MOD_USER_COMPANY_ID \= '${PARAM_COMPANY}',\n\tLAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}',\n\tLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE\n\tPK_SENDMAIL_CONTENT \= '$$GROUP_PK_SENDMAIL_CONTENT$$'
MW_mailroom=SysAPI/mailroom/MAIL_LOG.kjb
MW_PRINT_AGAIN=Funs/PrintAgain/Entrance.kjb
MW_PROCESS_SQL_A0001=SELECT * FROM JH_WS02_CODE_FORMAT_LIST WITH(NOLOCK) WHERE CODE_ID_PK \= (SELECT TOP 1 PK FROM JH_WS02_CODE_LIST WITH(NOLOCK) WHERE CODE_ID \= '$$CODE_ID$$')
MW_PROCESS_USE_A0001=SELECT * FROM JH_WS02_CODE_FORMAT_LIST WITH(NOLOCK) WHERE CODE_ID_PK \= '$$PK$$'
MW_PROCESS_USE_A0002=SELECT * FROM JH_WS02_CODE_IP_RELATION WITH(NOLOCK) WHERE CODE_ID_PK \= '$$PK$$'
MW_PROCESS_USE_A0003=SELECT A.CW_IDX,A.CODE_ID_PK,A.CLASS_NUM,A.WEB_SERVICE_CODE,B.WEB_SERVICE_NAME,B.WEB_SERVICE_IP,B.WEB_SERVICE_DOMAIN,B.WEB_SERVICE_SUB_DOMAIN\nFROM JH_WS02_CODE_WS_RELATION AS A WITH(NOLOCK) \nLEFT JOIN JH_WS02_WEBSERVICE_INFO AS B WITH(NOLOCK) ON A.WEB_SERVICE_CODE \= B.WEB_SERVICE_CODE \nWHERE A.IS_DOING \= 'Y' AND B.IS_DOING \= 'Y' AND A.CODE_ID_PK \= '$$PK$$'\nORDER BY A.CLASS_NUM ASC\n
MW_PROCESS_USE_A0004=SELECT * FROM JH_WS02_CODE_RANGE_ANALYSIS WITH(NOLOCK) WHERE CODE_ID_PK \= '$$PK$$'
MW_PROCESS_USE_A0005=SELECT * FROM JH_WS02_FLOW_SCHEDULE_LIST WITH(NOLOCK) WHERE FLOW_ID_PK \= '$$PK$$' ORDER BY CLASS_NUM ASC
MW_PROCESS_USE_A0006=SELECT * FROM JH_WS02_FLOW_IP_RELATION WITH(NOLOCK) WHERE FLOW_ID_PK \= '$$PK$$'
MW_PROCESS_USE_A0007=SELECT \nA.CW_IDX,A.FLOW_ID_PK,A.CLASS_NUM,A.WEB_SERVICE_CODE,B.WEB_SERVICE_NAME,B.WEB_SERVICE_IP,B.WEB_SERVICE_DOMAIN,B.WEB_SERVICE_SUB_DOMAIN\nFROM JH_WS02_FLOW_WS_RELATION AS A WITH(NOLOCK) \nLEFT JOIN JH_WS02_WEBSERVICE_INFO AS B WITH(NOLOCK) ON A.WEB_SERVICE_CODE \= B.WEB_SERVICE_CODE\nWHERE A.IS_DOING \= 'Y' AND B.IS_DOING \= 'Y' AND FLOW_ID_PK \= '$$PK$$'\nORDER BY A.CLASS_NUM ASC\n
MW_PROCESS_USE_A0008=SELECT * FROM JH_WS02_FLOW_RANGE_ANALYSIS WITH(NOLOCK) WHERE FLOW_ID_PK \= '$$PK$$'
MW_PROCESS_USE_B0001=BEGIN TRY\nBEGIN TRAN\n\tDECLARE  @vRETURN_KEY_STR      nvarchar(200)\n  , @vLOGPK               bigint\n  , @vMEMO                varchar(8000)\n  , @vProcType            varchar(20)\n  , @vPARAM_TASK_CODE     varchar(50)\n  , @vMASTER_PK           varchar(200)\n  , @vPK                  varchar(200)\n  , @vPARAM_FUNC_ID       varchar(100)\n  , @vACTION_FLAG         varchar(50)\n  , @vPARAM_SOURCE_COMING nvarchar(50)\n  , @vPARAM_COMPANY       nvarchar(50)\n  , @vPARAM_SESSION_ID    varchar(100)\n  , @i_LOG_IDENT          bigint\n  , @vChkDataStatus       varchar(10)\n  , @SQLSTR nvarchar(MAX), @RETURN_CODE int, @RETURN_MSG varchar(1000), @RETURN_DETAIL_MSG varchar(MAX)\n  , @vHASH_VALUE varchar(100)\n\n\tSET @vHASH_VALUE \= sys.fn_varbintohexstr(CRYPT_GEN_RANDOM(10))\n\n   --Experience is the mother of wisdom--\n\nCOMMIT TRAN \n\nSELECT @RETURN_CODE \= 0,@RETURN_MSG \= 'SUCCESS' \nSELECT @RETURN_DETAIL_MSG \= (SELECT ProcPK,hashValues,RETURN_CODE,RETURN_MSG,DATA_UNIQUE_KEY,ACTION_FLAG AS DATA_ACTION_TYPE,MEMO\n   FROM MEM_API_RESULT\n   WHERE hashValues \= @vHASH_VALUE\n   FOR JSON AUTO)\nSELECT @RETURN_DETAIL_MSG AS 'RETURN_DETAIL_MSG'\nEND TRY  \nBEGIN CATCH  \nROLLBACK TRAN \nSET @RETURN_CODE \= ERROR_NUMBER() \nSET @RETURN_MSG  \= ERROR_MESSAGE() \nEXEC JHSP_INS_API_RESULT @vLOGPK,@vHASH_VALUE,@RETURN_CODE,@RETURN_MSG,@vRETURN_KEY_STR,@vProcType,@vMEMO,@vACTION_FLAG \nSELECT @RETURN_DETAIL_MSG \= (SELECT ProcPK,hashValues,RETURN_CODE,RETURN_MSG,DATA_UNIQUE_KEY,ACTION_FLAG AS DATA_ACTION_TYPE,MEMO\n   FROM MEM_API_RESULT\n   WHERE hashValues \= @vHASH_VALUE\n   FOR JSON AUTO);\nSELECT @RETURN_DETAIL_MSG AS 'RETURN_DETAIL_MSG'\nEND CATCH
MW_PROCESS_USE_B0002=BEGIN TRY\n\tDECLARE  @vRETURN_KEY_STR      nvarchar(200)\n  , @vLOGPK               bigint\n  , @vMEMO                varchar(8000)\n  , @vProcType            varchar(20)\n  , @vPARAM_TASK_CODE     varchar(50)\n  , @vMASTER_PK           varchar(200)\n  , @vPK                  varchar(200)\n  , @vPARAM_FUNC_ID       varchar(100)\n  , @vACTION_FLAG         varchar(50)\n  , @vPARAM_SOURCE_COMING nvarchar(50)\n  , @vPARAM_COMPANY       nvarchar(50)\n  , @vPARAM_SESSION_ID    varchar(100)\n  , @i_LOG_IDENT          bigint\n  , @vChkDataStatus       varchar(10)\n  , @SQLSTR nvarchar(MAX), @RETURN_CODE int, @RETURN_MSG varchar(1000), @RETURN_DETAIL_MSG varchar(MAX)\n  , @vHASH_VALUE varchar(100)\n\n\tSET @vHASH_VALUE \= sys.fn_varbintohexstr(CRYPT_GEN_RANDOM(10))\n\n   --Experience is the mother of wisdom--\n\n\nSELECT @RETURN_CODE \= 0,@RETURN_MSG \= 'SUCCESS' \nSELECT @RETURN_DETAIL_MSG \= (SELECT ProcPK,hashValues,RETURN_CODE,RETURN_MSG,DATA_UNIQUE_KEY,ACTION_FLAG AS DATA_ACTION_TYPE,MEMO\n   FROM MEM_API_RESULT\n   WHERE hashValues \= @vHASH_VALUE\n   FOR JSON AUTO)\nEND TRY  \nBEGIN CATCH  \nROLLBACK TRAN \nSET @RETURN_CODE \= ERROR_NUMBER() \nSET @RETURN_MSG  \= ERROR_MESSAGE() \nEXEC JHSP_INS_API_RESULT @vLOGPK,@vHASH_VALUE,@RETURN_CODE,@RETURN_MSG,@vRETURN_KEY_STR,@vProcType,@vMEMO,@vACTION_FLAG \nSELECT @RETURN_DETAIL_MSG \= (SELECT ProcPK,hashValues,RETURN_CODE,RETURN_MSG,DATA_UNIQUE_KEY,ACTION_FLAG AS DATA_ACTION_TYPE,MEMO\n   FROM MEM_API_RESULT\n   WHERE hashValues \= @vHASH_VALUE\n   FOR JSON AUTO);\nEND CATCH
MW_PROCESS_USE_MW_REPORT_BUILD_TREE_R1=;WITH A (PK, RP_PARENT_PK, RP_TEXT, RP_SET_POINT, RP_EXPANDABLE, level) AS\n(\n\tSELECT PK, RP_PARENT_PK, RP_TEXT, RP_SET_POINT, RP_EXPANDABLE, RP_LV \n\tFROM JH_WS02_RP_LIST WITH(NOLOCK)\n\tWHERE PK \= '$$PK$$'\n\n    UNION ALL\n \n\tSELECT B.PK, B.RP_PARENT_PK, B.RP_TEXT, B.RP_SET_POINT, B.RP_EXPANDABLE,level + 1 \n\tFROM JH_WS02_RP_LIST AS B WITH(NOLOCK)\n\tINNER JOIN A ON A.PK \= B.RP_PARENT_PK \n)\n\nSELECT DISTINCT \n\tA.PK, A.RP_PARENT_PK, C.RP_TEXT AS 'BA_TEXT', A.RP_TEXT, A.RP_SET_POINT, A.RP_LEAF, A.RP_EXPANDABLE, A.level AS 'RP_LV' \nFROM A \nLEFT JOIN JH_WS02_RP_LIST AS C ON A.RP_PARENT_PK \= C.PK \nORDER BY RP_LV ASC
MW_PROCESS_USE_MW_SCHDL_BREED_R1=DECLARE @LAST_COUNT BIGINT,@PARAM_SG_PK BIGINT,@PARAM_TK_PK BIGINT \nSET @PARAM_SG_PK \= '$$PARAM_SG_PK$$' \nSET @PARAM_TK_PK \= '$$PARAM_TK_PK$$' \nSET @LAST_COUNT \= (SELECT COUNT(*) FROM JH_WS02_SCHDL_RESERVATION WITH(NOLOCK) WHERE SG_PK \= @PARAM_SG_PK AND TK_PK \= @PARAM_TK_PK) \n\nIF @LAST_COUNT \= 0 \n\tBEGIN \n\t\tSELECT '0' AS 'LAST_COUNT','' AS 'LAST_DT','0' AS 'LAST_TEAM' \n\tEND \nELSE \n\tBEGIN \n\t\tSELECT TOP 1 @LAST_COUNT AS 'LAST_COUNT',ISNULL(SG_NEXT_DT,'') AS 'LAST_DT',ISNULL(SG_TEAM_NUM,'0') AS 'LAST_TEAM' \n\t\tFROM JH_WS02_SCHDL_RESERVATION WITH(NOLOCK) \n\t\tWHERE SG_PK \= @PARAM_SG_PK AND TK_PK \= @PARAM_TK_PK \n\t\tORDER BY SG_THIS_DT DESC \n\tEND\n
MW_PROCESS_USE_MW_SCHDL_CHECK_R1=SELECT * \nFROM JH_WS02_SCHDL_RESERVATION WITH(NOLOCK) \nWHERE DATEDIFF(YEAR,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) <\= 1 AND DATEDIFF(SECOND,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) < 0
MW_PROCESS_USE_MW_SCHDL_CHECK_R2=SELECT A.PK,A.SG_NAME \nFROM JH_WS02_SCHDL_GROUP AS A WITH(NOLOCK) \nLEFT JOIN JH_WS02_SCHDL_RESERVATION AS B WITH(NOLOCK) ON A.PK \= B.SG_PK \nWHERE A.SG_STATUS \= 'JOIN' AND B.PK IS NULL\n
MW_PROCESS_USE_MW_SCHDL_GET_JOIN_LIST_R1=DECLARE @WEB_SERVICE_CODE VARCHAR(20) \nSET @WEB_SERVICE_CODE \= '$$WEB_SERVICE_CODE$$' \nSELECT CONVERT(VARCHAR,GETDATE(),120) AS 'SYS_DT'\n,CONCAT(C.SG_START_YMD,' ',C.SG_START_HMS) AS 'SG_SDT'\n,(CASE ISNULL(C.SG_ABORT_YMD,'') WHEN '' THEN NULL ELSE CONCAT(C.SG_ABORT_YMD,' ',C.SG_ABORT_HMS) END) AS 'SG_ADT'\n,B.SG_THIS_DT AS 'THIS_DT',B.SG_NEXT_DT AS 'NEXT_DT'\n,C.* \nFROM JH_WS02_SCHDL_RESERVATION AS C \nRIGHT JOIN \n(SELECT DISTINCT A.SG_PK,A.SG_TEAM_NUM\n,(SELECT TOP 1 SG_THIS_DT FROM JH_WS02_SCHDL_RESERVATION WITH(NOLOCK) WHERE SG_PK \= A.SG_PK AND SG_TEAM_NUM \= A.SG_TEAM_NUM) AS 'SG_THIS_DT'\n,(SELECT TOP 1 SG_NEXT_DT FROM JH_WS02_SCHDL_RESERVATION WITH(NOLOCK) WHERE SG_PK \= A.SG_PK AND SG_TEAM_NUM \= A.SG_TEAM_NUM) AS 'SG_NEXT_DT' \nFROM JH_WS02_SCHDL_RESERVATION AS A WITH(NOLOCK) \nWHERE \n(@WEB_SERVICE_CODE \= 'ALL' OR (A.WS_CODE \= @WEB_SERVICE_CODE AND A.PROXY_WS IS NULL) \nOR (A.PROXY_WS \= @WEB_SERVICE_CODE)) \nAND (DATEDIFF(YEAR,GETDATE(),CAST(A.SG_THIS_DT AS DATETIME)) <\= 1 \nAND DATEDIFF(SECOND,GETDATE(),CAST(A.SG_THIS_DT AS DATETIME)) >\= -30 \nAND DATEDIFF(SECOND,GETDATE(),CAST(A.SG_THIS_DT AS DATETIME)) < 30)) AS B ON C.SG_PK \= B.SG_PK AND C.SG_TEAM_NUM \= B.SG_TEAM_NUM\n
MW_PROCESS_USE_MW_SCHDL_GET_JOIN_LIST_R2=SELECT * \nFROM JH_WS02_SCHDL_RESERVATION WITH(NOLOCK) \nWHERE DATEDIFF(YEAR,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) <\= 1 AND DATEDIFF(SECOND,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) < 0
MW_PROCESS_USE_MW_SCHDL_IMMEDIATE_R1=SELECT * FROM JH_WS02_SCHDL_TASK WITH(NOLOCK) WHERE SG_PK \= '$$PARAM_PK$$'
MW_PROCESS_USE_MW_SCHDL_JOIN_R1=SELECT * FROM JH_WS02_SCHDL_TASK WITH(NOLOCK) WHERE SG_PK \= '$$PARAM_PK$$'
MW_PROCESS_USE_MW_SCHDL_PAUSE_U1=UPDATE JH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \nCR_PROCESS \= 'PAUSE',\nCR_PROCESS_RECORD \= CONCAT(CR_PROCESS_RECORD,'>','暫停'),\nCR_PROCESS_HELP \= '暫停',\nLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120) \nWHERE SG_PK \= '$$PARAM_PK$$' AND (CR_PROCESS \= 'QUEUE' OR CR_PROCESS \= 'EXECUTING')\n
MW_PROCESS_USE_MW_SCHDL_QUIT_U1=UPDATE JH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \nCR_PROCESS \= 'STOP',\nCR_PROCESS_RECORD \= CONCAT(CR_PROCESS_RECORD,'>','停止排程'),\nCR_PROCESS_HELP \= '停止排程[退排]',\nLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120) \nWHERE SG_PK \= '$$PARAM_PK$$' AND (CR_PROCESS \= 'QUEUE' OR CR_PROCESS \= 'EXECUTING')\n
MW_PROCESS_USE_MW_SCHDL_RUN_SGGroups_R1=DECLARE @WEB_SERVICE_CODE VARCHAR(10),@SG_PK BIGINT \nSET @WEB_SERVICE_CODE \= '$$WEB_SERVICE_CODE$$' \nSET @SG_PK \= (CASE '$$SG_PK$$' WHEN '' THEN NULL ELSE '$$SG_PK$$' END) \nSELECT * \nFROM JH_WS02_SCHDL_SKIP_DT WITH(NOLOCK) \nWHERE SP_RULE_USE \= 'Y' \nAND (WS_CODE \= @WEB_SERVICE_CODE OR WS_CODE IS NULL) \nAND (SG_PK \= @SG_PK OR SG_PK IS NULL) \nAND (CAST(CONCAT(SP_START_YMD,' ',SP_TIME_FROM) AS DATETIME) <\= GETDATE()) AND (GETDATE() <\= CAST(CONCAT(ISNULL(SP_END_YMD,CONVERT(VARCHAR,GETDATE(),23)),' ',SP_TIME_UNTIL) AS DATETIME))\n
MW_PROCESS_USE_MW_SCHDL_RUN_SGGroups_R2=SELECT * FROM JH_WS02_SCHDL_TASK WITH(NOLOCK) WHERE SG_PK \= '$$SG_PK$$'
MW_PROCESS_USE_MW_SCHDL_SEND_MAIL_R1=SELECT B.EMAIL \nFROM USERGROUP AS A WITH(NOLOCK) \nLEFT JOIN USERS AS B WITH(NOLOCK) ON A.USERID \= B.USERID WHERE A.GROUPID \= '$$GROUPID$$'
MW_PROCESS_USE_MW_SCHDL_SEND_MAIL_R2=DECLARE @PARAM_PK VARCHAR(4000),@PARAM_THIS_DT VARCHAR(35),@PARAM_WS_CODE VARCHAR(20) \nSET @PARAM_PK \= '$$PARAM_PK$$' \nSET @PARAM_THIS_DT \= '$$PARAM_THIS_DT$$' \nSET @PARAM_WS_CODE \= '$$PARAM_WS_CODE$$' \nSELECT * \nFROM JH_WS02_SCHDL_CALENDAR WITH(NOLOCK) \nWHERE SG_PK \= @PARAM_PK AND SG_THIS_DT \= @PARAM_THIS_DT AND ((WS_CODE \= @PARAM_WS_CODE AND PROXY_WS IS NULL) OR PROXY_WS \= @PARAM_WS_CODE)
MW_PROCESS_USE_REPORT_BUILD_01=;WITH HH (PK, RP_PARENT_PK, RP_TEXT, RP_LEAF, RP_EXPANDABLE, RP_SET_POINT, RP_DEP_CODE, LV) AS\n(\n\tSELECT PK, RP_PARENT_PK, RP_TEXT, RP_LEAF, RP_EXPANDABLE, RP_SET_POINT, RP_DEP_CODE, CAST(RP_LV AS INT) AS LV\n\tFROM JH_WS02_RP_LIST WITH(NOLOCK)\n\tWHERE RP_PARENT_PK IS NULL AND RP_TEXT \= '$$RP_TEXT$$' AND RP_SET_POINT \= '$$RP_SET_POINT$$'\n\n    UNION ALL\n \n\tSELECT B.PK, B.RP_PARENT_PK, B.RP_TEXT, B.RP_LEAF, B.RP_EXPANDABLE, B.RP_SET_POINT, B.RP_DEP_CODE, (LV + 1) AS RP_LV\n\tFROM JH_WS02_RP_LIST AS B WITH(NOLOCK)\n\tINNER JOIN HH ON HH.PK \= B.RP_PARENT_PK \n)\nSELECT DISTINCT * FROM HH ORDER BY LV ASC
MW_PROCESS_USE_REPORT_BUILD_02=;WITH HH (PK, RP_PARENT_PK, RP_TEXT, RP_DEP_CODE, level) AS\n(\n\tSELECT PK,RP_PARENT_PK, RP_TEXT, RP_DEP_CODE, 0 \n\tFROM JH_WS02_RP_LIST WITH(NOLOCK)\n\tWHERE RP_SET_POINT \= 'DEPROOT'\n\n    UNION ALL\n \n\tSELECT B.PK,B.RP_PARENT_PK, B.RP_TEXT, B.RP_DEP_CODE, level + 1 \n\tFROM JH_WS02_RP_LIST AS B WITH(NOLOCK)\n\tINNER JOIN HH ON HH.PK \= B.RP_PARENT_PK \n)\nSELECT DISTINCT * FROM HH ORDER BY level ASC
MW_PROCESS_USE_REPORT_SHOW_TREE_C1=INSERT INTO JH_WS02_RP_LIST \n(RP_PARENT_PK,RP_TEXT,RP_LEAF,RP_EXPANDABLE,RP_SET_POINT,RP_DEP_TYPE,RP_LV,RP_HELP)\nVALUES\n((SELECT PK FROM JH_WS02_RP_LIST WITH(NOLOCK) WHERE RP_SET_POINT \= '$$NewBaPOINT$$' AND RP_DEP_TYPE \= '$$RP_DEP_TYPE$$'),'$$RP_TEXT$$','$$RP_LEAF$$','$$RP_EXPANDABLE$$','$$RP_SET_POINT$$','$$RP_DEP_TYPE$$','$$RP_LV$$','附屬$$NewBaName$$目錄')\n
MW_PROCESS_USE_REPORT_SHOW_TREE_D1=;WITH A (PK, RP_PARENT_PK, RP_TEXT, RP_SET_POINT, RP_DEP_TYPE, RP_LEAF, RP_EXPANDABLE, level) AS \n(\nSELECT PK, RP_PARENT_PK, RP_TEXT, RP_SET_POINT, RP_DEP_TYPE, RP_LEAF, RP_EXPANDABLE, RP_LV \nFROM JH_WS02_RP_LIST WITH(NOLOCK) WHERE PK \= '$$PK$$' \n\nUNION ALL \n\nSELECT B.PK, B.RP_PARENT_PK, B.RP_TEXT, B.RP_SET_POINT, B.RP_DEP_TYPE, B.RP_LEAF, B.RP_EXPANDABLE,level + 1 \nFROM JH_WS02_RP_LIST AS B WITH(NOLOCK) \nINNER JOIN A ON A.PK \= B.RP_PARENT_PK \n) \n\nDELETE FROM JH_WS02_RP_LIST WHERE PK IN (SELECT DISTINCT A.PK FROM A)
MW_PROCESS_USE_REPORT_SHOW_TREE_R1=;WITH A (PK, RP_PARENT_PK, RP_TEXT, RP_SET_POINT, RP_EXPANDABLE, level) AS\n(\n\tSELECT PK, RP_PARENT_PK, RP_TEXT, RP_SET_POINT, RP_EXPANDABLE, RP_LV \n\tFROM JH_WS02_RP_LIST WITH(NOLOCK)\n\tWHERE PK \= '$$PK$$'\n\n    UNION ALL\n \n\tSELECT B.PK, B.RP_PARENT_PK, B.RP_TEXT, B.RP_SET_POINT, B.RP_EXPANDABLE,level + 1 \n\tFROM JH_WS02_RP_LIST AS B WITH(NOLOCK)\n\tINNER JOIN A ON A.PK \= B.RP_PARENT_PK \n)\n\nSELECT DISTINCT \n\tA.PK, A.RP_PARENT_PK, C.RP_TEXT AS 'BA_TEXT', A.RP_TEXT, A.RP_SET_POINT, A.RP_LEAF, A.RP_EXPANDABLE, A.level AS 'RP_LV' \nFROM A \nLEFT JOIN JH_WS02_RP_LIST AS C ON A.RP_PARENT_PK \= C.PK \nORDER BY RP_LV ASC\n
MW_PROCESS_USE_REPORT_SHOW_TREE_U1=UPDATE JH_WS02_RP_LIST \nSET \n\tRP_PARENT_PK \= (SELECT PK FROM JH_WS02_RP_LIST WITH(NOLOCK) WHERE RP_SET_POINT \= '$$NewBaPOINT$$' AND RP_DEP_TYPE \= '$$RP_DEP_TYPE$$'),\n\tRP_TEXT \= '$$RP_TEXT$$',\n\tRP_LEAF \= '$$RP_LEAF$$',\n\tRP_EXPANDABLE \= '$$RP_EXPANDABLE$$',\n\tRP_LV \= '$$RP_LV$$',\n\tRP_HELP \= CONCAT('附屬',(SELECT RP_TEXT FROM JH_WS02_RP_LIST WITH(NOLOCK) WHERE RP_SET_POINT \= '$$NewBaPOINT$$' AND RP_DEP_TYPE \= '$$RP_DEP_TYPE$$'),'目錄'),\n\tLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\n\tLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\n\tLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120) \nWHERE PK \= '$$PK$$'\t
MW_PROCESS_USE_SQL2TRYCATCH2TRAN=BEGIN TRY\nBEGIN TRAN\n\tDECLARE  \n\t@vRETURN_KEY_STR\t\tNVARCHAR(200)\n   ,@vLOGPK\t\t\t\t\tBIGINT\n   ,@vMEMO\t\t\t\t\tVARCHAR(8000)\n   ,@vProcType\t\t\t\tVARCHAR(20)\n   ,@vPARAM_TASK_CODE\t\tVARCHAR(50)\n   ,@vMASTER_PK\t\t\t\tVARCHAR(200)\n   ,@vPK\t\t\t\t\tVARCHAR(200)\n   ,@vPARAM_FUNC_ID\t\t\tVARCHAR(100)\n   ,@vACTION_FLAG\t\t\tVARCHAR(50)\n   ,@vPARAM_SOURCE_COMING\tNVARCHAR(50)\n   ,@vPARAM_COMPANY\t\t\tNVARCHAR(50)\n   ,@vPARAM_SESSION_ID\t\tVARCHAR(100)\n   ,@i_LOG_IDENT\t\t\tBIGINT\n   ,@vChkDataStatus\t\t\tVARCHAR(10)\n   ,@SQLSTR\t\t\t\t\tNVARCHAR(MAX)\n   ,@RETURN_CODE\t\t\tINT\n   ,@RETURN_MSG\t\t\t\tVARCHAR(1000)\n   ,@RETURN_DETAIL_MSG\t\tVARCHAR(MAX)\n   ,@vHASH_VALUE\t\t\tVARCHAR(100) \n\n\tSET @vHASH_VALUE \= sys.fn_varbintohexstr(CRYPT_GEN_RANDOM(10)) \n\n\t/*-----------為了TIFCUD額外處理----------*/\n\tDECLARE @FROM_OUTSIDE VARCHAR(100);SET @FROM_OUTSIDE \= @vHASH_VALUE;\n\tDECLARE @MASTER_IDENT VARCHAR(200);DECLARE @MASTER_LOG_IDENT VARCHAR(200); DECLARE @DETAIL_IDENT VARCHAR(200); DECLARE @DETAIL_LOG_IDENT VARCHAR(200); DECLARE @RETURN_KEY_STR VARCHAR(500);\n\tDECLARE @RETURN_TEST VARCHAR(MAX);\n\t/*-----------為了TIFCUD額外處理----------*/\n\n   --Experience is the mother of wisdom--\n\n\t/*-----------為了TIFCUD額外處理----------*/\n\tIF @RETURN_KEY_STR IS NOT NULL AND ISNULL(@RETURN_CODE,0) <> 0\n\t\tTHROW 5000,@RETURN_MSG,1;\n\t/*-----------為了TIFCUD額外處理----------*/\n\n\tIF @@TRANCOUNT > 0\n\t\tCOMMIT;\n\n\t/*處理隱含式交易*/\n\tIF ((2 & @@options) \= 2) AND @@TRANCOUNT > 0 /*如果該連線為隱含式交易,且有隱含式交易產生的TRANSACTION,則需再COMMIT*/\n\t\tCOMMIT;\n\n\tIF @RETURN_CODE IS NULL \n\t\tSELECT @RETURN_CODE \= 0,@RETURN_MSG \= 'SUCCESS' \n\tSELECT @RETURN_DETAIL_MSG \= (SELECT ProcPK,hashValues,RETURN_CODE,RETURN_MSG,DATA_UNIQUE_KEY,ACTION_FLAG AS DATA_ACTION_TYPE,MEMO FROM MEM_API_RESULT WHERE hashValues \= @vHASH_VALUE FOR JSON AUTO) \nEND TRY \nBEGIN CATCH \n\tIF @@TRANCOUNT > 0\n\t\tROLLBACK; /*ROLLBACK會將所有TRANSACTION ROLLBACK, 所以不必針對隱含式交易額外處理*/\n\n\t/*-----------為了TIFCUD額外處理----------*/\n\tIF @RETURN_KEY_STR IS NOT NULL /*如果原先為TIFCUD的語法,則直接取TIFCUD回傳之@RETURN_TEST*/\n\t\tSET @RETURN_DETAIL_MSG \= @RETURN_TEST\n\tELSE\n\tBEGIN\n\t\tSET @RETURN_CODE \= ERROR_NUMBER() \n\t\tSET @RETURN_MSG  \= ERROR_MESSAGE() \n\t\tIF @vRETURN_KEY_STR IS NOT NULL /*原MS_TIFCUD*/\n\t\tBEGIN\n\t\t\tEXEC JHSP_INS_API_RESULT @vLOGPK,@vHASH_VALUE,@RETURN_CODE,@RETURN_MSG,@vRETURN_KEY_STR,@vProcType,@vMEMO,@vACTION_FLAG \n\t\t\tSELECT @RETURN_DETAIL_MSG \= (SELECT ProcPK,hashValues,RETURN_CODE,RETURN_MSG,DATA_UNIQUE_KEY,ACTION_FLAG AS DATA_ACTION_TYPE,MEMO FROM MEM_API_RESULT WHERE hashValues \= @vHASH_VALUE FOR JSON AUTO) \n\t\tEND\n\tEND\n\tSELECT  @RETURN_CODE AS 'RETURN_CODE', @RETURN_MSG AS 'RETURN_MSG', @RETURN_DETAIL_MSG AS  'RETURN_DETAIL_MSG'\nEND CATCH
MW_PROCESS_USE_SQL2TRYCATCH=BEGIN TRY \n\tDECLARE  \n\t@vRETURN_KEY_STR\t\tNVARCHAR(200)\n   ,@vLOGPK\t\t\t\t\tBIGINT\n   ,@vMEMO\t\t\t\t\tVARCHAR(8000)\n   ,@vProcType\t\t\t\tVARCHAR(20)\n   ,@vPARAM_TASK_CODE\t\tVARCHAR(50)\n   ,@vMASTER_PK\t\t\t\tVARCHAR(200)\n   ,@vPK\t\t\t\t\tVARCHAR(200)\n   ,@vPARAM_FUNC_ID\t\t\tVARCHAR(100)\n   ,@vACTION_FLAG\t\t\tVARCHAR(50)\n   ,@vPARAM_SOURCE_COMING\tNVARCHAR(50)\n   ,@vPARAM_COMPANY\t\t\tNVARCHAR(50)\n   ,@vPARAM_SESSION_ID\t\tVARCHAR(100)\n   ,@i_LOG_IDENT\t\t\tBIGINT\n   ,@vChkDataStatus\t\t\tVARCHAR(10)\n   ,@SQLSTR\t\t\t\t\tNVARCHAR(MAX)\n   ,@RETURN_CODE\t\t\tINT\n   ,@RETURN_MSG\t\t\t\tVARCHAR(1000)\n   ,@RETURN_DETAIL_MSG\t\tVARCHAR(MAX)\n   ,@vHASH_VALUE\t\t\tVARCHAR(100) \n\n\tSET @vHASH_VALUE \= sys.fn_varbintohexstr(CRYPT_GEN_RANDOM(10)) \n\n\t/*-----------為了TIFCUD額外處理----------*/\n\tDECLARE @FROM_OUTSIDE VARCHAR(100);SET @FROM_OUTSIDE \= @vHASH_VALUE;\n\tDECLARE @MASTER_IDENT VARCHAR(200);DECLARE @MASTER_LOG_IDENT VARCHAR(200); DECLARE @DETAIL_IDENT VARCHAR(200); DECLARE @DETAIL_LOG_IDENT VARCHAR(200); DECLARE @RETURN_KEY_STR VARCHAR(500);\n\tDECLARE @RETURN_TEST VARCHAR(MAX);\n\t/*-----------為了TIFCUD額外處理----------*/\n\n   --Experience is the mother of wisdom--\n\n\t/*-----------為了TIFCUD額外處理----------*/\n\tIF @RETURN_KEY_STR IS NOT NULL AND ISNULL(@RETURN_CODE,0) <> 0\n\t\tTHROW 5000,@RETURN_MSG,1;\n\t/*-----------為了TIFCUD額外處理----------*/\n\n\tIF @RETURN_CODE IS NULL \n\t\tSELECT @RETURN_CODE \= 0,@RETURN_MSG \= 'SUCCESS' \n\tSELECT @RETURN_DETAIL_MSG \= (SELECT ProcPK,hashValues,RETURN_CODE,RETURN_MSG,DATA_UNIQUE_KEY,ACTION_FLAG AS DATA_ACTION_TYPE,MEMO FROM MEM_API_RESULT WHERE hashValues \= @vHASH_VALUE FOR JSON AUTO)\n\n\t/*處理隱含式交易*/\n\tIF ((2 & @@options) \= 2) AND @@TRANCOUNT > 0 /*如果該連線為隱含式交易,且已產生TRANSACTION,則先進行COMMIT*/\n\t\tCOMMIT;\n\nEND TRY \nBEGIN CATCH \n\t/*處理隱含式交易*/\n\tIF ((2 & @@options) \= 2) AND @@TRANCOUNT > 0 /*如果該連線為隱含式交易,且已產生TRANSACTION,則需ROLLBACK*/\n\t\tROLLBACK;\n\n\t/*-----------為了TIFCUD額外處理----------*/\n\tIF @RETURN_KEY_STR IS NOT NULL /*如果原先為TIFCUD的語法,則直接取TIFCUD回傳之@RETURN_TEST*/\n\t\tSET @RETURN_DETAIL_MSG \= @RETURN_TEST\n\tELSE\n\tBEGIN\n\t\tSET @RETURN_CODE \= ERROR_NUMBER() \n\t\tSET @RETURN_MSG  \= ERROR_MESSAGE()\n\n\t\tIF @vRETURN_KEY_STR IS NOT NULL /*原MS_TIFCUD*/\n\t\tBEGIN\n\t\t\tEXEC JHSP_INS_API_RESULT @vLOGPK,@vHASH_VALUE,@RETURN_CODE,@RETURN_MSG,@vRETURN_KEY_STR,@vProcType,@vMEMO,@vACTION_FLAG \n\t\t\tSELECT @RETURN_DETAIL_MSG \= (SELECT ProcPK,hashValues,RETURN_CODE,RETURN_MSG,DATA_UNIQUE_KEY,ACTION_FLAG AS DATA_ACTION_TYPE,MEMO FROM MEM_API_RESULT WHERE hashValues \= @vHASH_VALUE FOR JSON AUTO) \n\t\tEND\n\tEND\n\tSELECT  @RETURN_CODE AS 'RETURN_CODE', @RETURN_MSG AS 'RETURN_MSG', @RETURN_DETAIL_MSG AS  'RETURN_DETAIL_MSG'\nEND CATCH
MW_REPORT_BUILD_TREE=PLUGINS/RP/BUILD/_M.kjb
MW_REPORT_BUILD_TREE_4_DFMDB_C1=INSERT INTO JH_WS02_RP_LIST \n(RP_PARENT_PK,RP_TEXT,RP_LEAF,RP_EXPANDABLE,RP_SET_POINT,RP_DEP_TYPE,RP_LV,RP_HELP\n,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT)\nVALUES\n((SELECT PK FROM JH_WS02_RP_LIST WITH(NOLOCK) WHERE RP_SET_POINT \= '$$NewBaPOINT$$' AND RP_DEP_TYPE \= '$$RP_DEP_TYPE$$'),'$$RP_TEXT$$','$$RP_LEAF$$','$$RP_EXPANDABLE$$','$$RP_SET_POINT$$','$$RP_DEP_TYPE$$','$$RP_LV$$','附屬$$NewBaName$$目錄'\n,'$$PARAM_SOURCE_COMING$$','$$PARAM_COMPANY$$',CONVERT(VARCHAR,GETDATE(),120))\n
MW_REPORT_BUILD_TREE_4_DFMDB_C2=INSERT INTO JH_WS02_RP_LIST \n(RP_PARENT_PK\n,RP_TEXT\n,RP_LEAF\n,RP_EXPANDABLE\n,RP_DEP_CODE\n,RP_DEP_TYPE\n,RP_LV\n,RP_HELP\n,ADD_USER_ID\n,ADD_USER_COMPANY_ID\n,ADD_DT)\nVALUES\n(\n(CASE '$$NewBaDepCode$$' \nWHEN '' \nTHEN (SELECT PK FROM JH_WS02_RP_LIST WITH(NOLOCK) WHERE RP_SET_POINT \= '$$NewBaSetPoint$$' AND RP_DEP_TYPE \= '$$RP_DEP_TYPE$$') \nELSE (SELECT PK FROM JH_WS02_RP_LIST WITH(NOLOCK) WHERE RP_DEP_CODE \= '$$NewBaDepCode$$' AND RP_DEP_TYPE \= '$$RP_DEP_TYPE$$') \nEND)\n,'$$RP_TEXT$$'\n,(CASE '$$RP_LEAF$$' WHEN 'true' THEN 'Y' ELSE 'N' END)\n,(CASE '$$RP_EXPANDABLE$$' WHEN 'true' THEN 'Y' ELSE 'N' END)\n,'$$RP_DEP_CODE$$'\n,'$$RP_DEP_TYPE$$'\n,'$$RP_LV$$'\n,(CASE '$$NewBaDepCode$$' \nWHEN '' \nTHEN CONCAT('附屬',(SELECT RP_TEXT FROM JH_WS02_RP_LIST WITH(NOLOCK) WHERE RP_SET_POINT \= '$$NewBaSetPoint$$' AND RP_DEP_TYPE \= '$$RP_DEP_TYPE$$'),'目錄') \nELSE CONCAT('附屬',(SELECT RP_TEXT FROM JH_WS02_RP_LIST WITH(NOLOCK) WHERE RP_DEP_CODE \= '$$NewBaDepCode$$' AND RP_DEP_TYPE \= '$$RP_DEP_TYPE$$'),'目錄')\nEND)\n,'$$PARAM_SOURCE_COMING$$'\n,'$$PARAM_COMPANY$$'\n,CONVERT(VARCHAR,GETDATE(),120)\n)\n
MW_REPORT_BUILD_TREE_4_DFMDB_D1=;WITH A (PK, RP_PARENT_PK, RP_TEXT, RP_SET_POINT, RP_DEP_TYPE, RP_LEAF, RP_EXPANDABLE, level) AS \n(\nSELECT PK, RP_PARENT_PK, RP_TEXT, RP_SET_POINT, RP_DEP_TYPE, RP_LEAF, RP_EXPANDABLE, RP_LV \nFROM JH_WS02_RP_LIST WITH(NOLOCK) WHERE PK \= '$$PK$$' \n\nUNION ALL \n\nSELECT B.PK, B.RP_PARENT_PK, B.RP_TEXT, B.RP_SET_POINT, B.RP_DEP_TYPE, B.RP_LEAF, B.RP_EXPANDABLE,level + 1 \nFROM JH_WS02_RP_LIST AS B WITH(NOLOCK) \nINNER JOIN A ON A.PK \= B.RP_PARENT_PK \n) \n\nDELETE FROM JH_WS02_RP_LIST WHERE PK IN (SELECT DISTINCT A.PK FROM A)
MW_REPORT_BUILD_TREE_4_DFMDB_R1=;WITH A (PK, RP_PARENT_PK, RP_TEXT, RP_SET_POINT, RP_LEAF, RP_EXPANDABLE, level) AS\n(\n\tSELECT PK, RP_PARENT_PK, RP_TEXT, RP_SET_POINT, RP_LEAF, RP_EXPANDABLE, RP_LV \n\tFROM JH_WS02_RP_LIST WITH(NOLOCK)\n\tWHERE PK \= '$$PK$$'\n\n    UNION ALL\n \n\tSELECT B.PK, B.RP_PARENT_PK, B.RP_TEXT, B.RP_SET_POINT, B.RP_LEAF, B.RP_EXPANDABLE,level + 1 \n\tFROM JH_WS02_RP_LIST AS B WITH(NOLOCK)\n\tINNER JOIN A ON A.PK \= B.RP_PARENT_PK \n)\n\nSELECT DISTINCT \n\tA.PK, A.RP_PARENT_PK, C.RP_TEXT AS 'BA_TEXT', A.RP_TEXT, A.RP_SET_POINT, A.RP_LEAF, A.RP_EXPANDABLE, A.level AS 'RP_LV'\nFROM A \nLEFT JOIN JH_WS02_RP_LIST AS C ON A.RP_PARENT_PK \= C.PK \nORDER BY RP_LV ASC\n
MW_REPORT_BUILD_TREE_4_DFMDB_R2=;WITH A (PK, RP_PARENT_PK, RP_TEXT, RP_SET_POINT, RP_DEP_CODE, RP_DEP_TYPE, RP_LEAF, RP_EXPANDABLE, level) AS \n(\nSELECT PK, RP_PARENT_PK, RP_TEXT, RP_SET_POINT, RP_DEP_CODE, RP_DEP_TYPE, RP_LEAF, RP_EXPANDABLE, RP_LV \nFROM JH_WS02_RP_LIST WITH(NOLOCK) WHERE RP_SET_POINT \= 'DEPROOT' AND RP_DEP_TYPE \= '$$PARAM_FM_DEP_TYPE$$'\n\nUNION ALL \n\nSELECT B.PK, B.RP_PARENT_PK, B.RP_TEXT, B.RP_SET_POINT, B.RP_DEP_CODE, B.RP_DEP_TYPE, B.RP_LEAF, B.RP_EXPANDABLE,level + 1 \nFROM JH_WS02_RP_LIST AS B WITH(NOLOCK) \nINNER JOIN A ON A.PK \= B.RP_PARENT_PK \n) \nSELECT DISTINCT A.PK, A.RP_PARENT_PK, C.RP_TEXT AS 'BA_TEXT', A.RP_TEXT, A.RP_SET_POINT, A.RP_DEP_CODE, A.RP_DEP_TYPE, A.RP_LEAF, A.RP_EXPANDABLE, A.level AS 'RP_LV' FROM A LEFT JOIN JH_WS02_RP_LIST AS C ON A.RP_PARENT_PK \= C.PK ORDER BY RP_LV ASC\n
MW_REPORT_BUILD_TREE_4_DFMDB_R3=;WITH A (PK, FM_PARENT_PK, FM_TEXT, FM_LEAF, FM_EXPANDABLE, FM_SET_POINT, FM_DEP_CODE, FM_DEP_TYPE, level) AS \n(\nSELECT PK, FM_PARENT_PK, FM_TEXT, FM_LEAF, FM_EXPANDABLE, FM_SET_POINT, FM_DEP_CODE, FM_DEP_TYPE, CAST(FM_LV AS INT) + 2 AS 'FM_LV' \nFROM JH_WS02_FM_DEP_LIST WITH(NOLOCK) WHERE FM_PARENT_PK IS NULL AND FM_DEP_TYPE \= '$$PARAM_FM_DEP_TYPE$$'\n\nUNION ALL \n\nSELECT B.PK, B.FM_PARENT_PK, B.FM_TEXT, B.FM_LEAF, B.FM_EXPANDABLE, B.FM_SET_POINT, B.FM_DEP_CODE, B.FM_DEP_TYPE, level + 1 \nFROM JH_WS02_FM_DEP_LIST AS B WITH(NOLOCK) \nINNER JOIN A ON A.PK \= B.FM_PARENT_PK \n) \nSELECT DISTINCT A.PK, A.FM_PARENT_PK, C.FM_TEXT AS 'BA_TEXT', C.FM_DEP_CODE AS 'BA_DEP_CODE', A.FM_TEXT, A.FM_LEAF, A.FM_EXPANDABLE, A.FM_SET_POINT, A.FM_DEP_CODE, A.FM_DEP_TYPE, A.level AS 'FM_LV' FROM A LEFT JOIN JH_WS02_FM_DEP_LIST AS C ON A.FM_PARENT_PK \= C.PK ORDER BY FM_LV ASC\n
MW_REPORT_BUILD_TREE_4_DFMDB_U1=UPDATE JH_WS02_RP_LIST \nSET \n\tRP_PARENT_PK \= (SELECT PK FROM JH_WS02_RP_LIST WITH(NOLOCK) WHERE RP_SET_POINT \= '$$NewBaPOINT$$' AND RP_DEP_TYPE \= '$$RP_DEP_TYPE$$'),\n\tRP_TEXT \= '$$RP_TEXT$$',\n\tRP_LEAF \= '$$RP_LEAF$$',\n\tRP_EXPANDABLE \= '$$RP_EXPANDABLE$$',\n\tRP_LV \= '$$RP_LV$$',\n\tRP_HELP \= CONCAT('附屬',(SELECT RP_TEXT FROM JH_WS02_RP_LIST WITH(NOLOCK) WHERE RP_SET_POINT \= '$$NewBaPOINT$$' AND RP_DEP_TYPE \= '$$RP_DEP_TYPE$$'),'目錄'),\n\tLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\n\tLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\n\tLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120) \nWHERE PK \= '$$PK$$'
MW_SCHDL_AUTORUN=schdl\\AutoRun\\Main.kjb
MW_SCHDL_BREED=Funs\\SCHDL\\Breed\\Entrance.kjb
MW_SCHDL_BREED_GET_LAST_DATA=DECLARE @COUNT BIGINT,@SG_PK BIGINT,@TK_PK BIGINT\nSET @SG_PK \= '$$SG_PK$$'\nSET @TK_PK \= '$$TK_PK$$'\nSET @COUNT \= (SELECT COUNT(*) FROM JH_WS02_SCHDL_RESERVATION WITH(NOLOCK) WHERE SG_PK \= @SG_PK AND TK_PK \= @TK_PK)\n\nSELECT TOP 1 @COUNT AS 'COUNT',* \nFROM JH_WS02_SCHDL_RESERVATION WITH(NOLOCK)\nWHERE SG_PK \= @SG_PK AND TK_PK \= @TK_PK\nORDER BY SG_THIS_DT DESC\n
MW_SCHDL_CHECK=Funs/SCHDL/StartUpCheck/Entrance.kjb
MW_SCHDL_CHECK_GET_JOIN_LIST=SELECT * FROM JH_WS02_SCHDL_GROUP WITH(NOLOCK) WHERE SG_STATUS IN ('JOIN','PAUSE')
MW_SCHDL_CHECK_GET_OVERDUE_LIST=SELECT * \nFROM JH_WS02_SCHDL_RESERVATION WITH(NOLOCK) \nWHERE DATEDIFF(YEAR,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) <\= 1 AND DATEDIFF(SECOND,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) < 0\n
MW_SCHDL_CREATE_SG=INSERT INTO JH_WS02_SCHDL_GROUP\n(WS_CODE,PROXY_WS,SG_NAME,SG_HELP\n,SG_START_YMD,SG_START_HMS\n,SG_ABORT_YMD,SG_ABORT_HMS,SG_ABORT\n,SG_TOTAL,SG_SUCCEED_COUNT,SG_ERROR_COUNT\n,SG_STATUS,SG_STATUS_HELP\n,SG_SLEEP_NUM\n,SG_SKIP_CRDATE\n,SG_CREATE_NUM,SG_CREATE_UNIT\n,SG_SUCCEED_MAIL,SG_FAIL_MAIL\n,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT)\nVALUES\n('$$PARAM_WS_CODE$$'\n,(CASE '$$PARAM_PROXY_WS$$' WHEN '' THEN NULL ELSE '$$PARAM_PROXY_WS$$' END)\n,'$$PARAM_SG_NAME$$','$$PARAM_SG_HELP$$'\n,'$$PARAM_SG_START_YMD$$'\n,(CASE '$$PARAM_SG_START_HMS$$' WHEN '' THEN NULL ELSE '$$PARAM_SG_START_HMS$$' END)\n,(CASE '$$PARAM_SG_ABORT_YMD$$' WHEN '' THEN NULL ELSE '$$PARAM_SG_ABORT_YMD$$' END)\n,(CASE '$$PARAM_SG_ABORT_HMS$$' WHEN '' THEN NULL ELSE '$$PARAM_SG_ABORT_HMS$$' END),'$$PARAM_SG_ABORT$$'\n,0,0,0\n,'$$PARAM_SG_STATUS$$','$$PARAM_SG_STATUS_HELP$$'\n,(CASE '$$PARAM_SG_SLEEP_NUM$$' WHEN '' THEN '1' ELSE '$$PARAM_SG_SLEEP_NUM$$' END)\n,(CASE '$$PARAM_SG_SKIP_CRDATE$$' WHEN '' THEN 'N' ELSE '$$PARAM_SG_SKIP_CRDATE$$' END)\n,'$$PARAM_SG_CREATE_NUM$$','$$PARAM_SG_CREATE_UNIT$$'\n,'$$PARAM_SG_SUCCEED_MAIL$$','$$PARAM_SG_FAIL_MAIL$$'\n,'${PARAM_COMPANY}','${PARAM_SOURCE_COMING}','${PARAM_COMPANY}',CONVERT(VARCHAR,GETDATE(),120))\n\n\nINSERT INTO JH_WS02_SCHDL_CYCLE_LIST \n(SG_PK,SC_VALUE_A,SC_UNIT_A,SC_VALUE_B,SC_UNIT_B,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT) \nVALUES \n((SELECT SCOPE_IDENTITY())\n,'$$PARAM_SC_VALUE_A$$','$$PARAM_SC_UNIT_A$$'\n,(CASE '$$PARAM_SC_VALUE_B$$' WHEN '' THEN NULL ELSE '$$PARAM_SC_VALUE_B$$' END)\n,(CASE '$$PARAM_SC_UNIT_B$$' WHEN '' THEN NULL ELSE '$$PARAM_SC_UNIT_B$$' END)\n,'${PARAM_COMPANY}','${PARAM_SOURCE_COMING}','${PARAM_COMPANY}',CONVERT(VARCHAR,GETDATE(),120))\n
MW_SCHDL_CREATE_SKIPDT=INSERT INTO JH_WS02_SCHDL_SKIP_DT \n(WS_CODE\n,SG_PK\n,SP_START_YMD\n,SP_END_YMD\n,SP_TIME_FROM\n,SP_TIME_UNTIL\n,SP_MULTIPLE_DAY\n,SP_RULE_USE,SP_HELP\n,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT)\nVALUES\n((CASE '$$PARAM_WS_CODE$$' WHEN '' THEN NULL ELSE '$$PARAM_WS_CODE$$' END)\n,(CASE '$$PARAM_SG_PK$$' WHEN '' THEN NULL ELSE '$$PARAM_SG_PK$$' END)\n,'$$PARAM_SP_START_YMD$$'\n,(CASE '$$PARAM_SP_END_YMD$$' WHEN '' THEN NULL ELSE '$$PARAM_SP_END_YMD$$' END)\n,'$$PARAM_SP_TIME_FROM$$'\n,'$$PARAM_SP_TIME_UNTIL$$'\n,(CASE '$$PARAM_SP_MULTIPLE_DAY$$' WHEN '' THEN NULL ELSE '$$PARAM_SP_MULTIPLE_DAY$$' END)\n,'$$PARAM_SP_RULE_USE$$'\n,(CASE '$$PARAM_SP_HELP$$' WHEN '' THEN NULL ELSE '$$PARAM_SP_HELP$$' END)\n,'${PARAM_COMPANY}','${PARAM_SOURCE_COMING}','${PARAM_COMPANY}',CONVERT(VARCHAR,GETDATE(),120))
MW_SCHDL_CREATE_TK=INSERT INTO JH_WS02_SCHDL_TASK\n(SG_PK,TK_NAME,TK_TYPE,TK_HELP,TK_ABORT,TK_PAUSE,TK_SUCCEED_MAIL,TK_FAIL_MAIL\n,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT)\nVALUES\n('$$PARAM_SG_PK$$','$$PARAM_TK_NAME$$','$$PARAM_TK_TYPE$$','$$PARAM_TK_HELP$$','$$PARAM_TK_ABORT$$','$$PARAM_TK_PAUSE$$'\n,'$$PARAM_TK_SUCCEED_MAIL$$','$$PARAM_TK_FAIL_MAIL$$'\n,'${PARAM_COMPANY}','${PARAM_SOURCE_COMING}','${PARAM_COMPANY}',CONVERT(VARCHAR,GETDATE(),120))
MW_SCHDL_DELETE_CR=IF '$$PARAM_SG_PK$$' \= 'ALL' AND '$$PARAM_CALENDAR_DT$$' \= 'ALL'\n\tBEGIN\n\t\tDELETE JH_WS02_SCHDL_CALENDAR\n\tEND\nELSE IF '$$PARAM_SG_PK$$' \= 'ALL' AND '$$PARAM_CALENDAR_DT$$' <> 'ALL'\n\tBEGIN\n\t\tDELETE JH_WS02_SCHDL_CALENDAR WHERE DATEDIFF(YEAR,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) <\= 10 AND DATEDIFF(SECOND,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) > 0\n\tEND\nELSE IF '$$PARAM_SG_PK$$' <> 'ALL' AND '$$PARAM_CALENDAR_DT$$' \= 'ALL'\n\tBEGIN\n\t\tDELETE JH_WS02_SCHDL_CALENDAR WHERE SG_PK \= '$$PARAM_SG_PK$$'\n\tEND\nELSE\n\tBEGIN\n\t\tDELETE JH_WS02_SCHDL_CALENDAR WHERE SG_PK \= '$$PARAM_SG_PK$$' AND DATEDIFF(YEAR,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) <\= 10 AND DATEDIFF(SECOND,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) > 0\n\tEND
MW_SCHDL_DELETE_SG=DELETE JH_WS02_SCHDL_GROUP WHERE PK \= '$$PARAM_PK$$';\nDELETE JH_WS02_SCHDL_TASK WHERE SG_PK \= '$$PARAM_PK$$';\nDELETE JH_WS02_SCHDL_CYCLE_LIST WHERE SG_PK \= '$$PARAM_PK$$';\n
MW_SCHDL_DELETE_SKIPDT=DELETE JH_WS02_SCHDL_SKIP_DT WHERE PK \= '$$PARAM_PK$$'
MW_SCHDL_DELETE_TK=DELETE JH_WS02_SCHDL_TASK WHERE PK \= '$$PARAM_PK$$'
MW_SCHDL_EXEC_SG=Funs/SCHDL/ExecSG/Entrance.kjb
MW_SCHDL_EXEC_SG_CR2PAUSE=UPDATE \nJH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \nCR_PROCESS \= '$$CR_PROCESS$$',\nCR_PROCESS_RECORD \= CONCAT(CR_PROCESS_RECORD,'>','$$CR_PROCESS_HELP$$'),\nCR_PROCESS_HELP \= '$$CR_PROCESS_HELP$$',\nLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE PK \= '$$CR_PK$$'\n
MW_SCHDL_EXEC_SG_CR_U1=UPDATE \nJH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \nCR_PROCESS \= '$$CR_PROCESS$$',\nCR_PROCESS_RECORD \= CONCAT(CR_PROCESS_RECORD,'>','$$CR_PROCESS_HELP$$'),\nCR_PROCESS_HELP \= '$$CR_PROCESS_HELP$$',\nSG_START_DT \= (CASE '$$SG_START_DT$$' WHEN '' THEN NULL WHEN 'X' THEN SG_START_DT ELSE '$$SG_START_DT$$' END),\nSG_END_DT \= (CASE '$$SG_END_DT$$' WHEN '' THEN NULL WHEN 'X' THEN SG_END_DT ELSE '$$SG_END_DT$$' END),\nLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE PK \= '$$CR_PK$$'
MW_SCHDL_EXEC_SG_CR_U2=UPDATE \nJH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \nCR_PROCESS \= '$$CR_PROCESS$$',\nCR_PROCESS_RECORD \= CONCAT(CR_PROCESS_RECORD,'>','$$CR_PROCESS_HELP$$'),\nCR_PROCESS_HELP \= '$$CR_PROCESS_HELP$$',\nSG_START_DT \= (CASE '$$SG_START_DT$$' WHEN '' THEN NULL WHEN 'X' THEN SG_START_DT ELSE '$$SG_START_DT$$' END),\nSG_END_DT \= (CASE '$$SG_END_DT$$' WHEN '' THEN NULL WHEN 'X' THEN SG_END_DT ELSE '$$SG_END_DT$$' END),\nLOG_PK \= '$$LOG_PK$$',\nLOG_URL \= '$$LOG_URL$$',\nLOG_DETAIL_LIST \= (CASE '$$LOG_DETAIL_LIST$$' WHEN '' THEN NULL ELSE '$$LOG_DETAIL_LIST$$' END),\nLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE PK \= '$$CR_PK$$'
MW_SCHDL_EXEC_SG_CRUPDATE1=UPDATE \nJH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \nCR_PROCESS \= '$$CR_PROCESS$$',\nCR_PROCESS_RECORD \= CONCAT(CR_PROCESS_RECORD,'>','$$CR_PROCESS_HELP$$'),\nCR_PROCESS_HELP \= '$$CR_PROCESS_HELP$$',\nLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE PK \= '$$CR_PK$$'
MW_SCHDL_EXEC_SG_CRUPDATE2=UPDATE \nJH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \nCR_PROCESS \= '$$CR_PROCESS$$',\nCR_PROCESS_RECORD \= CONCAT(CR_PROCESS_RECORD,'>','$$CR_PROCESS_HELP$$'),\nCR_PROCESS_HELP \= '$$CR_PROCESS_HELP$$',\nSG_END_DT \= '$$SG_END_DT$$',\nLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE PK \= '$$CR_PK$$';\nUPDATE \nJH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \nSG_NEXT_DT \= '$$SG_NEXT_DT$$',\nLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE PK \= '$$BBCR_PK$$'
MW_SCHDL_EXEC_SG_CRUPDATE3=UPDATE \nJH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \nCR_PROCESS \= '$$CR_PROCESS$$',\nCR_PROCESS_RECORD \= CONCAT(CR_PROCESS_RECORD,'>','$$CR_PROCESS_HELP$$'),\nCR_PROCESS_HELP \= '$$CR_PROCESS_HELP$$',\nSG_START_DT \= '$$SG_START_DT$$',\nLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE PK \= '$$CR_PK$$';
MW_SCHDL_EXEC_SG_GET_BEF_CR=SELECT TOP 1 * \nFROM JH_WS02_SCHDL_CALENDAR WITH(NOLOCK) \nWHERE (CR_PROCESS \= 'QUEUE' OR CR_PROCESS \= 'EXECUTING') \nAND SG_PK \= '$$SG_PK$$'\nAND SG_THIS_DT <> '$$SG_NEXT_DT$$'\n
MW_SCHDL_EXEC_SG_GET_CR_LASTSTATUS=SELECT TOP 1 CR_PROCESS AS 'TK上次執行結果' \nFROM JH_WS02_SCHDL_CALENDAR \nWHERE SG_PK \= '$$SG_PK$$' AND TK_PK \= '$$TK_PK$$' AND SG_END_DT IS NOT NULL \nORDER BY PK DESC\n
MW_SCHDL_EXEC_SG_GET_SKIP_DT=DECLARE @WEB_SERVICE_CODE VARCHAR(10),@SG_PK BIGINT \nSET @WEB_SERVICE_CODE \= '$$WEB_SERVICE_CODE$$' \nSET @SG_PK \= (CASE '$$SG_PK$$' WHEN '' THEN NULL ELSE '$$SG_PK$$' END) \n\nSELECT * \nFROM JH_WS02_SCHDL_SKIP_DT WITH(NOLOCK) \nWHERE SP_RULE_USE \= 'Y' \nAND (WS_CODE \= @WEB_SERVICE_CODE OR WS_CODE IS NULL) \nAND (SG_PK \= @SG_PK OR SG_PK IS NULL) \nAND (CAST(CONCAT(SP_START_YMD,' ',SP_TIME_FROM) AS DATETIME) <\= GETDATE()) AND (GETDATE() <\= CAST(CONCAT(ISNULL(SP_END_YMD,CONVERT(VARCHAR,DATEADD(DD,1,GETDATE()),23)),' ',SP_TIME_UNTIL) AS DATETIME))
MW_SCHDL_GET_JOIN_LIST=SysAPI/schdl/GetJoinList/Main.kjb
MW_SCHDL_IMMEDIATE=Funs\\SCHDL\\Immediate\\Entrance.kjb
MW_SCHDL_IMMEDIATE_CRUPDATE1=UPDATE \nJH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \nCR_PROCESS \= '$$CR_PROCESS$$',\nCR_PROCESS_RECORD \= CONCAT(CR_PROCESS_RECORD,'>','$$CR_PROCESS_HELP$$'),\nCR_PROCESS_HELP \= '$$CR_PROCESS_HELP$$',\nLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE PK \= '$$CR_PK$$'
MW_SCHDL_IMMEDIATE_CRUPDATE=UPDATE \nJH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \nCR_PROCESS \= '$$CR_PROCESS$$',\nCR_PROCESS_RECORD \= CONCAT(CR_PROCESS_RECORD,'>','$$CR_PROCESS_HELP$$'),\nCR_PROCESS_HELP \= '$$CR_PROCESS_HELP$$',\nSG_END_DT \= '$$SG_END_DT$$',\nLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE PK \= '$$CR_PK$$';
MW_SCHDL_IMMEDIATE_GET_TK_LISt=SELECT * FROM JH_WS02_SCHDL_TASK WITH(NOLOCK) WHERE SG_PK \= '$$PK$$'
MW_SCHDL_IMMEDIATELY=SysAPI/schdl/Immediate/Main_Log.kjb
MW_SCHDL_INTO_LIST=Funs/SCHDL/IntoList/Entrance.kjb
MW_SCHDL_INTO_LIST_GET_JOIN_LIST=DECLARE @WEB_SERVICE_CODE VARCHAR(20) \nSET @WEB_SERVICE_CODE \= '$$WEB_SERVICE_CODE$$' \n\nSELECT CONVERT(VARCHAR,GETDATE(),120) AS 'SYS_DT',* FROM (\nSELECT * FROM JH_WS02_SCHDL_RESERVATION AS A WITH(NOLOCK) \nWHERE (DATEDIFF(YEAR,GETDATE(),CAST(A.SG_THIS_DT AS DATETIME)) <\= 1 AND DATEDIFF(SECOND,GETDATE(),CAST(A.SG_THIS_DT AS DATETIME)) >\= -30 AND DATEDIFF(SECOND,GETDATE(),CAST(A.SG_THIS_DT AS DATETIME)) < 30)\n) AS B\nWHERE (B.WS_CODE \= 'ALL' AND B.PROXY_WS IS NULL) OR (B.WS_CODE \= @WEB_SERVICE_CODE AND B.PROXY_WS IS NULL) OR (B.PROXY_WS \= @WEB_SERVICE_CODE)\n
MW_SCHDL_INTO_LIST_GET_OVERDUE_LIST=SELECT * \nFROM JH_WS02_SCHDL_RESERVATION WITH(NOLOCK) \nWHERE DATEDIFF(YEAR,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) <\= 1 AND DATEDIFF(SECOND,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) < 0\n
MW_SCHDL_JOIN=Funs/SCHDL/Join/Entrance.kjb
MW_SCHDL_JOIN_GET_TASK_LIST=SELECT * FROM JH_WS02_SCHDL_TASK WHERE SG_PK \= '$$PK$$'
MW_SCHDL_PAUSE=Funs/SCHDL/Pause/Entrance.kjb
MW_SCHDL_PAUSE_UPDATE_CR=UPDATE JH_WS02_SCHDL_CALENDAR \nSET \nSG_END_DT \= CONVERT(VARCHAR,GETDATE(),120),\nCR_PROCESS \= 'PAUSE',\nCR_PROCESS_RECORD \= CONCAT(CR_PROCESS_RECORD,'>','暫停排程'),\nCR_PROCESS_HELP \= '暫停排程',\nLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE\nSG_PK \= '$$SG_PK$$' AND SG_THIS_DT \= '$$SG_THIS_DT$$' AND CR_PROCESS IN ('QUEUE','EXECUTING')
MW_SCHDL_QUIT=Funs/SCHDL/Quit/Entrance.kjb
MW_SCHDL_QUIT_UPDATE_CR=UPDATE JH_WS02_SCHDL_CALENDAR \nSET \nSG_END_DT \= CONVERT(VARCHAR,GETDATE(),120),\nCR_PROCESS \= 'STOP',\nCR_PROCESS_RECORD \= CONCAT(CR_PROCESS_RECORD,'>','停止排程'),\nCR_PROCESS_HELP \= '停止排程',\nLAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE\nSG_PK \= '$$SG_PK$$' AND CR_PROCESS IN ('QUEUE','EXECUTING')
MW_SCHDL_RUN_SGGroups=SysAPI/schdl/RunSGGroups/Main.kjb
MW_SCHDL_RUN_TK=SysAPI/schdl/RunTasK/Main.kjb
MW_SCHDL_SELECT_CR_LIST=DECLARE @SG_THIS_DT VARCHAR(50),@SG_PK VARCHAR(4000)\nSET @SG_THIS_DT \= '$$PARAM_CALENDAR_DT$$'\nSET @SG_PK \= '$$PARAM_SG_PK$$'\n\nIF @SG_PK \= 'ALL'\n\tBEGIN\n\t\tSELECT * FROM JH_WS02_SCHDL_CALENDAR WITH(NOLOCK) WHERE (@SG_THIS_DT \= 'ALL' OR DATEDIFF(DD,CAST(SG_THIS_DT AS DATETIME),GETDATE()) \= 0) ORDER BY SG_THIS_DT ASC\n\tEND\nELSE\n\tBEGIN\n\t\tSELECT * FROM JH_WS02_SCHDL_CALENDAR WITH(NOLOCK) WHERE (@SG_THIS_DT \= 'ALL' OR DATEDIFF(DD,CAST(SG_THIS_DT AS DATETIME),GETDATE()) \= 0) AND SG_PK \= @SG_PK ORDER BY SG_THIS_DT ASC\n\tEND\n
MW_SCHDL_SELECT_SG_LIST=SELECT \n A.PK\n,A.WS_CODE\n,A.PROXY_WS\n,A.SG_NAME\n,A.SG_HELP\n,CONVERT(VARCHAR,A.SG_START_YMD,126) AS 'SG_START_YMD'\n,CONVERT(VARCHAR,A.SG_START_HMS,108) AS 'SG_START_HMS'\n,CONVERT(VARCHAR,A.SG_ABORT_YMD,126) AS 'SG_ABORT_YMD'\n,CONVERT(VARCHAR,A.SG_ABORT_HMS,108) AS 'SG_ABORT_HMS'\n,A.SG_ABORT\n,CONVERT(VARCHAR,A.SG_THIS_DT,120) AS 'SG_THIS_DT'\n,CONVERT(VARCHAR,A.SG_NEXT_DT,120) AS 'SG_NEXT_DT'\n,CONVERT(VARCHAR,A.SG_START_DT,120) AS 'SG_START_DT'\n,CONVERT(VARCHAR,A.SG_END_DT,120) AS 'SG_END_DT'\n,A.SG_TEAM_NUM\n,A.SG_TOTAL\n,A.SG_SUCCEED_COUNT\n,A.SG_ERROR_COUNT\n,A.SG_STATUS\n,A.SG_STATUS_HELP\n,A.SG_PROCESS\n,A.SG_PROCESS_HELP\n,A.SG_SLEEP_NUM\n,A.SG_SKIP_CRDATE\n,A.SG_CREATE_NUM\n,A.SG_CREATE_UNIT\n,A.SG_SUCCEED_MAIL\n,A.SG_FAIL_MAIL\n,B.SC_VALUE_A\n,B.SC_UNIT_A\n,B.SC_VALUE_B\n,B.SC_UNIT_B\nFROM \n\tJH_WS02_SCHDL_GROUP AS A WITH(NOLOCK)\nLEFT JOIN\n\tJH_WS02_SCHDL_CYCLE_LIST AS B WITH(NOLOCK) ON A.PK \= B.SG_PK\nWHERE \n\tA.PK \= '$$PARAM_PK$$' OR '$$PARAM_PK$$' \= ''
MW_SCHDL_SELECT_SG_MAIL_LIST=DECLARE @CODE_ID VARCHAR(100),@STATUS VARCHAR(10)\nSET @CODE_ID \= '$$PARAM_CODE_ID$$%'\nSET @STATUS \= '%($$PARAM_STATUS$$)%'\n\n/*SET @CODE_ID \= 'MW_SCHDL_SEND_MAIL1%'*/\n/*SET @STATUS \= '%(SUCCEED)%'*/\n\nSELECT \nCODE_ID,\nAPI_DESC \nFROM JH_WS02_CODE_LIST WITH(NOLOCK) \nWHERE CODE_ID LIKE @CODE_ID AND API_DESC LIKE @STATUS\n\n
MW_SCHDL_SELECT_SKIPDT_LIST=DECLARE @PARAM_PK VARCHAR(4000)\nSET @PARAM_PK \= (CASE '$$PARAM_PK$$' WHEN '' THEN 0 ELSE '$$PARAM_PK$$' END)\n\nSELECT\nPK,\nWS_CODE,\nSG_PK,\nSUBSTRING(CAST(SP_START_YMD AS VARCHAR),0,11) AS 'SP_START_YMD',\nSUBSTRING(CAST(SP_END_YMD AS VARCHAR),0,11) AS 'SP_END_YMD',\nSUBSTRING(CAST(SP_TIME_FROM AS VARCHAR),0,9) AS 'SP_TIME_FROM',\nSUBSTRING(CAST(SP_TIME_UNTIL AS VARCHAR),0,9) AS 'SP_TIME_UNTIL',\nSP_MULTIPLE_DAY,\nSP_RULE_USE,\nSP_HELP\nFROM JH_WS02_SCHDL_SKIP_DT WITH(NOLOCK) \nWHERE @PARAM_PK \= 0 OR PK \= @PARAM_PK
MW_SCHDL_SELECT_TK_API_Flow=SELECT * FROM JH_WS02_FLOW_LIST WITH(NOLOCK)
MW_SCHDL_SELECT_TK_API_TASK=SELECT * FROM JH_WS02_CODE_LIST WITH(NOLOCK) ORDER BY CODE_ID ASC\n/*SELECT * FROM JH_WS02_CODE_LIST WITH(NOLOCK) WHERE ACTION_TYPE NOT LIKE '%R%' ORDER BY CODE_ID ASC*/
MW_SCHDL_SELECT_TK_LIST=SELECT * \nFROM JH_WS02_SCHDL_TASK WITH(NOLOCK) \nWHERE (SG_PK \= '$$PARAM_SG_PK$$' AND '$$PARAM_PK$$' \= '') OR (PK \= '$$PARAM_PK$$' AND '$$PARAM_SG_PK$$' \= '')
MW_SCHDL_SEND_LETTER=Funs/SCHDL/SendLetter/Entrance.kjb
MW_SCHDL_SEND_LETTER_GET_SGLIST=SELECT * FROM JH_WS02_SCHDL_CALENDAR WITH(NOLOCK) WHERE SG_PK \= '$$SG_PK$$' AND SG_THIS_DT \= '$$SG_THIS_DT$$'
MW_SCHDL_SEND_LETTER_GETTEMPMAIL=SELECT * FROM JH_SENDMAIL_CONTENT WITH(NOLOCK)
MW_SCHDL_SEND_LETTER_GETTO=SELECT C.EMAIL \nFROM GROUPS AS A WITH(NOLOCK) \nLEFT JOIN USERGROUP AS B WITH(NOLOCK) ON A.GROUPID \= B.GROUPID\nLEFT JOIN USERS AS C WITH(NOLOCK) ON B.USERID \= C.USERID\nWHERE A.GROUPID \= '$$GROUPID$$'
MW_SCHDL_SEND_MAIL1=/SysAPI/schdl/WriteMail/Mail.kjb
MW_SCHDL_SEND_MAIL=/SysAPI/schdl/WriteMail/Mail.kjb
MW_SCHDL_UPDATE_AUTO_STATUS=UPDATE JH_WS02_SCHDL_GROUP WITH(ROWLOCK) SET SG_STATUS \= 'AUTO' WHERE SG_STATUS \= 'AUTORUN'
MW_SCHDL_UPDATE_CR_STATUS=UPDATE \n\tJH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \n\tCR_PROCESS \= 'AUTO' ,\n\tLAST_MOD_USER_COMPANY_ID \= '${PARAM_COMPANY}',\n\tLAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}',\n\tLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE \n\tCR_PROCESS \= 'AUTORUN'
MW_SCHDL_UPDATE_SG=UPDATE JH_WS02_SCHDL_GROUP \nSET \n\tWS_CODE \= '$$PARAM_WS_CODE$$',\n\tPROXY_WS \= (CASE '$$PARAM_PROXY_WS$$' WHEN '' THEN NULL ELSE '$$PARAM_PROXY_WS$$' END),\n\tSG_HELP \= (CASE '$$PARAM_SG_HELP$$' WHEN '' THEN NULL ELSE '$$PARAM_SG_HELP$$' END),\n\tSG_START_YMD \= '$$PARAM_SG_START_YMD$$',\n\tSG_START_HMS \= '$$PARAM_SG_START_HMS$$',\n\tSG_ABORT_YMD \= (CASE '$$PARAM_SG_ABORT_YMD$$' WHEN '' THEN NULL ELSE '$$PARAM_SG_ABORT_YMD$$' END),\n\tSG_ABORT_HMS \= (CASE '$$PARAM_SG_ABORT_HMS$$' WHEN '' THEN NULL ELSE '$$PARAM_SG_ABORT_HMS$$' END),\n\tSG_ABORT \= '$$PARAM_SG_ABORT$$',\n\tSG_TEAM_NUM \= 0,\n\tSG_SUCCEED_COUNT \= 0,\n\tSG_ERROR_COUNT \= 0,\n\tSG_STATUS \= 'QUIT',\n\tSG_STATUS_HELP \= '退出排程',\n\tSG_SLEEP_NUM \= '$$PARAM_SG_SLEEP_NUM$$',\n\tSG_SKIP_CRDATE \= '$$PARAM_SG_SKIP_CRDATE$$',\n\tSG_CREATE_NUM \= '$$PARAM_SG_CREATE_NUM$$',\n\tSG_CREATE_UNIT \= '$$PARAM_SG_CREATE_UNIT$$',\n\tSG_SUCCEED_MAIL \= '$$PARAM_SG_SUCCEED_MAIL$$',\n\tSG_FAIL_MAIL \= '$$PARAM_SG_FAIL_MAIL$$',\n\tLAST_MOD_USER_COMPANY_ID \= '${PARAM_COMPANY}',\n\tLAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}',\n\tLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120) \nWHERE \n\tPK \= '$$PARAM_PK$$' \n \n\nUPDATE JH_WS02_SCHDL_CYCLE_LIST \nSET \n\tSC_VALUE_A \= (CASE '$$PARAM_SC_VALUE_A$$' WHEN '' THEN NULL ELSE '$$PARAM_SC_VALUE_A$$' END),\n\tSC_UNIT_A \= (CASE '$$PARAM_SC_UNIT_A$$' WHEN '' THEN NULL ELSE '$$PARAM_SC_UNIT_A$$' END),\n\tSC_VALUE_B \= (CASE '$$PARAM_SC_VALUE_B$$' WHEN '' THEN NULL ELSE '$$PARAM_SC_VALUE_B$$' END),\n\tSC_UNIT_B \= (CASE '$$PARAM_SC_UNIT_B$$' WHEN '' THEN NULL ELSE '$$PARAM_SC_UNIT_B$$' END),\n\tLAST_MOD_USER_COMPANY_ID \= '${PARAM_COMPANY}',\n\tLAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}',\n\tLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120) \nWHERE \n\tSG_PK \= '$$PARAM_PK$$'
MW_SCHDL_UPDATE_SG_INFO=SysAPI/schdl/UpdateSG/Main.kjb
MW_SCHDL_UPDATE_SKIPDT=UPDATE JH_WS02_SCHDL_SKIP_DT\nSET \n\tWS_CODE \= (CASE '$$PARAM_WS_CODE$$' WHEN '' THEN NULL ELSE '$$PARAM_WS_CODE$$' END),\n\tSG_PK \= (CASE '$$PARAM_SG_PK$$' WHEN '' THEN NULL ELSE '$$PARAM_SG_PK$$' END),\n\tSP_START_YMD \= '$$PARAM_SP_START_YMD$$',\n\tSP_END_YMD \= (CASE '$$PARAM_SP_END_YMD$$' WHEN '' THEN NULL ELSE '$$PARAM_SP_END_YMD$$' END),\n\tSP_TIME_FROM \= '$$PARAM_SP_TIME_FROM$$',\n\tSP_TIME_UNTIL \= '$$PARAM_SP_TIME_UNTIL$$',\n\tSP_MULTIPLE_DAY \= (CASE '$$PARAM_SP_MULTIPLE_DAY$$' WHEN '' THEN NULL ELSE '$$PARAM_SP_MULTIPLE_DAY$$' END),\n\tSP_RULE_USE \= '$$PARAM_SP_RULE_USE$$',\n\tSP_HELP \= (CASE '$$PARAM_SP_HELP$$' WHEN '' THEN NULL ELSE '$$PARAM_SP_HELP$$' END),\n\tLAST_MOD_USER_COMPANY_ID \= '${PARAM_COMPANY}',\n\tLAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}',\n\tLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE\n\tPK \= '$$PARAM_PK$$'
MW_SCHDL_UPDATE_TK=UPDATE \n\tJH_WS02_SCHDL_TASK\nSET \n\tTK_NAME \= '$$PARAM_TK_NAME$$',\n\tTK_TYPE \= '$$PARAM_TK_TYPE$$',\n\tTK_HELP \= '$$PARAM_TK_HELP$$',\n\tTK_ABORT \= '$$PARAM_TK_ABORT$$',\n\tTK_PAUSE \= '$$PARAM_TK_PAUSE$$',\n\tTK_SUCCEED_MAIL \= '$$PARAM_TK_SUCCEED_MAIL$$',\n\tTK_FAIL_MAIL \= '$$PARAM_TK_FAIL_MAIL$$',\n\tLAST_MOD_USER_COMPANY_ID \= '${PARAM_COMPANY}',\n\tLAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}',\n\tLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE\n\tPK \= '$$PARAM_PK$$'
MW_Table_COPY=Funs/TableCopy/Entrances.kjb
MW_TEST_CR_DELETE=DELETE JH_WS02_SCHDL_CALENDAR
MW_TEST_CR_SEL_LIST=DECLARE @PARAM_CALENDAR_DT VARCHAR(30),@PARAM_SG_PK VARCHAR(4000)\nSET @PARAM_CALENDAR_DT \= '$$PARAM_CALENDAR_DT$$'\nSET @PARAM_SG_PK \= '$$PARAM_SG_PK$$'\n\nIF @PARAM_CALENDAR_DT \= 'ALL'\n\tBEGIN\n\t\tIF @PARAM_SG_PK \= 'ALL'\n\t\t\tBEGIN\n\t\t\t\tSELECT TOP 10000 * FROM JH_WS02_SCHDL_CALENDAR WITH(NOLOCK) ORDER BY SG_THIS_DT ASC\n\t\t\tEND\n\t\tELSE\n\t\t\tBEGIN\n\t\t\t\tSELECT TOP 10000 * FROM JH_WS02_SCHDL_CALENDAR WITH(NOLOCK) WHERE SG_PK \= @PARAM_SG_PK ORDER BY SG_THIS_DT ASC\n\t\t\tEND\n\tEND\nELSE IF @PARAM_CALENDAR_DT \= 'DT'\n\tBEGIN\n\t\tIF @PARAM_SG_PK \= 'ALL'\n\t\t\tBEGIN\n\t\t\t\tSELECT TOP 10000 * FROM JH_WS02_SCHDL_CALENDAR WITH(NOLOCK) \n\t\t\t\tWHERE \n\t\t\t\t\tDATEDIFF(YEAR,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) <\= 10 AND DATEDIFF(SECOND,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) > 0\n\t\t\t\tORDER BY SG_THIS_DT ASC\n\t\t\tEND\n\t\tELSE\n\t\t\tBEGIN\n\t\t\t\tSELECT TOP 10000 * FROM JH_WS02_SCHDL_CALENDAR WITH(NOLOCK) \n\t\t\t\tWHERE \n\t\t\t\t\tSG_PK \= @PARAM_SG_PK\n\t\t\t\t\tAND DATEDIFF(YEAR,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) <\= 10 AND DATEDIFF(SECOND,GETDATE(),CAST(SG_THIS_DT AS DATETIME)) > 0\n\t\t\t\tORDER BY SG_THIS_DT ASC\n\t\t\tEND\n\tEND
MW_TEST_CREATE_SCHDL_GROUP=INSERT INTO JH_WS02_SCHDL_GROUP \n(WS_CODE,PROXY_WS_CODE,SCHDL_GROUP_NAME,SCHDL_HELP,SCHDL_START_DT_YMD,SCHDL_START_DT_HMS,SCHDL_CYCLE_VALUE,SCHDL_CYCLE_UNIT,SCHDL_ABORT_VALUE1,SCHDL_ABORT_VALUE2,SCHDL_ABORT_UNIT,SCHDL_ERROR_STOP,SCHDL_COUNTER\n,SCHDL_MAPPING_COUNTER,SCHDL_COUNTER_TYPE\n,SCHDL_STATUS,SCHDL_STATUS_HELP,SCHDL_INSERT_NUM,SCHDL_INSERT_UNIT,SCHDL_MAIL_SUCCEED,SCHDL_MAIL_FAIL,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT)\nVALUES\n('$$PARAM_WS_CODE$$',CASE '$$PARAM_PROXY_WS_CODE$$' WHEN '' THEN NULL ELSE '$$PARAM_PROXY_WS_CODE$$' END,'$$PARAM_SCHDL_GROUP_NAME$$','$$PARAM_SCHDL_HELP$$','$$PARAM_SCHDL_START_DT_YMD$$','$$PARAM_SCHDL_START_DT_HMS$$'\n,'$$PARAM_SCHDL_CYCLE_VALUE$$','$$PARAM_SCHDL_CYCLE_UNIT$$','$$PARAM_SCHDL_ABORT_VALUE1$$',CASE '$$PARAM_SCHDL_ABORT_VALUE2$$' WHEN '' THEN NULL ELSE '$$PARAM_SCHDL_ABORT_VALUE2$$' END,'$$PARAM_SCHDL_ABORT_UNIT$$'\n,'$$PARAM_SCHDL_ERROR_STOP$$',0,'$$PARAM_SCHDL_MAPPING_COUNTER$$','$$PARAM_SCHDL_COUNTER_TYPE$$'\n,'$$PARAM_SCHDL_STATUS$$','$$PARAM_SCHDL_STATUS_HELP$$','$$PARAM_SCHDL_INSERT_NUM$$','$$PARAM_SCHDL_INSERT_UNIT$$','$$PARAM_SCHDL_MAIL_SUCCEED$$','$$PARAM_SCHDL_MAIL_FAIL$$'\n,'$$PARAM_ADD_USER_COMPANY_ID$$','$$PARAM_ADD_USER_ID$$','$$PARAM_ADD_USER_COMPANY_ID$$',CONVERT(VARCHAR,GETDATE(),120))\n\n
MW_TEST_CREATE_SCHDL_TASK=INSERT INTO JH_WS02_SCHDL_TASK \n(SCHDL_GROUP_PK,TASK_NAME,TASK_PK,TASK_TYPE,TASK_ERROR_STOP,TASK_HELP,TASK_PAUSE,TASK_MAIL_SUCCEED,TASK_MAIL_FAIL,\nADD_USER_ID,ADD_USER_COMPANY_ID,COMPANY_ID)\nVALUES\n('$$PARAM_SCHDL_GROUP_PK$$','$$PARAM_TASK_NAME$$','$$PARAM_TASK_PK$$','$$PARAM_TASK_TYPE$$','$$PARAM_TASK_ERROR_STOP$$','$$PARAM_TASK_HELP$$','$$PARAM_TASK_PAUSE$$',\n'$$PARAM_TASK_MAIL_SUCCEED$$','$$PARAM_TASK_MAIL_FAIL$$','$$PARAM_ADD_USER_ID$$','$$PARAM_ADD_USER_COMPANY_ID$$','$$PARAM_ADD_USER_COMPANY_ID$$');\nDELETE JH_WS02_SCHDL_CALENDAR WHERE SCHDL_GROUP_PK \= '$$PARAM_SCHDL_GROUP_PK$$' AND SCHDL_STATUS \= 'QUEUE'
MW_TEST_CREATE_SENDMAIL_CONTENT=INSERT INTO JH_SENDMAIL_CONTENT\n(PK_SENDMAIL_CONTENT,MAIL_TYPE,SUB_TYPE,SUBJECT,CONTENT,MAIN_RECEIVER,CC_RECEIVER,CF_RECEIVER,ADD_USER_ID,COMPANY_ID,ADD_USER_COMPANY_ID)\nVALUES\n('$$PARAM_PK_SENDMAIL_CONTENT$$','$$GROUP_MAIL_TYPE$$','$$PARAM_SUB_TYPE$$','$$PARAM_SUBJECT$$','$$PARAM_CONTENT$$'\n,CASE '$$PARAM_MAIN_RECEIVER$$' WHEN '' THEN NULL ELSE '$$PARAM_MAIN_RECEIVER$$' END\n,CASE '$$PARAM_CC_RECEIVER$$' WHEN '' THEN NULL ELSE '$$PARAM_CC_RECEIVER$$' END\n,CASE '$$PARAM_CF_RECEIVER$$' WHEN '' THEN NULL ELSE '$$PARAM_CF_RECEIVER$$' END\n,'$$PARAM_ADD_USER_ID$$','$$PARAM_ADD_USER_COMPANY_ID$$','$$PARAM_ADD_USER_COMPANY_ID$$')
MW_TEST_CREATE_SKIPDT_DATA=INSERT INTO JH_WS02_SCHDL_CALENDAR_SKIP_DT\n(WS_CODE,SCHDL_GROUP_PK,SCHDL_GROUP_NAME,PASS_START_DT_YMD,PASS_START_DT_HMS\n,SCHDL_CYCLE_VALUE,SCHDL_CYCLE_UNIT,PASS_END_DT_YMD,PASS_END_DT_HMS,RULE_USE,PASS_HELP\n,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT)\nVALUES\n('$$PARAM_WS_CODE$$','$$PARAM_SCHDL_GROUP_PK$$','$$PARAM_SCHDL_GROUP_NAME$$','$$PARAM_PASS_START_DT_YMD$$','$$PARAM_PASS_START_DT_HMS$$'\n,'$$PARAM_SCHDL_CYCLE_VALUE$$','$$PARAM_SCHDL_CYCLE_UNIT$$','$$PARAM_PASS_END_DT_YMD$$','$$PARAM_PASS_END_DT_HMS$$','$$PARAM_RULE_USE$$','$$PARAM_PASS_HELP$$'\n,'$$PARAM_ADD_USER_COMPANY_ID$$','$$PARAM_ADD_USER_ID$$','$$PARAM_ADD_USER_COMPANY_ID$$',CONVERT(VARCHAR,GETDATE(),120))
MW_TEST_DELETE_CALENDAR=DELETE JH_WS02_SCHDL_CALENDAR;
MW_TEST_DELETE_SCHDL_GROUP=DELETE JH_WS02_SCHDL_GROUP WHERE PK \= '$$PARAM_PK$$';\nDELETE JH_WS02_SCHDL_TASK WHERE SCHDL_GROUP_PK \= '$$PARAM_SCHDL_GROUP_PK$$';\nDELETE JH_WS02_SCHDL_CALENDAR WHERE SCHDL_GROUP_PK \= '$$PARAM_SCHDL_GROUP_PK$$';
MW_TEST_DELETE_SCHDL_TASK=DELETE JH_WS02_SCHDL_TASK WHERE PK \= '$$PARAM_PK$$';\nDELETE JH_WS02_SCHDL_CALENDAR WHERE SCHDL_GROUP_PK \= '$$PARAM_SCHDL_GROUP_PK$$' AND SCHDL_STATUS \= 'QUEUE';
MW_TEST_DELETE_SENDMAIL_CONTENT=DELETE JH_SENDMAIL_CONTENT WHERE PK_SENDMAIL_CONTENT \= '$$PARAM_PK_SENDMAIL_CONTENT$$' AND MAIL_TYPE \= '$$GROUP_MAIL_TYPE$$' AND SUB_TYPE \= '$$PARAM_SUB_TYPE$$'
MW_TEST_DELETE_SKIPDT=DELETE JH_WS02_SCHDL_CALENDAR_SKIP_DT WHERE PK \= '$$PARAM_PK$$'
MW_TEST_PAUSE_SCHDL_GROUP=UPDATE JH_WS02_SCHDL_GROUP WITH(ROWLOCK) \nSET \nSCHDL_BEFORE_STATUS \= SCHDL_STATUS,\nSCHDL_STATUS \= 'PAUSE',\nSCHDL_STATUS_HELP \= '暫停',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_ADD_USER_COMPANY_ID$$',\nLAST_MOD_USER_ID \= '$$PARAM_ADD_USER_ID$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE \n\tPK \= '$$PARAM_SCHDL_GROUP_PK$$';\n\nUPDATE JH_WS02_SCHDL_CALENDAR \nSET\nSCHDL_BEFORE_STATUS \= SCHDL_STATUS,\nSCHDL_STATUS \= 'PAUSE',\nSCHDL_STATUS_HELP \= '暫停',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_ADD_USER_COMPANY_ID$$',\nLAST_MOD_USER_ID \= '$$PARAM_ADD_USER_ID$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE SCHDL_GROUP_PK \= '$$PARAM_SCHDL_GROUP_PK$$' AND \n(CASE WHEN ISDATE(SCHDL_THIS_DT) \= 1 THEN \n(CASE WHEN DATEDIFF(YEAR,GETDATE(),CAST(SCHDL_THIS_DT AS DATETIME)) <\= 10 THEN \n(CASE WHEN DATEDIFF(SECOND,GETDATE(),CAST(SCHDL_THIS_DT AS DATETIME)) > 0 THEN 'Y' ELSE 'N' END) ELSE 'N' END) ELSE 'N' END) \= 'Y'
MW_TEST_SELECT_API_LIST=SELECT PK,CODE_ID AS 'API_NAME',API_DESC,'APITask' AS 'API_TYPE' FROM JH_WS02_CODE_LIST WITH(NOLOCK) ORDER BY API_NAME ASC
MW_TEST_SELECT_API_LIST_FLOW=SELECT PK,FLOW_ID AS 'API_NAME',API_DESC,'APIFlow' AS 'API_TYPE' FROM JH_WS02_FLOW_LIST WITH(NOLOCK) ORDER BY API_NAME ASC
MW_TEST_SELECT_CALENDAR=DECLARE @PARAM_CALENDAR_DT VARCHAR(30),@PARAM_SCHDL_GROUP_PK VARCHAR(4000)\nSET @PARAM_CALENDAR_DT \= '$$PARAM_CALENDAR_DT$$'\nSET @PARAM_SCHDL_GROUP_PK \= '$$PARAM_SCHDL_GROUP_PK$$'\n\nIF @PARAM_CALENDAR_DT \= 'ALL'\n\tBEGIN\n\t\tIF @PARAM_SCHDL_GROUP_PK \= 'ALL'\n\t\t\tBEGIN\n\t\t\t\tSELECT TOP 10000 * FROM JH_WS02_SCHDL_CALENDAR WITH(NOLOCK) ORDER BY SCHDL_THIS_DT ASC\n\t\t\tEND\n\t\tELSE\n\t\t\tBEGIN\n\t\t\t\tSELECT TOP 10000 * FROM JH_WS02_SCHDL_CALENDAR WITH(NOLOCK) WHERE SCHDL_GROUP_PK \= @PARAM_SCHDL_GROUP_PK ORDER BY SCHDL_THIS_DT ASC\n\t\t\tEND\n\tEND\nELSE IF @PARAM_CALENDAR_DT \= 'DT'\n\tBEGIN\n\t\tIF @PARAM_SCHDL_GROUP_PK \= 'ALL'\n\t\t\tBEGIN\n\t\t\t\tSELECT TOP 10000 * FROM JH_WS02_SCHDL_CALENDAR WITH(NOLOCK) \n\t\t\t\tWHERE \n\t\t\t\t\t1 \= 1\n\t\t\t\t\tAND (CASE WHEN ISDATE(SCHDL_THIS_DT) \= 1 THEN (\n\t\t\t\t\t\t\tCASE WHEN DATEDIFF(YEAR,GETDATE(),CAST(SCHDL_THIS_DT AS DATETIME)) <\= 10 /* 10年 */ THEN (\n\t\t\t\t\t\t\t\tCASE WHEN DATEDIFF(SECOND,GETDATE(),CAST(SCHDL_THIS_DT AS DATETIME)) > 0 THEN 'Y' ELSE 'N' END) ELSE 'N' END) ELSE 'N' END) \= 'Y'\n\t\t\t\tORDER BY SCHDL_THIS_DT ASC\n\t\t\tEND\n\t\tELSE\n\t\t\tBEGIN\n\t\t\t\tSELECT TOP 10000 * FROM JH_WS02_SCHDL_CALENDAR WITH(NOLOCK) \n\t\t\t\tWHERE \n\t\t\t\t\t1 \= 1\n\t\t\t\t\tAND SCHDL_GROUP_PK \= @PARAM_SCHDL_GROUP_PK\n\t\t\t\t\tAND (CASE WHEN ISDATE(SCHDL_THIS_DT) \= 1 THEN (\n\t\t\t\t\t\t\tCASE WHEN DATEDIFF(YEAR,GETDATE(),CAST(SCHDL_THIS_DT AS DATETIME)) <\= 10 /* 10年 */ THEN (\n\t\t\t\t\t\t\t\tCASE WHEN DATEDIFF(SECOND,GETDATE(),CAST(SCHDL_THIS_DT AS DATETIME)) > 0 THEN 'Y' ELSE 'N' END) ELSE 'N' END) ELSE 'N' END) \= 'Y'\n\t\t\t\tORDER BY SCHDL_THIS_DT ASC\n\t\t\tEND\n\tEND
MW_TEST_SELECT_GROUPS=SELECT * FROM GROUPS WITH(NOLOCK)
MW_TEST_SELECT_MAIL_LIST=SELECT CODE_ID,API_DESC FROM JH_WS02_CODE_LIST WHERE CODE_ID LIKE '$$PARAM_CODE_ID$$%'
MW_TEST_SELECT_SCHDL_GROUP=SELECT * FROM JH_WS02_SCHDL_GROUP WITH(NOLOCK) WHERE PK \= '$$PARAM_PK$$' OR '$$PARAM_PK$$' \= ''
MW_TEST_SELECT_SCHDL_ONE_TASK=SELECT * FROM JH_WS02_SCHDL_TASK WITH(NOLOCK) WHERE PK \= '$$PARAM_SCHDL_GROUP_PK$$'
MW_TEST_SELECT_SCHDL_TASK=SELECT * FROM JH_WS02_SCHDL_TASK WITH(NOLOCK) WHERE SCHDL_GROUP_PK \= '$$PARAM_SCHDL_GROUP_PK$$'
MW_TEST_SELECT_SENDMAIL_CONTENT=SELECT * FROM JH_SENDMAIL_CONTENT WITH(NOLOCK) \nWHERE \n'$$PARAM_PK_SENDMAIL_CONTENT$$' \= '' OR\n(PK_SENDMAIL_CONTENT \= '$$PARAM_PK_SENDMAIL_CONTENT$$' AND MAIL_TYPE \= '$$GROUP_MAIL_TYPE$$' AND SUB_TYPE \= '$$PARAM_SUB_TYPE$$')
MW_TEST_SELECT_SKIPDT=SELECT * FROM JH_WS02_SCHDL_CALENDAR_SKIP_DT WITH(NOLOCK) WHERE PK \= '$$PARAM_PK$$' OR '$$PARAM_PK$$' \= ''\n
MW_TEST_SG_CREATE=DECLARE @MyTableVar TABLE (PK BIGINT NOT NULL);  \n\nINSERT INTO JH_WS02_SCHDL_GROUP\n(WS_CODE,PROXY_WS,SG_NAME,SG_HELP\n,SG_START_YMD,SG_START_HMS\n,SG_ABORT_YMD,SG_ABORT_HMS,SG_ABORT\n,SG_TOTAL,SG_COUNTER,SG_COUNTER_TYPE\n,SG_STATUS,SG_STATUS_HELP,SG_CREATE_NUM,SG_CREATE_UNIT\n,SG_SUCCEED_MAIL,SG_FAIL_MAIL\n,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT)\nOUTPUT inserted.PK INTO @MyTableVar\nVALUES\n('$$PARAM_WS_CODE$$'\n,(CASE '$$PARAM_PROXY_WS$$' WHEN '' THEN NULL ELSE '$$PARAM_PROXY_WS$$' END)\n,'$$PARAM_SG_NAME$$','$$PARAM_SG_HELP$$'\n,'$$PARAM_SG_START_YMD$$'\n,(CASE '$$PARAM_SG_START_HMS$$' WHEN '' THEN NULL ELSE '$$PARAM_SG_START_HMS$$' END)\n,(CASE '$$PARAM_SG_ABORT_YMD$$' WHEN '' THEN NULL ELSE '$$PARAM_SG_ABORT_YMD$$' END)\n,(CASE '$$PARAM_SG_ABORT_HMS$$' WHEN '' THEN NULL ELSE '$$PARAM_SG_ABORT_HMS$$' END),'$$PARAM_SG_ABORT$$'\n,0,'$$PARAM_SG_COUNTER$$','$$PARAM_SG_COUNTER_TYPE$$'\n,'$$PARAM_SG_STATUS$$','$$PARAM_SG_STATUS_HELP$$','$$PARAM_SG_CREATE_NUM$$','$$PARAM_SG_CREATE_UNIT$$'\n,'$$PARAM_SG_SUCCEED_MAIL$$','$$PARAM_SG_FAIL_MAIL$$'\n,'$$PARAM_COMPANY_ID$$','$$PARAM_ADD_USER_ID$$','$$PARAM_COMPANY_ID$$',CONVERT(VARCHAR,GETDATE(),120))\n\n/* 週期 */\nINSERT INTO JH_WS02_SCHDL_CYCLE_LIST \n(SG_PK,SC_VALUE_A,SC_UNIT_A,SC_VALUE_B,SC_UNIT_B,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT) \nVALUES \n((SELECT PK FROM @MyTableVar)\n,(CASE '$$PARAM_SC_VALUE_A$$' WHEN '' THEN NULL ELSE '$$PARAM_SC_VALUE_A$$' END),'$$PARAM_SC_UNIT_A$$'\n,(CASE '$$PARAM_SC_VALUE_B$$' WHEN '' THEN NULL ELSE '$$PARAM_SC_VALUE_B$$' END),'$$PARAM_SC_UNIT_B$$'\n,'$$PARAM_COMPANY_ID$$','$$PARAM_ADD_USER_ID$$','$$PARAM_COMPANY_ID$$',CONVERT(VARCHAR,GETDATE(),120))\t\n
MW_TEST_SG_DELETE=DELETE JH_WS02_SCHDL_GROUP WHERE PK \= '$$PARAM_PK$$'\nDELETE JH_WS02_SCHDL_CYCLE_LIST WHERE SG_PK \= '$$PARAM_PK$$'
MW_TEST_SG_SEL_APIFlow=SELECT * FROM JH_WS02_FLOW_LIST WITH(NOLOCK) ORDER BY FLOW_ID ASC
MW_TEST_SG_SEL_APITask=SELECT * FROM JH_WS02_CODE_LIST WITH(NOLOCK) ORDER BY CODE_ID ASC
MW_TEST_SG_SEL_GROUP_LIST=SELECT \n A.PK\n,A.WS_CODE\n,A.PROXY_WS\n,A.SG_NAME\n,A.SG_HELP\n,CONVERT(VARCHAR,A.SG_START_YMD,126) AS 'SG_START_YMD'\n,CONVERT(VARCHAR,A.SG_START_HMS,108) AS 'SG_START_HMS'\n,CONVERT(VARCHAR,A.SG_ABORT_YMD,126) AS 'SG_ABORT_YMD'\n,CONVERT(VARCHAR,A.SG_ABORT_HMS,108) AS 'SG_ABORT_HMS'\n,A.SG_ABORT\n,CONVERT(VARCHAR,A.SG_THIS_DT,120) AS 'SG_THIS_DT'\n,CONVERT(VARCHAR,A.SG_NEXT_DT,120) AS 'SG_NEXT_DT'\n,A.SG_TOTAL\n,A.SG_COUNTER\n,A.SG_COUNTER_TYPE\n,A.SG_STATUS\n,A.SG_STATUS_HELP\n,A.SG_PROCESS\n,A.SG_PROCESS_RECORD\n,A.SG_PROCESS_HELP\n,A.SG_CREATE_NUM\n,A.SG_CREATE_UNIT\n,A.SG_SUCCEED_MAIL\n,A.SG_FAIL_MAIL\n,B.SC_VALUE_A\n,B.SC_UNIT_A\n,B.SC_VALUE_B\n,B.SC_UNIT_B\nFROM \n\tJH_WS02_SCHDL_GROUP AS A WITH(NOLOCK)\nLEFT JOIN\n\tJH_WS02_SCHDL_CYCLE_LIST AS B WITH(NOLOCK) ON A.PK \= B.SG_PK\nWHERE \n\tA.PK \= '$$PARAM_PK$$' OR '$$PARAM_PK$$' \= ''\n
MW_TEST_SG_SELECT_MAIL_LIST=SELECT * FROM (\nSELECT B.CODE_ID,B.API_DESC  \nFROM \n\tJH_WS02_CODE_RANGE_ANALYSIS AS A WITH(NOLOCK) \nLEFT JOIN\n\tJH_WS02_CODE_LIST AS B WITH(NOLOCK) ON A.CODE_ID_PK \= B.PK\nWHERE A.INPUT_FIELD \= 'PARAM_GROUPS_TO'\n) AS C\nWHERE C.CODE_ID LIKE '%$$PARAM_KEY$$%'
MW_TEST_SG_UPDATE=UPDATE JH_WS02_SCHDL_GROUP\nSET\n\tWS_CODE \= '$$PARAM_WS_CODE$$',\n\tPROXY_WS \= (CASE '$$PARAM_PROXY_WS$$' WHEN '' THEN NULL ELSE '$$PARAM_PROXY_WS$$' END),\n\tSG_HELP \= '$$PARAM_SG_HELP$$',\n\tSG_START_YMD \= '$$PARAM_SG_START_YMD$$',\n\tSG_START_HMS \= '$$PARAM_SG_START_HMS$$',\n\tSG_ABORT_YMD \= (CASE '$$PARAM_SG_ABORT_YMD$$' WHEN '' THEN NULL ELSE '$$PARAM_SG_ABORT_YMD$$' END),\n\tSG_ABORT_HMS \= (CASE '$$PARAM_SG_ABORT_HMS$$' WHEN '' THEN NULL ELSE '$$PARAM_SG_ABORT_HMS$$' END),\n\tSG_ABORT \= '$$PARAM_SG_ABORT$$',\n\tSG_COUNTER \= '$$PARAM_SG_COUNTER$$',\n\tSG_COUNTER_TYPE \= '$$PARAM_SG_COUNTER_TYPE$$',\n\tSG_STATUS \= '$$PARAM_SG_STATUS$$',\n\tSG_STATUS_HELP \= '$$PARAM_SG_STATUS_HELP$$',\n\tSG_PROCESS \= NULL,\n\tSG_PROCESS_RECORD \= NULL,\n\tSG_PROCESS_HELP \= NULL,\n\tSG_CREATE_NUM \= '$$PARAM_SG_CREATE_NUM$$',\n\tSG_CREATE_UNIT \= '$$PARAM_SG_CREATE_UNIT$$',\n\tSG_SUCCEED_MAIL \= '$$PARAM_SG_SUCCEED_MAIL$$',\n\tSG_FAIL_MAIL \= '$$PARAM_SG_FAIL_MAIL$$',\n\tLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY_ID$$',\n\tLAST_MOD_USER_ID \= '$$PARAM_ADD_USER_ID$$',\n\tLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE \n\tPK \= '$$PARAM_PK$$'\n\n/* 週期 */\nUPDATE JH_WS02_SCHDL_CYCLE_LIST\nSET \n\tSC_VALUE_A \= (CASE '$$PARAM_SC_VALUE_A$$' WHEN '' THEN NULL ELSE '$$PARAM_SC_VALUE_A$$' END),\n\tSC_UNIT_A \= '$$PARAM_SC_UNIT_A$$',\n\tSC_VALUE_B \= (CASE '$$PARAM_SC_VALUE_B$$' WHEN '' THEN NULL ELSE '$$PARAM_SC_VALUE_B$$' END),\n\tSC_UNIT_B \= '$$PARAM_SC_UNIT_B$$',\n\tLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY_ID$$',\n\tLAST_MOD_USER_ID \= '$$PARAM_ADD_USER_ID$$',\n\tLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE \n\tSG_PK \= '$$PARAM_PK$$'\n
MW_TEST_SKDT_SEL_LIST=SELECT * FROM JH_WS02_SCHDL_SKIP_DT
MW_TEST_START_SCHDL_GROUP=UPDATE JH_WS02_SCHDL_GROUP WITH(ROWLOCK) \nSET \nSCHDL_BEFORE_STATUS \= SCHDL_STATUS,\nSCHDL_STATUS \= 'QUEUE',\nSCHDL_STATUS_HELP \= '排隊中',\nSCHDL_MAPPING_COUNTER \= 0,\nSCHDL_THIS_DT \= NULL,\nSCHDL_NEXT_DT \= NULL,\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_ADD_USER_COMPANY_ID$$',\nLAST_MOD_USER_ID \= '$$PARAM_ADD_USER_ID$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE \n\tPK \= '$$PARAM_SCHDL_GROUP_PK$$';\n\nDELETE JH_WS02_SCHDL_CALENDAR \nWHERE SCHDL_GROUP_PK \= '$$PARAM_SCHDL_GROUP_PK$$' AND \n(CASE WHEN ISDATE(SCHDL_THIS_DT) \= 1 THEN \n(CASE WHEN DATEDIFF(YEAR,GETDATE(),CAST(SCHDL_THIS_DT AS DATETIME)) <\= 10 THEN \n(CASE WHEN DATEDIFF(SECOND,GETDATE(),CAST(SCHDL_THIS_DT AS DATETIME)) > 0 THEN 'Y' ELSE 'N' END) ELSE 'N' END) ELSE 'N' END) \= 'Y'  \n
MW_TEST_STOP_SCHDL_GROUP=UPDATE JH_WS02_SCHDL_GROUP WITH(ROWLOCK) \nSET \nSCHDL_BEFORE_STATUS \= SCHDL_STATUS,\nSCHDL_STATUS \= 'STOP',\nSCHDL_STATUS_HELP \= '停止排程',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_ADD_USER_COMPANY_ID$$',\nLAST_MOD_USER_ID \= '$$PARAM_ADD_USER_ID$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE \n\tPK \= '$$PARAM_SCHDL_GROUP_PK$$';\n\nUPDATE JH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \nSCHDL_BEFORE_STATUS \= SCHDL_STATUS,\nSCHDL_STATUS \= 'STOP',\nSCHDL_STATUS_HELP \= '停止排程',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_ADD_USER_COMPANY_ID$$',\nLAST_MOD_USER_ID \= '$$PARAM_ADD_USER_ID$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE SCHDL_GROUP_PK \= '$$PARAM_SCHDL_GROUP_PK$$' AND SCHDL_GROUP_ID \= '$$PARAM_SCHDL_GROUP_ID$$';\n\nDELETE JH_WS02_SCHDL_CALENDAR WHERE SCHDL_GROUP_PK \= '$$PARAM_SCHDL_GROUP_PK$$' AND \n(CASE WHEN ISDATE(SCHDL_THIS_DT) \= 1 THEN \n(CASE WHEN DATEDIFF(YEAR,GETDATE(),CAST(SCHDL_THIS_DT AS DATETIME)) <\= 10 THEN \n(CASE WHEN DATEDIFF(SECOND,GETDATE(),CAST(SCHDL_THIS_DT AS DATETIME)) > 0 THEN 'Y' ELSE 'N' END) ELSE 'N' END) ELSE 'N' END) \= 'Y'
MW_TEST_TK_CREATE=INSERT INTO JH_WS02_SCHDL_TASK\n(SG_PK,TK_NAME,TK_TYPE,TK_HELP,TK_ABORT,TK_PAUSE\n,TK_SUCCEED_MAIL,TK_FAIL_MAIL\n,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT)\nVALUES\n('$$PARAM_SG_PK$$','$$PARAM_TK_NAME$$','$$PARAM_TK_TYPE$$','$$PARAM_TK_HELP$$','$$PARAM_TK_ABORT$$','$$PARAM_TK_PAUSE$$'\n,'$$PARAM_TK_SUCCEED_MAIL$$','$$PARAM_TK_FAIL_MAIL$$'\n,'$$PARAM_COMPANY_ID$$','$$PARAM_ADD_USER_ID$$','$$PARAM_COMPANY_ID$$',CONVERT(VARCHAR,GETDATE(),120))
MW_TEST_TK_DELETE=DELETE JH_WS02_SCHDL_TASK WHERE PK \= '$$PARAM_PK$$'
MW_TEST_TK_SEL_ONE_TASK=SELECT * FROM JH_WS02_SCHDL_TASK WITH(NOLOCK) WHERE PK \= '$$PARAM_PK$$'
MW_TEST_TK_SEL_TASK_LIST=SELECT * FROM JH_WS02_SCHDL_TASK WITH(NOLOCK) WHERE SG_PK \= '$$PARAM_SG_PK$$'
MW_TEST_TK_UPDATE=UPDATE JH_WS02_SCHDL_TASK\nSET \n\tSG_PK \= '$$PARAM_SG_PK$$',\n\tTK_NAME \= '$$PARAM_TK_NAME$$',\n\tTK_TYPE \= '$$PARAM_TK_TYPE$$',\n\tTK_HELP \= '$$PARAM_TK_HELP$$',\n\tTK_ABORT \= '$$PARAM_TK_ABORT$$',\n\tTK_PAUSE \= '$$PARAM_TK_PAUSE$$',\n\tTK_SUCCEED_MAIL \= '$$PARAM_TK_SUCCEED_MAIL$$',\n\tTK_FAIL_MAIL \= '$$PARAM_TK_FAIL_MAIL$$',\n\tLAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY_ID$$',\n\tLAST_MOD_USER_ID \= '$$PARAM_ADD_USER_ID$$',\n\tLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE\n\tPK \= '$$PARAM_PK$$'
MW_TEST_UPDATE_CLOSE_SCHDL_GROUP=UPDATE JH_WS02_SCHDL_CALENDAR WITH(ROWLOCK) \nSET \nSCHDL_BEFORE_STATUS \= SCHDL_STATUS,\nSCHDL_STATUS \= '$$PARAM_SCHDL_STATUS$$',\nSCHDL_STATUS_HELP \= '$$PARAM_SCHDL_STATUS_HELP$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_ADD_USER_COMPANY_ID$$',\nLAST_MOD_USER_ID \= '$$PARAM_ADD_USER_ID$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE \nSCHDL_GROUP_PK \= '$$PARAM_SCHDL_GROUP_PK$$' AND SCHDL_GROUP_ID \= '$$PARAM_SCHDL_GROUP_ID$$'
MW_TEST_UPDATE_SCHDL_GROUP=UPDATE JH_WS02_SCHDL_GROUP WITH(ROWLOCK) \nSET \nWS_CODE \= '$$PARAM_WS_CODE$$',\nPROXY_WS_CODE \= (CASE '$$PARAM_PROXY_WS_CODE$$' WHEN '' THEN NULL ELSE '$$PARAM_PROXY_WS_CODE$$' END),\nSCHDL_HELP \= '$$PARAM_SCHDL_HELP$$',\nSCHDL_START_DT_YMD \= '$$PARAM_SCHDL_START_DT_YMD$$',\nSCHDL_START_DT_HMS \= '$$PARAM_SCHDL_START_DT_HMS$$',\nSCHDL_CYCLE_VALUE \= '$$PARAM_SCHDL_CYCLE_VALUE$$',\nSCHDL_CYCLE_UNIT \= '$$PARAM_SCHDL_CYCLE_UNIT$$',\nSCHDL_ABORT_VALUE1 \= '$$PARAM_SCHDL_ABORT_VALUE1$$',\nSCHDL_ABORT_VALUE2 \= '$$PARAM_SCHDL_ABORT_VALUE2$$',\nSCHDL_ABORT_UNIT \= '$$PARAM_SCHDL_ABORT_UNIT$$',\nSCHDL_THIS_DT \= NULL,\nSCHDL_NEXT_DT \= NULL,\nSCHDL_ERROR_STOP \= '$$PARAM_SCHDL_ERROR_STOP$$',\nSCHDL_COUNTER_TYPE \= '$$PARAM_SCHDL_COUNTER_TYPE$$',\nSCHDL_MAPPING_COUNTER \= '$$PARAM_SCHDL_MAPPING_COUNTER$$',\nSCHDL_STATUS \= '$$PARAM_SCHDL_STATUS$$',\nSCHDL_BEFORE_STATUS \= NULL,\nSCHDL_STATUS_HELP \= '$$PARAM_SCHDL_STATUS_HELP$$',\nSCHDL_INSERT_NUM \= '$$PARAM_SCHDL_INSERT_NUM$$',\nSCHDL_INSERT_UNIT \= '$$PARAM_SCHDL_INSERT_UNIT$$',\nSCHDL_MAIL_SUCCEED \= '$$PARAM_SCHDL_MAIL_SUCCEED$$',\nSCHDL_MAIL_FAIL \= '$$PARAM_SCHDL_MAIL_FAIL$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_ADD_USER_COMPANY_ID$$',\nLAST_MOD_USER_ID \= '$$PARAM_ADD_USER_ID$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE \n\tPK \= '$$PARAM_PK$$';\nDELETE JH_WS02_SCHDL_CALENDAR WHERE SCHDL_GROUP_PK \= '$$PARAM_PK$$' AND SCHDL_STATUS \= 'QUEUE'\n
MW_TEST_UPDATE_SCHDL_TASK=UPDATE JH_WS02_SCHDL_TASK \nSET \nTASK_ERROR_STOP \= '$$PARAM_TASK_ERROR_STOP$$',\nTASK_PAUSE \= '$$PARAM_TASK_PAUSE$$',\nTASK_MAIL_SUCCEED \= '$$PARAM_TASK_MAIL_SUCCEED$$',\nTASK_MAIL_FAIL \= '$$PARAM_TASK_MAIL_FAIL$$'\nWHERE PK \= '$$PARAM_PK$$';\nDELETE JH_WS02_SCHDL_CALENDAR WHERE SCHDL_GROUP_PK \= '$$PARAM_SCHDL_GROUP_PK$$' AND SCHDL_STATUS \= 'QUEUE';
MW_TEST_UPDATE_SENDMAIL_CONTENT=UPDATE JH_SENDMAIL_CONTENT\nSET \nMAIL_TYPE \= '$$GROUP_MAIL_TYPE$$',\nSUB_TYPE \= '$$PARAM_SUB_TYPE$$',\nSUBJECT \= '$$PARAM_SUBJECT$$',\nCONTENT \= '$$PARAM_CONTENT$$',\nMAIN_RECEIVER \= (CASE '$$PARAM_MAIN_RECEIVER$$' WHEN '' THEN NULL ELSE '$$PARAM_MAIN_RECEIVER$$' END),\nCC_RECEIVER \= (CASE '$$PARAM_CC_RECEIVER$$' WHEN '' THEN NULL ELSE '$$PARAM_CC_RECEIVER$$' END),\nCF_RECEIVER \= (CASE '$$PARAM_CF_RECEIVER$$' WHEN '' THEN NULL ELSE '$$PARAM_CF_RECEIVER$$' END),\nLAST_MOD_USER_ID \= '$$PARAM_ADD_USER_ID$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_ADD_USER_COMPANY_ID$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE PK_SENDMAIL_CONTENT \= '$$PARAM_PK_SENDMAIL_CONTENT$$'
MW_TEST_UPDATE_SKIPDT=UPDATE JH_WS02_SCHDL_CALENDAR_SKIP_DT WITH(ROWLOCK)\nSET\nWS_CODE \= '$$PARAM_WS_CODE$$',\nSCHDL_GROUP_PK \= '$$PARAM_SCHDL_GROUP_PK$$',\nSCHDL_GROUP_NAME \= '$$PARAM_SCHDL_GROUP_NAME$$',\nPASS_START_DT_YMD \= '$$PARAM_PASS_START_DT_YMD$$',\nPASS_START_DT_HMS \= '$$PARAM_PASS_START_DT_HMS$$',\nSCHDL_CYCLE_VALUE \= '$$PARAM_SCHDL_CYCLE_VALUE$$',\nSCHDL_CYCLE_UNIT \= '$$PARAM_SCHDL_CYCLE_UNIT$$',\nPASS_END_DT_YMD \= '$$PARAM_PASS_END_DT_YMD$$',\nPASS_END_DT_HMS \= '$$PARAM_PASS_END_DT_HMS$$',\nRULE_USE \= '$$PARAM_RULE_USE$$',\nPASS_HELP \= '$$PARAM_PASS_HELP$$',\nLAST_MOD_USER_ID \= '$$PARAM_ADD_USER_COMPANY_ID$$',\nLAST_MOD_USER_COMPANY_ID \= '$$PARAM_ADD_USER_COMPANY_ID$$',\nLAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE \nPK \= '$$PARAM_PK$$'
MW_VA_SYNC_222_C1=IF '$$SN$$' \= '0'\n\tBEGIN\n\t\tINSERT INTO JH_WS02_VA_LIST \n\t\t(VA_PARENT_PK,VA_TEXT,VA_LEAF,VA_EXPANDABLE,VA_SET_POINT,VA_LV,VA_HELP) \n\t\tVALUES \n\t\t(NULL,'$$VA_TEXT$$','$$VA_LEAF$$','$$VA_EXPANDABLE$$','$$VA_SET_POINT$$','$$VA_LV$$','$$VA_HELP$$')\n\tEND\nELSE\n\tBEGIN\n\t\tINSERT INTO JH_WS02_VA_LIST \n\t\t(VA_PARENT_PK,VA_TEXT,VA_LEAF,VA_EXPANDABLE,VA_SET_POINT,VA_LV,VA_HELP) \n\t\tVALUES \n\t\t((SELECT PK FROM JH_WS02_VA_LIST WITH(NOLOCK) WHERE VA_SET_POINT \= '$$VA_SET_POINT$$' AND VA_DEP_TYPE \= '$$VA_DEP_TYPE$$'),'$$VA_TEXT$$','$$VA_LEAF$$','$$VA_EXPANDABLE$$','$$VA_SET_POINT$$','$$VA_LV$$','$$VA_HELP$$')\n\tEND\n
MW_VL_COPY_DIR=Funs/Virtual2Tissue/CopyDir/Entrance.kjb
MW_VL_COPY_DIR_GET_LIST=;WITH HH (PK,L_PARENT_PK,L_TEXT,L_LEAF,L_EXPANDABLE,L_RT_CODE,L_ORG_UU_CODE,L_ORG_CODE,L_ORG_AREA,L_ORG_TYPE,L_NODE_API,L_LV,L_PATH,L_PATH_VL,L_UE_PATH,L_UE_PATH_VL,L_URI_CODE,L_KEEP,L_HELP,LEVEL) AS\n(\n\tSELECT PK,L_PARENT_PK,L_TEXT,L_LEAF,L_EXPANDABLE,L_RT_CODE,L_ORG_UU_CODE,L_ORG_CODE,L_ORG_AREA,L_ORG_TYPE,L_NODE_API,L_LV,L_PATH,L_PATH_VL,L_UE_PATH,L_UE_PATH_VL,L_URI_CODE,L_KEEP,L_HELP,0 \n\tFROM JH_WS02_VL_LIST WITH(NOLOCK)\n\tWHERE PK \= '$$PARAM_PK$$'\n\n    UNION ALL\n \n\tSELECT B.PK,B.L_PARENT_PK,B.L_TEXT,B.L_LEAF,B.L_EXPANDABLE,B.L_RT_CODE,B.L_ORG_UU_CODE,B.L_ORG_CODE,B.L_ORG_AREA,B.L_ORG_TYPE,B.L_NODE_API,B.L_LV,B.L_PATH,B.L_PATH_VL,B.L_UE_PATH,B.L_UE_PATH_VL,B.L_URI_CODE,B.L_KEEP,B.L_HELP,LEVEL + 1 \n\tFROM JH_WS02_VL_LIST AS B WITH(NOLOCK)\n\tINNER JOIN HH ON HH.PK \= B.L_PARENT_PK\n)\nSELECT DISTINCT * FROM HH WHERE LEVEL <> 0 ORDER BY LEVEL ASC
MW_VL_COPY_DIR_GET_PATH_LIST=;WITH HH (PK ,L_PARENT_PK ,L_TEXT ,L_PATH ,LEVEL) AS\n(\n\tSELECT PK ,L_PARENT_PK ,L_TEXT ,L_PATH ,0 \n\tFROM JH_WS02_VL_LIST WITH(NOLOCK)\n\tWHERE PK \= '$$PK$$'\n\n    UNION ALL\n \n\tSELECT B.PK ,B.L_PARENT_PK ,B.L_TEXT ,B.L_PATH ,LEVEL + 1 \n\tFROM JH_WS02_VL_LIST AS B WITH(NOLOCK) \n\tINNER JOIN HH ON HH.L_PARENT_PK \= B.PK \n)\nSELECT DISTINCT * FROM HH ORDER BY LEVEL DESC\n
MW_VL_MKDIR=Funs/Virtual2Tissue/CreateDir/Entrance.kjb
MW_VL_MVDIR=Funs/Virtual2Tissue/MoveDir/Entrance.kjb
MW_VL_MVDIR_GET_LIST=;WITH HH (PK,L_PARENT_PK,L_TEXT,LEVEL) AS\n(\n\tSELECT PK,L_PARENT_PK,L_TEXT,0 \n\tFROM JH_WS02_VL_LIST WITH(NOLOCK)\n\tWHERE PK \= '$$PK$$'\n\n    UNION ALL\n \n\tSELECT B.PK,B.L_PARENT_PK,B.L_TEXT,LEVEL + 1 \n\tFROM JH_WS02_VL_LIST AS B WITH(NOLOCK)\n\tINNER JOIN HH ON HH.PK \= B.L_PARENT_PK\n)\nSELECT DISTINCT * FROM HH ORDER BY LEVEL ASC
MW_VL_MVDIR_GET_PATH_LIST=;WITH HH (PK ,L_PARENT_PK ,L_TEXT ,L_PATH ,LEVEL) AS\n(\n\tSELECT PK ,L_PARENT_PK ,L_TEXT ,L_PATH ,0 \n\tFROM JH_WS02_VL_LIST WITH(NOLOCK)\n\tWHERE PK \= '$$PK$$'\n\n    UNION ALL\n \n\tSELECT B.PK ,B.L_PARENT_PK ,B.L_TEXT ,B.L_PATH ,LEVEL + 1 \n\tFROM JH_WS02_VL_LIST AS B WITH(NOLOCK) \n\tINNER JOIN HH ON HH.L_PARENT_PK \= B.PK \n)\nSELECT DISTINCT * FROM HH ORDER BY LEVEL DESC\n
MW_VL_RENAME_DIR=Funs/Virtual2Tissue/RenameDir/Entrance.kjb
MW_VL_RMDIR=Funs/Virtual2Tissue/DeleteDir/Entrance.kjb
MW_VL_RMDIR_GET_LIST=;WITH HH (PK,L_PARENT_PK,L_TEXT,LEVEL) AS\n(\n\tSELECT PK,L_PARENT_PK,L_TEXT,0 \n\tFROM JH_WS02_VL_LIST WITH(NOLOCK)\n\tWHERE PK \= '$$PK$$'\n\n    UNION ALL\n \n\tSELECT B.PK,B.L_PARENT_PK,B.L_TEXT,LEVEL + 1 \n\tFROM JH_WS02_VL_LIST AS B WITH(NOLOCK)\n\tINNER JOIN HH ON HH.PK \= B.L_PARENT_PK\n)\nSELECT DISTINCT * FROM HH ORDER BY LEVEL ASC
MW_VL_SYNC=Funs/Virtual2Tissue/SyncDir/Entrance.kjb
MW_VL_SYNC_GET_LIST2=SELECT C.PROP_VALUE AS 'RTPATH',A.* \nFROM JH_WS02_VL_LIST AS A WITH(NOLOCK) \nLEFT JOIN PROP_MASTER AS B WITH(NOLOCK) ON A.L_URI_CODE \= B.PROP_ID \nLEFT JOIN PROP_DETAIL AS C WITH(NOLOCK) ON B.PK_PROP \= C.PK_PROP\nWHERE A.L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$' AND B.PROP_TYPE \= 'PATH' AND C.PROP_KEY \= 'PATH'\n
MW_VL_SYNC_GET_LIST3=;WITH HH (PK ,L_PARENT_PK ,L_TEXT ,L_KEEP ,LEVEL) AS\n(\n\tSELECT PK ,L_PARENT_PK ,L_TEXT ,L_KEEP ,0 \n\tFROM JH_WS02_VL_LIST WITH(NOLOCK)\n\tWHERE L_PARENT_PK IS NULL AND L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$'\n\n    UNION ALL\n \n\tSELECT B.PK ,B.L_PARENT_PK ,B.L_TEXT ,B.L_KEEP , LEVEL + 1 \n\tFROM JH_WS02_VL_LIST AS B WITH(NOLOCK)\n\tINNER JOIN HH ON HH.PK \= B.L_PARENT_PK\n)\nSELECT DISTINCT * FROM HH ORDER BY LEVEL ASC
MW_VL_SYNC_GET_LIST4=SELECT * FROM JH_WS02_VL_RT_LIST WITH(NOLOCK) WHERE L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$'
MW_VL_SYNC_GET_LIST=SELECT * FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$'
MW_VL_SYNC_GET_PATH_LIST2=;WITH HH (PK ,FM_PARENT_PK ,FM_TEXT ,FM_LEAF ,FM_EXPANDABLE ,FM_DEP_CODE ,LEVEL) AS\n(\n\tSELECT PK ,FM_PARENT_PK ,FM_TEXT ,FM_LEAF ,FM_EXPANDABLE ,FM_DEP_CODE ,0 \n\tFROM JH_WS02_FM_DEP_LIST WITH(NOLOCK)\n\tWHERE FM_PARENT_PK IS NULL AND FM_DEP_TYPE \= '$$PARAM_ORG_TYPE$$'\n\n    UNION ALL\n \n\tSELECT B.PK ,B.FM_PARENT_PK ,B.FM_TEXT ,B.FM_LEAF ,B.FM_EXPANDABLE ,B.FM_DEP_CODE , LEVEL + 1 \n\tFROM JH_WS02_FM_DEP_LIST AS B WITH(NOLOCK)\n\tINNER JOIN HH ON HH.PK \= B.FM_PARENT_PK\n)\nSELECT DISTINCT \n(SELECT FM_DEP_CODE FROM JH_WS02_FM_DEP_LIST WITH(NOLOCK) WHERE PK \= HH.FM_PARENT_PK) AS 'ORG_UU_CODE',\n* \nFROM HH ORDER BY LEVEL ASC
MW_VL_SYNC_GET_PATH_LIST=;WITH HH (PK ,L_PARENT_PK ,L_TEXT ,LEVEL) AS\n(\n\tSELECT PK ,L_PARENT_PK ,L_TEXT ,0 \n\tFROM JH_WS02_VL_LIST WITH(NOLOCK)\n\tWHERE PK \= '$$PK$$'\n\n    UNION ALL\n \n\tSELECT B.PK ,B.L_PARENT_PK ,B.L_TEXT , LEVEL + 1 \n\tFROM JH_WS02_VL_LIST AS B WITH(NOLOCK) \n\tINNER JOIN HH ON HH.L_PARENT_PK \= B.PK \n)\nSELECT DISTINCT * FROM HH ORDER BY LEVEL DESC
MW_VL_SYNC_GET_VLDEP_LIST2=DECLARE @PARAM_ORG_TYPE VARCHAR(100)\nSET @PARAM_ORG_TYPE \= '$$PARAM_ORG_TYPE$$'\n\nSELECT\n\tA.PK\n\t,B.PK AS 'L_PARENT_PK'\n\t,CONCAT('附屬',B.L_TEXT,'目錄') AS 'L_HELP' \nFROM \n\tJH_WS02_VL_LIST AS A WITH(NOLOCK) \nLEFT JOIN\n\tJH_WS02_VL_LIST AS B WITH(NOLOCK) ON A.L_ORG_UPPER_CODE \= B.L_ORG_CODE AND A.L_ORG_TYPE \= B.L_ORG_TYPE\nWHERE \n\tA.L_ORG_TYPE \= @PARAM_ORG_TYPE AND A.L_NODE_CODE IS NULL AND A.L_ORG_CODE IS NOT NULL
MW_VL_SYNC_GET_VLDEP_LIST=DECLARE @PARAM_ORG_ROOT VARCHAR(100),@PARAM_ORG_TYPE VARCHAR(100),@LV INT\nSET @PARAM_ORG_ROOT \= '$$PARAM_ORG_ROOT$$'\nSET @PARAM_ORG_TYPE \= '$$PARAM_ORG_TYPE$$'\nSET @LV \= (SELECT L_LV FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_NODE_CODE \= @PARAM_ORG_ROOT AND L_ORG_TYPE \= @PARAM_ORG_TYPE)\n/*\nSET @PARAM_ORG_ROOT \= 'ROOTORG'\nSET @PARAM_ORG_TYPE \= 'JHRP'\n*/\nSELECT\n\tA.FM_TEXT AS 'L_TEXT'\n\t,(CASE A.FM_LEAF WHEN 'true' THEN 'Y' ELSE 'N' END) AS 'L_LEAF'\n\t,(CASE A.FM_EXPANDABLE WHEN 'true' THEN 'Y' ELSE 'N' END) AS 'L_EXPANDABLE'\n\t,ISNULL(B.FM_DEP_CODE,@PARAM_ORG_ROOT) AS 'L_ORG_UPPER_CODE'\n\t,A.FM_DEP_CODE AS 'L_ORG_CODE'\n\t,@PARAM_ORG_TYPE AS 'L_ORG_TYPE'\n\t,@LV + 1 + A.FM_LV AS 'L_LV'\n\t,'N' AS 'L_KEEP'\nFROM \n\tJH_WS02_FM_DEP_LIST AS A WITH(NOLOCK) \nLEFT JOIN \n\tJH_WS02_FM_DEP_LIST AS B WITH(NOLOCK) ON A.FM_PARENT_PK \= B.PK\nWHERE \n\tA.FM_DEP_TYPE \= @PARAM_ORG_TYPE \nORDER BY \n\tA.FM_LV ASC
MW_VL_SYNC_GETOBJ10=DECLARE \n\t@ORG_TYPE VARCHAR(100),@ORG_CODE VARCHAR(100),@ORG_ROOT_TEXT VARCHAR(100),@ORG_ROOT_LV INT\nSET @ORG_TYPE \= '$$PARAM_ORG_TYPE$$'\nSET @ORG_CODE \= '$$PARAM_ORG_ROOT$$'\nSET @ORG_ROOT_TEXT \= (SELECT L_TEXT FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_NODE_CODE \= @ORG_CODE AND L_ORG_TYPE \= @ORG_TYPE)\nSET @ORG_ROOT_LV \= (SELECT L_LV FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_NODE_CODE \= @ORG_CODE AND L_ORG_TYPE \= @ORG_TYPE)\n\n;WITH ORG (PK, FM_PARENT_PK, FM_TEXT, FM_LEAF, FM_EXPANDABLE, FM_DEP_TYPE, FM_DEP_CODE, FM_HELP, LEVEL) AS\n(\n\tSELECT PK, FM_PARENT_PK, FM_TEXT, (CASE FM_LEAF WHEN 'true' THEN 'Y' ELSE 'N' END) AS 'FM_LEAF', (CASE FM_EXPANDABLE WHEN 'true' THEN 'Y' ELSE 'N' END) AS 'FM_EXPANDABLE'\n\t, FM_DEP_TYPE, FM_DEP_CODE, FM_HELP, (CAST(@ORG_ROOT_LV AS INT) + 1) \n\tFROM JH_WS02_FM_DEP_LIST WITH(NOLOCK)\n\tWHERE FM_PARENT_PK IS NULL AND FM_DEP_TYPE \= @ORG_TYPE\n\n    UNION ALL\n \n\tSELECT B.PK,B.FM_PARENT_PK, B.FM_TEXT, (CASE B.FM_LEAF WHEN 'true' THEN 'Y' ELSE 'N' END) AS 'FM_LEAF', (CASE B.FM_EXPANDABLE WHEN 'true' THEN 'Y' ELSE 'N' END) AS 'FM_EXPANDABLE'\n\t, B.FM_DEP_TYPE, B.FM_DEP_CODE, B.FM_HELP, LEVEL + 1\n\tFROM JH_WS02_FM_DEP_LIST AS B WITH(NOLOCK)\n\tINNER JOIN ORG ON ORG.PK \= B.FM_PARENT_PK \n)\nSELECT /* DISTINCT */\n(CASE WHEN A.PK IS NOT NULL AND B.PK IS NULL THEN 'C' ELSE \n(CASE WHEN A.PK IS NULL AND B.PK IS NOT NULL THEN 'D' ELSE \n(CASE WHEN A.FM_TEXT \= B.L_TEXT AND A.FM_LEAF \= B.L_LEAF AND A.FM_EXPANDABLE \= B.L_EXPANDABLE AND A.LEVEL \= B.L_LV AND CONCAT('附屬',ISNULL(C.FM_TEXT,@ORG_ROOT_TEXT),'目錄') \= B.L_HELP THEN 'S' ELSE 'M' END) END) END) AS '處理類型'\n,(CASE ISNULL(A.FM_PARENT_PK,'') WHEN '' THEN @ORG_CODE ELSE C.FM_DEP_CODE END) AS '父代碼'\n,B.PK AS '清單PK'\n,A.FM_TEXT AS 'L_TEXT'\n,A.FM_LEAF AS 'L_LEAF'\n,(CASE (SELECT COUNT(*) FROM JH_WS02_FM_DEP_LIST WITH(NOLOCK) WHERE FM_PARENT_PK \= A.PK) WHEN 0 THEN 'N' ELSE 'Y' END) AS 'L_EXPANDABLE'\n,A.FM_DEP_CODE AS 'L_ORG_CODE'\n,@ORG_TYPE AS 'L_ORG_TYPE'\n,A.LEVEL AS 'L_LV'\n,CONCAT('附屬',ISNULL(C.FM_TEXT,@ORG_ROOT_TEXT),'目錄') AS 'L_HELP'\n,CONCAT(A.FM_TEXT,'\=',B.L_TEXT,', ',A.FM_LEAF,'\=',B.L_LEAF,', ',A.FM_EXPANDABLE,'\=',B.L_EXPANDABLE,', ',A.LEVEL,'\=',B.L_LV,', ',CONCAT('附屬',ISNULL(C.FM_TEXT,@ORG_ROOT_TEXT),'目錄'),'\=',B.L_HELP) AS '4+1'\nFROM ORG AS A\nFULL OUTER JOIN (SELECT * FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_ORG_TYPE \= @ORG_TYPE AND L_NODE_CODE IS NULL) AS B ON A.FM_DEP_CODE \= B.L_ORG_CODE\nLEFT JOIN JH_WS02_FM_DEP_LIST AS C WITH(NOLOCK) ON A.FM_PARENT_PK \= C.PK\nORDER BY A.LEVEL ASC\n\n
MW_VL_SYNC_GETOBJ11=INSERT INTO JH_WS02_VL_LIST\n(L_PARENT_PK\n,L_TEXT, L_LEAF, L_EXPANDABLE, L_ORG_CODE, L_ORG_TYPE, L_LV, L_HELP\n,COMPANY_ID, ADD_USER_COMPANY_ID, ADD_USER_ID, ADD_DT)\nVALUES\n((SELECT PK FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_ORG_CODE \= '$$BA_L_ORG_CODE$$' AND L_ORG_TYPE \= '$$L_ORG_TYPE$$')\n,'$$L_TEXT$$', '$$L_LEAF$$', '$$L_EXPANDABLE$$', '$$L_ORG_CODE$$', '$$L_ORG_TYPE$$', '$$L_LV$$', '$$L_HELP$$'\n,'$$COMPANY_ID$$', '$$COMPANY_ID$$', '$$PARAM_SOURCE_COMING$$', CONVERT(VARCHAR,GETDATE(),120))
MW_VL_SYNC_GETOBJ12=UPDATE \n\tJH_WS02_VL_LIST WITH(ROWLOCK) \nSET \n\tL_PARENT_PK \= (SELECT PK FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_ORG_CODE \= '$$BA_L_ORG_CODE$$' AND L_ORG_TYPE \= '$$L_ORG_TYPE$$')\n\t,L_TEXT \= '$$L_TEXT$$',L_LEAF \= '$$L_LEAF$$',L_EXPANDABLE \= '$$L_EXPANDABLE$$',L_LV \= '$$L_LV$$',L_HELP \= '$$L_HELP$$'\n\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$',LAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',LAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\nWHERE \n\tL_ORG_CODE \= '$$L_ORG_CODE$$' AND L_ORG_TYPE \= '$$L_ORG_TYPE$$'
MW_VL_SYNC_GETOBJ13=DELETE FROM JH_WS02_FM_DEP_LIST WHERE PK \= '$$PK$$'
MW_VL_SYNC_GETOBJ14=SELECT \n\t* \nFROM \n\tJH_WS02_VL_LIST WITH(NOLOCK) \nWHERE \n\tL_PARENT_PK IS NULL \n\tAND L_NODE_CODE IS NOT NULL \n\tAND L_LV IS NULL \n\tAND L_PATH IS NOT NULL\n\tAND L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$'
MW_VL_SYNC_GETOBJ21=SELECT * FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$' ORDER BY L_LV DESC
MW_VL_SYNC_GETOBJ22=;WITH ORG (PK, L_PARENT_PK, L_TEXT, L_LEAF,L_EXPANDABLE,L_NODE_CODE,L_ORG_CODE,L_ORG_TYPE,L_LV,LEVEL) AS\n(\n\tSELECT PK, L_PARENT_PK, L_TEXT, L_LEAF,L_EXPANDABLE,L_NODE_CODE,L_ORG_CODE,L_ORG_TYPE,L_LV, 0 \n\tFROM JH_WS02_VL_LIST WITH(NOLOCK)\n\tWHERE PK \= '$$PK$$'\n\n    UNION ALL\n \n\tSELECT B.PK,B.L_PARENT_PK, B.L_TEXT, B.L_LEAF,B.L_EXPANDABLE,B.L_NODE_CODE,B.L_ORG_CODE,B.L_ORG_TYPE,B.L_LV,LEVEL + 1\n\tFROM JH_WS02_VL_LIST AS B WITH(NOLOCK)\n\tINNER JOIN ORG ON ORG.L_PARENT_PK \= B.PK\n)\nSELECT * FROM ORG ORDER BY ORG.L_LV ASC
MW_VL_VIEW=Funs/Virtual2Tissue/ViewDir/Entrance.kjb
MW_VL_VIEW_GET_AREA=SELECT DISTINCT L_ORG_AREA FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$' AND L_ORG_AREA IS NOT NULL
MW_VL_VIEW_GET_CTL_LIST=SELECT * FROM JH_WS02_VL_CTLBTN_LIST WITH(NOLOCK) WHERE L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$'
MW_VL_VIEW_GET_L_LIST=SELECT * FROM JH_WS02_VL_CTLBTN_LIST WITH(NOLOCK) WHERE L_ORG_TYPE \= '${PARAM_ORG_TYPE}'
MW_VL_VIEW_GET_LIST2=SELECT * FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_PARENT_PK \= '$$L_PARENT_PK$$' OR PK \= '$$L_PARENT_PK$$'
MW_VL_VIEW_GET_LIST=SELECT * FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$' AND L_ORG_AREA IS NULL
MW_VL_VIEW_GET_SUB_LIST1=;WITH HH (PK ,L_PARENT_PK ,L_TEXT ,L_LEAF ,L_EXPANDABLE ,L_ORG_CODE ,L_ORG_TYPE ,L_ORG_AREA ,L_NODE_API ,L_URI_CODE ,L_PATH ,L_PATH_VL ,L_HELP ,LEVEL) AS\n(\n\tSELECT PK ,L_PARENT_PK ,L_TEXT ,L_LEAF ,L_EXPANDABLE ,L_ORG_CODE ,L_ORG_TYPE ,L_ORG_AREA ,L_NODE_API ,L_URI_CODE ,L_PATH ,L_PATH_VL ,L_HELP ,0 \n\tFROM JH_WS02_VL_LIST WITH(NOLOCK)\n\tWHERE L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$' AND L_ORG_AREA \= '$$L_ORG_AREA$$' AND (L_ORG_CODE \= '$$PARAM_DIVISION$$' OR L_ORG_CODE \= '$$PARAM_SOURCE_GROUPS_CODE$$')\n\n    UNION ALL\n \n\tSELECT B.PK ,B.L_PARENT_PK ,B.L_TEXT ,B.L_LEAF ,B.L_EXPANDABLE ,B.L_ORG_CODE ,B.L_ORG_TYPE ,B.L_ORG_AREA ,B.L_NODE_API ,B.L_URI_CODE ,B.L_PATH ,B.L_PATH_VL ,B.L_HELP , LEVEL + 1 \n\tFROM JH_WS02_VL_LIST AS B WITH(NOLOCK)\n\tINNER JOIN HH ON HH.PK \= B.L_PARENT_PK\n)\nSELECT DISTINCT * FROM HH ORDER BY LEVEL ASC
MW_VL_VIEW_GET_SUB_LIST2=;WITH HH (PK ,L_PARENT_PK ,L_TEXT ,L_LEAF ,L_EXPANDABLE ,L_ORG_CODE ,L_ORG_TYPE ,L_ORG_AREA ,L_NODE_API ,L_URI_CODE ,L_PATH ,L_PATH_VL ,L_HELP ,LEVEL) AS\n(\n\tSELECT PK ,L_PARENT_PK ,L_TEXT ,L_LEAF ,L_EXPANDABLE ,L_ORG_CODE ,L_ORG_TYPE ,L_ORG_AREA ,L_NODE_API ,L_URI_CODE ,L_PATH ,L_PATH_VL ,L_HELP ,0 \n\tFROM JH_WS02_VL_LIST WITH(NOLOCK)\n\tWHERE L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$' AND L_ORG_AREA \= '$$L_ORG_AREA$$' AND L_TEXT \= '$$PARAM_SOURCE_COMING$$'\n\n    UNION ALL\n \n\tSELECT B.PK ,B.L_PARENT_PK ,B.L_TEXT ,B.L_LEAF ,B.L_EXPANDABLE ,B.L_ORG_CODE ,B.L_ORG_TYPE ,B.L_ORG_AREA ,B.L_NODE_API ,B.L_URI_CODE ,B.L_PATH ,B.L_PATH_VL ,B.L_HELP , LEVEL + 1 \n\tFROM JH_WS02_VL_LIST AS B WITH(NOLOCK)\n\tINNER JOIN HH ON HH.PK \= B.L_PARENT_PK\n)\nSELECT DISTINCT * FROM HH ORDER BY LEVEL ASC
MW_VL_VIEW_GET_VL_LIST1=SELECT * FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$' AND L_ORG_AREA IS NULL
MW_VL_VIEW_GET_VL_LIST2=;WITH HH (PK,L_PARENT_PK,L_TEXT,L_LEAF,L_EXPANDABLE,L_NODE_CODE,L_ORG_UPPER_CODE,L_ORG_CODE,L_ORG_AREA,L_ORG_TYPE,L_LV,L_PATH,L_PATH4VL,L_PATH4U,L_PATH4UVL,L_KEEP,L_HELP,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,LEVEL) AS\n(\n\tSELECT PK,L_PARENT_PK,L_TEXT,L_LEAF,L_EXPANDABLE,L_NODE_CODE,L_ORG_UPPER_CODE,L_ORG_CODE,L_ORG_AREA,L_ORG_TYPE,L_LV,L_PATH,L_PATH4VL,L_PATH4U,L_PATH4UVL,L_KEEP,L_HELP,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,0 \n\tFROM JH_WS02_VL_LIST WITH(NOLOCK)\n\tWHERE L_TEXT \= '$$PARAM_SOURCE_COMING$$' AND L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$' AND L_ORG_AREA \= '$$L_ORG_AREA$$'\n    UNION ALL\n\tSELECT B.PK,B.L_PARENT_PK,B.L_TEXT,B.L_LEAF,B.L_EXPANDABLE,B.L_NODE_CODE,B.L_ORG_UPPER_CODE,B.L_ORG_CODE,B.L_ORG_AREA,B.L_ORG_TYPE,B.L_LV,B.L_PATH,B.L_PATH4VL,B.L_PATH4U,B.L_PATH4UVL,B.L_KEEP,B.L_HELP,B.COMPANY_ID,B.ADD_USER_ID,B.ADD_USER_COMPANY_ID,B.ADD_DT,B.LAST_MOD_USER_ID,B.LAST_MOD_USER_COMPANY_ID,B.LAST_MOD_DT,LEVEL + 1\n\tFROM JH_WS02_VL_LIST AS B WITH(NOLOCK)\n\tINNER JOIN HH ON HH.PK \= B.L_PARENT_PK \n)\nSELECT DISTINCT * FROM HH ORDER BY LEVEL ASC
MW_VL_VIEW_GET_VL_LIST3=;WITH HH (PK,L_PARENT_PK,L_TEXT,L_LEAF,L_EXPANDABLE,L_NODE_CODE,L_ORG_UPPER_CODE,L_ORG_CODE,L_ORG_AREA,L_ORG_TYPE,L_LV,L_PATH,L_PATH4VL,L_PATH4U,L_PATH4UVL,L_KEEP,L_HELP,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,LEVEL) AS\n(\n\tSELECT PK,L_PARENT_PK,L_TEXT,L_LEAF,L_EXPANDABLE,L_NODE_CODE,L_ORG_UPPER_CODE,L_ORG_CODE,L_ORG_AREA,L_ORG_TYPE,L_LV,L_PATH,L_PATH4VL,L_PATH4U,L_PATH4UVL,L_KEEP,L_HELP,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,0 \n\tFROM JH_WS02_VL_LIST WITH(NOLOCK)\n\tWHERE L_ORG_CODE \= '$$PARAM_SOURCE_GROUPS_CODE$$' AND L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$' AND L_ORG_AREA \= '$$L_ORG_AREA$$'\n    UNION ALL\n\tSELECT B.PK,B.L_PARENT_PK,B.L_TEXT,B.L_LEAF,B.L_EXPANDABLE,B.L_NODE_CODE,B.L_ORG_UPPER_CODE,B.L_ORG_CODE,B.L_ORG_AREA,B.L_ORG_TYPE,B.L_LV,B.L_PATH,B.L_PATH4VL,B.L_PATH4U,B.L_PATH4UVL,B.L_KEEP,B.L_HELP,B.COMPANY_ID,B.ADD_USER_ID,B.ADD_USER_COMPANY_ID,B.ADD_DT,B.LAST_MOD_USER_ID,B.LAST_MOD_USER_COMPANY_ID,B.LAST_MOD_DT,LEVEL + 1\n\tFROM JH_WS02_VL_LIST AS B WITH(NOLOCK)\n\tINNER JOIN HH ON HH.PK \= B.L_PARENT_PK \n)\nSELECT DISTINCT * FROM HH ORDER BY LEVEL ASC
MW_VL_VIEW_GET_VL_LIST4=;WITH HH (PK,L_PARENT_PK,L_TEXT,L_LEAF,L_EXPANDABLE,L_NODE_CODE,L_ORG_UPPER_CODE,L_ORG_CODE,L_ORG_AREA,L_ORG_TYPE,L_LV,L_PATH,L_PATH4VL,L_PATH4U,L_PATH4UVL,L_KEEP,L_HELP,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,LEVEL) AS\n(\n\tSELECT PK,L_PARENT_PK,L_TEXT,L_LEAF,L_EXPANDABLE,L_NODE_CODE,L_ORG_UPPER_CODE,L_ORG_CODE,L_ORG_AREA,L_ORG_TYPE,L_LV,L_PATH,L_PATH4VL,L_PATH4U,L_PATH4UVL,L_KEEP,L_HELP,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,0 \n\tFROM JH_WS02_VL_LIST WITH(NOLOCK)\n\tWHERE L_ORG_CODE \= '$$PARAM_DIVISION$$' AND L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$' AND L_ORG_AREA \= '$$L_ORG_AREA$$'\n    UNION ALL\n\tSELECT B.PK,B.L_PARENT_PK,B.L_TEXT,B.L_LEAF,B.L_EXPANDABLE,B.L_NODE_CODE,B.L_ORG_UPPER_CODE,B.L_ORG_CODE,B.L_ORG_AREA,B.L_ORG_TYPE,B.L_LV,B.L_PATH,B.L_PATH4VL,B.L_PATH4U,B.L_PATH4UVL,B.L_KEEP,B.L_HELP,B.COMPANY_ID,B.ADD_USER_ID,B.ADD_USER_COMPANY_ID,B.ADD_DT,B.LAST_MOD_USER_ID,B.LAST_MOD_USER_COMPANY_ID,B.LAST_MOD_DT,LEVEL + 1\n\tFROM JH_WS02_VL_LIST AS B WITH(NOLOCK)\n\tINNER JOIN HH ON HH.PK \= B.L_PARENT_PK \n)\nSELECT DISTINCT * FROM HH ORDER BY LEVEL ASC
MW_VL_VIEW_GET_VL_LIST5=SELECT * FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$' AND L_PATH LIKE '$$PARAM_SEARCH_PATH$$%'
MW_ZIP=Funs/Zip4J/Entrance.kjb
MW_ZIP_GET_LIST=SELECT (SELECT PK,L_TEXT FROM JH_WS02_VL_LIST WITH(NOLOCK) WHERE L_ORG_TYPE \= '$$PARAM_ORG_TYPE$$' FOR JSON AUTO) AS 'JSON'
ORA_TEST_API=select *  from  sam.test1
OVER_3_MONTH_LOGIN=/*\n\tLAST UPDATED \: 2021/07/07\n\tCONTENT\t\t \: \n\t\t\t\t\t1. 將 3 個月調整為 90 天方式\n\t\t\t\t\t2. 若最近一次登入時間與帳號建立時間皆 >\= 90 天，則需列出\n\t\t\t\t\t3. API 需定義 OVER_DAYS 參數。\n\t\t\t\t\t4. 取消 LOGIN_STATUS \= 0 條件。\n*/\n\nSELECT DEPID AS '科別代碼', \n       DEPARTNAME AS '科別名稱', \n       USERID AS '員編', \n       USERNAME AS '姓名', \n       (CASE ISLOCK\n            WHEN 'N'\n            THEN NULL\n            ELSE '禁用'\n        END) AS '是否禁用', \n       CONVERT(VARCHAR, LAST_LOGIN_DT, 120) AS '最近一次登入時間'\nFROM\n(\n    SELECT D.DEPID, \n           D.DEPARTNAME, \n           C.USERID, \n           C.USERNAME, \n           C.ISLOCK, \n           A.LAST_LOGIN_DT,\n\t\t   C.ADD_DT\n    FROM\n    (\n        SELECT USER_ID, \n               CONVERT(VARCHAR(20), MAX(LOGIN_DT), 120) AS LAST_LOGIN_DT,\n\t\t\t   NULL AS ADD_DT\n        FROM LOGIN_LOG\n        GROUP BY USER_ID\n    ) A\n    INNER JOIN LOGIN_LOG B ON B.USER_ID \= A.USER_ID\n                              AND B.LOGIN_DT \= A.LAST_LOGIN_DT\n    INNER JOIN USERS C ON A.USER_ID \= C.USERID \n    INNER JOIN DEPARTMENT D ON C.DEPID \= D.DEPID\n    UNION ALL\n    SELECT C.DEPID, \n           C.DEPARTNAME, \n           A.USERID, \n           A.USERNAME, \n           A.ISLOCK, \n           B.LOGIN_DT AS LAST_LOGIN_DT,\n\t\t   A.ADD_DT\n    FROM USERS A\n         INNER JOIN DEPARTMENT C ON A.DEPID \= C.DEPID\n         LEFT OUTER JOIN LOGIN_LOG B ON A.USERID \= B.USER_ID\n    WHERE LOGIN_DT IS NULL\n) A\nWHERE USERID NOT IN ('ROOT')\nAND $$OVER_DAYS$$ <\= (CASE WHEN LAST_LOGIN_DT IS NULL THEN DATEDIFF(DAY, ADD_DT, GETDATE()) ELSE DATEDIFF(DAY, LAST_LOGIN_DT, GETDATE()) END)\nORDER BY USERID ASC;
PackageTheCode_v1=Pack/PackageTheCode_v1.kjb
prop_Fn01B002_1=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY CODE_IDX ASC\n\t\t\t) AS RowNum\n\t\t,CODE_IDX\n\t\t,CODE_ID\n\t\t,CODE_NAME\n\t\t,CODE_DESC\n\t\t,CODE_LOCATE\n\t\t,ADD_USER_ID\n\t\t,ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_DT\n\tFROM JH_WS02_4GE_LIST\n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tCODE_ID LIKE ('%$$CODE_ID$$%')\n\t\t\tOR '$$CODE_ID$$' \= 'ALL'\n\t\t\t)\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY CODE_IDX ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,CODE_IDX\n\t\t\t\t,CODE_ID\n\t\t\t\t,CODE_NAME\n\t\t\t\t,CODE_DESC\n\t\t\t\t,CODE_LOCATE\n\t\t\t\t,ADD_USER_ID\n\t\t\t\t,ADD_DT\n\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t,LAST_MOD_DT\n\t\t\tFROM JH_WS02_4GE_LIST\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND (\n\t\t\t\t\tCODE_ID LIKE ('%$$CODE_ID$$%')\n\t\t\t\t\tOR '$$CODE_ID$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum < \= '$$limit$$'\n
prop_Fn01B003_1=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY CW_IDX ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT CW_IDX\n\t\t\t,WEB_SERVICE_CODE\n\t\t\t,WEB_SERVICE_CODE AS API_SERVER_CODE\n\t\t\t,WEB_SERVICE_NAME\n\t\t\t,WEB_SERVICE_NAME AS API_SERVER_NAME\n\t\t\t,WEB_SERVICE_IP\n\t\t\t,IS_DOING\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,DEL_USER_ID\n\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t,DEL_DT\n\t\t\t,COMPANY_ID\n\t\t\t,DATA_STATUS\n\t\t\t,WEB_SERVICE_DOMAIN\n\t\t\t,WEB_SERVICE_SUB_DOMAIN\n\t\tFROM JH_WS02_WEBSERVICE_INFO\n\t\t) AS A\n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tAPI_SERVER_CODE LIKE ('%$$API_SERVER_CODE$$%')\n\t\t\tOR 'ALL' \= '$$API_SERVER_CODE$$'\n\t\t\t)\n\t\tAND (\n\t\t\tAPI_SERVER_NAME LIKE ('%$$API_SERVER_NAME$$%')\n\t\t\tOR 'ALL' \= '$$API_SERVER_NAME$$'\n\t\t\t)\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY CW_IDX ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,*\n\t\t\tFROM (\n\t\t\t\tSELECT CW_IDX\n\t\t\t\t\t,WEB_SERVICE_CODE\n\t\t\t\t\t,WEB_SERVICE_CODE AS API_SERVER_CODE\n\t\t\t\t\t,WEB_SERVICE_NAME\n\t\t\t\t\t,WEB_SERVICE_NAME AS API_SERVER_NAME\n\t\t\t\t\t,WEB_SERVICE_IP\n\t\t\t\t\t,IS_DOING\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t,DEL_DT\n\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t,WEB_SERVICE_DOMAIN\n\t\t\t\t\t,WEB_SERVICE_SUB_DOMAIN\n\t\t\t\tFROM JH_WS02_WEBSERVICE_INFO\n\t\t\t\t) AS A\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND (\n\t\t\t\t\tAPI_SERVER_CODE LIKE ('%$$API_SERVER_CODE$$%')\n\t\t\t\t\tOR 'ALL' \= '$$API_SERVER_CODE$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tAPI_SERVER_NAME LIKE ('%$$API_SERVER_NAME$$%')\n\t\t\t\t\tOR 'ALL' \= '$$API_SERVER_NAME$$'\n\t\t\t\t\t)\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum < \= '$$limit$$'\n
prop_Fn02A002_3=SELECT * FROM (SELECT ROW_NUMBER() OVER ( ORDER BY RN ASC) AS RowNum, CODE_VALUE, CODE_VALUE_DESC, totalProperty FROM ( SELECT ROW_NUMBER() OVER ( ORDER BY CODE_VALUE ASC) AS RN, CODE_VALUE, CODE_VALUE + '_' + CODE_VALUE_DESC AS 'CODE_VALUE_DESC' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE\='RGNO' ) AS A, (SELECT COUNT(*) AS totalProperty FROM (SELECT ROW_NUMBER() OVER ( ORDER BY CODE_VALUE ASC) AS RN, CODE_VALUE, CODE_VALUE + '_' + CODE_VALUE_DESC AS 'CODE_VALUE_DESC' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE\='RGNO' ) AS B) AS B ) AS new1 WHERE 1\=1 AND RowNum > '$$cmp01' AND RowNum <\='$$cmp02'
prop_Fn06A004_1=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY FUNC_ID ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM FUNCTIONS\n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tFUNC_ID LIKE '%$$FUNC_ID$$%'\n\t\t\tOR 'ALL' \= '$$FUNC_ID$$'\n\t\t\t)\n\t\tAND (\n\t\t\tFUNC_NAME LIKE '%$$FUNC_NAME$$%'\n\t\t\tOR 'ALL' \= '$$FUNC_NAME$$'\n\t\t\t)\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY FUNC_ID ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,*\n\t\t\tFROM FUNCTIONS\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND (\n\t\t\t\t\tFUNC_ID LIKE '%$$FUNC_ID$$%'\n\t\t\t\t\tOR 'ALL' \= '$$FUNC_ID$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tFUNC_NAME LIKE '%$$FUNC_NAME$$%'\n\t\t\t\t\tOR 'ALL' \= '$$FUNC_NAME$$'\n\t\t\t\t\t)\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum < \= '$$limit$$'\n
prop_Fn06A004_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tIF '$$PARENT_ID$$' \= ''\n\tBEGIN\n\t\tINSERT INTO FUNCTIONS (\n\t\t\tDATA_STATUS\n\t\t\t,COMPANY_ID\n\t\t\t,DIS_FUNC_ID\n\t\t\t,PARENT_ID\n\t\t\t,FUNC_NAME\n\t\t\t,DESC_FUNC_NAME\n\t\t\t,SEQ_ID\n\t\t\t,IS_LEAF\n\t\t\t,IS_DISABLED\n\t\t\t,FUNC_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$DATA_STATUS$$'\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,'$$DIS_FUNC_ID$$'\n\t\t\t,NULL\n\t\t\t,'$$FUNC_NAME$$'\n\t\t\t,'$$DESC_FUNC_NAME$$'\n\t\t\t,'$$SEQ_ID$$'\n\t\t\t,'$$IS_LEAF$$'\n\t\t\t,'$$IS_DISABLED$$'\n\t\t\t,'$$FUNC_ID$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t\t);\n\tEND\n\tELSE\n\tBEGIN\n\t\tINSERT INTO FUNCTIONS (\n\t\t\tDATA_STATUS\n\t\t\t,COMPANY_ID\n\t\t\t,DIS_FUNC_ID\n\t\t\t,PARENT_ID\n\t\t\t,FUNC_NAME\n\t\t\t,DESC_FUNC_NAME\n\t\t\t,SEQ_ID\n\t\t\t,IS_LEAF\n\t\t\t,IS_DISABLED\n\t\t\t,FUNC_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$DATA_STATUS$$'\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,'$$DIS_FUNC_ID$$'\n\t\t\t,'$$PARENT_ID$$'\n\t\t\t,'$$FUNC_NAME$$'\n\t\t\t,'$$DESC_FUNC_NAME$$'\n\t\t\t,'$$SEQ_ID$$'\n\t\t\t,'$$IS_LEAF$$'\n\t\t\t,'$$IS_DISABLED$$'\n\t\t\t,'$$FUNC_ID$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t\t);\n\tEND\n\n\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'insert'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$FUNC_ID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'FUNCTIONS' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t);\nEND\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\tUPDATE FUNCTIONS\n\t\tSET FUNC_NAME \= '$$FUNC_NAME$$'\n\t\t\t,DESC_FUNC_NAME \= '$$DESC_FUNC_NAME$$'\n\t\t\t,IS_DISABLED \= '$$IS_DISABLED$$'\n\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\tWHERE 1 \= 1\n\t\t\tAND DIS_FUNC_ID \= '$$DIS_FUNC_ID$$';\n\n\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'update'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$FUNC_ID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'FUNCTIONS' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t);\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN\n\t\t\tDELETE FUNCTIONS\n\t\t\tWHERE DIS_FUNC_ID \= '$$DIS_FUNC_ID$$';\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'delete'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$FUNC_ID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'FUNCTIONS' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t);\n\t\tEND\n
prop_Fn06A004_TEST=SELECT *\n ,(\n  SELECT COUNT(*)\n  FROM FUNCTIONS_TEST WITH (NOLOCK)\n  WHERE (DATA_STATUS \= '$$DATA_STATUS$$'\n   OR '$$DATA_STATUS$$' \= 'ALL')\n    AND (FUNC_ID LIKE '%$$DIS_FUNC_ID$$%' OR '$$DIS_FUNC_ID$$' \= 'ALL')\n    AND (FUNC_NAME LIKE '%$$FUNC_NAME$$%' OR '$$FUNC_NAME$$' \= 'ALL')\n   ) AS totalProperty\nFROM (\nSELECT ROW_NUMBER() OVER (\n   ORDER BY FUNC_ID) AS RowNum\n\t,FUNC_ID\n\t,PARENT_ID\n\t,COMPANY_ID\n\t,SEQ_ID\n\t,DIS_FUNC_ID\n\t,FUNC_NAME\n\t,DESC_FUNC_NAME\n\t,IS_LEAF\n\t,IS_DISABLED\n\t,ADD_USER_ID\n\t,ADD_USER_COMPANY_ID\n\t,ADD_DT\n\t,LAST_MOD_USER_ID\n\t,LAST_MOD_USER_COMPANY_ID\n\t,LAST_MOD_DT\n\t,DEL_USER_ID\n\t,DEL_USER_COMPANY_ID\n\t,DEL_DT\n\t,DATA_STATUS\n\t,FUNC_EN_NAME\n\t,IS_URL\n\t,URL_LINK\nFROM FUNCTIONS_TEST WITH (NOLOCK)\nWHERE (\n   DATA_STATUS \= '$$DATA_STATUS$$'\n   OR '$$DATA_STATUS$$' \= 'ALL'\n   )AND (FUNC_ID LIKE '%$$DIS_FUNC_ID$$%' OR '$$DIS_FUNC_ID$$' \= 'ALL')\n    AND (FUNC_NAME LIKE '%$$FUNC_NAME$$%' OR '$$FUNC_NAME$$' \= 'ALL')\n) AS new1\nWHERE RowNum > $$start$$\n AND RowNum <\= ($$start$$ + $$limit$$);
prop_Fn06B001_1=SELECT *\nFROM (\n\tSELECT COUNT(*) OVER() AS totalProperty, ROW_NUMBER() OVER (\n\t\t\tORDER BY USERID\n\t\t\t) AS RowNum\n\t\t,USERID\n \t\t,USERNAME\n \t\t,CONCAT(USERID, ' - ', USERNAME) AS USER_ID_NAME\n \t\t,PASSWORD\n \t\t,COMPANY\n \t\t,DEPID\n \t\t,EMAIL\n \t\t,TEL1\n \t\t,TEL2\n \t\t,ISLOCK\n \t\t,DEADLINE_DATE\n \t\t,PRE_1_PASSWORD\n \t\t,PRE_2_PASSWORD\n \t\t,PRE_3_PASSWORD\n \t\t,ACTIVE_DATE\n \t\t,WRONG_TIMES\n \t\t,DEPARTNAME\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT\n\t\t,DEL_USER_ID\n\t\t,DEL_USER_COMPANY_ID\n\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT\n\t\t,COMPANY_ID\n\t\t,DATA_STATUS\n\t\t,LAST_LOGIN_DT\n\tFROM (SELECT \n \t\t\t\t\tT1.USERID\n \t\t\t\t\t,T1.USERNAME\n \t\t\t\t\t,CONCAT(T1.USERID, ' - ', T1.USERNAME) AS USER_ID_NAME\n \t\t\t\t\t,T1.PASSWORD\n \t\t\t\t\t,T1.COMPANY\n \t\t\t\t\t,T1.DEPID\n \t\t\t\t\t,T1.EMAIL\n \t\t\t\t\t,T1.TEL1\n \t\t\t\t\t,T1.TEL2\n \t\t\t\t\t,T1.ISLOCK\n \t\t\t\t\t,T1.DEADLINE_DATE\n \t\t\t\t\t,T1.PRE_1_PASSWORD\n \t\t\t\t\t,T1.PRE_2_PASSWORD\n \t\t\t\t\t,T1.PRE_3_PASSWORD\n \t\t\t\t\t,T1.ACTIVE_DATE\n \t\t\t\t\t,T1.WRONG_TIMES\n \t\t\t\t\t,T2.DEPARTNAME\n\t\t\t\t\t,T1.COMPANY_ID\n\t\t\t\t\t,T1.ADD_USER_ID\n\t\t\t\t\t,T1.ADD_USER_COMPANY_ID\n\t\t\t\t\t,T1.ADD_DT\n\t\t\t\t\t,T1.LAST_MOD_USER_ID\n\t\t\t\t\t,T1.LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,T1.LAST_MOD_DT\n\t\t\t\t\t,T1.DEL_USER_ID\n\t\t\t\t\t,T1.DEL_USER_COMPANY_ID\n\t\t\t\t\t,T1.DEL_DT\n\t\t\t\t\t,T1.DATA_STATUS\n\t\t\t\t\t,T3.LAST_LOGIN_DT\n \t\t\t\tFROM USERS T1 WITH (NOLOCK)\n \t\t\t\tINNER JOIN DEPARTMENT T2 ON T1.DEPID \= T2.DEPID\n\t\t\t\tLEFT JOIN (SELECT USER_ID, \n\t\t\t\t\t\t\t\t   CONVERT(VARCHAR(20), MAX(LOGIN_DT), 120) AS LAST_LOGIN_DT\n\t\t\t\t\t\t\tFROM LOGIN_LOG\n\t\t\t\t\t\t\tGROUP BY USER_ID) T3 ON T1.USERID \= T3.USER_ID\n \t) U \n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tUSERID LIKE ('%$$USERID$$%')\n\t\t\tOR 'ALL' \= '$$USERID$$'\n\t\t\t)\n\t\tAND (\n\t\t\tUSERNAME LIKE (N'%$$USERNAME$$%')\n\t\t\tOR 'ALL' \= '$$USERNAME$$'\n\t\t\t)\n\t\tAND (\n\t\t\tUSER_ID_NAME LIKE ('%$$USER_ID_NAME$$%')\n\t\t\tOR 'ALL' \= '$$USER_ID_NAME$$'\n\t\t\t)\n\t\t/*20200423 增加系統使用者排除*/\n\t\tAND ((\n\t\t\tUSERID NOT IN ('ROOT', 'GUEST','internal')\n\t\t\tAND '$$NO_SYS_USER$$' \= 'Y'\n\t\t\t)\n\t\t\tOR '$$NO_SYS_USER$$' \= 'N')\n\t\t/*20200423 增加系統使用者排除*/\n\t\t\n\t\t/* 當條件為數值時 */\n\t\t/* AND (COLUMN1 TRY_CONVERT(INT, '$$COLUMN1$$') OR '$$COLUMN1$$' \= 'ALL') */\n\t\t/* 當條件為日期時 */\n\t\t/* AND (COLUMN1 TRY_CONVERT(DATETIME, '$$COLUMN1$$') OR '$$COLUMN1$$' \= 'ALL') */\n\t\t/* 當條件為數值起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND時會有錯) */\n\t\t/* \n\t\t   AND (COLUMN1 >\= TRY_CONVERT(INT, '$$START$$') OR '$$START$$' \= 'ALL')\n\t\t   AND (COLUMN1 <\= TRY_CONVERT(INT, '$$END$$') OR '$$END$$'   \= 'ALL')\n\t\t*/\n\t\t/* 當條件為日期起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND時會有錯) */\n\t\t/* \n\t\t   AND (COLUMN1 >\= TRY_CONVERT(DATETIME, '$$START$$') OR '$$START$$' \= 'ALL')\n\t\t   AND (COLUMN1 <\= TRY_CONVERT(DATETIME, '$$END$$') OR '$$END$$'   \= 'ALL')\n\t\t*/\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
prop_Fn06B001_1_TEST=SELECT *\n FROM (\n \tSELECT ROW_NUMBER() OVER (\n \t\t\t\t\t\tORDER BY USERID ASC\n \t\t\t\t\t\t) AS RowNum, * FROM (\n \t\tSELECT \n \t\t\t\t\tT1.USERID\n \t\t\t\t\t,T1.USERNAME\n                    ,CAST(T1.DEPID AS NVARCHAR(50))+' '+DEPARTNAME AS 'DEPID'\n                    ,T2.DEPARTMENT_IDX\n \t\t\t\t\t,T1.PASSWORD\n \t\t\t\t\t,T1.COMPANY\n \t\t\t\t\t,T1.EMAIL\n \t\t\t\t\t,T1.TEL1\n \t\t\t\t\t,T1.TEL2\n \t\t\t\t\t,T1.ISLOCK\n \t\t\t\t\t,T1.DEADLINE_DATE\n \t\t\t\t\t,T1.DATA_STATUS\n \t\t\t\t\t,T1.ADD_USER_ID\n \t\t\t\t\t,T1.ADD_USER_COMPANY_ID\n \t\t\t\t\t,T1.ADD_DT\n \t\t\t\t\t,T1.LAST_MOD_USER_ID\n \t\t\t\t\t,T1.LAST_MOD_USER_COMPANY_ID\n \t\t\t\t\t,T1.LAST_MOD_DT\n \t\t\t\t\t,T1.DEL_USER_ID\n \t\t\t\t\t,T1.DEL_USER_COMPANY_ID\n \t\t\t\t\t,T1.DEL_DT\n \t\t\t\t\t,T1.PRE_1_PASSWORD\n \t\t\t\t\t,T1.PRE_2_PASSWORD\n \t\t\t\t\t,T1.PRE_3_PASSWORD\n \t\t\t\t\t,T1.ACTIVE_DATE\n \t\t\t\t\t,T1.WRONG_TIMES\n \t\t\t\t\t,T2.DEPARTNAME\n \t\t\t\tFROM USERS_TEST T1\n \t\t\t\tINNER JOIN DEPARTMENT T2 ON T1.DEPID \= T2.DEPID\n \t) U \n \tWHERE 1 \= 1 \n \t\tAND (\n\t\t\tUSERID LIKE ('%$$USERID$$%')\n\t\t\tOR 'ALL' \= '$$USERID$$'\n\t\t\t)\n\t\tAND (\n\t\t\tUSERNAME LIKE ('%$$USERNAME$$%')\n\t\t\tOR 'ALL' \= '$$USERNAME$$'\n\t\t\t)\n/*\n\t\tAND (\n\t\t\tUSER_ID_NAME LIKE ('%$$USER_ID_NAME$$%')\n\t\t\tOR 'ALL' \= '$$USER_ID_NAME$$'\n\t\t\t)*/\n\t\t/*/*20200423 增加系統使用者排除*/\n\t\tAND ((\n\t\t\tUSERID NOT IN ('ROOT', 'GUEST')\n\t\t\tAND '$$NO_SYS_USER$$' \= 'Y'\n\t\t\t)\n\t\t\tOR '$$NO_SYS_USER$$' \= 'N')\n\t\t/*20200423 增加系統使用者排除*/*/\n \t) AS A\n \t,(\n \t\tSELECT COUNT(*) AS totalProperty\n \t\tFROM (\n \t\t\tSELECT * FROM (\n \t\t\t\tSELECT ROW_NUMBER() OVER (\n \t\t\t\t\t\t\t\tORDER BY USERID ASC\n \t\t\t\t\t\t\t\t) AS RowNum\n \t\t\t\t\t\t\t,T1.USERID\n \t\t\t\t\t\t\t,T1.USERNAME\n                            ,CAST(T1.DEPID AS NVARCHAR(50))+'    '+DEPARTNAME AS 'DEPID'\n                            ,T2.DEPARTMENT_IDX\n \t\t\t\t\t\t\t,T1.PASSWORD\n \t\t\t\t\t\t\t,T1.COMPANY\n \t\t\t\t\t\t\t,T1.EMAIL\n \t\t\t\t\t\t\t,T1.TEL1\n \t\t\t\t\t\t\t,T1.TEL2\n \t\t\t\t\t\t\t,T1.ISLOCK\n \t\t\t\t\t\t\t,T1.DEADLINE_DATE\n \t\t\t\t\t\t\t,T1.DATA_STATUS\n \t\t\t\t\t\t\t,T1.ADD_USER_ID\n \t\t\t\t\t\t\t,T1.ADD_USER_COMPANY_ID\n \t\t\t\t\t\t\t,T1.ADD_DT\n \t\t\t\t\t\t\t,T1.LAST_MOD_USER_ID\n \t\t\t\t\t\t\t,T1.LAST_MOD_USER_COMPANY_ID\n \t\t\t\t\t\t\t,T1.LAST_MOD_DT\n \t\t\t\t\t\t\t,T1.DEL_USER_ID\n \t\t\t\t\t\t\t,T1.DEL_USER_COMPANY_ID\n \t\t\t\t\t\t\t,T1.DEL_DT\n \t\t\t\t\t\t\t,T1.PRE_1_PASSWORD\n \t\t\t\t\t\t\t,T1.PRE_2_PASSWORD\n \t\t\t\t\t\t\t,T1.PRE_3_PASSWORD\n \t\t\t\t\t\t\t,T1.ACTIVE_DATE\n \t\t\t\t\t\t\t,T1.WRONG_TIMES\n \t\t\t\t\t\t\t,T2.DEPARTNAME\n \t\t\t\t\t\tFROM USERS_TEST T1\n \t\t\t\t\t\tINNER JOIN DEPARTMENT T2 ON T1.DEPID \= T2.DEPID\n \t\t\t) U \n \t\t\tWHERE 1 \= 1 \n \t\t\t\tAND (\n\t\t\t\t\tUSERID LIKE ('%$$USERID$$%')\n\t\t\t\t\tOR 'ALL' \= '$$USERID$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tUSERNAME LIKE ('%$$USERNAME$$%')\n\t\t\t\t\tOR 'ALL' \= '$$USERNAME$$'\n\t\t\t\t\t)\n/*\n\t\t\t\tAND (\n\t\t\t\t\tUSER_ID_NAME LIKE ('%$$USER_ID_NAME$$%')\n\t\t\t\t\tOR 'ALL' \= '$$USER_ID_NAME$$'\n\t\t\t\t\t)*/\n\t\t\t\t/*/*20200423 增加系統使用者排除*/\n\t\t\t\tAND ((\n\t\t\t\t\tUSERID NOT IN ('ROOT', 'GUEST')\n\t\t\t\t\tAND '$$NO_SYS_USER$$' \= 'Y'\n\t\t\t\t\t)\n\t\t\t\t\tOR '$$NO_SYS_USER$$' \= 'N')\n\t\t\t\t/*20200423 增加系統使用者排除*/*/\n\t\t\t) AS B\n \t\t) AS B\n WHERE 1 \= 1\n \tAND RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$)
prop_Fn06B001_CB1=\nSELECT * ,\n  (SELECT COUNT(*)\n   FROM DEPARTMENT\n   WHERE 1 \= 1 ) AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY DEPARTMENT_IDX ASC) AS RowNum,\n                            DEPID ,\n                            CAST(DEPID AS NVARCHAR(50))+' '+DEPARTNAME AS 'USER_ID_NAME'\n   FROM DEPARTMENT) AS new1\n\n
prop_Fn06B001_CUD_ADD=/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Steve\n * Last Updated Date \:    20200512\n * 修正：\n *         1. DATA_STATUS 變數化\n *         2. DATA_CHANGE_LOG_ID 位置移至最前\n */\nBEGIN TRY\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n/* 1.1 功能主要異動 MASTER_TABLE_NAME */\nInsert into USERS_TEST /* WITH (ROWLOCK) */\n(\nUSERID\n,USERNAME\n,PASSWORD\n,COMPANY\n,DEPID\n,EMAIL\n,TEL1\n,TEL2\n,ISLOCK\n,ADD_DT\n,COMPANY_ID\n,ADD_USER_ID\n,ADD_USER_COMPANY_ID\n,DATA_STATUS\n) \nVALUES(\nN'$$USERID$$'\n,'$$USERNAME$$'\n,'$$PASSWORD$$'\n,'$$COMPANY$$'\n,'$$DEPID$$'\n,'$$EMAIL$$'\n,'$$TEL1$$'\n,'$$TEL2$$'\n,'$$ISLOCK$$'\n,CONVERT(VARCHAR(20), GETDATE(), 120)\n,'$$COMPANY_ID$$'\n,'${PARAM_SOURCE_COMING}'\n,'${PARAM_COMPANY}'\n,'$$DATA_STATUS$$'\n);\n/* 1.2 DATA_CHANGE_LOG for Master Table */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'insert'\n       ,'${PARAM_SOURCE_COMING}'\n       ,IDENT_CURRENT('TESTTABLE')\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'TESTTABLE'\n);\n/* 1.3 DATA Detail LOG for Master Table(before modified) */\n/*\nINSERT INTO LOG_USERS  /* WITH (ROWLOCK) */ \n         ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID \n          ,CRUD_STATE \n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n           )\nVALUES(\n          IDENT_CURRENT('DATA_CHANGE_LOG')\n          ,'${PARAM_FUNC_ID}'\n          ,'C'\n          ,IDENT_CURRENT('USERS_TEST')\n          ,N'$$USERNAME$$'\n          ,'$$PASSWORD$$'\n          ,'$$COMPANY$$'\n          ,'$$DEPID$$'\n          ,'$$EMAIL$$'\n          ,'$$TEL1$$'\n          ,'$$TEL2$$'\n          ,'$$ISLOCK$$'\n          ,CONVERT(VARCHAR(20), GETDATE(), 120)\n          ,'$$COMPANY_ID$$'\n          ,'${PARAM_SOURCE_COMING}'\n          ,'${PARAM_COMPANY}'\n          ,'$$DATA_STATUS$$'\n          );*/\n/* 1.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES (        \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0'\n        ,'SUCCESS'\n        ,IDENT_CURRENT('USERS_TEST')\n        ,'C' \n        ,'$$MEMO$$');\nEND\n/*\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$USERID$$'\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'USERS_TEST'\n);\nIF EXISTS (\n\nSELECT * FROM USERS_TEST WITH (NOLOCK) WHERE USERID \= '$$USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/* 2.2 DATA Detail LOG (before modified) */\n   INSERT INTO LOG_USERS /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n     FROM USERS_TEST  WITH (NOLOCK)\n   WHERE USERID \= '$$USERID$$';\n\n/* 2.3 功能主要異動 Table */\n   DELETE  USERS_TEST WITH (ROWLOCK)\n   WHERE USERID \= '$$USERID$$';\n\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 2.5 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\n   END\nEND\nELSE\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\nBEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$USERID$$'\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'USERS_TEST'\n);\nIF EXISTS (\nSELECT * FROM USERS_TEST WITH (NOLOCK) WHERE USERID \= '$$USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n\n   INSERT INTO LOG_USERS /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n     FROM USERS_TEST WITH (NOLOCK)\n   WHERE USERID \= '$$USERID$$';\n\n/* 3.3 功能主要異動 Table */\nUPDATE USERS_TEST WITH (ROWLOCK)\n    SET USERNAME\=(CASE WHEN SUBSTRING(N'$$USERNAME$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN USERNAME ELSE SUBSTRING(N'$$USERNAME$$',1,50) END)\n    ,PASSWORD\=(CASE WHEN SUBSTRING('$$PASSWORD$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN PASSWORD ELSE SUBSTRING('$$PASSWORD$$',1,50) END)\n    ,COMPANY\=(CASE WHEN SUBSTRING('$$COMPANY$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY ELSE SUBSTRING('$$COMPANY$$',1,50) END)\n    ,DEPID\=(CASE WHEN SUBSTRING('$$DEPID$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN DEPID ELSE SUBSTRING('$$DEPID$$',1,20) END)\n    ,EMAIL\=(CASE WHEN SUBSTRING('$$EMAIL$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN EMAIL ELSE SUBSTRING('$$EMAIL$$',1,50) END)\n    ,TEL1\=(CASE WHEN SUBSTRING('$$TEL1$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN TEL1 ELSE SUBSTRING('$$TEL1$$',1,20) END)\n    ,TEL2\=(CASE WHEN SUBSTRING('$$TEL2$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN TEL2 ELSE SUBSTRING('$$TEL2$$',1,20) END)\n    ,ISLOCK\=(CASE WHEN SUBSTRING('$$ISLOCK$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN ISLOCK ELSE SUBSTRING('$$ISLOCK$$',1,1) END)\n    ,Pre_1_Password\=(CASE WHEN SUBSTRING('$$Pre_1_Password$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN Pre_1_Password ELSE SUBSTRING('$$Pre_1_Password$$',1,100) END)\n    ,Pre_2_Password\=(CASE WHEN SUBSTRING('$$Pre_2_Password$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN Pre_2_Password ELSE SUBSTRING('$$Pre_2_Password$$',1,100) END)\n    ,Pre_3_Password\=(CASE WHEN SUBSTRING('$$Pre_3_Password$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN Pre_3_Password ELSE SUBSTRING('$$Pre_3_Password$$',1,100) END)\n    ,Active_Date\=(CASE WHEN SUBSTRING('$$Active_Date$$',1,8)\=SUBSTRING('\#NO_DATA\#',1,8) THEN Active_Date ELSE SUBSTRING('$$Active_Date$$',1,8) END)\n    ,Deadline_Date\=(CASE WHEN SUBSTRING('$$Deadline_Date$$',1,8)\=SUBSTRING('\#NO_DATA\#',1,8) THEN Deadline_Date ELSE SUBSTRING('$$Deadline_Date$$',1,8) END)\n    ,wrong_times\=(CASE WHEN ISNUMERIC('$$wrong_times$$')\=1 THEN (CASE WHEN ISNULL(wrong_times,'0')\='$$wrong_times$$'  THEN (CASE WHEN '$$wrong_times$$'\='0' THEN '0' ELSE wrong_times END) ELSE '$$wrong_times$$'  END) ELSE wrong_times END)\n    ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n    ,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n    ,COMPANY_ID\=(CASE WHEN SUBSTRING('$$COMPANY_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$',1,50) END)\n    ,DATA_STATUS\=(CASE WHEN SUBSTRING('$$DATA_STATUS$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN DATA_STATUS ELSE SUBSTRING('$$DATA_STATUS$$',1,1) END)\n    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n    ,LAST_PW_MOD_DT\=(CASE WHEN ISDATE('$$LAST_PW_MOD_DT$$')\=1 THEN (CASE WHEN ISNULL(LAST_PW_MOD_DT,CONVERT(DATETIME, '', 23))\='$$LAST_PW_MOD_DT$$' THEN LAST_PW_MOD_DT ELSE CONVERT(datetime,'$$LAST_PW_MOD_DT$$') END) ELSE LAST_PW_MOD_DT END)\nWHERE USERID\='$$USERID$$' ;\n\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n         ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 3.5 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\nEND\n*/\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$USERID$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
prop_Fn06B001_CUD_DEL=/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Steve\n * Last Updated Date \:    20200512\n * 修正：\n *         1. DATA_STATUS 變數化\n *         2. DATA_CHANGE_LOG_ID 位置移至最前\n */\nBEGIN TRY\n/*\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n/* 1.1 功能主要異動 MASTER_TABLE_NAME */\nInsert into USERS_TEST /* WITH (ROWLOCK) */\n(\nUSERID\n,USERNAME\n,PASSWORD\n,COMPANY\n,DEPID\n,EMAIL\n,TEL1\n,TEL2\n,ISLOCK\n,ADD_DT\n,COMPANY_ID\n,ADD_USER_ID\n,ADD_USER_COMPANY_ID\n,DATA_STATUS\n) \nVALUES(\nN'$$USERID$$'\n,'$$USERNAME$$'\n,'$$PASSWORD$$'\n,'$$COMPANY$$'\n,'$$DEPID$$'\n,'$$EMAIL$$'\n,'$$TEL1$$'\n,'$$TEL2$$'\n,'$$ISLOCK$$'\n,CONVERT(VARCHAR(20), GETDATE(), 120)\n,'$$COMPANY_ID$$'\n,'${PARAM_SOURCE_COMING}'\n,'${PARAM_COMPANY}'\n,'$$DATA_STATUS$$'\n);\n/* 1.2 DATA_CHANGE_LOG for Master Table */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'insert'\n       ,'${PARAM_SOURCE_COMING}'\n       ,IDENT_CURRENT('TESTTABLE')\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'TESTTABLE'\n);\n/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\nINSERT INTO LOG_USERS  /* WITH (ROWLOCK) */ \n         ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID \n          ,CRUD_STATE \n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n           )\nVALUES(\n          IDENT_CURRENT('DATA_CHANGE_LOG')\n          ,'${PARAM_FUNC_ID}'\n          ,'C'\n          ,IDENT_CURRENT('USERS_TEST')\n          ,N'$$USERNAME$$'\n          ,'$$PASSWORD$$'\n          ,'$$COMPANY$$'\n          ,'$$DEPID$$'\n          ,'$$EMAIL$$'\n          ,'$$TEL1$$'\n          ,'$$TEL2$$'\n          ,'$$ISLOCK$$'\n          ,CONVERT(VARCHAR(20), GETDATE(), 120)\n          ,'$$COMPANY_ID$$'\n          ,'${PARAM_SOURCE_COMING}'\n          ,'${PARAM_COMPANY}'\n          ,'$$DATA_STATUS$$'\n          );\n/* 1.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES (        \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0'\n        ,'SUCCESS'\n        ,IDENT_CURRENT('USERS_TEST')\n        ,'C' \n        ,'$$MEMO$$');\nEND\n ELSE\n*/\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$USERID$$'\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'USERS_TEST'\n);\nIF EXISTS (\n\nSELECT * FROM USERS_TEST WITH (NOLOCK) WHERE USERID \= '$$USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/*\n/* 2.2 DATA Detail LOG (before modified) */\n   INSERT INTO LOG_USERS /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n     FROM USERS_TEST  WITH (NOLOCK)\n   WHERE USERID \= '$$USERID$$';\n*/\n/* 2.3 功能主要異動 Table */\n   DELETE  USERS_TEST WITH (ROWLOCK)\n   WHERE USERID \= '$$USERID$$';\n\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 2.5 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\n   END\nEND\n/*\nELSE\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\nBEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$USERID$$'\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'USERS_TEST'\n);\nIF EXISTS (\nSELECT * FROM USERS_TEST WITH (NOLOCK) WHERE USERID \= '$$USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n\n   INSERT INTO LOG_USERS /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n     FROM USERS_TEST WITH (NOLOCK)\n   WHERE USERID \= '$$USERID$$';\n\n/* 3.3 功能主要異動 Table */\nUPDATE USERS_TEST WITH (ROWLOCK)\n    SET USERNAME\=(CASE WHEN SUBSTRING(N'$$USERNAME$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN USERNAME ELSE SUBSTRING(N'$$USERNAME$$',1,50) END)\n    ,PASSWORD\=(CASE WHEN SUBSTRING('$$PASSWORD$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN PASSWORD ELSE SUBSTRING('$$PASSWORD$$',1,50) END)\n    ,COMPANY\=(CASE WHEN SUBSTRING('$$COMPANY$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY ELSE SUBSTRING('$$COMPANY$$',1,50) END)\n    ,DEPID\=(CASE WHEN SUBSTRING('$$DEPID$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN DEPID ELSE SUBSTRING('$$DEPID$$',1,20) END)\n    ,EMAIL\=(CASE WHEN SUBSTRING('$$EMAIL$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN EMAIL ELSE SUBSTRING('$$EMAIL$$',1,50) END)\n    ,TEL1\=(CASE WHEN SUBSTRING('$$TEL1$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN TEL1 ELSE SUBSTRING('$$TEL1$$',1,20) END)\n    ,TEL2\=(CASE WHEN SUBSTRING('$$TEL2$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN TEL2 ELSE SUBSTRING('$$TEL2$$',1,20) END)\n    ,ISLOCK\=(CASE WHEN SUBSTRING('$$ISLOCK$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN ISLOCK ELSE SUBSTRING('$$ISLOCK$$',1,1) END)\n    ,Pre_1_Password\=(CASE WHEN SUBSTRING('$$Pre_1_Password$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN Pre_1_Password ELSE SUBSTRING('$$Pre_1_Password$$',1,100) END)\n    ,Pre_2_Password\=(CASE WHEN SUBSTRING('$$Pre_2_Password$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN Pre_2_Password ELSE SUBSTRING('$$Pre_2_Password$$',1,100) END)\n    ,Pre_3_Password\=(CASE WHEN SUBSTRING('$$Pre_3_Password$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN Pre_3_Password ELSE SUBSTRING('$$Pre_3_Password$$',1,100) END)\n    ,Active_Date\=(CASE WHEN SUBSTRING('$$Active_Date$$',1,8)\=SUBSTRING('\#NO_DATA\#',1,8) THEN Active_Date ELSE SUBSTRING('$$Active_Date$$',1,8) END)\n    ,Deadline_Date\=(CASE WHEN SUBSTRING('$$Deadline_Date$$',1,8)\=SUBSTRING('\#NO_DATA\#',1,8) THEN Deadline_Date ELSE SUBSTRING('$$Deadline_Date$$',1,8) END)\n    ,wrong_times\=(CASE WHEN ISNUMERIC('$$wrong_times$$')\=1 THEN (CASE WHEN ISNULL(wrong_times,'0')\='$$wrong_times$$'  THEN (CASE WHEN '$$wrong_times$$'\='0' THEN '0' ELSE wrong_times END) ELSE '$$wrong_times$$'  END) ELSE wrong_times END)\n    ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n    ,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n    ,COMPANY_ID\=(CASE WHEN SUBSTRING('$$COMPANY_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$',1,50) END)\n    ,DATA_STATUS\=(CASE WHEN SUBSTRING('$$DATA_STATUS$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN DATA_STATUS ELSE SUBSTRING('$$DATA_STATUS$$',1,1) END)\n    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n    ,LAST_PW_MOD_DT\=(CASE WHEN ISDATE('$$LAST_PW_MOD_DT$$')\=1 THEN (CASE WHEN ISNULL(LAST_PW_MOD_DT,CONVERT(DATETIME, '', 23))\='$$LAST_PW_MOD_DT$$' THEN LAST_PW_MOD_DT ELSE CONVERT(datetime,'$$LAST_PW_MOD_DT$$') END) ELSE LAST_PW_MOD_DT END)\nWHERE USERID\='$$USERID$$' ;\n\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n         ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 3.5 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\nEND\n*/\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$USERID$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
prop_Fn06B001_CUD_MOD=/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Steve\n * Last Updated Date \:    20200512\n * 修正：\n *         1. DATA_STATUS 變數化\n *         2. DATA_CHANGE_LOG_ID 位置移至最前\n */\nBEGIN TRY\n/*\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n/* 1.1 功能主要異動 MASTER_TABLE_NAME */\nInsert into USERS_TEST /* WITH (ROWLOCK) */\n(\nUSERID\n,USERNAME\n,PASSWORD\n,COMPANY\n,DEPID\n,EMAIL\n,TEL1\n,TEL2\n,ISLOCK\n,ADD_DT\n,COMPANY_ID\n,ADD_USER_ID\n,ADD_USER_COMPANY_ID\n,DATA_STATUS\n) \nVALUES(\nN'$$USERID$$'\n,'$$USERNAME$$'\n,'$$PASSWORD$$'\n,'$$COMPANY$$'\n,'$$DEPID$$'\n,'$$EMAIL$$'\n,'$$TEL1$$'\n,'$$TEL2$$'\n,'$$ISLOCK$$'\n,CONVERT(VARCHAR(20), GETDATE(), 120)\n,'$$COMPANY_ID$$'\n,'${PARAM_SOURCE_COMING}'\n,'${PARAM_COMPANY}'\n,'$$DATA_STATUS$$'\n);\n/* 1.2 DATA_CHANGE_LOG for Master Table */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'insert'\n       ,'${PARAM_SOURCE_COMING}'\n       ,IDENT_CURRENT('TESTTABLE')\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'TESTTABLE'\n);\n/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\nINSERT INTO LOG_USERS  /* WITH (ROWLOCK) */ \n         ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID \n          ,CRUD_STATE \n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n           )\nVALUES(\n          IDENT_CURRENT('DATA_CHANGE_LOG')\n          ,'${PARAM_FUNC_ID}'\n          ,'C'\n          ,IDENT_CURRENT('USERS_TEST')\n          ,N'$$USERNAME$$'\n          ,'$$PASSWORD$$'\n          ,'$$COMPANY$$'\n          ,'$$DEPID$$'\n          ,'$$EMAIL$$'\n          ,'$$TEL1$$'\n          ,'$$TEL2$$'\n          ,'$$ISLOCK$$'\n          ,CONVERT(VARCHAR(20), GETDATE(), 120)\n          ,'$$COMPANY_ID$$'\n          ,'${PARAM_SOURCE_COMING}'\n          ,'${PARAM_COMPANY}'\n          ,'$$DATA_STATUS$$'\n          );\n/* 1.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES (        \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0'\n        ,'SUCCESS'\n        ,IDENT_CURRENT('USERS_TEST')\n        ,'C' \n        ,'$$MEMO$$');\nEND\n ELSE\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$USERID$$'\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'USERS_TEST'\n);\nIF EXISTS (\n\nSELECT * FROM USERS_TEST WITH (NOLOCK) WHERE USERID \= '$$USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/* 2.2 DATA Detail LOG (before modified) */\n   INSERT INTO LOG_USERS /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n     FROM USERS_TEST  WITH (NOLOCK)\n   WHERE USERID \= '$$USERID$$';\n\n/* 2.3 功能主要異動 Table */\n   DELETE  USERS_TEST WITH (ROWLOCK)\n   WHERE USERID \= '$$USERID$$';\n\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 2.5 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\n   END\nEND\nELSE\n*/\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\nBEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$USERID$$'\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'USERS_TEST'\n);\nIF EXISTS (\nSELECT * FROM USERS_TEST WITH (NOLOCK) WHERE USERID \= '$$USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n/*\n   INSERT INTO LOG_USERS /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n     FROM USERS_TEST WITH (NOLOCK)\n   WHERE USERID \= '$$USERID$$';\n*/\n/* 3.3 功能主要異動 Table */\nUPDATE USERS_TEST WITH (ROWLOCK)\n    SET USERNAME\=(CASE WHEN SUBSTRING(N'$$USERNAME$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN USERNAME ELSE SUBSTRING(N'$$USERNAME$$',1,50) END)\n    ,PASSWORD\=(CASE WHEN SUBSTRING('$$PASSWORD$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN PASSWORD ELSE SUBSTRING('$$PASSWORD$$',1,50) END)\n    ,COMPANY\=(CASE WHEN SUBSTRING('$$COMPANY$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY ELSE SUBSTRING('$$COMPANY$$',1,50) END)\n    ,DEPID\=(CASE WHEN SUBSTRING('$$DEPID$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN DEPID ELSE SUBSTRING('$$DEPID$$',1,20) END)\n    ,EMAIL\=(CASE WHEN SUBSTRING('$$EMAIL$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN EMAIL ELSE SUBSTRING('$$EMAIL$$',1,50) END)\n    ,TEL1\=(CASE WHEN SUBSTRING('$$TEL1$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN TEL1 ELSE SUBSTRING('$$TEL1$$',1,20) END)\n    ,TEL2\=(CASE WHEN SUBSTRING('$$TEL2$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN TEL2 ELSE SUBSTRING('$$TEL2$$',1,20) END)\n    ,ISLOCK\=(CASE WHEN SUBSTRING('$$ISLOCK$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN ISLOCK ELSE SUBSTRING('$$ISLOCK$$',1,1) END)\n    ,Pre_1_Password\=(CASE WHEN SUBSTRING('$$Pre_1_Password$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN Pre_1_Password ELSE SUBSTRING('$$Pre_1_Password$$',1,100) END)\n    ,Pre_2_Password\=(CASE WHEN SUBSTRING('$$Pre_2_Password$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN Pre_2_Password ELSE SUBSTRING('$$Pre_2_Password$$',1,100) END)\n    ,Pre_3_Password\=(CASE WHEN SUBSTRING('$$Pre_3_Password$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN Pre_3_Password ELSE SUBSTRING('$$Pre_3_Password$$',1,100) END)\n    ,Active_Date\=(CASE WHEN SUBSTRING('$$Active_Date$$',1,8)\=SUBSTRING('\#NO_DATA\#',1,8) THEN Active_Date ELSE SUBSTRING('$$Active_Date$$',1,8) END)\n    ,Deadline_Date\=(CASE WHEN SUBSTRING('$$Deadline_Date$$',1,8)\=SUBSTRING('\#NO_DATA\#',1,8) THEN Deadline_Date ELSE SUBSTRING('$$Deadline_Date$$',1,8) END)\n    ,wrong_times\=(CASE WHEN ISNUMERIC('$$wrong_times$$')\=1 THEN (CASE WHEN ISNULL(wrong_times,'0')\='$$wrong_times$$'  THEN (CASE WHEN '$$wrong_times$$'\='0' THEN '0' ELSE wrong_times END) ELSE '$$wrong_times$$'  END) ELSE wrong_times END)\n    ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n    ,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n    ,COMPANY_ID\=(CASE WHEN SUBSTRING('$$COMPANY_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$',1,50) END)\n    ,DATA_STATUS\=(CASE WHEN SUBSTRING('$$DATA_STATUS$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN DATA_STATUS ELSE SUBSTRING('$$DATA_STATUS$$',1,1) END)\n    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n    ,LAST_PW_MOD_DT\=(CASE WHEN ISDATE('$$LAST_PW_MOD_DT$$')\=1 THEN (CASE WHEN ISNULL(LAST_PW_MOD_DT,CONVERT(DATETIME, '', 23))\='$$LAST_PW_MOD_DT$$' THEN LAST_PW_MOD_DT ELSE CONVERT(datetime,'$$LAST_PW_MOD_DT$$') END) ELSE LAST_PW_MOD_DT END)\nWHERE USERID\='$$USERID$$' ;\n\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n         ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 3.5 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$USERID$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
prop_Fn06B001_CUD_TEST=/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Steve\n * Last Updated Date \:    20200512\n * 修正：\n *         1. DATA_STATUS 變數化\n *         2. DATA_CHANGE_LOG_ID 位置移至最前\n */\nBEGIN TRY\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n/* 1.1 功能主要異動 MASTER_TABLE_NAME */\nInsert into USERS_TEST /* WITH (ROWLOCK) */\n(\nUSERID\n,USERNAME\n,PASSWORD\n,COMPANY\n,DEPID\n,EMAIL\n,TEL1\n,TEL2\n,ISLOCK\n,ADD_DT\n,COMPANY_ID\n,ADD_USER_ID\n,ADD_USER_COMPANY_ID\n,DATA_STATUS\n) \nVALUES(\nN'$$USERID$$'\n,'$$USERNAME$$'\n,'$$PASSWORD$$'\n,'$$COMPANY$$'\n,'$$DEPID$$'\n,'$$EMAIL$$'\n,'$$TEL1$$'\n,'$$TEL2$$'\n,'$$ISLOCK$$'\n,CONVERT(VARCHAR(20), GETDATE(), 120)\n,'$$COMPANY_ID$$'\n,'${PARAM_SOURCE_COMING}'\n,'${PARAM_COMPANY}'\n,'$$DATA_STATUS$$'\n);\n/* 1.2 DATA_CHANGE_LOG for Master Table */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'insert'\n       ,'${PARAM_SOURCE_COMING}'\n       ,IDENT_CURRENT('TESTTABLE')\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'TESTTABLE'\n);\n/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\nINSERT INTO LOG_USERS  /* WITH (ROWLOCK) */ \n         ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID \n          ,CRUD_STATE \n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n           )\nVALUES(\n          IDENT_CURRENT('DATA_CHANGE_LOG')\n          ,'${PARAM_FUNC_ID}'\n          ,'C'\n          ,IDENT_CURRENT('USERS_TEST')\n          ,N'$$USERNAME$$'\n          ,'$$PASSWORD$$'\n          ,'$$COMPANY$$'\n          ,'$$DEPID$$'\n          ,'$$EMAIL$$'\n          ,'$$TEL1$$'\n          ,'$$TEL2$$'\n          ,'$$ISLOCK$$'\n          ,CONVERT(VARCHAR(20), GETDATE(), 120)\n          ,'$$COMPANY_ID$$'\n          ,'${PARAM_SOURCE_COMING}'\n          ,'${PARAM_COMPANY}'\n          ,'$$DATA_STATUS$$'\n          );\n/* 1.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES (        \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0'\n        ,'SUCCESS'\n        ,IDENT_CURRENT('USERS_TEST')\n        ,'C' \n        ,'$$MEMO$$');\nEND\n ELSE\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$USERID$$'\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'USERS_TEST'\n);\nIF EXISTS (\n\nSELECT * FROM USERS_TEST WITH (NOLOCK) WHERE USERID \= '$$USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/* 2.2 DATA Detail LOG (before modified) */\n   INSERT INTO LOG_USERS /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n     FROM USERS_TEST  WITH (NOLOCK)\n   WHERE USERID \= '$$USERID$$';\n\n/* 2.3 功能主要異動 Table */\n   DELETE  USERS_TEST WITH (ROWLOCK)\n   WHERE USERID \= '$$USERID$$';\n\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 2.5 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\n   END\nEND\nELSE\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\nBEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$USERID$$'\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'USERS_TEST'\n);\nIF EXISTS (\nSELECT * FROM USERS_TEST WITH (NOLOCK) WHERE USERID \= '$$USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n\n   INSERT INTO LOG_USERS /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,USERID\n          ,USERNAME\n          ,PASSWORD\n          ,COMPANY\n          ,DEPID\n          ,EMAIL\n          ,TEL1\n          ,TEL2\n          ,ISLOCK\n          ,Pre_1_Password\n          ,Pre_2_Password\n          ,Pre_3_Password\n          ,Active_Date\n          ,Deadline_Date\n          ,wrong_times\n          ,DEL_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,DATA_STATUS\n          ,LAST_MOD_DT\n          ,LAST_PW_MOD_DT\n     FROM USERS_TEST WITH (NOLOCK)\n   WHERE USERID \= '$$USERID$$';\n\n/* 3.3 功能主要異動 Table */\nUPDATE USERS_TEST WITH (ROWLOCK)\n    SET USERNAME\=(CASE WHEN SUBSTRING(N'$$USERNAME$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN USERNAME ELSE SUBSTRING(N'$$USERNAME$$',1,50) END)\n    ,PASSWORD\=(CASE WHEN SUBSTRING('$$PASSWORD$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN PASSWORD ELSE SUBSTRING('$$PASSWORD$$',1,50) END)\n    ,COMPANY\=(CASE WHEN SUBSTRING('$$COMPANY$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY ELSE SUBSTRING('$$COMPANY$$',1,50) END)\n    ,DEPID\=(CASE WHEN SUBSTRING('$$DEPID$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN DEPID ELSE SUBSTRING('$$DEPID$$',1,20) END)\n    ,EMAIL\=(CASE WHEN SUBSTRING('$$EMAIL$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN EMAIL ELSE SUBSTRING('$$EMAIL$$',1,50) END)\n    ,TEL1\=(CASE WHEN SUBSTRING('$$TEL1$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN TEL1 ELSE SUBSTRING('$$TEL1$$',1,20) END)\n    ,TEL2\=(CASE WHEN SUBSTRING('$$TEL2$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN TEL2 ELSE SUBSTRING('$$TEL2$$',1,20) END)\n    ,ISLOCK\=(CASE WHEN SUBSTRING('$$ISLOCK$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN ISLOCK ELSE SUBSTRING('$$ISLOCK$$',1,1) END)\n    ,Pre_1_Password\=(CASE WHEN SUBSTRING('$$Pre_1_Password$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN Pre_1_Password ELSE SUBSTRING('$$Pre_1_Password$$',1,100) END)\n    ,Pre_2_Password\=(CASE WHEN SUBSTRING('$$Pre_2_Password$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN Pre_2_Password ELSE SUBSTRING('$$Pre_2_Password$$',1,100) END)\n    ,Pre_3_Password\=(CASE WHEN SUBSTRING('$$Pre_3_Password$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN Pre_3_Password ELSE SUBSTRING('$$Pre_3_Password$$',1,100) END)\n    ,Active_Date\=(CASE WHEN SUBSTRING('$$Active_Date$$',1,8)\=SUBSTRING('\#NO_DATA\#',1,8) THEN Active_Date ELSE SUBSTRING('$$Active_Date$$',1,8) END)\n    ,Deadline_Date\=(CASE WHEN SUBSTRING('$$Deadline_Date$$',1,8)\=SUBSTRING('\#NO_DATA\#',1,8) THEN Deadline_Date ELSE SUBSTRING('$$Deadline_Date$$',1,8) END)\n    ,wrong_times\=(CASE WHEN ISNUMERIC('$$wrong_times$$')\=1 THEN (CASE WHEN ISNULL(wrong_times,'0')\='$$wrong_times$$'  THEN (CASE WHEN '$$wrong_times$$'\='0' THEN '0' ELSE wrong_times END) ELSE '$$wrong_times$$'  END) ELSE wrong_times END)\n    ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n    ,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n    ,COMPANY_ID\=(CASE WHEN SUBSTRING('$$COMPANY_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$',1,50) END)\n    ,DATA_STATUS\=(CASE WHEN SUBSTRING('$$DATA_STATUS$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN DATA_STATUS ELSE SUBSTRING('$$DATA_STATUS$$',1,1) END)\n    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n    ,LAST_PW_MOD_DT\=(CASE WHEN ISDATE('$$LAST_PW_MOD_DT$$')\=1 THEN (CASE WHEN ISNULL(LAST_PW_MOD_DT,CONVERT(DATETIME, '', 23))\='$$LAST_PW_MOD_DT$$' THEN LAST_PW_MOD_DT ELSE CONVERT(datetime,'$$LAST_PW_MOD_DT$$') END) ELSE LAST_PW_MOD_DT END)\nWHERE USERID\='$$USERID$$' ;\n\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n         ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\nELSE\nBEGIN\n/* 3.5 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$USERID$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
prop_Fn06B002_1=/* Last Version\tLast Updated by\t\tLast Updated Date   Comment； \n\tv2.2.3\t\t\tSteve\t\t\t\t20200720\t\t\t1. 以 COUNT(*) OVER() 方式解決 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2 段子查詢問題\n\tv2.2.3\t\t\tMin\t\t\t\t\t20200828\t\t\t1. 增加 @R1_CONDITION 註解說明\n\tv2.2.3\t\t\tSteve\t\t\t\t20201016\t\t\t1. 調整註解*/\n\nSELECT *\nFROM\n(\n    SELECT COUNT(*) OVER() AS totalProperty, \n           ROW_NUMBER() OVER(\n           ORDER BY GROUPID) AS RowNum, \n           GROUP_IDX, \n           GROUPID, \n           GROUPNAME, \n\t\t   CONCAT(GROUPID, ' - ', GROUPNAME) AS GROUP_ID_NAME,\n           GROUPDESC, \n           pos_level, \n           DEL_USER_COMPANY_ID,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT,\n\n           /*固定欄位必須輸出，不可移除 */\n\n           LAST_MOD_USER_COMPANY_ID,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           DEL_USER_ID,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           ADD_USER_COMPANY_ID,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT,\n\n           /*固定欄位必須輸出，不可移除 */\n\n           ADD_USER_ID,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           DATA_STATUS,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           COMPANY_ID,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           LAST_MOD_USER_ID,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT\n\n    /*固定欄位必須輸出，不可移除 */\n\n    FROM GROUPS WITH(NOLOCK)\n    WHERE(DATA_STATUS \= '$$DATA_STATUS$$'\n          OR '$$DATA_STATUS$$' \= 'ALL')\n\t\t  AND (\n\t\t\tGROUPID LIKE '%$$GROUPID$$%'\n\t\t\tOR 'ALL' \= '$$GROUPID$$'\n\t\t\t)\n\t\tAND (\n\t\t\tGROUPNAME LIKE '%$$GROUPNAME$$%'\n\t\t\tOR 'ALL' \= '$$GROUPNAME$$'\n\t\t\t)\n\n/* 當條件為數值時 */\n/* AND (COLUMN1 \= TRY_CONVERT(INT, NULLIF('$$COLUMN1$$','')) OR '$$COLUMN1$$' \= 'ALL') */\n/* 當條件為日期時 */\n/* AND (COLUMN1 \= TRY_CONVERT(DATETIME, NULLIF('$$COLUMN1$$','')) OR '$$COLUMN1$$' \= 'ALL') */\n/* 當條件為數值起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND不易除錯) */\n/* 請自行依 SA 規格書調整其大於、大於等於、小於、小於等於\n\t\t   AND (COLUMN1 >\= TRY_CONVERT(INT, NULLIF('$$START$$','')) OR '$$START$$' \= 'ALL')\n\t\t   AND (COLUMN1 <\= TRY_CONVERT(INT, NULLIF('$$END$$','')) OR '$$END$$'   \= 'ALL')\n\t\t*/\n/* 當條件為日期起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND不易除錯) */\n/* 請自行依 SA 規格書調整其大於、大於等於、小於、小於等於\n\t\t   AND (COLUMN1 >\= TRY_CONVERT(DATETIME, NULLIF('$$START$$','')) OR '$$START$$' \= 'ALL')\n\t\t   AND (COLUMN1 <\= TRY_CONVERT(DATETIME, NULLIF('$$END$$','')) OR '$$END$$'   \= 'ALL')\n\t\t*/\n\n) AS new1\nWHERE RowNum > $$start$$ AND RowNum <\= ($$start$$ + $$limit$$);
prop_Fn06B002_CUD=SELECT *\nFROM GROUPS\n\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tINSERT INTO GROUPS (\n\t\tDATA_STATUS\n\t\t,COMPANY_ID\n\t\t,GROUPID\n\t\t,GROUPNAME\n\t\t,GROUPDESC\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t)\n\tVALUES (\n\t\t'$$DATA_STATUS$$'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'$$GROUPID$$'\n\t\t,'$$GROUPNAME$$'\n\t\t,'$$GROUPDESC$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$COMPANY_ID$$'\n\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t);\n\n\t\tINSERT INTO DATA_CHANGE_LOG\n            (FUNC_ID, \n             PROC_TYPE, \n             USER_ID, \n             DATA_NO, \n             EVENT_DT, \n             MEMO, \n\t\t\t ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             SessionID, \n             ProcPK, \n             PROC_TARGET\n            )\n            VALUES\n            ('$$FunctionID$$', \n             'insert', \n             '${PARAM_SOURCE_COMING}', \n             IDENT_CURRENT('GROUPS') ,\n\n             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '$$MEMO$$', \n\t\t\t '${PARAM_SOURCE_COMING}', \n             '${PARAM_COMPANY}', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '${PARAM_SESSION_ID}', \n             '${LOGPK}', \n             'GROUPS'\n\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            );\nEND\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\tUPDATE GROUPS\n\t\tSET GROUPID \= '$$GROUPID$$'\n\t\t\t,GROUPNAME \= '$$GROUPNAME$$'\n\t\t\t,GROUPDESC \= '$$GROUPDESC$$'\n\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\tWHERE 1 \= 1\n\t\t\tAND GROUP_IDX \= '$$GROUP_IDX$$';\n\n\t\tINSERT INTO DATA_CHANGE_LOG\n            (FUNC_ID, \n             PROC_TYPE, \n             USER_ID, \n             DATA_NO, \n             EVENT_DT, \n             MEMO, \n\t\t\t ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             SessionID, \n             ProcPK, \n             PROC_TARGET\n            )\n            VALUES\n            ('$$FunctionID$$', \n             'update', \n             '${PARAM_SOURCE_COMING}', \n             '$$GROUP_IDX$$',\n\n             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '$$MEMO$$', \n\t\t\t '${PARAM_SOURCE_COMING}', \n             '${PARAM_COMPANY}', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '${PARAM_SESSION_ID}', \n             '${LOGPK}', \n             'GROUPS'\n\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            );\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN\n\t\t\tDELETE GROUPS\n\t\t\tWHERE GROUP_IDX \= '$$GROUP_IDX$$';\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG\n            (FUNC_ID, \n             PROC_TYPE, \n             USER_ID, \n             DATA_NO, \n             EVENT_DT, \n             MEMO, \n\t\t\t ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             SessionID, \n             ProcPK, \n             PROC_TARGET\n            )\n            VALUES\n            ('$$FunctionID$$', \n             'update', \n             '${PARAM_SOURCE_COMING}', \n             '$$GROUP_IDX$$',\n\n             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '$$MEMO$$', \n\t\t\t '${PARAM_SOURCE_COMING}', \n             '${PARAM_COMPANY}', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '${PARAM_SESSION_ID}', \n             '${LOGPK}', \n             'GROUPS'\n\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            );\n\n\t\tEND
prop_Fn06B003_1=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY GROUPID\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM VW_GROUPS\n\tWHERE 1 \= 1\n\tAND ('${PARAM_SOURCE_GROUPS_CODE}' \= 'Administrators') OR (GROUPID NOT IN ('Administrators'))\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY GROUPID\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,*\n\t\t\tFROM VW_GROUPS\n\t\t\tWHERE 1 \= 1\n\t\t\tAND ('${PARAM_SOURCE_GROUPS_CODE}' \= 'Administrators') OR (GROUPID NOT IN ('Administrators'))\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum <\= '$$limit$$'\n
prop_Fn06B003_2=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY USER_ID_NAME ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT USERNAME\n\t\t\t,USERID\n\t\t\t,CONCAT (\n\t\t\t\tUSERID\n\t\t\t\t,' '\n\t\t\t\t,USERNAME\n\t\t\t\t) AS USER_ID_NAME\n\t\tFROM USERS\n\t\tWHERE 1 \= 1\n\t\t\tAND (\n\t\t\t\tUSERID LIKE '%$$USERID$$%'\n\t\t\t\tOR 'ALL' \= '$$USERID$$'\n\t\t\t\t)\n\t\t\t/*20201229 增加GUEST排除*/\n\t\t\tAND (\n\t\t\t\t(\n\t\t\t\t\tUSERID NOT IN ('GUEST')\n\t\t\t\t\tAND '$$NO_GUEST$$' \= 'Y'\n\t\t\t\t\t)\n\t\t\t\tOR '$$NO_GUEST$$' \= 'N'\n\t\t\t\t)\n\t\t\t/*20201229 增加GUEST排除*/\n\t\t) AS A\n\t\t,(\n\t\t\tSELECT COUNT(*) AS totalProperty\n\t\t\tFROM (\n\t\t\t\tSELECT USERNAME\n\t\t\t\t\t,USERID\n\t\t\t\t\t,CONCAT (\n\t\t\t\t\t\tUSERID\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t,USERNAME\n\t\t\t\t\t\t) AS USER_ID_NAME\n\t\t\t\tFROM USERS\n\t\t\t\tWHERE 1 \= 1\n\t\t\t\t\tAND (\n\t\t\t\t\t\tUSERID LIKE '%$$USERID$$%'\n\t\t\t\t\t\tOR 'ALL' \= '$$USERID$$'\n\t\t\t\t\t\t)\n\t\t\t\t\t/*20201229 增加GUEST排除*/\n\t\t\t\t\tAND (\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tUSERID NOT IN ('GUEST')\n\t\t\t\t\t\t\tAND '$$NO_GUEST$$' \= 'Y'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\tOR '$$NO_GUEST$$' \= 'N'\n\t\t\t\t\t\t)\n\t\t\t\t\t/*20201229 增加GUEST排除*/\n\t\t\t\t) AS B\n\t\t\t) AS B\n\t) AS new1\nWHERE 1 \= 1\n\tAND RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)\n
prop_Fn06B003_3=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY GROUPID\n\t\t\t) AS RowNum\n\t\t,GROUPID\n\t\t,GROUPNAME\n\t\t,USERID\n\t\t,MAIN_SET\n\tFROM VW_USERGROUP\n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tGROUPID \= '$$GROUPID$$'\n\t\t\tOR 'ALL' \= '$$GROUPID$$'\n\t\t\t)\n\t\tAND (\n\t\t\tUSERID \= '$$USERID$$'\n\t\t\tOR 'ALL' \= '$$USERID$$'\n\t\t\t)\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY GROUPID\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,GROUPID\n\t\t\t\t,GROUPNAME\n\t\t\t\t,USERID\n\t\t\t\t,MAIN_SET\n\t\t\tFROM VW_USERGROUP\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND (\n\t\t\t\t\tGROUPID \= '$$GROUPID$$'\n\t\t\t\t\tOR 'ALL' \= '$$GROUPID$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tUSERID \= '$$USERID$$'\n\t\t\t\t\tOR 'ALL' \= '$$USERID$$'\n\t\t\t\t\t)\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum < \= '$$limit$$'\n
prop_Fn06B003_7=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY RN\n\t\t\t) AS RowNum\n\t\t,GROUPNAME\n\t\t,GROUPID\n\t\t,totalProperty\n\tFROM (\n\t\tSELECT '0' AS RN\n\t\t\t,'ALL' AS GROUPNAME\n\t\t\t,'ALL' AS GROUPID\n\t\t\n\t\tUNION\n\t\t\n\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\tORDER BY GROUPID\n\t\t\t\t) AS RN\n\t\t\t,GROUPNAME\n\t\t\t,GROUPID\n\t\tFROM VW_GROUPS\n\t\t) AS A\n\t\t,(\n\t\t\tSELECT COUNT(*) AS totalProperty\n\t\t\tFROM (\n\t\t\t\tSELECT '0' AS RN\n\t\t\t\t\t,'ALL' AS GROUPNAME\n\t\t\t\t\t,'ALL' AS GROUPID\n\t\t\t\t\n\t\t\t\tUNION ALL\n\t\t\t\t\n\t\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\t\tORDER BY GROUPID\n\t\t\t\t\t\t) AS RN\n\t\t\t\t\t,GROUPNAME\n\t\t\t\t\t,GROUPID\n\t\t\t\tFROM VW_GROUPS\n\t\t\t\t) AS B\n\t\t\t) AS B\n\t) AS new1\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum <\= '$$limit$$'\n
prop_Fn06B003_8=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY RN ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT *\n\t\tFROM (\n\t\t\tSELECT 0 AS 'RN'\n\t\t\t\t,'ALL' AS USERNAME\n\t\t\t\t,'ALL' AS USERID\n\t\t\t\t,'ALL' AS USER_ID_NAME\n\t\t\t\n\t\t\tUNION\n\t\t\t\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY USERID\n\t\t\t\t\t) AS 'RN'\n\t\t\t\t,USERNAME\n\t\t\t\t,USERID\n\t\t\t\t,CONCAT (\n\t\t\t\t\tUSERID\n\t\t\t\t\t,' '\n\t\t\t\t\t,USERNAME\n\t\t\t\t\t) AS USER_ID_NAME\n\t\t\tFROM USERS\n\t\t\t) A1\n\t\tWHERE (\n\t\t\t\tUSERID LIKE '%$$USER_ID_NAME$$%'\n\t\t\t\t/*20201229 增加GUEST排除*/\n\t\t\t\tAND (\n\t\t\t\t\t(\n\t\t\t\t\t\tUSERID NOT IN ('GUEST')\n\t\t\t\t\t\tAND '$$NO_GUEST$$' \= 'Y'\n\t\t\t\t\t\t)\n\t\t\t\t\tOR '$$NO_GUEST$$' \= 'N'\n\t\t\t\t\t)\n\t\t\t\t/*20201229 增加GUEST排除*/\n\t\t\t\tOR USERNAME LIKE '%$$USER_ID_NAME$$%'\n\t\t\t\tOR 'ALL' \= '$$USER_ID_NAME$$'\n\t\t\t\t)\n\t\t) AS A\n\t\t,(\n\t\t\tSELECT COUNT(*) AS totalProperty\n\t\t\tFROM (\n\t\t\t\tSELECT *\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT 0 AS 'RN'\n\t\t\t\t\t\t,'ALL' AS USERNAME\n\t\t\t\t\t\t,'ALL' AS USERID\n\t\t\t\t\t\t,'ALL' AS USER_ID_NAME\n\t\t\t\t\t\n\t\t\t\t\tUNION\n\t\t\t\t\t\n\t\t\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\t\t\tORDER BY USERNAME\n\t\t\t\t\t\t\t) AS 'RN'\n\t\t\t\t\t\t,USERNAME\n\t\t\t\t\t\t,USERID\n\t\t\t\t\t\t,CONCAT (\n\t\t\t\t\t\t\tUSERID\n\t\t\t\t\t\t\t,' '\n\t\t\t\t\t\t\t,USERNAME\n\t\t\t\t\t\t\t) AS USER_ID_NAME\n\t\t\t\t\tFROM USERS\n\t\t\t\t\t) B1\n\t\t\t\tWHERE (\n\t\t\t\t\t\tUSERID LIKE '%$$USER_ID_NAME$$%'\n\t\t\t\t\t\t/*20201229 增加GUEST排除*/\n\t\t\t\t\t\tAND (\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tUSERID NOT IN ('GUEST')\n\t\t\t\t\t\t\t\tAND '$$NO_GUEST$$' \= 'Y'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tOR '$$NO_GUEST$$' \= 'N'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t/*20201229 增加增加GUEST排除*/\n\t\t\t\t\t\tOR USERNAME LIKE '%$$USER_ID_NAME$$%'\n\t\t\t\t\t\tOR 'ALL' \= '$$USER_ID_NAME$$'\n\t\t\t\t\t\t)\n\t\t\t\t) AS B\n\t\t\t) AS B\n\t) AS new1\nWHERE 1 \= 1\n\tAND RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)\n
prop_Fn06B004_2=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY GROUPID\n\t\t\t) AS RowNum\n\t\t,GROUPNAME\n\t\t,GROUPID\n\tFROM VW_GROUPS\n\tWHERE 1 \= 1\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY GROUPID\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,GROUPNAME\n\t\t\t\t,GROUPID\n\t\t\tFROM VW_GROUPS\n\t\t\tWHERE 1 \= 1\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum <\= '$$limit$$'\n
prop_Fn06B006_1=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY MAP_USERID ASC\n\t\t\t) AS RowNum\n\t\t,PK_SYS_AGENT\n\t\t,AGENT_USERID\n\t\t,MAP_USERID\n\t\t,[START_DATE]\n\t\t,SUBSTRING(START_TIME, 0, 6) AS START_TIME\n\t\t,END_DATE\n\t\t,SUBSTRING(END_TIME, 0, 6) AS END_TIME\n\t\t,SET_AGENT_DESC\n\t\t,ADD_USER_ID\n\t\t,ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_DT\n\tFROM JH_SYS_AGENT\n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tAGENT_USERID \= '$$AGENT_USERID$$'\n\t\t\tOR 'ALL' \= '$$AGENT_USERID$$'\n\t\t\t)\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY MAP_USERID ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,PK_SYS_AGENT\n\t\t\t\t,AGENT_USERID\n\t\t\t\t,MAP_USERID\n\t\t\t\t,[START_DATE]\n\t\t\t\t,SUBSTRING(START_TIME, 0, 6) AS START_TIME\n\t\t\t\t,END_DATE\n\t\t\t\t,SUBSTRING(END_TIME, 0, 6) AS END_TIME\n\t\t\t\t,SET_AGENT_DESC\n\t\t\t\t,ADD_USER_ID\n\t\t\t\t,ADD_DT\n\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t,LAST_MOD_DT\n\t\t\tFROM JH_SYS_AGENT\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND (\n\t\t\t\t\tAGENT_USERID \= '$$AGENT_USERID$$'\n\t\t\t\t\tOR 'ALL' \= '$$AGENT_USERID$$'\n\t\t\t\t\t)\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum < \= '$$limit$$'\n
prop_Fn06B006_5=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY USERID\n\t\t\t) AS RowNum\n\t\t,USERID\n\t\t,USERNAME\n\t\t,totalProperty\n\tFROM (\n\t\tSELECT USERID AS USERID\n\t\t\t,USERID + ' ' + USERNAME AS USERNAME\n\t\tFROM USERS\n\t\t) A\n\t\t,(\n\t\t\tSELECT COUNT(*) AS totalProperty\n\t\t\tFROM (\n\t\t\t\tSELECT USERID\n\t\t\t\t\t,USERNAME\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT USERID AS USERID\n\t\t\t\t\t\t,USERID + ' ' + USERNAME AS USERNAME\n\t\t\t\t\tFROM USERS\n\t\t\t\t\t) AS B\n\t\t\t\t) AS B\n\t\t\t) AS B\n\t) AS new1\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum <\= '$$limit$$'\n
prop_Fn06C001_1=SELECT RowNum\n\t,DEPARTMENT_IDX\n\t,DEPARTNAME\n\t,DEP_ID_NAME\n\t,DEPID\n\t,DEPARTNAME AS FM_TEXT\n\t,totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY DEPID ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (SELECT DEPARTMENT_IDX, DEPID, DEPARTNAME, CONCAT(DEPID, ' - ', DEPARTNAME) AS DEP_ID_NAME FROM DEPARTMENT ) A\n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tDEPID LIKE '%$$DEPID$$%'\n\t\t\tOR 'ALL' \= '$$DEPID$$'\n\t\t\t)\n\t\tAND (\n\t\t\tDEPARTNAME LIKE '%$$DEPARTNAME$$%'\n\t\t\tOR 'ALL' \= '$$DEPARTNAME$$'\n\t\t\t)\n\t\tAND (\n\t\t\tDEP_ID_NAME LIKE '%$$DEP_ID_NAME$$%'\n\t\t\tOR 'ALL' \= '$$DEP_ID_NAME$$'\n\t\t\t)\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT *\n\t\t\tFROM (SELECT DEPARTMENT_IDX, DEPID, DEPARTNAME, CONCAT(DEPID, ' - ', DEPARTNAME) AS DEP_ID_NAME FROM DEPARTMENT ) A\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND (\n\t\t\t\t\tDEPID LIKE '%$$DEPID$$%'\n\t\t\t\t\tOR 'ALL' \= '$$DEPID$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tDEPARTNAME LIKE '%$$DEPARTNAME$$%'\n\t\t\t\t\tOR 'ALL' \= '$$DEPARTNAME$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tDEP_ID_NAME LIKE '%$$DEP_ID_NAME$$%'\n\t\t\t\t\tOR 'ALL' \= '$$DEP_ID_NAME$$'\n\t\t\t\t\t)\n\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);
prop_Fn06C001_CUD_ADD_TEST=/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Steve\n * Last Updated Date \:    20200512\n * 修正：\n *         1. DATA_STATUS 變數化\n *         2. DATA_CHANGE_LOG_ID 位置移至最前\n */\nBEGIN TRY\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n\tBEGIN\n\t\t/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t\tINSERT INTO DEPARTMENT_TEST /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tDEPARTNAME\n\t\t\t,DEPID\n\t\t\t,ADD_DT\n\t\t\t,COMPANY_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$DEPARTNAME$$'\n\t\t\t,'$$DEPID$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DATA_STATUS$$'\n\t\t\t);\n\n\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'insert'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('DEPARTMENT_TEST')\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'DEPARTMENT_TEST'\n\t\t\t);\n\n\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t/*\nINSERT INTO LOG_DEPARTMENT_TEST  /* WITH (ROWLOCK) */ \n         ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID \n          ,CRUD_STATE \n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n           )\nVALUES(\n          IDENT_CURRENT('DATA_CHANGE_LOG')\n          ,'${PARAM_FUNC_ID}'\n          ,'C'\n          ,IDENT_CURRENT('DEPARTMENT_TEST')\n          ,'$$DEPARTNAME$$'\n          ,'$$DEPID$$'\n          ,CONVERT(VARCHAR(20), GETDATE(), 120)\n          ,'$$COMPANY_ID$$'\n          ,'${PARAM_COMPANY}'\n          ,'${PARAM_SOURCE_COMING}'\n          ,'$$DATA_STATUS$$'\n          );\n          */\n\t\t/* 1.4 Action Return */\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,IDENT_CURRENT('DEPARTMENT_TEST')\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n/*\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\tBEGIN\n\t\t/* 2.1 DATA_CHANGE_LOG */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$FunctionID$$'\n\t\t\t,'delete'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DEPARTMENT_IDX$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'DEPARTMENT_TEST'\n\t\t\t);\n\n\t\tIF EXISTS (\n\t\t\t\tSELECT *\n\t\t\t\tFROM DEPARTMENT_TEST WITH (NOLOCK)\n\t\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t)\n\t\tBEGIN\n\t\t\t/*\n/* 2.2 DATA Detail LOG (before modified) */\n   INSERT INTO LOG_DEPARTMENT_TEST /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n     FROM DEPARTMENT_TEST  WITH (NOLOCK)\n   WHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n   */\n\t\t\t/* 2.3 功能主要異動 Table */\n\t\t\tDELETE DEPARTMENT_TEST\n\t\t\tWITH (ROWLOCK)\n\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n\n\t\t\t/* 2.4 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'0'\n\t\t\t\t,'SUCCESS'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'D'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\t\tELSE\n\t\tBEGIN\n\t\t\t/* 2.5 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,'資料正在審核流程中，無法刪除'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'D'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\tEND\n\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\t/* 3.1 DATA_CHANGE_LOG */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DEPARTMENT_IDX$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'DEPARTMENT_TEST'\n\t\t\t);\n\n\t\tIF EXISTS (\n\t\t\t\tSELECT *\n\t\t\t\tFROM DEPARTMENT_TEST WITH (NOLOCK)\n\t\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t)\n\t\tBEGIN\n\t\t\t/* 3.2 DATA Detail LOG (before modified) */\n\t\t\t/*\n   INSERT INTO LOG_DEPARTMENT_TEST /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n     FROM DEPARTMENT_TEST WITH (NOLOCK)\n   WHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n*/\n\t\t\t/* 3.3 功能主要異動 Table */\n\t\t\tUPDATE DEPARTMENT_TEST\n\t\t\tWITH (ROWLOCK)\n\n\t\t\tSET DEPARTNAME \= (CASE WHEN SUBSTRING('$$DEPARTNAME$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50) THEN DEPARTNAME ELSE SUBSTRING('$$DEPARTNAME$$', 1, 50) END)\n\t\t\t\t,DEPID \= (CASE WHEN SUBSTRING('$$DEPID$$', 1, 20) \= SUBSTRING('\#NO_DATA\#', 1, 20) THEN DEPID ELSE SUBSTRING('$$DEPID$$', 1, 20) END)\n\t\t\t\t,COMPANY_ID \= (CASE WHEN SUBSTRING('$$COMPANY_ID$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$', 1, 50) END)\n\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t,DATA_STATUS \= (CASE WHEN SUBSTRING('$$DATA_STATUS$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1) THEN DATA_STATUS ELSE SUBSTRING('$$DATA_STATUS$$', 1, 1) END)\n\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n\n\t\t\t/* 3.4 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'0'\n\t\t\t\t,'SUCCESS'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'U'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\t\tELSE\n\t\tBEGIN\n\t\t\t/* 3.5 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'U'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\n\tEND\n*/\n\tSELECT @RETURN_CODE \= RETURN_CODE\n\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\tFROM MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\tFOR JSON AUTO\n\t\t\t)\n\tFROM MEM_API_RESULT\n\tWHERE hashValues \= @FROM_OUTSIDE\nEND TRY\n\nBEGIN CATCH\n\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t,'$$DEPARTMENT_IDX$$' AS DATA_UNIQUE_KEY\n\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t) AS A /* WITH (ROWLOCK) */\n\t\t\tFOR JSON AUTO\n\t\t\t)\nEND CATCH
prop_Fn06C001_CUD_DEL_TEST=/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Steve\n * Last Updated Date \:    20200512\n * 修正：\n *         1. DATA_STATUS 變數化\n *         2. DATA_CHANGE_LOG_ID 位置移至最前\n */\nBEGIN TRY\n/*\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n\tBEGIN\n\t\t/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t\tINSERT INTO DEPARTMENT_TEST /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tDEPARTNAME\n\t\t\t,DEPID\n\t\t\t,ADD_DT\n\t\t\t,COMPANY_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$DEPARTNAME$$'\n\t\t\t,'$$DEPID$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DATA_STATUS$$'\n\t\t\t);\n\n\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'insert'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('DEPARTMENT_TEST')\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'DEPARTMENT_TEST'\n\t\t\t);\n\n\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t/*\nINSERT INTO LOG_DEPARTMENT_TEST  /* WITH (ROWLOCK) */ \n         ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID \n          ,CRUD_STATE \n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n           )\nVALUES(\n          IDENT_CURRENT('DATA_CHANGE_LOG')\n          ,'${PARAM_FUNC_ID}'\n          ,'C'\n          ,IDENT_CURRENT('DEPARTMENT_TEST')\n          ,'$$DEPARTNAME$$'\n          ,'$$DEPID$$'\n          ,CONVERT(VARCHAR(20), GETDATE(), 120)\n          ,'$$COMPANY_ID$$'\n          ,'${PARAM_COMPANY}'\n          ,'${PARAM_SOURCE_COMING}'\n          ,'$$DATA_STATUS$$'\n          );\n          */\n\t\t/* 1.4 Action Return */\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,IDENT_CURRENT('DEPARTMENT_TEST')\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n*/\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\tBEGIN\n\t\t/* 2.1 DATA_CHANGE_LOG */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$FunctionID$$'\n\t\t\t,'delete'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DEPARTMENT_IDX$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'DEPARTMENT_TEST'\n\t\t\t);\n\n\t\tIF EXISTS (\n\t\t\t\tSELECT *\n\t\t\t\tFROM DEPARTMENT_TEST WITH (NOLOCK)\n\t\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t)\n\t\tBEGIN\n\t\t\t/*\n/* 2.2 DATA Detail LOG (before modified) */\n   INSERT INTO LOG_DEPARTMENT_TEST /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n     FROM DEPARTMENT_TEST  WITH (NOLOCK)\n   WHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n   */\n\t\t\t/* 2.3 功能主要異動 Table */\n\t\t\tDELETE DEPARTMENT_TEST\n\t\t\tWITH (ROWLOCK)\n\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n\n\t\t\t/* 2.4 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'0'\n\t\t\t\t,'SUCCESS'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'D'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\t\tELSE\n\t\tBEGIN\n\t\t\t/* 2.5 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,'資料正在審核流程中，無法刪除'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'D'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\tEND\n/*\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\t/* 3.1 DATA_CHANGE_LOG */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DEPARTMENT_IDX$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'DEPARTMENT_TEST'\n\t\t\t);\n\n\t\tIF EXISTS (\n\t\t\t\tSELECT *\n\t\t\t\tFROM DEPARTMENT_TEST WITH (NOLOCK)\n\t\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t)\n\t\tBEGIN\n\t\t\t/* 3.2 DATA Detail LOG (before modified) */\n\t\t\t/*\n   INSERT INTO LOG_DEPARTMENT_TEST /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n     FROM DEPARTMENT_TEST WITH (NOLOCK)\n   WHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n*/\n\t\t\t/* 3.3 功能主要異動 Table */\n\t\t\tUPDATE DEPARTMENT_TEST\n\t\t\tWITH (ROWLOCK)\n\n\t\t\tSET DEPARTNAME \= (CASE WHEN SUBSTRING('$$DEPARTNAME$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50) THEN DEPARTNAME ELSE SUBSTRING('$$DEPARTNAME$$', 1, 50) END)\n\t\t\t\t,DEPID \= (CASE WHEN SUBSTRING('$$DEPID$$', 1, 20) \= SUBSTRING('\#NO_DATA\#', 1, 20) THEN DEPID ELSE SUBSTRING('$$DEPID$$', 1, 20) END)\n\t\t\t\t,COMPANY_ID \= (CASE WHEN SUBSTRING('$$COMPANY_ID$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$', 1, 50) END)\n\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t,DATA_STATUS \= (CASE WHEN SUBSTRING('$$DATA_STATUS$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1) THEN DATA_STATUS ELSE SUBSTRING('$$DATA_STATUS$$', 1, 1) END)\n\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n\n\t\t\t/* 3.4 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'0'\n\t\t\t\t,'SUCCESS'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'U'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\t\tELSE\n\t\tBEGIN\n\t\t\t/* 3.5 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'U'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\tEND\n*/\n\tSELECT @RETURN_CODE \= RETURN_CODE\n\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\tFROM MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\tFOR JSON AUTO\n\t\t\t)\n\tFROM MEM_API_RESULT\n\tWHERE hashValues \= @FROM_OUTSIDE\nEND TRY\n\nBEGIN CATCH\n\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t,'$$DEPARTMENT_IDX$$' AS DATA_UNIQUE_KEY\n\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t) AS A /* WITH (ROWLOCK) */\n\t\t\tFOR JSON AUTO\n\t\t\t)\nEND CATCH
prop_Fn06C001_CUD_MOD_TEST=/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Steve\n * Last Updated Date \:    20200512\n * 修正：\n *         1. DATA_STATUS 變數化\n *         2. DATA_CHANGE_LOG_ID 位置移至最前\n */\nBEGIN TRY\n/*\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n\tBEGIN\n\t\t/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t\tINSERT INTO DEPARTMENT_TEST /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tDEPARTNAME\n\t\t\t,DEPID\n\t\t\t,ADD_DT\n\t\t\t,COMPANY_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$DEPARTNAME$$'\n\t\t\t,'$$DEPID$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DATA_STATUS$$'\n\t\t\t);\n\n\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'insert'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('DEPARTMENT_TEST')\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'DEPARTMENT_TEST'\n\t\t\t);\n\n\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t/*\nINSERT INTO LOG_DEPARTMENT_TEST  /* WITH (ROWLOCK) */ \n         ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID \n          ,CRUD_STATE \n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n           )\nVALUES(\n          IDENT_CURRENT('DATA_CHANGE_LOG')\n          ,'${PARAM_FUNC_ID}'\n          ,'C'\n          ,IDENT_CURRENT('DEPARTMENT_TEST')\n          ,'$$DEPARTNAME$$'\n          ,'$$DEPID$$'\n          ,CONVERT(VARCHAR(20), GETDATE(), 120)\n          ,'$$COMPANY_ID$$'\n          ,'${PARAM_COMPANY}'\n          ,'${PARAM_SOURCE_COMING}'\n          ,'$$DATA_STATUS$$'\n          );\n          */\n\t\t/* 1.4 Action Return */\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,IDENT_CURRENT('DEPARTMENT_TEST')\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\tBEGIN\n\t\t/* 2.1 DATA_CHANGE_LOG */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$FunctionID$$'\n\t\t\t,'delete'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DEPARTMENT_IDX$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'DEPARTMENT_TEST'\n\t\t\t);\n\n\t\tIF EXISTS (\n\t\t\t\tSELECT *\n\t\t\t\tFROM DEPARTMENT_TEST WITH (NOLOCK)\n\t\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t)\n\t\tBEGIN\n\t\t\t/*\n/* 2.2 DATA Detail LOG (before modified) */\n   INSERT INTO LOG_DEPARTMENT_TEST /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n     FROM DEPARTMENT_TEST  WITH (NOLOCK)\n   WHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n   */\n\t\t\t/* 2.3 功能主要異動 Table */\n\t\t\tDELETE DEPARTMENT_TEST\n\t\t\tWITH (ROWLOCK)\n\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n\n\t\t\t/* 2.4 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'0'\n\t\t\t\t,'SUCCESS'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'D'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\t\tELSE\n\t\tBEGIN\n\t\t\t/* 2.5 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,'資料正在審核流程中，無法刪除'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'D'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\tEND\n*/\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\t/* 3.1 DATA_CHANGE_LOG */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DEPARTMENT_IDX$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'DEPARTMENT_TEST'\n\t\t\t);\n\n\t\tIF EXISTS (\n\t\t\t\tSELECT *\n\t\t\t\tFROM DEPARTMENT_TEST WITH (NOLOCK)\n\t\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t)\n\t\tBEGIN\n\t\t\t/* 3.2 DATA Detail LOG (before modified) */\n\t\t\t/*\n   INSERT INTO LOG_DEPARTMENT_TEST /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n     FROM DEPARTMENT_TEST WITH (NOLOCK)\n   WHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n*/\n\t\t\t/* 3.3 功能主要異動 Table */\n\t\t\tUPDATE DEPARTMENT_TEST\n\t\t\tWITH (ROWLOCK)\n\n\t\t\tSET DEPARTNAME \= (CASE WHEN SUBSTRING('$$DEPARTNAME$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50) THEN DEPARTNAME ELSE SUBSTRING('$$DEPARTNAME$$', 1, 50) END)\n\t\t\t\t,DEPID \= (CASE WHEN SUBSTRING('$$DEPID$$', 1, 20) \= SUBSTRING('\#NO_DATA\#', 1, 20) THEN DEPID ELSE SUBSTRING('$$DEPID$$', 1, 20) END)\n\t\t\t\t,COMPANY_ID \= (CASE WHEN SUBSTRING('$$COMPANY_ID$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$', 1, 50) END)\n\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t,DATA_STATUS \= (CASE WHEN SUBSTRING('$$DATA_STATUS$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1) THEN DATA_STATUS ELSE SUBSTRING('$$DATA_STATUS$$', 1, 1) END)\n\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n\n\t\t\t/* 3.4 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'0'\n\t\t\t\t,'SUCCESS'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'U'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\t\tELSE\n\t\tBEGIN\n\t\t\t/* 3.5 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'U'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\tEND\n\n\tSELECT @RETURN_CODE \= RETURN_CODE\n\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\tFROM MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\tFOR JSON AUTO\n\t\t\t)\n\tFROM MEM_API_RESULT\n\tWHERE hashValues \= @FROM_OUTSIDE\nEND TRY\n\nBEGIN CATCH\n\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t,'$$DEPARTMENT_IDX$$' AS DATA_UNIQUE_KEY\n\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t) AS A /* WITH (ROWLOCK) */\n\t\t\tFOR JSON AUTO\n\t\t\t)\nEND CATCH
prop_Fn06C001_CUD_TEST=/**\n * Last SVN Version \:    v2.2\n * Last Updated by \:    Steve\n * Last Updated Date \:    20200512\n * 修正：\n *         1. DATA_STATUS 變數化\n *         2. DATA_CHANGE_LOG_ID 位置移至最前\n */\nBEGIN TRY\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n\tBEGIN\n\t\t/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t\tINSERT INTO DEPARTMENT_TEST /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tDEPARTNAME\n\t\t\t,DEPID\n\t\t\t,ADD_DT\n\t\t\t,COMPANY_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_USER_ID\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$DEPARTNAME$$'\n\t\t\t,'$$DEPID$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DATA_STATUS$$'\n\t\t\t);\n\n\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'insert'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('DEPARTMENT_TEST')\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'DEPARTMENT_TEST'\n\t\t\t);\n\n\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t/*\nINSERT INTO LOG_DEPARTMENT_TEST  /* WITH (ROWLOCK) */ \n         ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID \n          ,CRUD_STATE \n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,ADD_DT\n          ,COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n           )\nVALUES(\n          IDENT_CURRENT('DATA_CHANGE_LOG')\n          ,'${PARAM_FUNC_ID}'\n          ,'C'\n          ,IDENT_CURRENT('DEPARTMENT_TEST')\n          ,'$$DEPARTNAME$$'\n          ,'$$DEPID$$'\n          ,CONVERT(VARCHAR(20), GETDATE(), 120)\n          ,'$$COMPANY_ID$$'\n          ,'${PARAM_COMPANY}'\n          ,'${PARAM_SOURCE_COMING}'\n          ,'$$DATA_STATUS$$'\n          );\n          */\n\t\t/* 1.4 Action Return */\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,IDENT_CURRENT('DEPARTMENT_TEST')\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\tBEGIN\n\t\t/* 2.1 DATA_CHANGE_LOG */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$FunctionID$$'\n\t\t\t,'delete'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DEPARTMENT_IDX$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'DEPARTMENT_TEST'\n\t\t\t);\n\n\t\tIF EXISTS (\n\t\t\t\tSELECT *\n\t\t\t\tFROM DEPARTMENT_TEST WITH (NOLOCK)\n\t\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t)\n\t\tBEGIN\n\t\t\t/*\n/* 2.2 DATA Detail LOG (before modified) */\n   INSERT INTO LOG_DEPARTMENT_TEST /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n     FROM DEPARTMENT_TEST  WITH (NOLOCK)\n   WHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n   */\n\t\t\t/* 2.3 功能主要異動 Table */\n\t\t\tDELETE DEPARTMENT_TEST\n\t\t\tWITH (ROWLOCK)\n\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n\n\t\t\t/* 2.4 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'0'\n\t\t\t\t,'SUCCESS'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'D'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\t\tELSE\n\t\tBEGIN\n\t\t\t/* 2.5 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,'資料正在審核流程中，無法刪除'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'D'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\tEND\n\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\t/* 3.1 DATA_CHANGE_LOG */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$FunctionID$$'\n\t\t\t,'update'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$DEPARTMENT_IDX$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'DEPARTMENT_TEST'\n\t\t\t);\n\n\t\tIF EXISTS (\n\t\t\t\tSELECT *\n\t\t\t\tFROM DEPARTMENT_TEST WITH (NOLOCK)\n\t\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$' AND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t)\n\t\tBEGIN\n\t\t\t/* 3.2 DATA Detail LOG (before modified) */\n\t\t\t/*\n   INSERT INTO LOG_DEPARTMENT_TEST /* WITH (ROWLOCK) */\n        ( DATA_CHANGE_LOG_ID\n          ,FUNC_ID\n          ,CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n          )\n   SELECT IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n          ,'$$FunctionID$$' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,DEPARTMENT_IDX\n          ,DEPARTNAME\n          ,DEPID\n          ,DEL_DT\n          ,ADD_DT\n          ,DEL_USER_COMPANY_ID\n          ,DEL_USER_ID\n          ,COMPANY_ID\n          ,LAST_MOD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DATA_STATUS\n     FROM DEPARTMENT_TEST WITH (NOLOCK)\n   WHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n*/\n\t\t\t/* 3.3 功能主要異動 Table */\n\t\t\tUPDATE DEPARTMENT_TEST\n\t\t\tWITH (ROWLOCK)\n\n\t\t\tSET DEPARTNAME \= (CASE WHEN SUBSTRING('$$DEPARTNAME$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50) THEN DEPARTNAME ELSE SUBSTRING('$$DEPARTNAME$$', 1, 50) END)\n\t\t\t\t,DEPID \= (CASE WHEN SUBSTRING('$$DEPID$$', 1, 20) \= SUBSTRING('\#NO_DATA\#', 1, 20) THEN DEPID ELSE SUBSTRING('$$DEPID$$', 1, 20) END)\n\t\t\t\t,COMPANY_ID \= (CASE WHEN SUBSTRING('$$COMPANY_ID$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$', 1, 50) END)\n\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t,DATA_STATUS \= (CASE WHEN SUBSTRING('$$DATA_STATUS$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1) THEN DATA_STATUS ELSE SUBSTRING('$$DATA_STATUS$$', 1, 1) END)\n\t\t\tWHERE DEPARTMENT_IDX \= '$$DEPARTMENT_IDX$$';\n\n\t\t\t/* 3.4 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'0'\n\t\t\t\t,'SUCCESS'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'U'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\t\tELSE\n\t\tBEGIN\n\t\t\t/* 3.5 Action Return */\n\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\t\t(\n\t\t\t\tProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'${LOGPK}'\n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t\t,'$$DEPARTMENT_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'U'\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t);\n\t\tEND\n\tEND\n\n\tSELECT @RETURN_CODE \= RETURN_CODE\n\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\tFROM MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\tFOR JSON AUTO\n\t\t\t)\n\tFROM MEM_API_RESULT\n\tWHERE hashValues \= @FROM_OUTSIDE\nEND TRY\n\nBEGIN CATCH\n\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t,'$$DEPARTMENT_IDX$$' AS DATA_UNIQUE_KEY\n\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t) AS A /* WITH (ROWLOCK) */\n\t\t\tFOR JSON AUTO\n\t\t\t)\nEND CATCH
prop_Fn06C001_TEST=SELECT *\n ,(\n  SELECT COUNT(*)\n  FROM DEPARTMENT_TEST WITH (NOLOCK)\n  WHERE (DATA_STATUS \= '$$DATA_STATUS$$'\n   OR '$$DATA_STATUS$$' \= 'ALL')\n   AND (DEPARTNAME LIKE '%$$DEPARTNAME$$%'\n   OR '$$DEPARTNAME$$' \= 'ALL')\n   AND (DEPID LIKE '$$DEPID$$%'\n   OR '$$DEPID$$' \= 'ALL')\n   ) AS totalProperty\nFROM (\nSELECT ROW_NUMBER() OVER (\n   ORDER BY DEPARTMENT_IDX ) AS RowNum\n,DEPARTMENT_IDX\n,DEPARTNAME\n,DEPID\n,DEL_DT\n,ADD_DT\n,DEL_USER_COMPANY_ID\n,DEL_USER_ID\n,COMPANY_ID\n,LAST_MOD_DT\n,LAST_MOD_USER_ID\n,LAST_MOD_USER_COMPANY_ID\n,ADD_USER_COMPANY_ID\n,ADD_USER_ID\n,DATA_STATUS\nFROM DEPARTMENT_TEST WITH (NOLOCK)\nWHERE (\n   DATA_STATUS \= '$$DATA_STATUS$$'\n   OR '$$DATA_STATUS$$' \= 'ALL')\n   AND (DEPARTNAME LIKE '%$$DEPARTNAME$$%'\n   OR '$$DEPARTNAME$$' \= 'ALL')\n   AND (DEPID LIKE '$$DEPID$$%'\n   OR '$$DEPID$$' \= 'ALL')\n   ) AS new1\nWHERE RowNum > $$start$$\n AND RowNum <\= ($$start$$ + $$limit$$);\n
prop_Fn06D001_17=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY RN ASC\n\t\t\t) AS RowNum\n\t\t,FILE_TYPE\n\t\t,FILE_TYPE_NAME\n\t\t,CLASS_NAME\n\t\t,totalProperty\n\tFROM (\n\t\tSELECT '0' AS RN\n\t\t\t,'ALL' AS FILE_TYPE\n\t\t\t,'ALL' AS FILE_TYPE_NAME\n\t\t\t,'ALL' AS CLASS_NAME\n\t\t\n\t\tUNION ALL\n\t\t\n\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\tORDER BY FILE_TYPE ASC\n\t\t\t\t) AS RN\n\t\t\t,CAST(FILE_TYPE AS VARCHAR) AS FILE_TYPE\n\t\t\t,CAST(FILE_TYPE AS VARCHAR(100)) + ' ' + FILE_TYPE_NAME AS FILE_TYPE_NAME\n\t\t\t,CLASS_NAME\n\t\tFROM VW_JOB_TYPE\n\t\tWHERE 1 \= 1\n\t\t) AS A\n\t\t,(\n\t\t\tSELECT COUNT(*) AS totalProperty\n\t\t\tFROM (\n\t\t\t\tSELECT '0' AS RN\n\t\t\t\t\t,'ALL' AS FILE_TYPE\n\t\t\t\t\t,'ALL' AS FILE_TYPE_NAME\n\t\t\t\t\t,'ALL' AS CLASS_NAME\n\t\t\t\t\n\t\t\t\tUNION ALL\n\t\t\t\t\n\t\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\t\tORDER BY FILE_TYPE ASC\n\t\t\t\t\t\t) AS RN\n\t\t\t\t\t,CAST(FILE_TYPE AS VARCHAR) AS FILE_TYPE\n\t\t\t\t\t,CAST(FILE_TYPE AS VARCHAR(100)) + ' ' + FILE_TYPE_NAME AS FILE_TYPE_NAME\n\t\t\t\t\t,CLASS_NAME\n\t\t\t\tFROM VW_JOB_TYPE\n\t\t\t\tWHERE 1 \= 1\n\t\t\t\t) AS B\n\t\t\t) AS B\n\t) AS new1\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum < \= '$$limit$$'\n
prop_Fn06D001_1=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY FILE_TYPE ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT CAST(FILE_TYPE AS VARCHAR) AS FILE_TYPE\n\t\t\t,CAST(FILE_TYPE AS VARCHAR(100)) + ' ' + FILE_TYPE_NAME AS FILE_TYPE_NAME\n\t\t\t,CLASS_NAME\n\t\tFROM VW_JOB_TYPE\n\t\t) AS A\n\t\t,(\n\t\t\tSELECT COUNT(*) AS totalProperty\n\t\t\tFROM (\n\t\t\t\tSELECT CAST(FILE_TYPE AS VARCHAR) AS FILE_TYPE\n\t\t\t\t\t,CAST(FILE_TYPE AS VARCHAR(100)) + ' ' + FILE_TYPE_NAME AS FILE_TYPE_NAME\n\t\t\t\t\t,CLASS_NAME\n\t\t\t\tFROM VW_JOB_TYPE\n\t\t\t\t) AS B\n\t\t\t) AS B\n\t) AS new1\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum < \= '$$limit$$'\n
prop_Fn06D001_2=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM JOB_REG\n\t\tWHERE (\n\t\t\t\tJOB_ID LIKE ('%$$JOB_ID$$%')\n\t\t\t\tOR ('ALL' \= '$$JOB_ID$$')\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tJOB_NAME LIKE ('%$$JOB_NAME$$%')\n\t\t\t\tOR ('ALL' \= '$$JOB_NAME$$')\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tFILE_TYPE \= '$$FILE_TYPE$$'\n\t\t\t\tOR 'ALL' \= '$$FILE_TYPE$$'\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY JOB_ID\n\t\t\t) AS RowNum\n\t\t,JOB_ID\n\t\t,COMPANY_ID\n\t\t,JOB_NAME\n\t\t,JOB_DESC\n\t\t,ACT_FILE_PATH\n\t\t,ACT_EXEC_TARGET\n\t\t,ISNULL(FILE_TYPE, '') AS 'FILE_TYPE'\n\t\t,ISNULL(DATA_SOURCE, '') AS 'DATA_SOURCE'\n\t\t,ISNULL(UPLOAD_FROM, '') AS 'UPLOAD_FROM'\n\t\t,ISNULL(UPLOAD_FILE_TYPE, '') AS 'UPLOAD_FILE_TYPE'\n\t\t,ISNULL(LOG_LV, '') AS 'LOG_LV'\n\t\t,ISNULL(EXE_REPEAT, '') AS 'EXE_REPEAT'\n\t\t,ISNULL(EXE_PAUSE, '') AS 'EXE_PAUSE'\n\t\t,ISNULL(PK_PROP, '') AS 'PK_PROP'\n\t\t,ISNULL(ORDER_SEQ, '') AS 'ORDER_SEQ'\n\tFROM JOB_REG\n\tWHERE (\n\t\t\tJOB_ID LIKE ('%$$JOB_ID$$%')\n\t\t\tOR ('ALL' \= '$$JOB_ID$$')\n\t\t\t)\n\t\tAND (\n\t\t\tJOB_NAME LIKE ('%$$JOB_NAME$$%')\n\t\t\tOR ('ALL' \= '$$JOB_NAME$$')\n\t\t\t)\n\t\tAND (\n\t\t\tFILE_TYPE \= '$$FILE_TYPE$$'\n\t\t\tOR 'ALL' \= '$$FILE_TYPE$$'\n\t\t\t)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
prop_Fn06D001_6=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM VW_JOB_PARAM\n\t\tWHERE JOB_ID \= '$$JOB_ID$$'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY JOB_PARAM_ID\n\t\t\t) AS RowNum\n\t\t,JOB_PARAM_ID\n\t\t,PARAM_KEY\n\t\t,ISNULL(PARAM_VAL, '') AS 'PARAM_VAL'\n\t\t,PARAM_TYPE\n\t\t,FIELD_TYPE\n\t\t,IO_TYPE\n\tFROM VW_JOB_PARAM\n\tWHERE JOB_ID \= '$$JOB_ID$$'\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + 5);\n
prop_Fn06D001_7=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY JOB_FOLDER_ID ASC\n\t\t\t) AS RowNum\n\t\t,JOB_FOLDER_ID\n\t\t,COMPANY_ID\n\t\t,JOB_ID\n\t\t,UPLOAD_PATH\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,LAST_MOD_USER_ID\n\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t,LAST_MOD_DT\n\t\t,DEL_USER_ID\n\t\t,DEL_USER_COMPANY_ID\n\t\t,DEL_DT\n\t\t,DATA_STATUS\n\tFROM JOB_FOLDER_DEFINE\n\tWHERE 1 \= 1\n\t\tAND JOB_ID \= '$$JOB_ID$$'\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY JOB_FOLDER_ID ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,JOB_FOLDER_ID\n\t\t\t\t,COMPANY_ID\n\t\t\t\t,JOB_ID\n\t\t\t\t,UPLOAD_PATH\n\t\t\t\t,ADD_USER_ID\n\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t,ADD_DT\n\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t,LAST_MOD_DT\n\t\t\t\t,DEL_USER_ID\n\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t,DEL_DT\n\t\t\t\t,DATA_STATUS\n\t\t\tFROM JOB_FOLDER_DEFINE\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND JOB_ID \= '$$JOB_ID$$'\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum <\= '$$limit$$'\n
prop_Fn06D001_8=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM VW_JOB_PDI_INFO\n\t\tWHERE JOB_ID \= '$$JOB_ID$$'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY JOB_INFO_ID\n\t\t\t) AS RowNum\n\t\t,JOB_INFO_ID\n\t\t,FILE_PATH\n\t\t,NEW_FILE_NAME\n\t\t,ADD_DT\n\t\t,ACTIVE\n\tFROM VW_JOB_PDI_INFO\n\tWHERE JOB_ID \= '$$JOB_ID$$'\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);\n
prop_Fn06D001_CUD=IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\tINSERT INTO JOB_REG (\n\t\tDATA_STATUS\n\t\t,COMPANY_ID\n\t\t,JOB_NAME\n\t\t,JOB_DESC\n\t\t,FILE_TYPE\n\t\t,DATA_SOURCE\n\t\t,PK_PROP\n\t\t,LOG_LV\n\t\t,EXE_PAUSE\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t)\n\tVALUES (\n\t\t'$$DATA_STATUS$$'\n\t\t,'$$COMPANY_ID$$'\n\t\t,'$$JOB_NAME$$'\n\t\t,'$$JOB_DESC$$'\n\t\t,'$$FILE_TYPE$$'\n\t\t,'$$DATA_SOURCE$$'\n\t\t,'$$PK_PROP$$'\n\t\t,'$$LOG_LV$$'\n\t\t,'$$EXE_PAUSE$$'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$COMPANY_ID$$'\n\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t);\nEND\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\tBEGIN\n\t\tUPDATE JOB_REG\n\t\tSET DATA_SOURCE \= '$$DATA_SOURCE$$'\n\t\t\t,EXE_PAUSE \= '$$EXE_PAUSE$$'\n\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\tWHERE JOB_ID \= '$$JOB_ID$$';\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN\n\t\t\tDELETE JOB_REG\n\t\t\tWHERE JOB_ID \= '$$JOB_ID$$';\n\n\t\t\tDELETE JOB_PARAM\n\t\t\tWHERE JOB_ID \= '$$JOB_ID$$';\n\t\tEND\n\t\tELSE\n\t\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_ADD'\n\t\t\tBEGIN\n\t\t\t\tIF '$$JOB_ID$$' \= ''\n\t\t\t\tBEGIN\n\t\t\t\t\tINSERT INTO JOB_PARAM (\n\t\t\t\t\t\tCOMPANY_ID\n\t\t\t\t\t\t,JOB_ID\n\t\t\t\t\t\t,PARAM_TYPE\n\t\t\t\t\t\t,PARAM_KEY\n\t\t\t\t\t\t,PARAM_VAL\n\t\t\t\t\t\t,FIELD_TYPE\n\t\t\t\t\t\t,IO_TYPE\n\t\t\t\t\t\t,PARAM_VAL_METHOD\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES (\n\t\t\t\t\t\t'$$COMPANY_ID$$'\n\t\t\t\t\t\t,(\n\t\t\t\t\t\t\tSELECT JOB_ID\n\t\t\t\t\t\t\tFROM JOB_REG\n\t\t\t\t\t\t\tWHERE JOB_ID \= IDENT_CURRENT('JOB_REG')\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t,'$$PARAM_TYPE$$'\n\t\t\t\t\t\t,'$$PARAM_KEY$$'\n\t\t\t\t\t\t,'$$PARAM_VAL$$'\n\t\t\t\t\t\t,'$$FIELD_TYPE$$'\n\t\t\t\t\t\t,'$$IO_TYPE$$'\n\t\t\t\t\t\t,'$$PARAM_VAL_METHOD$$'\n\t\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t\t,'$$COMPANY_ID$$'\n\t\t\t\t\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t\t\t\t\t);\n\t\t\t\tEND\n\t\t\t\tELSE\n\t\t\t\t\tIF '$$JOB_ID$$' \!\= ''\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tINSERT INTO JOB_PARAM (\n\t\t\t\t\t\t\tCOMPANY_ID\n\t\t\t\t\t\t\t,JOB_ID\n\t\t\t\t\t\t\t,PARAM_TYPE\n\t\t\t\t\t\t\t,PARAM_KEY\n\t\t\t\t\t\t\t,PARAM_VAL\n\t\t\t\t\t\t\t,FIELD_TYPE\n\t\t\t\t\t\t\t,IO_TYPE\n\t\t\t\t\t\t\t,PARAM_VAL_METHOD\n\t\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\tVALUES (\n\t\t\t\t\t\t\t'$$COMPANY_ID$$'\n\t\t\t\t\t\t\t,'$$JOB_ID$$'\n\t\t\t\t\t\t\t,'$$PARAM_TYPE$$'\n\t\t\t\t\t\t\t,'$$PARAM_KEY$$'\n\t\t\t\t\t\t\t,'$$PARAM_VAL$$'\n\t\t\t\t\t\t\t,'$$FIELD_TYPE$$'\n\t\t\t\t\t\t\t,'$$IO_TYPE$$'\n\t\t\t\t\t\t\t,'$$PARAM_VAL_METHOD$$'\n\t\t\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t\t\t,'$$COMPANY_ID$$'\n\t\t\t\t\t\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t\t\t\t\t\t);\n\t\t\t\t\tEND\n\t\t\tEND\n\t\t\tELSE\n\t\t\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_MOD'\n\t\t\t\tBEGIN\n\t\t\t\t\tUPDATE JOB_PARAM\n\t\t\t\t\tSET PARAM_TYPE \= '$$PARAM_TYPE$$'\n\t\t\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t\t\t\tWHERE JOB_PARAM_ID \= '$$JOB_PARAM_ID$$';\n\t\t\t\tEND\n\t\t\t\tELSE\n\t\t\t\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_DEL'\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tDELETE JOB_PARAM\n\t\t\t\t\t\tWHERE JOB_PARAM_ID \= '$$JOB_PARAM_ID$$';\n\t\t\t\t\tEND\n
prop_Fn06E001_11=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY JOB_ID ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM VW_PARENT_JOB_REG_UI\n\tWHERE 1 \= 1\n\t\tAND FLOW_ID \= '$$FLOW_ID$$'\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY JOB_ID ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,*\n\t\t\tFROM VW_PARENT_JOB_REG_UI\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND FLOW_ID \= '$$FLOW_ID$$'\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum <\= '$$limit$$'\n
prop_Fn06E001_12=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY VIRTUAL_TAG_IDX ASC\n\t\t\t) AS RowNum\n\t\t,VIRTUAL_TAG\n\t\t,VIRTUAL_TAG + ' ' + VIRTUAL_DESC AS VIRTUAL_DESC\n\tFROM FLOW_SPEC_TAG\n\tWHERE 1 \= 1\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY VIRTUAL_TAG_IDX ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,VIRTUAL_TAG\n\t\t\t\t,VIRTUAL_TAG + ' ' + VIRTUAL_DESC AS VIRTUAL_DESC\n\t\t\tFROM FLOW_SPEC_TAG\n\t\t\tWHERE 1 \= 1\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum <\= '$$limit$$'\n
prop_Fn06E001_1=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY FLOW_ID ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM JOB_FLOW_MASTER\n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tFLOW_ID LIKE ('%$$FLOW_ID$$%')\n\t\t\tOR 'ALL' LIKE ('%$$FLOW_ID$$%')\n\t\t\t)\n\t\tAND (\n\t\t\tFLOW_NAME \= '$$FLOW_NAME$$'\n\t\t\tOR 'ALL' \= '$$FLOW_NAME$$'\n\t\t\t)\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY FLOW_ID ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,*\n\t\t\tFROM JOB_FLOW_MASTER\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND (\n\t\t\t\t\tFLOW_ID LIKE ('%$$FLOW_ID$$%')\n\t\t\t\t\tOR 'ALL' LIKE ('%$$FLOW_ID$$%')\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tFLOW_NAME \= '$$FLOW_NAME$$'\n\t\t\t\t\tOR 'ALL' \= '$$FLOW_NAME$$'\n\t\t\t\t\t)\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum <\= '$$limit$$'\n
prop_Fn06E001_2=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY FLOW_ID ASC\n\t\t\t\t,JOB_LV ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM VW_JOB_FLOW\n\tWHERE 1 \= 1\n\t\tAND CAST(FLOW_ID AS VARCHAR) \= '$$FLOW_ID$$'\n\t\tOR '$$FLOW_ID$$' \= 'ALL'\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY FLOW_ID ASC\n\t\t\t\t\t\t,JOB_LV ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,*\n\t\t\tFROM VW_JOB_FLOW\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND CAST(FLOW_ID AS VARCHAR) \= '$$FLOW_ID$$'\n\t\t\t\tOR '$$FLOW_ID$$' \= 'ALL'\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum <\= '$$limit$$'\n
prop_Fn06E001_6=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY JOB_ID ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM VW_JOB_REG_UI\n\tWHERE 1 \= 1\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY JOB_ID ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,*\n\t\t\tFROM VW_JOB_REG_UI\n\t\t\tWHERE 1 \= 1\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum <\= '$$limit$$'\n
prop_Fn06F001_1=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY SCHDL_ID ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM SCHDL_MASTER\n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tSCHDL_CODE LIKE ('%$$SCHDL_CODE$$%')\n\t\t\tOR 'ALL' \= '$$SCHDL_CODE$$'\n\t\t\t)\n\t\tAND (\n\t\t\tSCHDL_NAME LIKE ('%$$SCHDL_NAME$$%')\n\t\t\tOR 'ALL' \= '$$SCHDL_NAME$$'\n\t\t\t)\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY SCHDL_ID ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,*\n\t\t\tFROM SCHDL_MASTER\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND (\n\t\t\t\t\tSCHDL_CODE LIKE ('%$$SCHDL_CODE$$%')\n\t\t\t\t\tOR 'ALL' \= '$$SCHDL_CODE$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tSCHDL_NAME LIKE ('%$$SCHDL_NAME$$%')\n\t\t\t\t\tOR 'ALL' \= '$$SCHDL_NAME$$'\n\t\t\t\t\t)\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum <\= '$$limit$$'\n
prop_Fn06F001_2=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY SCHDL_FLOW_ID ASC\n\t\t\t) AS RowNum\n\t\t,A.SCHDL_FLOW_ID\n\t\t,A.SCHDL_ID\n\t\t,B.FLOW_ID\n\t\t,CAST(B.FLOW_ID AS VARCHAR(10)) + ' ' + B.FLOW_NAME AS FLOW_ID_NAME\n\t\t,A.COMPANY_ID\n\t\t,A.ADD_USER_ID\n\t\t,A.ADD_USER_COMPANY_ID\n\t\t,A.ADD_DT\n\t\t,A.LAST_MOD_USER_ID\n\t\t,A.LAST_MOD_USER_COMPANY_ID\n\t\t,A.LAST_MOD_DT\n\t\t,A.DEL_USER_ID\n\t\t,A.DEL_USER_COMPANY_ID\n\t\t,A.DEL_DT\n\t\t,A.DATA_STATUS\n\tFROM SCHDL_FLOW A\n\tLEFT JOIN JOB_FLOW_MASTER B ON A.FLOW_ID \= B.FLOW_ID\n\tWHERE A.SCHDL_ID \= '$$SCHDL_ID$$'\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY SCHDL_FLOW_ID ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,A.SCHDL_FLOW_ID\n\t\t\t\t,A.SCHDL_ID\n\t\t\t\t,B.FLOW_ID\n\t\t\t\t,CAST(B.FLOW_ID AS VARCHAR(10)) + ' ' + B.FLOW_NAME AS FLOW_ID_NAME\n\t\t\t\t,A.COMPANY_ID\n\t\t\t\t,A.ADD_USER_ID\n\t\t\t\t,A.ADD_USER_COMPANY_ID\n\t\t\t\t,A.ADD_DT\n\t\t\t\t,A.LAST_MOD_USER_ID\n\t\t\t\t,A.LAST_MOD_USER_COMPANY_ID\n\t\t\t\t,A.LAST_MOD_DT\n\t\t\t\t,A.DEL_USER_ID\n\t\t\t\t,A.DEL_USER_COMPANY_ID\n\t\t\t\t,A.DEL_DT\n\t\t\t\t,A.DATA_STATUS\n\t\t\tFROM SCHDL_FLOW A\n\t\t\tLEFT JOIN JOB_FLOW_MASTER B ON A.FLOW_ID \= B.FLOW_ID\n\t\t\tWHERE A.SCHDL_ID \= '$$SCHDL_ID$$'\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n
prop_Fn06F001_3=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY FLOW_ID ASC\n\t\t\t) AS RowNum\n\t\t,FLOW_ID\n\t\t,CAST(FLOW_ID AS VARCHAR(100)) + ' ' + FLOW_NAME AS FLOW_NAME\n\tFROM JOB_FLOW_MASTER\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY FLOW_ID ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,FLOW_ID\n\t\t\t\t,CAST(FLOW_ID AS VARCHAR(100)) + ' ' + FLOW_NAME AS FLOW_NAME\n\t\t\tFROM JOB_FLOW_MASTER\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum <\= '$$limit$$'\n
prop_Fn06F001_4=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY SCHDL_SEQ ASC\n\t\t\t) AS RowNum\n\t\t,SCHDL_SEQ\n\t\t,SCHDL_SEQ_DESC\n\tFROM SCHDL_SEQ\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY SCHDL_SEQ ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,SCHDL_SEQ\n\t\t\t\t,SCHDL_SEQ_DESC\n\t\t\tFROM SCHDL_SEQ\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum < \= '$$limit$$'\n
prop_Fn06G001_1=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY MAPDATA_TYPE ASC\n\t\t\t) AS RowNum\n\t\t,MAPDATA_TYPE\n\t\t,MAPDATA_DESC\n\tFROM JH_REF_DEP_MAPDATA_MASTER\n\tWHERE 1 \= 1\n\t\tAND IS_MAINTAINABLE \= 'Y'\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY MAPDATA_TYPE ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,MAPDATA_TYPE\n\t\t\t\t,MAPDATA_DESC\n\t\t\tFROM JH_REF_DEP_MAPDATA_MASTER\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND IS_MAINTAINABLE \= 'Y'\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum < \= '$$limit$$'\n
prop_Fn06G001_2=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY JOB_NAME ASC\n\t\t\t) AS RowNum\n\t\t,JOB_ID\n\t\t,JOB_NAME\n\tFROM (\n\t\tSELECT DISTINCT J.JOB_ID\n\t\t\t,J.JOB_NAME\n\t\tFROM JH_REF_DEP_MAPDATA_MASTER M\n\t\tINNER JOIN JH_REF_DEP_MAPDATA_DETAIL D ON M.MAPDATA_TYPE \= D.MAPDATA_TYPE\n\t\tINNER JOIN JOB_REG AS J ON D.MAP_KEY \= J.JOB_ID\n\t\tWHERE 1 \= 1\n\t\t\tAND M.IS_MAINTAINABLE \= 'Y'\n\t\t\tAND (\n\t\t\t\tM.MAPDATA_TYPE \= '$$MAPDATA_TYPE$$'\n\t\t\t\tOR 'ALL' \= '$$MAPDATA_TYPE$$'\n\t\t\t\t)\n\t\t) AS A\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY JOB_NAME ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,JOB_ID\n\t\t\t\t,JOB_NAME\n\t\t\tFROM (\n\t\t\t\tSELECT DISTINCT J.JOB_ID\n\t\t\t\t\t,J.JOB_NAME\n\t\t\t\tFROM JH_REF_DEP_MAPDATA_MASTER M\n\t\t\t\tINNER JOIN JH_REF_DEP_MAPDATA_DETAIL D ON M.MAPDATA_TYPE \= D.MAPDATA_TYPE\n\t\t\t\tINNER JOIN JOB_REG AS J ON D.MAP_KEY \= J.JOB_ID\n\t\t\t\tWHERE 1 \= 1\n\t\t\t\t\tAND M.IS_MAINTAINABLE \= 'Y'\n\t\t\t\t\tAND (\n\t\t\t\t\t\tM.MAPDATA_TYPE \= '$$MAPDATA_TYPE$$'\n\t\t\t\t\t\tOR 'ALL' \= '$$MAPDATA_TYPE$$'\n\t\t\t\t\t\t)\n\t\t\t\t) AS B\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum < \= '$$limit$$'\n
prop_Fn06G001_3=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY D.MAP_DEPID\n\t\t\t) AS RowNum\n\t\t,M.MAPDATA_TYPE\n\t\t,M.MAPDATA_DESC\n\t\t,D.MAP_KEY\n\t\t,j.JOB_NAME\n\t\t,D.MAP_DEPID\n\t\t,DEP.DEPARTNAME\n\t\t,(\n\t\t\tCASE \n\t\t\t\tWHEN D.OWN_FLAG \= 'N'\n\t\t\t\t\tTHEN ''\n\t\t\t\tELSE D.OWN_FLAG\n\t\t\t\tEND\n\t\t\t) AS OWN_FLAG\n\tFROM JH_REF_DEP_MAPDATA_MASTER M\n\tINNER JOIN JH_REF_DEP_MAPDATA_DETAIL D ON M.MAPDATA_TYPE \= D.MAPDATA_TYPE\n\tINNER JOIN JOB_REG J ON D.MAP_KEY \= J.JOB_ID\n\tLEFT OUTER JOIN DEPARTMENT DEP ON D.MAP_DEPID \= DEP.DEPID\n\tWHERE 1 \= 1\n\t\tAND M.IS_MAINTAINABLE \= 'Y'\n\t\tAND (\n\t\t\tM.MAPDATA_TYPE \= '$$MAPDATA_TYPE$$'\n\t\t\tOR 'ALL' \= '$$MAPDATA_TYPE$$'\n\t\t\t)\n\t\tAND (\n\t\t\tJOB_ID \= '$$JOB_ID$$'\n\t\t\tOR 'ALL' \= '$$JOB_ID$$'\n\t\t\t)\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY D.MAP_DEPID\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,M.MAPDATA_TYPE\n\t\t\t\t,M.MAPDATA_DESC\n\t\t\t\t,D.MAP_KEY\n\t\t\t\t,j.JOB_NAME\n\t\t\t\t,D.MAP_DEPID\n\t\t\t\t,DEP.DEPARTNAME\n\t\t\t\t,(\n\t\t\t\t\tCASE \n\t\t\t\t\t\tWHEN D.OWN_FLAG \= 'N'\n\t\t\t\t\t\t\tTHEN ''\n\t\t\t\t\t\tELSE D.OWN_FLAG\n\t\t\t\t\t\tEND\n\t\t\t\t\t) AS OWN_FLAG\n\t\t\tFROM JH_REF_DEP_MAPDATA_MASTER M\n\t\t\tINNER JOIN JH_REF_DEP_MAPDATA_DETAIL D ON M.MAPDATA_TYPE \= D.MAPDATA_TYPE\n\t\t\tINNER JOIN JOB_REG J ON D.MAP_KEY \= J.JOB_ID\n\t\t\tLEFT OUTER JOIN DEPARTMENT DEP ON D.MAP_DEPID \= DEP.DEPID\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND M.IS_MAINTAINABLE \= 'Y'\n\t\t\t\tAND (\n\t\t\t\t\tM.MAPDATA_TYPE \= '$$MAPDATA_TYPE$$'\n\t\t\t\t\tOR 'ALL' \= '$$MAPDATA_TYPE$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tJOB_ID \= '$$JOB_ID$$'\n\t\t\t\t\tOR 'ALL' \= '$$JOB_ID$$'\n\t\t\t\t\t)\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > '$$start$$'\n\tAND RowNum < \= '$$limit$$'\n
prop_Fn2A002_1=\ SELECT * FROM ( SELECT ROW_NUMBER() OVER ( ORDER BY RN ASC) AS RowNum ,CODE_VALUE ,CODE_VALUE_DESC ,totalProperty FROM ( SELECT '0' AS RN, 'ALL' AS CODE_VALUE, 'ALL' AS CODE_VALUE_DESC UNION ALL SELECT ROW_NUMBER() OVER ( ORDER BY CODE_VALUE ASC) AS RN, CODE_VALUE, CODE_VALUE + '_' + CODE_VALUE_DESC AS 'CODE_VALUE_DESC' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE\='RGNO' ) AS A, (SELECT COUNT(*) AS totalProperty FROM ( SELECT '0' AS RN, 'ALL' AS CODE_VALUE, 'ALL' AS CODE_VALUE_DESC UNION ALL SELECT ROW_NUMBER() OVER ( ORDER BY CODE_VALUE ASC) AS RN, CODE_VALUE, CODE_VALUE + '_' + CODE_VALUE_DESC AS 'CODE_VALUE_DESC' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE\='RGNO' ) AS B) AS B ) AS new1 WHERE 1\=1 AND RowNum > '$$cmp01' AND RowNum <\='$$cmp02'
prop_Fn2A002_2=\ SELECT * FROM ( SELECT ROW_NUMBER() OVER ( ORDER BY BRNO ASC) AS RowNum, * FROM ( SELECT BRNO, BRNAME, RGNO+'_'+D.CODE_VALUE_DESC AS RGNO_DESC, RGNO FROM JH_REF_BRANCH AS M LEFT JOIN (SELECT CODE_VALUE, CODE_VALUE_DESC FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE \= 'RGNO' ) AS D ON M.RGNO \= D.CODE_VALUE WHERE 1 \= 1 AND (BRNO \= '$$cmp01' OR 'ALL' \= '$$cmp01') AND (BRNAME \= '$$cmp02' OR 'ALL' \= '$$cmp02') AND (RGNO \= '$$cmp03' OR 'ALL' \= '$$cmp03') ) AS A, (SELECT COUNT(*) AS totalProperty FROM (SELECT BRNO, BRNAME, RGNO+'_'+D.CODE_VALUE_DESC AS RGNO_DESC, RGNO FROM JH_REF_BRANCH AS M LEFT JOIN (SELECT CODE_VALUE, CODE_VALUE_DESC FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE \= 'RGNO' ) AS D ON M.RGNO \= D.CODE_VALUE WHERE 1 \= 1 AND (BRNO \= '$$cmp01' OR 'ALL' \= '$$cmp01') AND (BRNAME \= '$$cmp02' OR 'ALL' \= '$$cmp02') AND (RGNO \= '$$cmp03' OR 'ALL' \= '$$cmp03') ) AS B) AS B ) AS new1 WHERE 1\=1 AND RowNum > '$$cmp04' AND RowNum <\= '$$cmp05'
prop_Fn2A002_3=SELECT * FROM (SELECT ROW_NUMBER() OVER ( ORDER BY RN ASC) AS RowNum, CODE_VALUE, CODE_VALUE_DESC, totalProperty FROM ( SELECT ROW_NUMBER() OVER ( ORDER BY CODE_VALUE ASC) AS RN, CODE_VALUE, CODE_VALUE + '_' + CODE_VALUE_DESC AS 'CODE_VALUE_DESC' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE\='RGNO' ) AS A, (SELECT COUNT(*) AS totalProperty FROM (SELECT ROW_NUMBER() OVER ( ORDER BY CODE_VALUE ASC) AS RN, CODE_VALUE, CODE_VALUE + '_' + CODE_VALUE_DESC AS 'CODE_VALUE_DESC' FROM JH_REF_CODE_DETAIL WHERE CODE_TYPE\='RGNO' ) AS B) AS B ) AS new1 WHERE 1\=1 AND RowNum > '$$cmp01' AND RowNum <\='$$cmp02'
PWD_CHECK=SELECT * FROM USERS WHERE USERID \= $$cmp01 AND PASSWORD \= $$cmp02
REPORT_FN08A0061=PLUGINS/BUILD_REPORT/BUILD_REPORT_MAIN.kjb
REPORT_TEST1=PLUGINS/BUILD_REPORT/BUILD_REPORT_MAIN.kjb
samtest=sss
SCHDL_ERROR=BEGIN\n\nDECLARE @RETURN_CODE INT, @RETURN_MSG VARCHAR(1000), @SP_RETURN_CODE INT, @SP_RETURN_MSG NVARCHAR(1000)  /**/\n \nSET QUOTED_IDENTIFIER OFF\nEXEC [ESSP_GEN_NOTICE_MAIL_FOR_SCHDL] @MAIL_TYPE \= N'$$MAIL_TYPE$$', @SUB_TYPE \= N'$$SUB_TYPE$$', @GROUPID \= N'$$GROUPID$$', @CC_GROUPID \= N'$$CC_GROUPID$$', \n@PARAM_SUBJECT \= N'$$PARAM_SUBJECT$$', @PARAM_SCHDL_GROUP \= N'$$PARAM_SCHDL_GROUP$$', @PARAM_SCHDL_ID \= N'$$PARAM_SCHDL_ID$$', @PARAM_SCHDL_PK \= N'$$PARAM_SCHDL_PK$$', @RETURN_CODE \= @RETURN_CODE OUTPUT, @RETURN_MSG \= @RETURN_MSG OUTPUT\nSET QUOTED_IDENTIFIER ON\n\nIF (@RETURN_CODE <> 0)  BEGIN\n\tRAISERROR (@RETURN_MSG, 16, 1)  END\n\tEND
SCHDL_SUCCEED=BEGIN\n\nDECLARE @RETURN_CODE INT, @RETURN_MSG VARCHAR(1000), @SP_RETURN_CODE INT, @SP_RETURN_MSG NVARCHAR(1000)  /**/\n \nSET QUOTED_IDENTIFIER OFF\nEXEC [ESSP_GEN_NOTICE_MAIL_FOR_SCHDL] @MAIL_TYPE \= N'$$MAIL_TYPE$$', @SUB_TYPE \= N'$$SUB_TYPE$$', @GROUPID \= N'$$GROUPID$$', @CC_GROUPID \= N'$$CC_GROUPID$$', \n@PARAM_SUBJECT \= N'$$PARAM_SUBJECT$$', @PARAM_SCHDL_GROUP \= N'$$PARAM_SCHDL_GROUP$$', @PARAM_SCHDL_ID \= N'$$PARAM_SCHDL_ID$$', @PARAM_SCHDL_PK \= N'$$PARAM_SCHDL_PK$$', @RETURN_CODE \= @RETURN_CODE OUTPUT, @RETURN_MSG \= @RETURN_MSG OUTPUT\nSET QUOTED_IDENTIFIER ON\n\nIF (@RETURN_CODE <> 0)  BEGIN\n\tRAISERROR (@RETURN_MSG, 16, 1)  END\n\tEND
SIGNON_AUDITLIST_DS=/* Last Updated Date\: 2020/05/20\nUpdated by Noli\n修正原因\: 1. 因天數顯示不正確, 數字型態要轉為字串, 前台顯示小數位數時才不會四捨五入 issue \#586\n功能：取得假單待審核清單*/\n\nSELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM DAYOFF_APPLY_DETAIL DAD\n\t INNER JOIN USERS UR\n\t ON UR.USERID \= DAD.USERID\n\t LEFT JOIN USERS PD\n\t ON PD.USERID \= DAD.AGREE_ID\n\t INNER JOIN JH_SIGNON SI\n\t ON DAD.DAYOFF_SEQ \= SI.DAYOFF_SEQ\n\t AND SI.DAYOFF_SECODE \= 'S'\n\t INNER JOIN USERS USR\n\t ON USR.USERID \= SI.AUDIT_USERID\n\t INNER JOIN DAYOFFCLASS DAF\n\t ON DAF.DAYOFF_ID \= SI.WORK_STATUS\n\t AND (DAD.DAYOFF_SEQ \= '$$DAYOFF_SEQ$$'\t\t\t\t\t--假單編號\n\t OR '$$DAYOFF_SEQ$$' \= 'ALL')\n\t AND (SI.WORK_STATUS \= '$$WORK_STATUS$$'\t\t\t\t--假別代碼\n\t  OR ('$$WORK_STATUS$$' \= 'ALL_EXCEPT_ON'\n\t AND SI.WORK_STATUS <> 'ON'))\n\t AND (( '$$TAKELEAVE_STATUS$$'\='C'\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.24 MODIFIED\n\t\t\tAND ISNULL(SI.TAKELEAVE_STATUS,'') \= '$$TAKELEAVE_STATUS$$'\t\t    \t--2020.04.06 ADDED --假單狀態\n\t\t   )\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t OR\t (ISNULL(SI.TAKELEAVE_STATUS,'') \='$$TAKELEAVE_STATUS$$'\t\t\t\t--2020.04.06 ADDED\n\t\t\t  AND (SELECT COUNT(*)\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t\t FROM JH_SIGNON TEMPA\t\t\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t    INNER JOIN JH_SIGNON TEMPB\t\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t\t  ON TEMPA.DAYOFF_SEQ \= TEMPB.DAYOFF_SEQ\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t     AND ISNULL(TEMPB.TAKELEAVE_STATUS,'') \= 'C'\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t   WHERE TEMPA.DAYOFF_SEQ \= SI.DAYOFF_SEQ\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t\t AND ISNULL(TEMPA.TAKELEAVE_STATUS,'') \= '$$TAKELEAVE_STATUS$$'\t--2020.04.06 ADDED\n\t\t\t\t\t AND TEMPA.DAYOFF_SECODE \= 'S'\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t\t AND TEMPB.DAYOFF_SECODE \= 'S')\=0\t\t\t\t\t\t\t\t--2020.04.06 ADDED --搜尋除了已撤銷以外的假單狀態時，要挑沒有撤銷過的\n\t\t\t  )\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t )\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t AND (DAD.APPLY_DATE \= CONVERT(date,'$$APPLY_DATE$$')\t--假單申請日期\n\t  OR '$$APPLY_DATE$$' \= 'ALL')\n\t AND (DAD.START_DATE \= CONVERT(date,'$$START_DATE$$')\t--假單開始日期\n\t  OR '$$START_DATE$$' \= 'ALL')\n\t AND (DAD.START_TIME \= '$$START_TIME$$'\t\t\t\t\t--假單開始時間\n\t  OR '$$START_TIME$$' \= 'ALL')\n\t AND (DAD.END_DATE \= CONVERT(date,'$$END_DATE$$')\t\t--假單結束日期\n\t  OR '$$END_DATE$$' \= 'ALL')\n     AND (DAD.END_TIME \= '$$END_TIME$$'\t\t\t\t\t\t--假單結束時間\n\t  OR '$$END_TIME$$' \= 'ALL')\n\t AND (DAD.USERID \= '$$USERID$$'\t\t\t\t\t\t\t--假單申請人員\n\t  OR '$$USERID$$' \= 'ALL')\n     AND (SI.AUDIT_USERID \= '$$AUDIT_USERID$$'\t\t\t\t--假單審核人員\n\t  OR '$$AUDIT_USERID$$' \= 'ALL')\t\t\t\t\t\n\t AND (DAD.AGREE_ID \= '$$AGREE_ID$$'\t\t\t\t\t\t--假單放行/退回人員\n\t  OR '$$AGREE_ID$$' \= 'ALL')\n\t AND (CONVERT(date,DAD.AGREE_TIME,111) \= CONVERT(date,'$$AGREE_TIME$$',111)\t--假單放行/退回日期\n\t\tOR '$$AGREE_TIME$$' \= 'ALL')\n\t AND datepart(year,START_DATE) >\= datepart(year, getdate())\t\t--假單僅顯示今年和隔年的資料\n\t AND datepart(year,START_DATE) <\= datepart(year, getdate())+1) A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY DAD.PK_DAD) AS RowNum,\t--2020.05.07 MODIFIED\n\t\t  DAD.PK_DAD,\t\t\t\t--2020.04.08 ADDED\n\t\t  DAD.DAYOFF_SEQ,\t\t\t--假單編號\n\t\t  DAF.DAYOFF_NAME,\t\t\t--假別名稱\n\t\t  UR.USERID,\t\t\t\t--申請人 2020.04.08 ADDED\n\t\t  UR.USERNAME,\t\t\t\t--申請人 2020.04.06 MODIFIED\n\t\t  DAD.APPLY_DATE,\t\t\t--假單申請日\n\t\t  DAD.START_DATE,\t\t\t--假單開始日\n\t\t  DAD.START_TIME,\t\t\t--假單開始時間\n\t\t  DAD.END_DATE,\t\t\t\t--假單結束日\n\t\t  DAD.END_TIME,\t\t\t\t--假單結束時間\n\t\t  CONVERT(VARCHAR,DAD.TOTAL_DAYS) AS TOTAL_DAYS,\t\t--請假天數\t--2020.05.20 MODIFIED (轉VARCHAR)\n\t\t  USR.USERID AS AUDITOR_ID,\t--審核人ID\t2020.04.06 ADDED\n\t\t  USR.USERNAME AS AUDITOR_NAME,\t--審核人 2020.04.06 MODIFIED\n\t\t  SI.TAKELEAVE_STATUS,\t\t--2020.04.01 ADDED\n\t\t  (CASE WHEN '$$TAKELEAVE_STATUS$$' IN ('Y','N','C')\t\t--2020.04.07 MODIFIED\n\t\t\t\tTHEN PD.USERNAME\n\t\t\t\tWHEN '$$TAKELEAVE_STATUS$$' \= 'W'\n\t\t\t\tTHEN ''\n\t\t\t\tEND) AS AGREE_NAME,\n\t\t  (CASE WHEN '$$TAKELEAVE_STATUS$$' IN ('Y','N','C')\t\t--2020.04.07 MODIFIED\n\t\t\t\tTHEN DAD.AGREE_TIME\n\t\t\t\tWHEN '$$TAKELEAVE_STATUS$$' \= 'W'\n\t\t\t\tTHEN ''\n\t\t\t\tEND) AS AGREE_TIME,\n\t\t  (CASE WHEN SI.DATA_STATUS \= '1'\n\t\t\t\tTHEN '待撤銷'\n\t\t\t\tWHEN ISNULL(SI.TAKELEAVE_STATUS,'') \= 'Y'\t--2020.04.24 MODIFIED\n\t\t\t\tTHEN '已通過'\n\t\t\t\tWHEN ISNULL(SI.TAKELEAVE_STATUS,'') \= 'W'\t--2020.04.24 MODIFIED\n\t\t\t\tTHEN '待審核'\n\t\t\t\tWHEN ISNULL(SI.TAKELEAVE_STATUS,'') \= 'N'\t--2020.04.24 MODIFIED\n\t\t\t\tTHEN '已退回'\n\t\t\t\tWHEN ISNULL(SI.TAKELEAVE_STATUS,'') \= 'C'\t--2020.04.24 MODIFIED\n\t\t\t\tTHEN '已撤銷'\n\t\t\t\tELSE '' END) AS TAKELEAVE_CSTATUS\t--假單狀態中文名稱 --2020.04.09 MODIFIED\n\t\t  ,SI.DATA_STATUS --固定欄位必需取出\t\t--2020.04.09 MODIFIED 改取JH_SIGNON的DATA_STATUS\n\t\t  ,DAD.ADD_USER_ID --固定欄位必需取出\n\t\t  ,DAD.ADD_USER_COMPANY_ID --固定欄位必需取出\n\t\t  ,DAD.ADD_DT --固定欄位必需取出\n\t\t  ,DAD.LAST_MOD_USER_ID --固定欄位必需取出\n\t\t  ,DAD.LAST_MOD_USER_COMPANY_ID --固定欄位必需取出\n\t\t  ,DAD.LAST_MOD_DT --固定欄位必需取出\n\t\t  ,DAD.DEL_USER_ID --固定欄位必需取出\n\t\t  ,DAD.DEL_USER_COMPANY_ID --固定欄位必需取出\n\t\t  ,DAD.DEL_DT --固定欄位必需取出\n     FROM DAYOFF_APPLY_DETAIL DAD\n\t INNER JOIN USERS UR\n\t ON UR.USERID \= DAD.USERID\n\t LEFT JOIN USERS PD\n\t ON PD.USERID \= DAD.AGREE_ID\n\t INNER JOIN JH_SIGNON SI\n\t ON DAD.DAYOFF_SEQ \= SI.DAYOFF_SEQ\n\t AND SI.DAYOFF_SECODE \= 'S'\n\t INNER JOIN USERS USR\n\t ON USR.USERID \= SI.AUDIT_USERID\n\t INNER JOIN DAYOFFCLASS DAF\n\t ON DAF.DAYOFF_ID \= SI.WORK_STATUS\n\t AND (DAD.DAYOFF_SEQ \= '$$DAYOFF_SEQ$$'\t\t\t\t\t--假單編號\n\t OR '$$DAYOFF_SEQ$$' \= 'ALL')\n\t AND (SI.WORK_STATUS \= '$$WORK_STATUS$$'\t\t\t\t--假別代碼\n\t  OR ('$$WORK_STATUS$$' \= 'ALL_EXCEPT_ON'\n\t AND SI.WORK_STATUS <> 'ON'))\n\t AND (( '$$TAKELEAVE_STATUS$$'\='C'\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.24 MODIFIED\n\t\t\tAND ISNULL(SI.TAKELEAVE_STATUS,'') \= '$$TAKELEAVE_STATUS$$'\t\t    \t--2020.04.06 ADDED --假單狀態\n\t\t   )\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t OR\t (ISNULL(SI.TAKELEAVE_STATUS,'') \='$$TAKELEAVE_STATUS$$'\t\t\t\t--2020.04.06 ADDED\n\t\t\t  AND (SELECT COUNT(*)\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t\t FROM JH_SIGNON TEMPA\t\t\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t    INNER JOIN JH_SIGNON TEMPB\t\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t\t  ON TEMPA.DAYOFF_SEQ \= TEMPB.DAYOFF_SEQ\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t     AND ISNULL(TEMPB.TAKELEAVE_STATUS,'') \= 'C'\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t   WHERE TEMPA.DAYOFF_SEQ \= SI.DAYOFF_SEQ\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t\t AND ISNULL(TEMPA.TAKELEAVE_STATUS,'') \= '$$TAKELEAVE_STATUS$$'\t--2020.04.06 ADDED\n\t\t\t\t\t AND TEMPA.DAYOFF_SECODE \= 'S'\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t\t AND TEMPB.DAYOFF_SECODE \= 'S')\=0\t\t\t\t\t\t\t\t--2020.04.06 ADDED --搜尋除了已撤銷以外的假單狀態時，要挑沒有撤銷過的\n\t\t\t  )\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t )\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t AND (DAD.APPLY_DATE \= CONVERT(date,'$$APPLY_DATE$$')\t--假單申請日期\n\t  OR '$$APPLY_DATE$$' \= 'ALL')\n\t AND (DAD.START_DATE \= CONVERT(date,'$$START_DATE$$')\t--假單開始日期\n\t  OR '$$START_DATE$$' \= 'ALL')\n\t AND (DAD.START_TIME \= '$$START_TIME$$'\t\t\t\t\t--假單開始時間\n\t  OR '$$START_TIME$$' \= 'ALL')\n\t AND (DAD.END_DATE \= CONVERT(date,'$$END_DATE$$')\t\t--假單結束日期\n\t  OR '$$END_DATE$$' \= 'ALL')\n     AND (DAD.END_TIME \= '$$END_TIME$$'\t\t\t\t\t\t--假單結束時間\n\t  OR '$$END_TIME$$' \= 'ALL')\n\t AND (DAD.USERID \= '$$USERID$$'\t\t\t\t\t\t\t--假單申請人員\n\t  OR '$$USERID$$' \= 'ALL')\n     AND (SI.AUDIT_USERID \= '$$AUDIT_USERID$$'\t\t\t\t--假單審核人員\n\t  OR '$$AUDIT_USERID$$' \= 'ALL')\t\t\t\t\t\n\t AND (DAD.AGREE_ID \= '$$AGREE_ID$$'\t\t\t\t\t\t--假單放行/退回人員\n\t  OR '$$AGREE_ID$$' \= 'ALL')\n\t AND (CONVERT(date,DAD.AGREE_TIME,111) \= CONVERT(date,'$$AGREE_TIME$$',111)\t--假單放行/退回日期\n\t\tOR '$$AGREE_TIME$$' \= 'ALL')\n\t AND datepart(year,START_DATE) >\= datepart(year, getdate())\t\t--假單僅顯示今年和隔年的資料\n\t AND datepart(year,START_DATE) <\= datepart(year, getdate())+1\n\t ) B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n;
SIGNON_AUTORUN_SENDMAIL=PLUGINS/SENDMAIL/AUTORUN_SENDMAIL_SYS_MAIN.kjb
SIGNON_BUILD_REPORT01=PLUGINS/BUILD_REPORT/BUILD_REPORT_MAIN.kjb
SIGNON_BUILD_REPORT02=PLUGINS/BUILD_REPORT/BUILD_REPORT_MAIN.kjb
SIGNON_BUILD_REPORT03=PLUGINS/BUILD_REPORT/BUILD_REPORT_MAIN.kjb
SIGNON_CALENDAR_TEST=SELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n\t ) A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY C.startTime) AS RowNum,\n\t\t  *\n\t FROM (\n\t\tSELECT '09\:00' AS startTime,\n\t\t       '18\:00' AS endTime) C\n\t ) B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n;
SIGNON_D1_WIN1=/*取當月出勤紀錄\nLast Updated date\:2020/06/12\n修正人員\: Noli\n修正原因\:\n\t\t1. 出勤、請假、撤假，資料排序調整 issue \#601\n\t\t以下欄位新到舊排序\n\t\t出勤：工作日期\n\t\t請假：假單編號\n\t\t撤假：假單編號\n------------------------------------------------------\nLast Updated date\:2020/09/10\n修正人員\: Noli\n修正原因\:\n\t\t1. 工時計算錯誤\n*/\n;WITH EXIST_DAYOFFRCD(USERID,DAYOFF_SEQ,WORK_DATE,WORK_STIME,WORK_ETIME,DAYOFF_ID,LEAVEREASON,CLAIM_STATUS,TAKELEAVE_STATUS,DATA_STATUS,JOB_CODE,SADD_DT,EADD_DT,AUDIT_USERID,LATE_TIME,EARLY_TIME) AS\n(\n  /**取得當天請假不滿8小時的資料**/\n  SELECT A.USERID,\n\t\t A.DAYOFF_SEQ,\n\t\t A.WORK_DATE,\n\t\t (CASE WHEN A.DAYOFF_SECODE\='S' THEN A.WORK_TIME ELSE JOBT.WORK_STIME END) AS WORK_STIME,\n\t\t (CASE WHEN SIG.DAYOFF_SECODE\='E' THEN SIG.WORK_TIME ELSE JOBT.WORK_ETIME END) AS WORK_ETIME,\n\t\t B.DAYOFF_ID,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.09 ADDED\n\t\t B.DAYOFF_NAME AS LEAVEREASON,\n\t\t (CASE WHEN A.TAKELEAVE_STATUS\='C' THEN '已撤銷'\n\t\t\t\t\t\t\tWHEN A.TAKELEAVE_STATUS\='Y' THEN '已通過'\n\t\t\t\t\t\t\tWHEN A.TAKELEAVE_STATUS\='N' THEN '已退回'\t\t\t--2020.04.07 未通過改為已退回\n\t\t\t\t\t\t\tWHEN A.TAKELEAVE_STATUS\='W' THEN '審核中'\n\t\t\t\t\t\t\tELSE '' END) AS CLAIM_STATUS,\n\t\t A.TAKELEAVE_STATUS AS TSTATUS,\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 MODIFIED\n\t\t A.DATA_STATUS,\n\t\t A.JOB_CODE,\n\t\t ISNULL(A.LAST_MOD_DT,A.ADD_DT) AS SADD_DT,\t\t--2020.04.23 MODIFIED\n\t\t SIG.ADD_DT AS EADD_DT,\n\t\t A.AUDIT_USERID,\t\t\t\t--2020.04.09 ADDED\n\t\t dbo.LATE_AND_LEAVE_EARLY(A.USERID,(CASE WHEN A.DAYOFF_SECODE\='S' THEN 'S' ELSE '' END),\n\t\t\t\t\t\t\t\t\t\t\tA.WORK_DATE,\n\t\t\t                               (CASE WHEN A.DAYOFF_SECODE\='S' THEN A.WORK_TIME ELSE NULL END),\n\t\t\t\t\t\t\t\t\t\t    A.WORK_STATUS,JOBT.JOB_CODE) AS LATE_TIME,\t--遲到幾分鐘 --2020.09.10 MODIFIED\n\t\t dbo.LATE_AND_LEAVE_EARLY(A.USERID,(CASE WHEN SIG.DAYOFF_SECODE\='E' THEN 'E' ELSE '' END),A.WORK_DATE,\n\t\t\t\t\t\t\t\t\t\t\t(CASE WHEN SIG.DAYOFF_SECODE\='E' THEN SIG.WORK_TIME ELSE NULL END),\n\t\t\t\t\t\t\t\t\t\t\tA.WORK_STATUS,JOBT.JOB_CODE) AS EARLY_TIME\t--早退幾分鐘 --2020.09.10 MODIFIED\n\tFROM JH_SIGNON  AS A WITH (NOLOCK)\n\tLEFT JOIN JH_SIGNON AS SIG WITH (NOLOCK)\n\tON A.USERID \= SIG.USERID\n\tAND A.WORK_DATE \= SIG.WORK_DATE\n\tAND A.WORK_STATUS \= SIG.WORK_STATUS\n\tAND A.TAKELEAVE_STATUS \= SIG.TAKELEAVE_STATUS\n\tAND A.DAYOFF_SEQ \= SIG.DAYOFF_SEQ\n\tAND SIG.DAYOFF_SECODE \= 'E'\n\tINNER JOIN JH_JOBTIME AS JOBT WITH (NOLOCK)--班別表\n\tON A.JOB_CODE \= JOBT.JOB_CODE\n\tINNER JOIN JH_USERS AS JUSR WITH (NOLOCK)\t--2020.04.23 ADDED\n\tON A.JOB_CODE \= JUSR.JOB_CODE\n\tAND A.USERID \= JUSR.USERID\n\tINNER JOIN DAYOFFCLASS AS B WITH (NOLOCK)\n\tON B.DAYOFF_ID \= A.WORK_STATUS\n   WHERE (\n\t\tA.DATA_STATUS \= '$$DATA_STATUS$$'\n\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t)\n\tAND A.USERID \= '$$USERID$$'\n\tAND B.DAYOFF_ID <> 'ON'\n\tAND '$$WORK_STATUS$$'<>'ON'\n\tAND ((ISNULL(A.TAKELEAVE_STATUS,'') IN ('C')    \t\t\t\t---[\n\tAND '$$TAKELEAVE_STATUS$$' \= 'C')\t\t\t\t\t\t\t\t----依假別狀態顯示資料\n\tOR\t(ISNULL(A.TAKELEAVE_STATUS,'') IN ('Y','N','W')\t\t\t\t----要在哪些頁籤上\n\tAND '$$TAKELEAVE_STATUS$$' <> 'C'\t\t\t\t\t\t\t\t---\n\tAND\tNOT EXISTS(SELECT JS.DAYOFF_SEQ \t\t\t\t\t\t\t--- for請假頁面若已撤銷的假單將不再顯示 2020.04.10\n\t\t\t\t\t FROM JH_SIGNON JS\t\t\t\t\t\t\t\t--- for請假頁面若已撤銷的假單將不再顯示 2020.04.10\n\t\t\t\t\tWHERE JS.DAYOFF_SEQ \= A.DAYOFF_SEQ\t\t\t\t--- for請假頁面若已撤銷的假單將不再顯示 2020.04.10\n\t\t\t\t\t  AND ISNULL(JS.TAKELEAVE_STATUS,'') \= 'C'))\t--- for請假頁面若已撤銷的假單將不再顯示 2020.04.10\n\t)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t---]\n\tAND A.DAYOFF_SECODE\='S'\n\tAND CONVERT(INT,SUBSTRING(SIG.WORK_TIME,1,2))-CONVERT(INT,SUBSTRING(A.WORK_TIME,1,2))<9\n\t--AND datepart(month,A.WORK_DATE) \= datepart(month,getdate())\t--2020.04.29 MODIFIED\n\tAND datepart(month,A.WORK_DATE) >\= datepart(month,getdate())-1\t--2020.04.29 ADDED\n    AND datepart(month,A.WORK_DATE) <\= datepart(month,getdate())+1\t--2020.04.29 ADDED\n)\n,SIGON_RECORD(USERID,DAYOFF_SEQ,WORK_DATE,WORK_STIME,WORK_ETIME,DAYOFF_ID,LEAVEREASON,CLAIM_STATUS,TAKELEAVE_STATUS,DATA_STATUS,JOB_CODE,SADD_DT,EADD_DT,AUDIT_USERID,LATE_TIME,EARLY_TIME) AS\n(\n/**START 取得已有假單紀錄之起迄資料**/\nSELECT *\nFROM EXIST_DAYOFFRCD\t--取得為有跨天的假別，且事假不滿8小時的資料\nUNION ALL\n /**取得已存在的所有假別起迄資料，因未跨天但滿8小時的假單會跑出兩筆, 故需要distinct***/\n  SELECT distinct A.USERID,A.DAYOFF_SEQ,A.WORK_DATE,\n\t\t (CASE WHEN A.DAYOFF_SECODE\='S' THEN A.WORK_TIME ELSE JOBT.WORK_STIME END) AS WORK_STIME,\n\t\t (CASE WHEN A.DAYOFF_SECODE\='E' THEN A.WORK_TIME ELSE JOBT.WORK_ETIME END) AS WORK_ETIME,\n\t\t B.DAYOFF_ID,\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.09 ADDED\n\t\t B.DAYOFF_NAME AS LEAVEREASON,\n\t\t (CASE WHEN A.TAKELEAVE_STATUS\='C' THEN '已撤銷'\n\t\t\t\t\t\t\tWHEN A.TAKELEAVE_STATUS\='Y' THEN '已通過'\n\t\t\t\t\t\t\tWHEN A.TAKELEAVE_STATUS\='N' THEN '已退回'\t\t--2020.04.07 未通過改為已退回\n\t\t\t\t\t\t\tWHEN A.TAKELEAVE_STATUS\='W' THEN '審核中'\n\t\t\t\t\t\t\tELSE '' END) AS CLAIM_STATUS,\n\t\t A.TAKELEAVE_STATUS AS TSTATUS,\t\t\t\t\t\t\t\t\t\t--2020.04.08 MODIFIED\n\t\t A.DATA_STATUS,\n\t\t A.JOB_CODE,\n\t\t --A.ADD_DT AS SADD_DT,\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.09 \n\t\t ISNULL(A.LAST_MOD_DT,A.ADD_DT) AS SADD_DT,\t\t\t\t\t\t    --2020.04.23 MODIFIED\n\t\t A.ADD_DT AS EADD_DT,\n\t\t A.AUDIT_USERID,\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.09 ADDED\n\t\t '' AS LATE_TIME,\t\t\t\t\t\t\t\t\t\t\t\t\t--遲到幾分 --2020.09.07 ADDED\n\t\t '' AS EARLY_TIME\t\t\t\t\t\t\t\t\t\t\t\t\t--早退幾分 --2020.09.07 ADDED\n\tFROM JH_SIGNON AS A WITH (NOLOCK)\n\tINNER JOIN JH_JOBTIME AS JOBT WITH (NOLOCK)--班別表\n\tON A.JOB_CODE \= JOBT.JOB_CODE\n\tINNER JOIN JH_USERS AS JUSR WITH (NOLOCK)\t--2020.04.23 ADDED\n\tON A.JOB_CODE \= JUSR.JOB_CODE\n\tAND A.USERID \= JUSR.USERID\n\tINNER JOIN DAYOFFCLASS AS B WITH (NOLOCK)\n\tON B.DAYOFF_ID \= A.WORK_STATUS\n   WHERE (\n\t\tA.DATA_STATUS \= '$$DATA_STATUS$$'\n\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t)\n\tAND A.USERID \= '$$USERID$$'\n\tAND B.DAYOFF_ID <> 'ON'\n\tAND '$$WORK_STATUS$$'<>'ON'\n\tAND ((ISNULL(A.TAKELEAVE_STATUS,'') IN ('C')    \t\t\t\t---[\n\tAND '$$TAKELEAVE_STATUS$$' \= 'C')\t\t\t\t\t\t\t\t----依假別狀態顯示資料\n\tOR\t(ISNULL(A.TAKELEAVE_STATUS,'') IN ('Y','N','W')\t\t\t\t----要在哪些頁籤上\n\tAND '$$TAKELEAVE_STATUS$$' <> 'C'\t\t\t\t\t\t\t\t---\n\tAND\tNOT EXISTS(SELECT JS.DAYOFF_SEQ \t\t\t\t\t\t\t--- for請假頁面若已撤銷的假單將不再顯示 2020.04.10\n\t\t\t\t\t FROM JH_SIGNON JS\t\t\t\t\t\t\t\t--- for請假頁面若已撤銷的假單將不再顯示 2020.04.10\n\t\t\t\t\tWHERE JS.DAYOFF_SEQ \= A.DAYOFF_SEQ\t\t\t\t--- for請假頁面若已撤銷的假單將不再顯示 2020.04.10\n\t\t\t\t\t  AND ISNULL(JS.TAKELEAVE_STATUS,'') \= 'C'))\t--- for請假頁面若已撤銷的假單將不再顯示 2020.04.10\n\t)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t---]\n\t--AND datepart(month,A.WORK_DATE) \= datepart(month,getdate())\t--2020.04.29 MODIFIED   \n\tAND datepart(month,A.WORK_DATE) >\= datepart(month,getdate())-1\t--2020.04.29 ADDED\n    AND datepart(month,A.WORK_DATE) <\= datepart(month,getdate())+1\t--2020.04.29 ADDED\n\tAND A.DAYOFF_SEQ NOT IN (SELECT DAYOFF_SEQ\t\t--排除取得為有跨天的假別，且事假不滿8小時的資料\n\t\t\t\t\t\t\t   FROM EXIST_DAYOFFRCD)\t\n/**END 取得已有假單紀錄之起迄資料**/\nUNION ALL\n /* START 顯示請假起迄「之間」的工作日期，並補上固定的上下班時間和假別*/\nSELECT * \n  FROM dbo.GET_DAYOFFTABLE('$$USERID$$','$$TAKELEAVE_STATUS$$','$$WORK_STATUS$$','$$DATA_STATUS$$')\n /* END 顯示請假起迄「之間」的工作日期，並補上固定的上下班時間和假別*/\n UNION ALL\n /** START\: 取得當月正確的上下班打卡資料**/\n  /* START 取得一天當中多筆上下班打卡之資料 */\n SELECT SI.USERID,\n\t\tSI.DAYOFF_SEQ,\n        SI.WORK_DATE,\n        (CASE WHEN SI.DAYOFF_SECODE\='S' THEN SI.WORK_TIME ELSE JOBT.WORK_STIME END) AS WORK_STIME,\n\t    (CASE WHEN (SELECT MAX(WORK_TIME) \t\t\t\t\t\t\t--2020.03.11 ADDED\n \t\t\t\t       FROM JH_SIGNON WITH (NOLOCK)\t\t\t\t\t--2020.03.11 ADDED\t\t\t\t\n \t\t\t\t\t  WHERE USERID \= SI.USERID \t\t\t\t\t\t--2020.03.11 ADDED\n \t\t\t\t\t    AND WORK_DATE \= SI.WORK_DATE \t\t\t\t--2020.03.11 ADDED\n \t\t\t\t\t\tAND WORK_STATUS \= SI.WORK_STATUS \t\t\t--2020.03.11 ADDED\n \t\t\t\t\t\tAND DAYOFF_SECODE \= 'E')<SI.WORK_TIME\t\t--2020.03.11 ADDED\n\t\t\t\t\tTHEN ''\t\t\t\t\t\t\t\t\t\t\t--2020.03.11 ADDED\t\n\t\t\t   ELSE\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.03.11 ADDED\n \t\t\t\t ISNULL((SELECT MAX(WORK_TIME)\n \t\t\t\t\t\t   FROM JH_SIGNON WITH (NOLOCK)\n \t\t\t\t\t\t  WHERE WORK_TIME<\=\n \t\t\t\t\t\t\t\tISNULL((SELECT MIN(TEMP.WORK_TIME) \n \t\t\t\t\t\t\t\t\t\t  FROM JH_SIGNON TEMP WITH (NOLOCK)\n \t\t\t\t\t\t\t\t\t\t WHERE TEMP.USERID \= SI.USERID \n \t\t\t\t\t\t\t\t\t\t   AND TEMP.WORK_DATE \= SI.WORK_DATE \n \t\t\t\t\t\t\t\t\t\t   AND TEMP.WORK_STATUS \= SI.WORK_STATUS \n \t\t\t\t\t\t\t\t\t\t   AND TEMP.DAYOFF_SECODE \= SI.DAYOFF_SECODE\n \t\t\t\t\t\t\t\t\t\t   AND TEMP.WORK_TIME<> SI.WORK_TIME\n \t\t\t\t\t\t\t\t\t\t   AND TEMP.WORK_TIME>SI.WORK_TIME),\n \t\t\t\t\t\t\t\t\t   (SELECT MAX(WORK_TIME) \n \t\t\t\t\t\t\t\t\t\t  FROM JH_SIGNON WITH (NOLOCK)\n \t\t\t\t\t\t\t\t\t\t WHERE USERID \= SI.USERID \n \t\t\t\t\t\t\t\t\t\t   AND WORK_DATE \= SI.WORK_DATE \n \t\t\t\t\t\t\t\t\t\t   AND WORK_STATUS \= SI.WORK_STATUS \n \t\t\t\t\t\t\t\t\t\t   AND DAYOFF_SECODE \= 'E'))\n \t\t\t\t\t\t\tAND USERID \= SI.USERID \n \t\t\t\t\t\t\tAND WORK_DATE \= SI.WORK_DATE \n \t\t\t\t\t\t\tAND WORK_STATUS \= SI.WORK_STATUS \n \t\t\t\t\t\t\tAND DAYOFF_SECODE \= 'E'),'')\n\t\t\t\tEND) AS WORK_ETIME,\n\t\tB.DAYOFF_ID,\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.09 ADDED\n \t\t(CASE WHEN B.DAYOFF_ID <>'ON' THEN B.DAYOFF_NAME ELSE '' END) AS LEAVEREASON,\n\t\t'',\n\t\tISNULL(SI.TAKELEAVE_STATUS,'') AS TAKELEAVE_STATUS,\n \t\tSI.DATA_STATUS,\n\t\tSI.JOB_CODE,\n\t\tSI.ADD_DT AS SADD_DT,\n\t\t(CASE WHEN (SELECT MAX(ADD_DT) \t\t\t\t\t\t\t\n \t\t\t\t       FROM JH_SIGNON WITH (NOLOCK)\t\t\t\t\t\t\t\t\t\n \t\t\t\t\t  WHERE USERID \= SI.USERID \t\t\t\t\t\t\n \t\t\t\t\t    AND WORK_DATE \= SI.WORK_DATE \t\t\t\n \t\t\t\t\t\tAND WORK_STATUS \= SI.WORK_STATUS \t\t\t\n \t\t\t\t\t\tAND DAYOFF_SECODE \= 'E')<SI.ADD_DT\n\t\t\t\t\tTHEN ''\t\t\t\t\t\t\t\t\t\n\t\t\t   ELSE\t\t\t\t\t\t\t\t\t\t\t\n \t\t\t\t ISNULL((SELECT MAX(ADD_DT)\n \t\t\t\t\t\t   FROM JH_SIGNON WITH (NOLOCK)\n \t\t\t\t\t\t  WHERE ADD_DT<\=\n \t\t\t\t\t\t\t\tISNULL((SELECT MIN(TEMP.ADD_DT) \n \t\t\t\t\t\t\t\t\t\t  FROM JH_SIGNON TEMP WITH (NOLOCK)\n \t\t\t\t\t\t\t\t\t\t WHERE TEMP.USERID \= SI.USERID \n \t\t\t\t\t\t\t\t\t\t   AND TEMP.WORK_DATE \= SI.WORK_DATE \n \t\t\t\t\t\t\t\t\t\t   AND TEMP.WORK_STATUS \= SI.WORK_STATUS \n \t\t\t\t\t\t\t\t\t\t   AND TEMP.DAYOFF_SECODE \= SI.DAYOFF_SECODE\n \t\t\t\t\t\t\t\t\t\t   AND TEMP.ADD_DT<> SI.ADD_DT\n \t\t\t\t\t\t\t\t\t\t   AND TEMP.ADD_DT>SI.ADD_DT),\n \t\t\t\t\t\t\t\t\t   (SELECT MAX(ADD_DT) \n \t\t\t\t\t\t\t\t\t\t  FROM JH_SIGNON WITH (NOLOCK)\n \t\t\t\t\t\t\t\t\t\t WHERE USERID \= SI.USERID \n \t\t\t\t\t\t\t\t\t\t   AND WORK_DATE \= SI.WORK_DATE \n \t\t\t\t\t\t\t\t\t\t   AND WORK_STATUS \= SI.WORK_STATUS \n \t\t\t\t\t\t\t\t\t\t   AND DAYOFF_SECODE \= 'E'))\n \t\t\t\t\t\t\tAND USERID \= SI.USERID \n \t\t\t\t\t\t\tAND WORK_DATE \= SI.WORK_DATE \n \t\t\t\t\t\t\tAND WORK_STATUS \= SI.WORK_STATUS \n \t\t\t\t\t\t\tAND DAYOFF_SECODE \= 'E'),'')\n\t\t\t\tEND) AS EADD_DT,\n\t\tSI.AUDIT_USERID,\t\t\t\t\t--2020.04.09 ADDED\n\t\tdbo.LATE_AND_LEAVE_EARLY(SI.USERID,'S',SI.WORK_DATE,SI.WORK_TIME,SI.WORK_STATUS,JOBT.JOB_CODE) AS LATE_TIME,\t--遲到幾分鐘 --2020.09.10 MODIFIED\t\n\t\tdbo.LATE_AND_LEAVE_EARLY(SI.USERID,'E',SI.WORK_DATE,(CASE WHEN (SELECT MAX(WORK_TIME) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FROM JH_SIGNON WITH (NOLOCK)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t WHERE USERID \= SI.USERID \t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   AND WORK_DATE \= SI.WORK_DATE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   AND WORK_STATUS \= SI.WORK_STATUS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   AND DAYOFF_SECODE \= 'E')<SI.WORK_TIME\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  THEN ''\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ELSE\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tISNULL((SELECT MAX(WORK_TIME)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM JH_SIGNON WITH (NOLOCK)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE WORK_TIME<\=\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tISNULL((SELECT MIN(TEMP.WORK_TIME) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM JH_SIGNON TEMP WITH (NOLOCK)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE TEMP.USERID \= SI.USERID \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND TEMP.WORK_DATE \= SI.WORK_DATE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND TEMP.WORK_STATUS \= SI.WORK_STATUS \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND TEMP.DAYOFF_SECODE \= SI.DAYOFF_SECODE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND TEMP.WORK_TIME<> SI.WORK_TIME\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND TEMP.WORK_TIME>SI.WORK_TIME),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(SELECT MAX(WORK_TIME) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM JH_SIGNON WITH (NOLOCK)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE USERID \= SI.USERID \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND WORK_DATE \= SI.WORK_DATE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND WORK_STATUS \= SI.WORK_STATUS \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND DAYOFF_SECODE \= 'E'))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND USERID \= SI.USERID \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND WORK_DATE \= SI.WORK_DATE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND WORK_STATUS \= SI.WORK_STATUS \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND DAYOFF_SECODE \= 'E'),'')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t END),\n\t\t\t\t\t\t\t\t\t\t\tSI.WORK_STATUS,JOBT.JOB_CODE) AS EARLY_TIME\t--早退幾分鐘 --2020.09.07 ADDED\t\n  FROM JH_SIGNON SI WITH (NOLOCK)\n  INNER JOIN JH_JOBTIME AS JOBT WITH (NOLOCK)--班別表\n  ON SI.JOB_CODE \= JOBT.JOB_CODE\n  INNER JOIN JH_USERS AS JUSR WITH (NOLOCK)\t--2020.04.23 ADDED\n  ON SI.JOB_CODE \= JUSR.JOB_CODE\n  AND SI.USERID \= JUSR.USERID\n  INNER JOIN DAYOFFCLASS AS B WITH (NOLOCK)\n  ON B.DAYOFF_ID \= SI.WORK_STATUS\n WHERE (\n \t\tSI.DATA_STATUS \= '$$DATA_STATUS$$'\n \t\tOR '$$DATA_STATUS$$' \= 'ALL'\n   )\n   AND SI.USERID \= '$$USERID$$'\n   AND SI.WORK_STATUS \='ON'\n   AND SI.DAYOFF_SECODE \= 'S'\n   AND '$$WORK_STATUS$$'\='ON'\n   AND ISNULL(SI.TAKELEAVE_STATUS,'') \= '$$TAKELEAVE_STATUS$$'\n   --AND datepart(month,SI.WORK_DATE) \= datepart(month,getdate())\t--2020.04.29 MODIFED\n   AND datepart(month,SI.WORK_DATE) >\= datepart(month,getdate())-1\t--2020.04.29 ADDED\n   AND datepart(month,SI.WORK_DATE) <\= datepart(month,getdate())+1\t--2020.04.29 ADDED\n  /* END 取得一天當中多筆上下班打卡之資料 */\n /** END\: 取得當月正確的上下班打卡資料**/\n)\n\nSELECT *\n FROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t--ORDER BY middle1.WORK_DATE,middle1.WORK_STIME) AS RowNum,*\t\t\t\t\t\t--2020.03.17\n\t\tORDER BY \n\t\t\tCASE WHEN middle1.DAYOFF_SEQ IS NULL THEN middle1.WORK_DATE END DESC,\t\t\t--2020.06.12\n\t\t\tCASE WHEN middle1.DAYOFF_SEQ IS NULL THEN middle1.WORK_STIME END DESC,\t\t\t--2020.06.12\n\t\t\tCASE WHEN middle1.DAYOFF_SEQ IS NOT NULL THEN middle1.DAYOFF_SEQ END DESC,\t\t--2020.06.12\n\t\t\tCASE WHEN middle1.DAYOFF_SEQ IS NOT NULL THEN middle1.WORK_DATE END ASC,\t\t--2020.06.12\n\t\t\tCASE WHEN middle1.DAYOFF_SEQ IS NOT NULL THEN middle1.WORK_STIME END ASC\t\t--2020.06.12\n\t\t\t) AS RowNum,*\t\t--2020.03.17\n\t  FROM\n\t    (SELECT USERID,\n\t\t\t\tDAYOFF_SEQ,\n\t\t        WORK_DATE,\n\t\t\t    WORK_STIME,\n\t\t\t\tWORK_ETIME,\n\t\t\t\tdbo.INFO_DISPLAY(TAKELEAVE_STATUS,TOTAL_DAYS,NEW_STIME,NEW_ETIME,\n\t\t\t\t\t\t\t\t\t'$$JOB_CODE$$',inner1.USERID,inner1.WORK_DATE) AS WORK_HOURS,\t--顯示工時或休假天數\n\t\t\t\tDAYOFF_ID,\t\t--2020.04.09 ADDED\n\t\t\t\tLEAVEREASON,\n\t\t\t\tCLAIM_STATUS,\n\t\t\t\tTAKELEAVE_STATUS,\n\t\t\t\tDATA_STATUS,\n\t\t\t\tSADD_DT,\n\t\t\t\tEADD_DT,\n\t\t\t\tAUDIT_USERID,\t--2020.04.09 ADDED\n\t\t\t\tAUDITOR_NAME,   --2020.05.20 ADDED\n\t\t\t\tSTART_DATE,\t\t--2020.04.09 ADDED\n\t\t\t\tSTART_TIME,\t\t--2020.04.09 ADDED\n\t\t\t\tEND_DATE,\t\t--2020.04.09 ADDED\n\t\t\t\tEND_TIME,\t\t--2020.04.09 ADDED\n\t\t\t\tLATE_TIME,\t\t--2020.09.07 ADDED\n\t\t\t\tEARLY_TIME\t\t--2020.09.07 ADDED\n\t\t   FROM\n\t\t\t(SELECT SI.USERID,\t\t\t\t\t\t\t\t--2020.04.23 ADDED\n\t\t\t\t\tSI.DAYOFF_SEQ,\n\t\t\t        SI.WORK_DATE,\n\t\t\t\t\tSI.WORK_STIME,\n\t\t\t\t\tSI.WORK_ETIME,\n\t\t\t\t\t(CASE WHEN SI.WORK_STIME<JOBT.WORK_STIME\n\t\t\t\t\t\t\tTHEN JOBT.WORK_STIME \n\t\t\t\t\t\t  ELSE SI.WORK_STIME END) AS NEW_STIME,\t--若員工早到，工時將從公司規定的上班時間開始計算，否則取員工真實上班時間\n\t\t\t\t\t(CASE WHEN SI.WORK_ETIME\='' THEN '' ELSE\n\t\t\t\t\t(CASE WHEN SI.WORK_ETIME>JOBT.WORK_ETIME\n\t\t\t\t\t\t\tTHEN JOBT.WORK_ETIME \n\t\t\t\t\t\t  ELSE SI.WORK_ETIME END) \n\t\t\t\t\tEND) AS NEW_ETIME,\t--若員工晚走，工時會算到公司規定的下班時間，否則取員工真實下班時間(加班時間暫由人工處理)\n\t\t\t\t\tSI.DAYOFF_ID,\t\t--2020.04.09 ADDED\n\t\t\t\t\tSI.LEAVEREASON,\n\t\t\t\t\tSI.CLAIM_STATUS,\n\t\t\t\t\tSI.TAKELEAVE_STATUS,\n\t\t\t\t\tSI.DATA_STATUS,\n\t\t\t\t\tSI.SADD_DT,\n\t\t\t\t\tSI.EADD_DT,\n\t\t\t\t\tSI.AUDIT_USERID,\t\t\t\t\t\t--2020.04.09 ADDED\n\t\t\t\t\tUSR.USERNAME AS AUDITOR_NAME,\t\t\t--2020.05.20 ADDED\n\t\t\t\t\tDAD.START_DATE,\t\t\t\t\t\t\t--2020.04.09 ADDED\n\t\t\t\t\tDAD.START_TIME,\t\t\t\t\t\t\t--2020.04.09 ADDED\n\t\t\t\t\tDAD.END_DATE,\t\t\t\t\t\t\t--2020.04.09 ADDED\n\t\t\t\t\tDAD.END_TIME,\t\t\t\t\t\t\t--2020.04.09 ADDED\n\t\t\t\t\tDAD.TOTAL_DAYS,\t\t\t\t\t\t\t--2020.04.10 ADDED\n\t\t\t\t\tSI.LATE_TIME,\t\t\t\t\t\t\t--2020.09.07 ADDED\n\t\t\t\t\tSI.EARLY_TIME\t\t\t\t\t\t\t--2020.09.07 ADDED\n\t\t\t\tFROM SIGON_RECORD AS SI WITH (NOLOCK)\n\t\t\t\tLEFT JOIN DAYOFF_APPLY_DETAIL DAD\t\t\t--2020.04.09 ADDED\n\t\t\t\tON DAD.DAYOFF_SEQ \= SI.DAYOFF_SEQ\t\t\t--2020.04.09 ADDED\n\t\t\t\tINNER JOIN JH_JOBTIME JOBT WITH (NOLOCK)\n\t\t\t\tON SI.JOB_CODE \= JOBT.JOB_CODE\t\t--屆時若有設定不同人員的班別表程式可能就要改\n\t\t\t\tINNER JOIN JH_USERS AS JUSR WITH (NOLOCK)\t--2020.04.23 ADDED\n\t\t\t\tON SI.JOB_CODE \= JUSR.JOB_CODE\n\t\t\t\tAND SI.USERID \= JUSR.USERID\n\t\t\t\tLEFT JOIN USERS USR\n\t\t\t\tON USR.USERID \= SI.AUDIT_USERID\n\t\t\t\t) AS inner1) AS middle1 ) AS outer1,\n\t\t(SELECT COUNT(*) AS totalProperty\n\t\t   FROM SIGON_RECORD AS SI WITH (NOLOCK)\n\t\t   INNER JOIN JH_JOBTIME JOBT WITH (NOLOCK)\n\t\t   ON SI.JOB_CODE \= JOBT.JOB_CODE\n\t\t   INNER JOIN JH_USERS AS JUSR WITH (NOLOCK)\t--2020.04.23 ADDED\n\t\t   ON SI.JOB_CODE \= JUSR.JOB_CODE\n\t\t   AND SI.USERID \= JUSR.USERID\n\t\t   LEFT JOIN USERS USR\n\t\t   ON USR.USERID \= SI.AUDIT_USERID\n\t\t   ) AS outer2\n WHERE RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$);\n
SIGNON_DAYOFF_APPLY=/*  UPDATED AT 20200525\nUPDATED BY Noli\nFor 請假單功能\n\n修正原因：\n\t1. CHK_REPEAT_VOCATION 要再多兩個參數WORK_EDATE和WORK_ETIME\n*/\nDECLARE @MAX_OFFSDT DATE,\t\t\t--打卡與請假時間衝突之請假起日\n\t\t@MAX_OFFEDT DATE,\t\t\t--打卡與請假時間衝突之請假迄日\n\t\t@MAX_WORKSTIME VARCHAR(10),\t\t--請假開始時間\n\t\t@MAX_WORKETIME VARCHAR(10),\t\t--請假結束時間\n\t\t@DAYOFF_NAME   VARCHAR(50),\t\t--假別\n\t\t@DAYOFF_SEQ NUMERIC(12,0),\t--假單編號\n\t\t@HOURS NUMERIC(2,0);\nDECLARE @SYS_DATE DATE \= getdate();\nDECLARE @SYS_TIME VARCHAR(10) \= CONVERT(VARCHAR,getdate(),108);\nDECLARE @JOB_CODE VARCHAR(10) \= ISNULL((SELECT JOB_CODE\n\t\t\t\t\t\t\t\t\t      FROM JH_USERS\n\t\t\t\t\t\t\t\t         WHERE USERID \= '$$USERID$$'),'$$JOB_CODE$$');\n\nBEGIN TRY\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n/*  這一段 update 可用noli的excel 檔中的  INSERT 產生器，來產生對應的欄位及語法  */\n\n    SET @HOURS \= CONVERT(NUMERIC(2,0),SUBSTRING('$$WORK_ETIME$$',1,2))-CONVERT(NUMERIC(2,0),SUBSTRING('$$WORK_STIME$$',1,2));\n\tSELECT @DAYOFF_SEQ \= dbo.CHK_REPEAT_VOCATION('$$USERID$$','$$WORK_SDATE$$','$$WORK_STIME$$','$$WORK_EDATE$$','$$WORK_ETIME$$')\t--2020.05.25 MODIFIED\n\n\t--當假單起日等於系統日，新增判斷假單起始時間必須大於系統時間\n\t/*IF\t@SYS_DATE \= '$$WORK_SDATE$$' AND '$$WORK_STIME$$'<\= @SYS_TIME \n\tBEGIN\n\t\tINSERT INTO MEM_API_RESULT   --WITH (ROWLOCK) \n\t\t\t  ( ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE \n\t\t\t\t,RETURN_MSG \n\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t,MEMO)\n\t\t\tVALUES(        \n\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'-1'\n\t\t\t\t\t,'假單起始時間必須大於系統時間'\n\t\t\t\t\t,'DAYOFF_STIME_SMALL'\n\t\t\t\t\t,'C' \n\t\t\t\t\t,'$$MEMO$$');\n\tEND\n\t\n\tELSE */\n\t--新增不得重複申請假單(@DAYOFF_SEQ>0)的判斷\n\tIF NULLIF(ISNULL(@DAYOFF_SEQ,0),0) IS NOT NULL\n\tBEGIN\n\t\n\t\tSET @MAX_OFFSDT \= (SELECT WORK_DATE\n\t\t\t\t\t\t\t FROM JH_SIGNON \n\t\t\t\t\t\t    WHERE DAYOFF_SEQ \= @DAYOFF_SEQ\n\t\t\t\t\t\t\t  AND DAYOFF_SECODE \= 'S');\n\t\n\t\tSET @MAX_OFFEDT \= (SELECT WORK_DATE\n\t\t\t\t\t\t\t FROM JH_SIGNON \n\t\t\t\t\t\t    WHERE DAYOFF_SEQ \= @DAYOFF_SEQ\n\t\t\t\t\t\t\t  AND DAYOFF_SECODE \= 'E');\n\t\t\t\t\t\t\t\n\t\tSET @MAX_WORKSTIME \= (SELECT WORK_TIME\n\t\t\t\t\t\t\t\tFROM JH_SIGNON\n\t\t\t\t\t\t\t   WHERE DAYOFF_SEQ \= @DAYOFF_SEQ\n\t\t\t\t\t\t\t\t AND DAYOFF_SECODE \= 'S'\n\t\t\t\t\t\t\t  );\n\t\t\t\t\t\t\t\t \n\t\tSET @MAX_WORKETIME \= (SELECT WORK_TIME\n\t\t\t\t\t\t\t\tFROM JH_SIGNON\n\t\t\t\t\t\t\t   WHERE DAYOFF_SEQ \= @DAYOFF_SEQ\n\t\t\t\t\t\t\t\t AND DAYOFF_SECODE \= 'E'\n\t\t\t\t\t\t\t  );\n\t\t\n\t\tSET @DAYOFF_NAME \= (SELECT DC.DAYOFF_NAME\n\t\t\t\t\t\t\t  FROM JH_SIGNON SI\n\t\t\t\t\t\t\t  INNER JOIN DAYOFFCLASS DC \n\t\t\t\t\t\t\t  ON DC.DAYOFF_ID \= SI.WORK_STATUS\n\t\t\t\t\t\t\t WHERE SI.DAYOFF_SEQ \= @DAYOFF_SEQ\n\t\t\t\t\t\t\t   AND SI.DAYOFF_SECODE \= 'E'\n\t\t\t\t\t\t\t);\n\t\n\t\tINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t  ( ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE \n\t\t\t\t,RETURN_MSG \n\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t,MEMO)\n\t\t\tVALUES(        \n\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'-1'\n\t\t\t\t\t,'已有衝突時段的假單存在<br/>假別：'+ @DAYOFF_NAME +'，請假時間：'+CONVERT(varchar,@MAX_OFFSDT,111)+' '+@MAX_WORKSTIME +'~'+CONVERT(varchar,@MAX_OFFEDT,111)+' '+@MAX_WORKETIME\n\t\t\t\t\t,'SAME_DAYOFF'\n\t\t\t\t\t,'C' \n\t\t\t\t\t,'$$MEMO$$');\n\tEND\n\tELSE IF ('$$WORK_STATUS$$' \= 'SV' AND @HOURS\=9) OR '$$WORK_STATUS$$' <> 'SV'\t--新增判斷請特休假至少要以天為單位\n\tBEGIN\n\t\t\t/****新增申請假單起時******/\n\t\t\tInsert into JH_SIGNON /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\t USERID\n\t\t\t,USERNAME\n\t\t\t,WORK_STATUS\n\t\t\t,DAYOFF_SECODE\n\t\t\t,WORK_DATE\n\t\t\t,WORK_TIME\n\t\t\t,TAKELEAVE_STATUS\n\t\t\t,JOB_CODE\n\t\t\t,DAYOFF_SEQ\n\t\t\t,AUDIT_USERID\n\t\t\t,DATA_STATUS\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t) \n\t\t\tVALUES(\n\t\t\t '$$USERID$$'\n\t\t\t ,'$$USERNAME$$'\n\t\t\t ,'$$WORK_STATUS$$'\n\t\t\t ,'S'\n\t\t\t ,'$$WORK_SDATE$$'\n\t\t\t ,'$$WORK_STIME$$'\n\t\t\t ,'W'\n\t\t\t ,@JOB_CODE\n\t\t\t ,0\n\t\t\t ,'$$AGREE_ID$$'\n\t\t\t ,0\n\t\t\t ,'${PARAM_SOURCE_COMING}'\n\t\t\t ,'${PARAM_COMPANY}'\n\t\t\t ,CONVERT(VARCHAR,getdate(),120)\n\t\t\t);\n\t\t\t\n\t\t\tUPDATE JH_SIGNON\n\t\t\tSET DAYOFF_SEQ \= IDENT_CURRENT('JH_SIGNON')\n\t\t\tWHERE PK_USERID \= IDENT_CURRENT('JH_SIGNON');\n\t\t\n\t\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\t\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\t\t\tFUNC_ID\n\t\t\t\t   ,PROC_TYPE\n\t\t\t\t   ,USER_ID\n\t\t\t\t   ,DATA_NO\n\t\t\t\t   ,EVENT_DT\n\t\t\t\t   ,MEMO\n\t\t\t\t   ,SessionID\n\t\t\t\t   ,ProcPK\n\t\t\t\t   ,PROC_TARGET\n\t\t\t)\n\t\t\tVALUES(\n\t\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t   ,'insert'\n\t\t\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t\t\t   ,IDENT_CURRENT('JH_SIGNON') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t\t\t   ,'$$MEMO$$'\n\t\t\t\t   ,'${PARAM_SESSION_ID}'\n\t\t\t\t   ,'${LOGPK}'\n\t\t\t\t   ,'JH_SIGNON' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t);\n\t\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\t\tINSERT INTO LOG_JH_SIGNON  /* WITH (ROWLOCK) */ \n\t\t\t\t\t ( FUNC_ID \n\t\t\t\t\t  ,CRUD_STATE \n\t\t\t\t\t  ,PK_USERID\n\t\t\t\t\t  ,USERID\n\t\t\t\t\t  ,USERNAME\n\t\t\t\t\t  ,WORK_STATUS\n\t\t\t\t\t  ,DAYOFF_SECODE\n\t\t\t\t\t  ,WORK_DATE\n\t\t\t\t\t  ,WORK_TIME\n\t\t\t\t\t  ,TAKELEAVE_STATUS\n\t\t\t\t\t  ,JOB_CODE\n\t\t\t\t\t  ,DAYOFF_SEQ\n\t\t\t\t\t  ,AUDIT_USERID\n\t\t\t\t\t  ,DATA_STATUS\n\t\t\t\t\t  ,ADD_USER_ID\n\t\t\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t\t\t  ,ADD_DT\n\t\t\t\t\t  ,DATA_CHANGE_LOG_ID )\n\t\t\tVALUES(\n\t\t\t\t\t  '${PARAM_FUNC_ID}'\n\t\t\t\t\t  ,'C'\n\t\t\t\t\t  ,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t\t  ,'$$USERID$$'\n\t\t\t\t\t  ,'$$USERNAME$$'\n\t\t\t\t\t  ,'$$WORK_STATUS$$'\n\t\t\t\t\t  ,'S'\n\t\t\t\t\t  ,'$$WORK_SDATE$$'\n\t\t\t\t\t  ,'$$WORK_STIME$$'\n\t\t\t\t\t  ,'W'\n\t\t\t\t\t  ,@JOB_CODE\n\t\t\t\t\t  ,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t\t  ,'$$AGREE_ID$$'\n\t\t\t\t\t  ,0\n\t\t\t\t\t  ,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t  ,'${PARAM_COMPANY}'\n\t\t\t\t\t  ,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t  ,IDENT_CURRENT('DATA_CHANGE_LOG'));\n\n\t\t\t/* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n\t\t\tINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t\t  ( ProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE \n\t\t\t\t\t,RETURN_MSG \n\t\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t\t,MEMO)\n\t\t\tVALUES(        \n\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'0'\n\t\t\t\t\t,'假單送出成功(S)'\n\t\t\t\t\t,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t\t,'C' \n\t\t\t\t\t,'$$MEMO$$');\n\t\t\t\n\t\t\t/****新增至待放行假單******/\n\t\t\tInsert into DAYOFF_APPLY_DETAIL /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\t DAYOFF_SEQ\n\t\t\t,USERID\n\t\t\t,DAYOFF_ID\n\t\t\t,APPLY_DATE\n\t\t\t,START_DATE\n\t\t\t,START_TIME\n\t\t\t,END_DATE\n\t\t\t,END_TIME\n\t\t\t,TOTAL_DAYS\n\t\t\t,AGREE_ID\t\t\t--'放行人員/退回人員'\n\t\t\t,AGREE_TIME\t\t\t--'放行時間/退回時間'\n\t\t\t,DATA_STATUS\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t) \n\t\t\tVALUES(\n\t\t\t IDENT_CURRENT('JH_SIGNON')\n\t\t\t ,'$$USERID$$'\n\t\t\t ,'$$WORK_STATUS$$'\n\t\t\t ,'$$APPLY_DATE$$'\n\t\t\t ,'$$WORK_SDATE$$'\n\t\t\t ,'$$WORK_STIME$$'\n\t\t\t ,'$$WORK_EDATE$$'\n\t\t\t ,'$$WORK_ETIME$$'\n\t\t\t ,CONVERT(NUMERIC(6,3),'$$TOTAL_DAYS$$')\n\t\t\t ,NULL\t\t\t\t--2020.04.10 MODIFIED\n\t\t\t ,NULL\t\t\t\t--2020.04.10 MODIFIED\n\t\t\t ,0\n\t\t\t ,'${PARAM_SOURCE_COMING}'\n\t\t\t ,'${PARAM_COMPANY}'\n\t\t\t ,CONVERT(VARCHAR,getdate(),120)\n\t\t\t);\n\n\t\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\t\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\t\t\tFUNC_ID\n\t\t\t\t   ,PROC_TYPE\n\t\t\t\t   ,USER_ID\n\t\t\t\t   ,DATA_NO\n\t\t\t\t   ,EVENT_DT\n\t\t\t\t   ,MEMO\n\t\t\t\t   ,SessionID\n\t\t\t\t   ,ProcPK\n\t\t\t\t   ,PROC_TARGET\n\t\t\t)\n\t\t\tVALUES(\n\t\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t   ,'insert'\n\t\t\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t\t\t   ,IDENT_CURRENT('DAYOFF_APPLY_DETAIL') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t\t\t   ,'$$MEMO$$'\n\t\t\t\t   ,'${PARAM_SESSION_ID}'\n\t\t\t\t   ,'${LOGPK}'\n\t\t\t\t   ,'DAYOFF_APPLY_DETAIL' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t);\n\t\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\t\tINSERT INTO LOG_DAYOFF_APPLY_DETAIL  /* WITH (ROWLOCK) */ \n\t\t\t\t\t ( FUNC_ID \n\t\t\t\t\t  ,CRUD_STATE \n\t\t\t\t\t  ,PK_DAD\n\t\t\t\t\t  ,DAYOFF_SEQ\n\t\t\t\t\t  ,USERID\n\t\t\t\t\t  ,DAYOFF_ID\n\t\t\t\t\t  ,APPLY_DATE\n\t\t\t\t\t  ,START_DATE\n\t\t\t\t\t  ,START_TIME\n\t\t\t\t\t  ,END_DATE\n\t\t\t\t\t  ,END_TIME\n\t\t\t\t\t  ,TOTAL_DAYS\n\t\t\t\t\t  ,AGREE_ID\n\t\t\t\t\t  ,AGREE_TIME\n\t\t\t\t\t  ,DATA_STATUS\n\t\t\t\t\t  ,ADD_USER_ID\n\t\t\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t\t\t  ,ADD_DT\n\t\t\t\t\t  ,DATA_CHANGE_LOG_ID )\n\t\t\tVALUES(\n\t\t\t\t\t  '${PARAM_FUNC_ID}'\n\t\t\t\t\t  ,'C'\n\t\t\t\t\t  ,IDENT_CURRENT('DAYOFF_APPLY_DETAIL')\n\t\t\t\t\t  ,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t\t  ,'$$USERID$$'\n\t\t\t\t\t  ,'$$WORK_STATUS$$'\n\t\t\t\t\t  ,'$$APPLY_DATE$$'\n\t\t\t\t\t  ,'$$WORK_SDATE$$'\n\t\t\t\t\t  ,'$$WORK_STIME$$'\n\t\t\t\t\t  ,'$$WORK_EDATE$$'\n\t\t\t\t\t  ,'$$WORK_ETIME$$'\n\t\t\t\t\t  ,CONVERT(NUMERIC(6,3),'$$TOTAL_DAYS$$')\n\t\t\t\t\t  ,NULL\t\t\t\t--2020.04.10 MODIFIED\n\t\t\t\t\t  ,NULL\t\t\t\t--2020.04.10 MODIFIED\n\t\t\t\t\t  ,0\n\t\t\t\t\t  ,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t  ,'${PARAM_COMPANY}'\n\t\t\t\t\t  ,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t  ,IDENT_CURRENT('DATA_CHANGE_LOG'));\n\n\t\t\t/* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n\t\t\tINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t\t  ( ProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE \n\t\t\t\t\t,RETURN_MSG \n\t\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t\t,MEMO)\n\t\t\tVALUES(        \n\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'0'\n\t\t\t\t\t,'待放行假單新增成功'\n\t\t\t\t\t,IDENT_CURRENT('DAYOFF_APPLY_DETAIL')\n\t\t\t\t\t,'C' \n\t\t\t\t\t,'$$MEMO$$');\n\t\t\t\t\t\n\t\t\tSET @DAYOFF_SEQ\= IDENT_CURRENT('JH_SIGNON');\n\n\t\t\t/****新增申請假單迄時******/\t\t\n\t\t\tInsert into JH_SIGNON /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\t USERID\n\t\t\t,USERNAME\n\t\t\t,WORK_STATUS\n\t\t\t,DAYOFF_SECODE\n\t\t\t,WORK_DATE\n\t\t\t,WORK_TIME\n\t\t\t,TAKELEAVE_STATUS\n\t\t\t,JOB_CODE\n\t\t\t,DAYOFF_SEQ\n\t\t\t,AUDIT_USERID\n\t\t\t,DATA_STATUS\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t) \n\t\t\tVALUES(\n\t\t\t '$$USERID$$'\n\t\t\t ,'$$USERNAME$$'\n\t\t\t ,'$$WORK_STATUS$$'\n\t\t\t ,'E'\n\t\t\t ,'$$WORK_EDATE$$'\n\t\t\t ,'$$WORK_ETIME$$'\n\t\t\t ,'W'\n\t\t\t ,@JOB_CODE\n\t\t\t ,@DAYOFF_SEQ\n\t\t\t ,'$$AGREE_ID$$'\n\t\t\t ,0\n\t\t\t ,'${PARAM_SOURCE_COMING}'\n\t\t\t ,'${PARAM_COMPANY}'\n\t\t\t ,CONVERT(VARCHAR,getdate(),120)\n\t\t\t);\n\n\t\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\t\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\t\t\tFUNC_ID\n\t\t\t\t   ,PROC_TYPE\n\t\t\t\t   ,USER_ID\n\t\t\t\t   ,DATA_NO\n\t\t\t\t   ,EVENT_DT\n\t\t\t\t   ,MEMO\n\t\t\t\t   ,SessionID\n\t\t\t\t   ,ProcPK\n\t\t\t\t   ,PROC_TARGET\n\t\t\t)\n\t\t\tVALUES(\n\t\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t   ,'insert'\n\t\t\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t\t\t   ,IDENT_CURRENT('JH_SIGNON') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t\t\t   ,'$$MEMO$$'\n\t\t\t\t   ,'${PARAM_SESSION_ID}'\n\t\t\t\t   ,'${LOGPK}'\n\t\t\t\t   ,'JH_SIGNON' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t);\n\t\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\t\tINSERT INTO LOG_JH_SIGNON  /* WITH (ROWLOCK) */ \n\t\t\t\t\t ( FUNC_ID \n\t\t\t\t\t  ,CRUD_STATE \n\t\t\t\t\t  ,PK_USERID\n\t\t\t\t\t  ,USERID\n\t\t\t\t\t  ,USERNAME\n\t\t\t\t\t  ,WORK_STATUS\n\t\t\t\t\t  ,DAYOFF_SECODE\n\t\t\t\t\t  ,WORK_DATE\n\t\t\t\t\t  ,WORK_TIME\n\t\t\t\t\t  ,TAKELEAVE_STATUS\n\t\t\t\t\t  ,JOB_CODE\n\t\t\t\t\t  ,DAYOFF_SEQ\n\t\t\t\t\t  ,AUDIT_USERID\n\t\t\t\t\t  ,DATA_STATUS\n\t\t\t\t\t  ,ADD_USER_ID\n\t\t\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t\t\t  ,ADD_DT\n\t\t\t\t\t  ,DATA_CHANGE_LOG_ID )\n\t\t\tVALUES(\n\t\t\t\t\t  '${PARAM_FUNC_ID}'\n\t\t\t\t\t  ,'C'\n\t\t\t\t\t  ,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t\t  ,'$$USERID$$'\n\t\t\t\t\t  ,'$$USERNAME$$'\n\t\t\t\t\t  ,'$$WORK_STATUS$$'\n\t\t\t\t\t  ,'E'\n\t\t\t\t\t  ,'$$WORK_EDATE$$'\n\t\t\t\t\t  ,'$$WORK_ETIME$$'\n\t\t\t\t\t  --,'C'\t\t\t\t--2020.04.06\n\t\t\t\t\t  ,'W'\t\t\t\t\t--2020.04.06\n\t\t\t\t\t  ,@JOB_CODE\n\t\t\t\t\t  ,@DAYOFF_SEQ\n\t\t\t\t\t  ,'$$AGREE_ID$$'\n\t\t\t\t\t  ,0\n\t\t\t\t\t  ,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t  ,'${PARAM_COMPANY}'\n\t\t\t\t\t  ,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t  ,IDENT_CURRENT('DATA_CHANGE_LOG'));\n\n\t\t\t/* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n\t\t\tINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t\t  ( ProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE \n\t\t\t\t\t,RETURN_MSG \n\t\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t\t,MEMO)\n\t\t\tVALUES(        \n\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'0'\n\t\t\t\t\t,'假單送出成功(E)'\n\t\t\t\t\t,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t\t,'C' \n\t\t\t\t\t,'$$MEMO$$');\n\tEND\n\tELSE\n\tBEGIN\n\t\t\tINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t  ( ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE \n\t\t\t\t,RETURN_MSG \n\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t,MEMO)\n\t\t\tVALUES(        \n\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'-1'\n\t\t\t\t\t,'請特休假，需以天為單位。'\n\t\t\t\t\t,'SV_ERR'\n\t\t\t\t\t,'C' \n\t\t\t\t\t,'$$MEMO$$');\n\tEND\nEND\n ELSE\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK_COL 流水號欄位 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_SIGNON'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\n\nSELECT * FROM JH_SIGNON WITH (NOLOCK) WHERE PK_USERID \= '$$PK_USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/* 2.2 DATA Detail LOG (before modified) */\n  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */ \n   INSERT INTO LOG_JH_SIGNON /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,WORK_DATE\n          ,WORK_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,WORK_DATE\n          ,WORK_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM JH_SIGNON  WITH (NOLOCK)\n   WHERE PK_USERID \= '$$PK_USERID$$';\n/* 2.3 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n   ELSE\n   BEGIN\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n/* 2.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n   DELETE  JH_SIGNON WITH (ROWLOCK)\n   WHERE PK_USERID \= '$$PK_USERID$$';\nEND\n  ELSE\n   IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n   BEGIN\n   \n\tSET @HOURS \= CONVERT(NUMERIC(2,0),SUBSTRING('$$WORK_ETIME$$',1,2))-CONVERT(NUMERIC(2,0),SUBSTRING('$$WORK_STIME$$',1,2));\n\tSELECT @DAYOFF_SEQ \= dbo.CHK_REPEAT_VOCATION('$$USERID$$','$$WORK_SDATE$$','$$WORK_STIME$$','$$WORK_EDATE$$','$$WORK_ETIME$$')\t--2020.05.25 MODIFIED\n\n\t--當假單起日等於系統日，新增判斷假單起始時間必須大於系統時間\n\tIF\t@SYS_DATE \= '$$WORK_SDATE$$' AND '$$WORK_STIME$$'<\= @SYS_TIME \n\tBEGIN\n\t\tINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t  ( ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE \n\t\t\t\t,RETURN_MSG \n\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t,MEMO)\n\t\t\tVALUES(        \n\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'-1'\n\t\t\t\t\t,'假單起始時間必須大於系統時間'\n\t\t\t\t\t,'DAYOFF_STIME_SMALL'\n\t\t\t\t\t,'C' \n\t\t\t\t\t,'$$MEMO$$');\n\tEND\n\t--新增不得重複申請假單(@DAYOFF_SEQ>0)的判斷\n\tELSE IF NULLIF(ISNULL(@DAYOFF_SEQ,0),0) IS NOT NULL\n\tBEGIN\n\t\n\t\tSET @MAX_OFFSDT \= (SELECT WORK_DATE\n\t\t\t\t\t\t\t FROM JH_SIGNON \n\t\t\t\t\t\t    WHERE DAYOFF_SEQ \= @DAYOFF_SEQ\n\t\t\t\t\t\t\t  AND DAYOFF_SECODE \= 'S');\n\t\n\t\tSET @MAX_OFFEDT \= (SELECT WORK_DATE\n\t\t\t\t\t\t\t FROM JH_SIGNON \n\t\t\t\t\t\t    WHERE DAYOFF_SEQ \= @DAYOFF_SEQ\n\t\t\t\t\t\t\t  AND DAYOFF_SECODE \= 'E');\n\t\t\t\t\t\t\t\n\t\tSET @MAX_WORKSTIME \= (SELECT WORK_TIME\n\t\t\t\t\t\t\t\tFROM JH_SIGNON\n\t\t\t\t\t\t\t   WHERE DAYOFF_SEQ \= @DAYOFF_SEQ\n\t\t\t\t\t\t\t\t AND DAYOFF_SECODE \= 'S'\n\t\t\t\t\t\t\t  );\n\t\t\t\t\t\t\t\t \n\t\tSET @MAX_WORKETIME \= (SELECT WORK_TIME\n\t\t\t\t\t\t\t\tFROM JH_SIGNON\n\t\t\t\t\t\t\t   WHERE DAYOFF_SEQ \= @DAYOFF_SEQ\n\t\t\t\t\t\t\t\t AND DAYOFF_SECODE \= 'E'\n\t\t\t\t\t\t\t  );\n\t\t\n\t\tSET @DAYOFF_NAME \= (SELECT DC.DAYOFF_NAME\n\t\t\t\t\t\t\t  FROM JH_SIGNON SI\n\t\t\t\t\t\t\t  INNER JOIN DAYOFFCLASS DC \n\t\t\t\t\t\t\t  ON DC.DAYOFF_ID \= SI.WORK_STATUS\n\t\t\t\t\t\t\t WHERE SI.DAYOFF_SEQ \= @DAYOFF_SEQ\n\t\t\t\t\t\t\t   AND SI.DAYOFF_SECODE \= 'E'\n\t\t\t\t\t\t\t);\n\t\n\t\tINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t  ( ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE \n\t\t\t\t,RETURN_MSG \n\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t,MEMO)\n\t\t\tVALUES(        \n\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'-1'\n\t\t\t\t\t,'已有衝突時段的假單存在<br/>假別：'+ @DAYOFF_NAME +'，請假時間：'+CONVERT(varchar,@MAX_OFFSDT,111)+' '+@MAX_WORKSTIME +'~'+CONVERT(varchar,@MAX_OFFEDT,111)+' '+@MAX_WORKETIME\n\t\t\t\t\t,'SAME_DAYOFF'\n\t\t\t\t\t,'C' \n\t\t\t\t\t,'$$MEMO$$');\n\tEND\n\tELSE IF ('$$WORK_STATUS$$' \= 'SV' AND @HOURS\=9) OR '$$WORK_STATUS$$' <> 'SV'\t--新增判斷請特休假至少要以天為單位\n\tBEGIN\n\t\t/* 3.1 DATA_CHANGE_LOG */\n\t\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t\t(\n\t\t\t\tFUNC_ID\n\t\t\t   ,PROC_TYPE\n\t\t\t   ,USER_ID\n\t\t\t   ,DATA_NO\n\t\t\t   ,EVENT_DT\n\t\t\t   ,MEMO\n\t\t\t   ,SessionID\n\t\t\t   ,ProcPK\n\t\t\t   ,PROC_TARGET\n\t\t)\n\t\tVALUES(\n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t   ,'update'\n\t\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t\t   ,'$$DAYOFF_SEQ$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t\t   ,'$$MEMO$$'\n\t\t\t   ,'${PARAM_SESSION_ID}'\n\t\t\t   ,'${LOGPK}'\n\t\t\t   ,'JH_SIGNON' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t);\n\t\tIF EXISTS (\n\t\tSELECT * FROM JH_SIGNON WITH (NOLOCK) WHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\t\tBEGIN\n\t\t/* 3.2 DATA Detail LOG (before modified) */\n\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\t   INSERT INTO LOG_JH_SIGNON /* WITH (ROWLOCK) */\n\t\t\t\t( FUNC_ID\n\t\t\t\t  ,CRUD_STATE\n\t\t\t\t  ,PK_USERID\n\t\t\t\t  ,USERID\n\t\t\t\t  ,USERNAME\n\t\t\t\t  ,WORK_STATUS\n\t\t\t\t  ,DAYOFF_SECODE\n\t\t\t\t  ,WORK_DATE\n\t\t\t\t  ,WORK_TIME\n\t\t\t\t  ,TAKELEAVE_STATUS\n\t\t\t\t  ,JOB_CODE\n\t\t\t\t  ,DAYOFF_SEQ\n\t\t\t\t  ,AUDIT_USERID\n\t\t\t\t  ,DATA_STATUS\n\t\t\t\t  ,ADD_USER_ID\n\t\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t\t  ,ADD_DT\n\t\t\t\t  ,LAST_MOD_USER_ID\n\t\t\t\t  ,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t  ,LAST_MOD_DT\n\t\t\t\t  ,DEL_USER_ID\n\t\t\t\t  ,DEL_USER_COMPANY_ID\n\t\t\t\t  ,DEL_DT\n\t\t\t\t  ,DATA_CHANGE_LOG_ID)\n\t\t   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n\t\t\t\t  ,'U' AS CRUD_STATE\n\t\t\t\t  ,PK_USERID\n\t\t\t\t  ,USERID\n\t\t\t\t  ,USERNAME\n\t\t\t\t  ,WORK_STATUS\n\t\t\t\t  ,DAYOFF_SECODE\n\t\t\t\t  ,WORK_DATE\n\t\t\t\t  ,WORK_TIME\n\t\t\t\t  ,TAKELEAVE_STATUS\n\t\t\t\t  ,JOB_CODE\n\t\t\t\t  ,DAYOFF_SEQ\n\t\t\t\t  ,AUDIT_USERID\n\t\t\t\t  ,DATA_STATUS\n\t\t\t\t  ,ADD_USER_ID\n\t\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t\t  ,ADD_DT\n\t\t\t\t  ,LAST_MOD_USER_ID\n\t\t\t\t  ,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t  ,LAST_MOD_DT\n\t\t\t\t  ,DEL_USER_ID\n\t\t\t\t  ,DEL_USER_COMPANY_ID\n\t\t\t\t  ,DEL_DT\n\t\t\t\t  ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t FROM JH_SIGNON WITH (NOLOCK)\n\t\t   WHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t;\n\t\t/* 3.3 Action Return */\n\t\t   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n\t\t\t   ( ProcPK\n\t\t\t\t ,hashValues\n\t\t\t\t ,RETURN_CODE\n\t\t\t\t ,RETURN_MSG\n\t\t\t\t ,DATA_UNIQUE_KEY\n\t\t\t\t ,DATA_ACTION_TYPE \n\t\t\t\t ,MEMO)\n\t\t   VALUES ( \n\t\t\t\t '${LOGPK}' \n\t\t\t\t ,@FROM_OUTSIDE\n\t\t\t\t ,'0'\n\t\t\t\t ,'SUCCESS'\n\t\t\t\t,'$$DAYOFF_SEQ$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t ,'U' \n\t\t\t\t ,'$$MEMO$$');\n\t\tEND\n\t\tELSE\n\t\tBEGIN\n\t\t\t/* 3.4 Action Return */\n\t\t   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t  ( ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE \n\t\t\t\t,RETURN_MSG \n\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t,MEMO)\n\t\t   VALUES ( \n\t\t\t\t'${LOGPK}' \n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t\t,'$$DAYOFF_SEQ$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'U' \n\t\t\t\t,'$$MEMO$$');\n\t\tEND\n\t\t/* 3.5 功能主要異動 Table */\n\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\tUPDATE JH_SIGNON WITH (ROWLOCK)\n\t\t SET TAKELEAVE_STATUS \= 'W'\n\t\t\t,WORK_STATUS\=(CASE WHEN SUBSTRING('$$WORK_STATUS$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN WORK_STATUS ELSE SUBSTRING('$$WORK_STATUS$$',1,50) END)\n\t\t\t,WORK_DATE\=(CASE WHEN ISDATE('$$WORK_SDATE$$')\=1 THEN (CASE WHEN ISNULL(WORK_DATE,CONVERT(DATETIME, '', 23))\='$$WORK_SDATE$$' THEN WORK_DATE ELSE CONVERT(date,'$$WORK_SDATE$$') END) ELSE WORK_DATE END)\n\t\t\t,WORK_TIME\=(CASE WHEN SUBSTRING('$$WORK_STIME$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN WORK_TIME ELSE SUBSTRING('$$WORK_STIME$$',1,10) END)\n\t\t\t,AUDIT_USERID\=(CASE WHEN SUBSTRING('$$AGREE_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN AUDIT_USERID ELSE SUBSTRING('$$AGREE_ID$$',1,50) END) \n\t\t\t,DATA_STATUS\='0'\n\t\t\t,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n\t\t\t,LAST_MOD_USER_COMPANY_ID\='${PARAM_COMPANY}'\n\t\t\t,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\tWHERE DAYOFF_SEQ\='$$DAYOFF_SEQ$$'\n\t\t  AND DAYOFF_SECODE\='S';\n\t\t\n\t\tUPDATE JH_SIGNON WITH (ROWLOCK)\n\t\t SET TAKELEAVE_STATUS \= 'W'\n\t\t\t,WORK_STATUS\=(CASE WHEN SUBSTRING('$$WORK_STATUS$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN WORK_STATUS ELSE SUBSTRING('$$WORK_STATUS$$',1,50) END)\n\t\t\t,WORK_DATE\=(CASE WHEN ISDATE('$$WORK_EDATE$$')\=1 THEN (CASE WHEN ISNULL(WORK_DATE,CONVERT(DATETIME, '', 23))\='$$WORK_EDATE$$' THEN WORK_DATE ELSE CONVERT(date,'$$WORK_EDATE$$') END) ELSE WORK_DATE END)\n\t\t\t,WORK_TIME\=(CASE WHEN SUBSTRING('$$WORK_ETIME$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN WORK_TIME ELSE SUBSTRING('$$WORK_ETIME$$',1,10) END)\n\t\t\t,AUDIT_USERID\=(CASE WHEN SUBSTRING('$$AGREE_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN AUDIT_USERID ELSE SUBSTRING('$$AGREE_ID$$',1,50) END)\n\t\t\t,DATA_STATUS\='0'\n\t\t\t,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n\t\t\t,LAST_MOD_USER_COMPANY_ID\='${PARAM_COMPANY}'\n\t\t\t,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\tWHERE DAYOFF_SEQ\='$$DAYOFF_SEQ$$'\n\t\t  AND DAYOFF_SECODE\='E';\n\n\t\t/* 3.1 DATA_CHANGE_LOG */\n\t\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t\t(\n\t\t\t\tFUNC_ID\n\t\t\t   ,PROC_TYPE\n\t\t\t   ,USER_ID\n\t\t\t   ,DATA_NO\n\t\t\t   ,EVENT_DT\n\t\t\t   ,MEMO\n\t\t\t   ,SessionID\n\t\t\t   ,ProcPK\n\t\t\t   ,PROC_TARGET\n\t\t)\n\t\tVALUES(\n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t   ,'update'\n\t\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t\t   ,'$$PK_DAD$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t\t   ,'$$MEMO$$'\n\t\t\t   ,'${PARAM_SESSION_ID}'\n\t\t\t   ,'${LOGPK}'\n\t\t\t   ,'DAYOFF_APPLY_DETAIL' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t);\n\t\tIF EXISTS (\n\t\tSELECT * FROM DAYOFF_APPLY_DETAIL WITH (NOLOCK) WHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\t\tBEGIN\n\t\t/* 3.2 DATA Detail LOG (before modified) */\n\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\t   INSERT INTO LOG_DAYOFF_APPLY_DETAIL /* WITH (ROWLOCK) */\n\t\t\t\t( FUNC_ID\n\t\t\t\t  ,CRUD_STATE\n\t\t\t\t  ,PK_DAD\n\t\t\t\t  ,DAYOFF_SEQ\n\t\t\t\t  ,USERID\n\t\t\t\t  ,DAYOFF_ID\n\t\t\t\t  ,APPLY_DATE\n\t\t\t\t  ,START_DATE\n\t\t\t\t  ,START_TIME\n\t\t\t\t  ,END_DATE\n\t\t\t\t  ,END_TIME\n\t\t\t\t  ,TOTAL_DAYS\n\t\t\t\t  ,AGREE_ID\n\t\t\t\t  ,AGREE_TIME\n\t\t\t\t  ,DATA_STATUS\n\t\t\t\t  ,ADD_USER_ID\n\t\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t\t  ,ADD_DT\n\t\t\t\t  ,LAST_MOD_USER_ID\n\t\t\t\t  ,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t  ,LAST_MOD_DT\n\t\t\t\t  ,DEL_USER_ID\n\t\t\t\t  ,DEL_USER_COMPANY_ID\n\t\t\t\t  ,DEL_DT\n\t\t\t\t  ,DATA_CHANGE_LOG_ID)\n\t\t   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n\t\t\t\t  ,'U' AS CRUD_STATE\n\t\t\t\t  ,PK_DAD\n\t\t\t\t  ,DAYOFF_SEQ\n\t\t\t\t  ,USERID\n\t\t\t\t  ,DAYOFF_ID\n\t\t\t\t  ,APPLY_DATE\n\t\t\t\t  ,START_DATE\n\t\t\t\t  ,START_TIME\n\t\t\t\t  ,END_DATE\n\t\t\t\t  ,END_TIME\n\t\t\t\t  ,TOTAL_DAYS\n\t\t\t\t  ,AGREE_ID\n\t\t\t\t  ,AGREE_TIME\n\t\t\t\t  ,DATA_STATUS\n\t\t\t\t  ,ADD_USER_ID\n\t\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t\t  ,ADD_DT\n\t\t\t\t  ,LAST_MOD_USER_ID\n\t\t\t\t  ,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t  ,LAST_MOD_DT\n\t\t\t\t  ,DEL_USER_ID\n\t\t\t\t  ,DEL_USER_COMPANY_ID\n\t\t\t\t  ,DEL_DT\n\t\t\t\t  ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t FROM DAYOFF_APPLY_DETAIL WITH (NOLOCK)\n\t\t   WHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t;\n\t\t/* 3.3 Action Return */\n\t\t   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n\t\t\t   ( ProcPK\n\t\t\t\t ,hashValues\n\t\t\t\t ,RETURN_CODE\n\t\t\t\t ,RETURN_MSG\n\t\t\t\t ,DATA_UNIQUE_KEY\n\t\t\t\t ,DATA_ACTION_TYPE \n\t\t\t\t ,MEMO)\n\t\t   VALUES ( \n\t\t\t\t '${LOGPK}' \n\t\t\t\t ,@FROM_OUTSIDE\n\t\t\t\t ,'0'\n\t\t\t\t ,'SUCCESS'\n\t\t\t\t,'$$DAYOFF_SEQ$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t ,'U' \n\t\t\t\t ,'$$MEMO$$');\n\t\tEND\n\t\t\tELSE\n\t\t\tBEGIN\n\t\t/* 3.4 Action Return */\n\t\t   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t  ( ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE \n\t\t\t\t,RETURN_MSG \n\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t,MEMO)\n\t\t   VALUES ( \n\t\t\t\t'${LOGPK}' \n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t\t,'$$DAYOFF_SEQ$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,'U' \n\t\t\t\t,'$$MEMO$$');\n\t\tEND\n\t\t/* 3.5 功能主要異動 Table */\n\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\tUPDATE DAYOFF_APPLY_DETAIL WITH (ROWLOCK)\n\t\t   SET  USERID\=(CASE WHEN SUBSTRING('$$USERID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN USERID ELSE SUBSTRING('$$USERID$$',1,50) END)\n\t\t\t\t,DAYOFF_ID\=(CASE WHEN SUBSTRING('$$WORK_STATUS$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN DAYOFF_ID ELSE SUBSTRING('$$WORK_STATUS$$',1,10) END)\n\t\t\t\t,APPLY_DATE\=(CASE WHEN SUBSTRING('$$APPLY_DATE$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN APPLY_DATE ELSE SUBSTRING('$$APPLY_DATE$$',1,20) END)\n\t\t\t\t,START_DATE\=(CASE WHEN SUBSTRING('$$WORK_SDATE$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN START_DATE ELSE SUBSTRING('$$WORK_SDATE$$',1,10) END)\n\t\t\t\t,START_TIME\=(CASE WHEN SUBSTRING('$$WORK_STIME$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN START_TIME ELSE SUBSTRING('$$WORK_STIME$$',1,10) END)\n\t\t\t\t,END_DATE\=(CASE WHEN SUBSTRING('$$WORK_EDATE$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN END_DATE ELSE SUBSTRING('$$WORK_EDATE$$',1,10) END)\n\t\t\t\t,END_TIME\=(CASE WHEN SUBSTRING('$$WORK_ETIME$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN END_TIME ELSE SUBSTRING('$$WORK_ETIME$$',1,10) END)\n\t\t\t\t,TOTAL_DAYS\=(CASE WHEN ISNUMERIC('$$TOTAL_DAYS$$')\=1 THEN (CASE WHEN ISNULL(TOTAL_DAYS,'0')\='$$TOTAL_DAYS$$'  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN (CASE WHEN '$$TOTAL_DAYS$$'\='0' \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   THEN '0' ELSE TOTAL_DAYS END) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE '$$TOTAL_DAYS$$'  END) \n\t\t\t\t\t\t\t\t  ELSE TOTAL_DAYS END)\n\t\t\t\t,AGREE_ID\=''\n\t\t\t\t,AGREE_TIME\=''\n\t\t\t\t,DATA_STATUS\='0'\n\t\t\t\t,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n\t\t\t\t,LAST_MOD_USER_COMPANY_ID\='${PARAM_COMPANY}'\n\t\t\t\t,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\tWHERE DAYOFF_SEQ\='$$DAYOFF_SEQ$$';\n\tEND\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$PK_USERID$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
SIGNON_DAYOFF_APPLY_TIMECB=/* Last Updated Date\: 2020/04/17\nUpdated by Noli\n功能：請假開始與結束時間之COMBOBOX*/\n\nSELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM (SELECT C_INDEX,\n\t\t\t\t  C_NAME\n\t\t\t FROM DAYOFF_CLAIMTIME\n\t\t ) C\n\t ) A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY C_INDEX) AS RowNum,\n\t\tC_INDEX,\n\t\tC_NAME\n\tFROM (SELECT C_INDEX,\n\t\t\t\t C_NAME\n\t\t\tFROM DAYOFF_CLAIMTIME\n\t\t ) C\n\t ) B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n;
SIGNON_DAYOFF_AUDIT=/*  UPDATED AT 2020/04/24\n 1. TAKELEAVE_STATUS新增ISNULL判斷\n*/\nBEGIN TRY\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n --2020.04.09 START ADDED\n /* 1.2 DATA_CHANGE_LOG for Master Table */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'insert'\n       ,'${PARAM_SOURCE_COMING}'\n       ,IDENT_CURRENT('JH_SIGNON') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_SIGNON' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\n/* 1.3 DATA Detail LOG for Master Table(before modified) */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\nINSERT INTO LOG_JH_SIGNON  /* WITH (ROWLOCK) */ \n         ( FUNC_ID \n          ,CRUD_STATE \n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,DAYOFF_SECODE\n          ,WORK_DATE\n          ,WORK_TIME\n          ,TAKELEAVE_STATUS\n          ,JOB_CODE\n          ,DAYOFF_SEQ\n          ,AUDIT_USERID\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n\t\t  ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID )\nSELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,DAYOFF_SECODE\n          ,WORK_DATE\n          ,WORK_TIME\n          ,TAKELEAVE_STATUS\n          ,JOB_CODE\n          ,DAYOFF_SEQ\n          ,AUDIT_USERID\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n\t\t  ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n  FROM JH_SIGNON WITH (NOLOCK)\n WHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$'\n   AND ISNULL(TAKELEAVE_STATUS,'') <> 'C'\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n \n UPDATE JH_SIGNON\n\tSET DATA_STATUS\='0'\n\t\t,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n\t    ,LAST_MOD_USER_COMPANY_ID\='${PARAM_COMPANY}'\n\t    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n WHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$'\n   AND ISNULL(TAKELEAVE_STATUS,'') <> 'C';\n \n--2020.04.09 END ADDED\n/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n/*  這一段 update 可用noli的excel 檔中的  INSERT 產生器，來產生對應的欄位及語法  */\nInsert into JH_SIGNON /* WITH (ROWLOCK) */\n(\nUSERID\n,USERNAME\n,WORK_STATUS\n,DAYOFF_SECODE\n,WORK_DATE\n,WORK_TIME\n,TAKELEAVE_STATUS\n,JOB_CODE\n,DAYOFF_SEQ\n,AUDIT_USERID\n,DATA_STATUS\n,ADD_USER_ID\n,ADD_USER_COMPANY_ID\n,ADD_DT\n) \nSELECT USERID\n\t  ,USERNAME\n\t  ,WORK_STATUS\n\t  ,DAYOFF_SECODE\n\t  ,WORK_DATE\n\t  ,WORK_TIME\n\t  ,'$$TAKELEAVE_STATUS$$'\t--'C'\n\t  ,JOB_CODE\n\t  ,DAYOFF_SEQ\n\t  ,AUDIT_USERID\n\t  ,'0'\t\t\t\t\t\t--2020.04.09 MODIFIED\n\t  ,ADD_USER_ID\n\t  ,ADD_USER_COMPANY_ID\n\t  ,ADD_DT\n FROM JH_SIGNON WITH (NOLOCK)\nWHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$'; /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\nUPDATE JH_SIGNON\n   SET LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n\t   ,LAST_MOD_USER_COMPANY_ID\='${PARAM_COMPANY}'\n\t   ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n WHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$'\n   AND ISNULL(TAKELEAVE_STATUS,'') \= 'C';\n\n/* 1.2 DATA_CHANGE_LOG for Master Table */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'insert'\n       ,'${PARAM_SOURCE_COMING}'\n       ,IDENT_CURRENT('JH_SIGNON') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_SIGNON' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\n/* 1.3 DATA Detail LOG for Master Table(before modified) */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\nINSERT INTO LOG_JH_SIGNON  /* WITH (ROWLOCK) */ \n         ( FUNC_ID \n          ,CRUD_STATE \n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,DAYOFF_SECODE\n          ,WORK_DATE\n          ,WORK_TIME\n          ,TAKELEAVE_STATUS\n          ,JOB_CODE\n          ,DAYOFF_SEQ\n          ,AUDIT_USERID\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,DATA_CHANGE_LOG_ID )\nSELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,DAYOFF_SECODE\n          ,WORK_DATE\n          ,WORK_TIME\n          ,TAKELEAVE_STATUS\n          ,JOB_CODE\n          ,DAYOFF_SEQ\n          ,AUDIT_USERID\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n  FROM JH_SIGNON WITH (NOLOCK)\n WHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n   AND ISNULL(TAKELEAVE_STATUS,'') \= '$$TAKELEAVE_STATUS$$'\n   \n/* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES (        \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0'\n        ,'SUCCESS'\n        ,IDENT_CURRENT('JH_SIGNON')\n        ,'C' \n        ,'$$MEMO$$');\n\t\t\n\t/* UPDATE DAYOFF_APPLY_DETAIL 的放行/退回/撤銷人員' 2020.04.09 ADDED*/\n\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t(\n\t\t\tFUNC_ID\n\t\t   ,PROC_TYPE\n\t\t   ,USER_ID\n\t\t   ,DATA_NO\n\t\t   ,EVENT_DT\n\t\t   ,MEMO\n\t\t   ,SessionID\n\t\t   ,ProcPK\n\t\t   ,PROC_TARGET\n\t)\n\tVALUES(\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t   ,'update'\n\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t   ,'$$PK_DAD$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t   ,'$$MEMO$$'\n\t\t   ,'${PARAM_SESSION_ID}'\n\t\t   ,'${LOGPK}'\n\t\t   ,'DAYOFF_APPLY_DETAIL' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t);\n\tIF EXISTS (\n\tSELECT * FROM DAYOFF_APPLY_DETAIL WITH (NOLOCK) WHERE PK_DAD \= '$$PK_DAD$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\tBEGIN\n\t/* 3.2 DATA Detail LOG (before modified) */\n\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t   INSERT INTO LOG_DAYOFF_APPLY_DETAIL /* WITH (ROWLOCK) */\n\t\t\t( FUNC_ID\n\t\t\t  ,CRUD_STATE\n\t\t\t  ,PK_DAD\n\t\t\t  ,DAYOFF_SEQ\n\t\t\t  ,USERID\n\t\t\t  ,DAYOFF_ID\n\t\t\t  ,APPLY_DATE\n\t\t\t  ,START_DATE\n\t\t\t  ,START_TIME\n\t\t\t  ,END_DATE\n\t\t\t  ,END_TIME\n\t\t\t  ,TOTAL_DAYS\n\t\t\t  ,AGREE_ID\n\t\t\t  ,AGREE_TIME\n\t\t\t  ,DATA_STATUS\n\t\t\t  ,ADD_USER_ID\n\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t  ,ADD_DT\n\t\t\t  ,LAST_MOD_USER_ID\n\t\t\t  ,LAST_MOD_USER_COMPANY_ID\n\t\t\t  ,LAST_MOD_DT\n\t\t\t  ,DEL_USER_ID\n\t\t\t  ,DEL_USER_COMPANY_ID\n\t\t\t  ,DEL_DT\n\t\t\t  ,DATA_CHANGE_LOG_ID)\n\t   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n\t\t\t  ,'U' AS CRUD_STATE\n\t\t\t  ,PK_DAD\n\t\t\t  ,DAYOFF_SEQ\n\t\t\t  ,USERID\n\t\t\t  ,DAYOFF_ID\n\t\t\t  ,APPLY_DATE\n\t\t\t  ,START_DATE\n\t\t\t  ,START_TIME\n\t\t\t  ,END_DATE\n\t\t\t  ,END_TIME\n\t\t\t  ,TOTAL_DAYS\n\t\t\t  ,AGREE_ID\n\t\t\t  ,AGREE_TIME\n\t\t\t  ,DATA_STATUS\n\t\t\t  ,ADD_USER_ID\n\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t  ,ADD_DT\n\t\t\t  ,LAST_MOD_USER_ID\n\t\t\t  ,LAST_MOD_USER_COMPANY_ID\n\t\t\t  ,LAST_MOD_DT\n\t\t\t  ,DEL_USER_ID\n\t\t\t  ,DEL_USER_COMPANY_ID\n\t\t\t  ,DEL_DT\n\t\t\t  ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t FROM DAYOFF_APPLY_DETAIL WITH (NOLOCK)\n\t   WHERE PK_DAD \= '$$PK_DAD$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t;\n\t/* 3.3 Action Return */\n\t   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n\t\t   ( ProcPK\n\t\t\t ,hashValues\n\t\t\t ,RETURN_CODE\n\t\t\t ,RETURN_MSG\n\t\t\t ,DATA_UNIQUE_KEY\n\t\t\t ,DATA_ACTION_TYPE \n\t\t\t ,MEMO)\n\t   VALUES ( \n\t\t\t '${LOGPK}' \n\t\t\t ,@FROM_OUTSIDE\n\t\t\t ,'0'\n\t\t\t ,'SUCCESS'\n\t\t\t,'$$PK_DAD$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t ,'U' \n\t\t\t ,'$$MEMO$$');\n\tEND\n\t\tELSE\n\t\tBEGIN\n\t/* 3.4 Action Return */\n\t   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t  ( ProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE \n\t\t\t,RETURN_MSG \n\t\t\t,DATA_UNIQUE_KEY \n\t\t\t,DATA_ACTION_TYPE \n\t\t\t,MEMO)\n\t   VALUES ( \n\t\t\t'${LOGPK}' \n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'-1'\n\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t,'$$PK_DAD$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,'U' \n\t\t\t,'$$MEMO$$');\n\tEND\n\t/* 3.5 功能主要異動 Table */\n\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\tUPDATE DAYOFF_APPLY_DETAIL WITH (ROWLOCK)\n\t   SET AGREE_ID\=(CASE WHEN SUBSTRING('$$AGREE_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN AGREE_ID ELSE SUBSTRING('$$AGREE_ID$$',1,50) END)\n\t\t   ,AGREE_TIME\=CONVERT(varchar,getdate(),120)\n\t\t   ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n\t\t   ,LAST_MOD_USER_COMPANY_ID\='${PARAM_COMPANY}'\n\t\t   ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n\tWHERE PK_DAD\='$$PK_DAD$$';\n\t\nEND\n ELSE\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK_COL 流水號欄位 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_SIGNON'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\n\nSELECT * FROM JH_SIGNON WITH (NOLOCK) WHERE PK_USERID \= '$$PK_USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/* 2.2 DATA Detail LOG (before modified) */\n  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */ \n   INSERT INTO LOG_JH_SIGNON /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,DAYOFF_SECODE\n          ,WORK_DATE\n          ,WORK_TIME\n          ,TAKELEAVE_STATUS\n          ,JOB_CODE\n          ,DAYOFF_SEQ\n          ,AUDIT_USERID\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,DAYOFF_SECODE\n          ,WORK_DATE\n          ,WORK_TIME\n          ,TAKELEAVE_STATUS\n          ,JOB_CODE\n          ,DAYOFF_SEQ\n          ,AUDIT_USERID\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM JH_SIGNON  WITH (NOLOCK)\n   WHERE PK_USERID \= '$$PK_USERID$$';\n/* 2.3 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n   ELSE\n   BEGIN\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n/* 2.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n   DELETE  JH_SIGNON WITH (ROWLOCK)\n   WHERE PK_USERID \= '$$PK_USERID$$';\nEND\n  ELSE\n   IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n   BEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$DAYOFF_SEQ$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_SIGNON' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\nSELECT * FROM JH_SIGNON WITH (NOLOCK) WHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n   INSERT INTO LOG_JH_SIGNON /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,DAYOFF_SECODE\n          ,WORK_DATE\n          ,WORK_TIME\n          ,TAKELEAVE_STATUS\n          ,JOB_CODE\n          ,DAYOFF_SEQ\n          ,AUDIT_USERID\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,DAYOFF_SECODE\n          ,WORK_DATE\n          ,WORK_TIME\n          ,TAKELEAVE_STATUS\n          ,JOB_CODE\n          ,DAYOFF_SEQ\n          ,AUDIT_USERID\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM JH_SIGNON WITH (NOLOCK)\n   WHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n;\n/* 3.3 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n        ,'$$DAYOFF_SEQ$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\n    ELSE\n    BEGIN\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$DAYOFF_SEQ$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\n/* 3.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\nUPDATE JH_SIGNON WITH (ROWLOCK)\n   SET TAKELEAVE_STATUS\=(CASE WHEN SUBSTRING('$$TAKELEAVE_STATUS$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN TAKELEAVE_STATUS ELSE SUBSTRING('$$TAKELEAVE_STATUS$$',1,1) END)\n\t   ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n\t   ,LAST_MOD_USER_COMPANY_ID\='${PARAM_COMPANY}'\n\t   ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\nWHERE DAYOFF_SEQ\='$$DAYOFF_SEQ$$';\n\n\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_DAD$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'DAYOFF_APPLY_DETAIL' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\nSELECT * FROM DAYOFF_APPLY_DETAIL WITH (NOLOCK) WHERE PK_DAD \= '$$PK_DAD$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n   INSERT INTO LOG_DAYOFF_APPLY_DETAIL /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,PK_DAD\n          ,DAYOFF_SEQ\n          ,USERID\n          ,DAYOFF_ID\n          ,APPLY_DATE\n          ,START_DATE\n          ,START_TIME\n          ,END_DATE\n          ,END_TIME\n          ,TOTAL_DAYS\n          ,AGREE_ID\n          ,AGREE_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,PK_DAD\n          ,DAYOFF_SEQ\n          ,USERID\n          ,DAYOFF_ID\n          ,APPLY_DATE\n          ,START_DATE\n          ,START_TIME\n          ,END_DATE\n          ,END_TIME\n          ,TOTAL_DAYS\n          ,AGREE_ID\n          ,AGREE_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM DAYOFF_APPLY_DETAIL WITH (NOLOCK)\n   WHERE PK_DAD \= '$$PK_DAD$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n;\n/* 3.3 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n        ,'$$PK_DAD$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\n    ELSE\n    BEGIN\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$PK_DAD$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\n/* 3.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\nUPDATE DAYOFF_APPLY_DETAIL WITH (ROWLOCK)\n   SET AGREE_ID\=(CASE WHEN SUBSTRING('$$AGREE_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN AGREE_ID ELSE SUBSTRING('$$AGREE_ID$$',1,50) END)\n\t   ,AGREE_TIME\=CONVERT(varchar,getdate(),120)\n\t   ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n\t   ,LAST_MOD_USER_COMPANY_ID\='${PARAM_COMPANY}'\n\t   ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\nWHERE PK_DAD\='$$PK_DAD$$';\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$PK_USERID$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
SIGNON_DAYOFF_CLAIMTIME=/* Last Updated Date\: 2020/04/23\nUpdated by Noli\n\n修改原因\: 1. 因有新增人員所屬班別表(JH_USERS)\n功能：顯示請假時段*/\n\nSELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM (SELECT DC.C_INDEX,\n\t\t\t\t DC.C_NAME\n\t\t\t FROM DAYOFF_CLAIMTIME DC\n\t\t   INNER JOIN JH_JOBTIME JJ\n\t\t   ON SUBSTRING(DC.C_NAME,4,2) \= SUBSTRING(JJ.WORK_STIME,4,2)\t--上班開始的時間(不管開始時間是否為整點,以後上班時段異動時, 假單起迄時段也會跟著異動)\n\t\t   WHERE DC.C_INDEX>\=JJ.WORK_STIME\n\t\t     AND DC.C_INDEX<\=JJ.WORK_ETIME\n\t\t\t AND JJ.JOB_CODE \= ISNULL((SELECT JOB_CODE\t--上班班別\n\t\t\t\t\t\t\t\t         FROM JH_USERS\n\t\t\t\t\t\t\t\t\t    WHERE USERID \= '$$USERID$$'),'$$JOB_CODE$$')\t\n\t\t ) C\n\t ) A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY C.C_INDEX) AS RowNum,\n\t\tC.C_INDEX,\n\t\tC.C_NAME\n\tFROM (SELECT DC.C_INDEX,\n\t\t\t\t DC.C_NAME\n\t\t\tFROM DAYOFF_CLAIMTIME DC\n\t\t   INNER JOIN JH_JOBTIME JJ\n\t\t   ON SUBSTRING(DC.C_NAME,4,2) \= SUBSTRING(JJ.WORK_STIME,4,2)\t--上班開始的時間(不管開始時間是否為整點,以後上班時段異動時, 假單起迄時段也會跟著異動)\n\t\t   WHERE DC.C_INDEX>\=JJ.WORK_STIME\n\t\t     AND DC.C_INDEX<\=JJ.WORK_ETIME\n\t\t\t AND JJ.JOB_CODE \= ISNULL((SELECT JOB_CODE\t--上班班別\n\t\t\t\t\t\t\t\t         FROM JH_USERS\n\t\t\t\t\t\t\t\t\t    WHERE USERID \= '$$USERID$$'),'$$JOB_CODE$$')\n\t\t ) C\n\t ) B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n;
SIGNON_DAYOFF_CLAIMTIME_ALL=/* Last Updated Date\: 2020/04/23\nUpdated by Noli\n\n修改原因\: 1. local combobox改為remote combobox\n功能：顯示請假時段*/\n\nSELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM (SELECT DC.C_INDEX,\n\t\t\t\t DC.C_NAME\n\t\t\t FROM DAYOFF_CLAIMTIME DC\n\t\t   INNER JOIN JH_JOBTIME JJ\n\t\t   ON SUBSTRING(DC.C_NAME,4,2) \= SUBSTRING(JJ.WORK_STIME,4,2)\t--上班開始的時間(不管開始時間是否為整點,以後上班時段異動時, 假單起迄時段也會跟著異動)\n\t\t   WHERE DC.C_INDEX>\=JJ.WORK_STIME\n\t\t     AND DC.C_INDEX<\=JJ.WORK_ETIME\n\t\t\t AND JJ.JOB_CODE \= '$$JOB_CODE$$'\n\t\t   UNION ALL\n\t\t   SELECT 'ALL' AS C_INDEX,\n\t\t\t\t  'ALL' AS C_NAME) C\n\t ) A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY C.PK_CLT) AS RowNum,\n\t\tC.C_INDEX,\n\t\tC.C_NAME\n\tFROM (SELECT DC.PK_CLT,\n\t\t\t\t DC.C_INDEX,\n\t\t\t\t DC.C_NAME\n\t\t\tFROM DAYOFF_CLAIMTIME DC\n\t\t   INNER JOIN JH_JOBTIME JJ\n\t\t   ON SUBSTRING(DC.C_NAME,4,2) \= SUBSTRING(JJ.WORK_STIME,4,2)\t--上班開始的時間(不管開始時間是否為整點,以後上班時段異動時, 假單起迄時段也會跟著異動)\n\t\t   WHERE DC.C_INDEX>\=JJ.WORK_STIME\n\t\t     AND DC.C_INDEX<\=JJ.WORK_ETIME\n\t\t\t AND JJ.JOB_CODE \= '$$JOB_CODE$$'\n\t\t\tUNION ALL\n\t\t\tSELECT 0 AS PK_CLT,\n\t\t\t\t   'ALL' AS C_INDEX,\n\t\t\t\t   'ALL' AS C_NAME) C\n\t ) B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n;
SIGNON_DAYOFF_RECLAIM=/*  UPDATED AT 2020/04/24\nUPDATED BY Noli\nFor 撤假單功能，申請撤銷時，JH_SIGNON Table的假單之data_status會變為1\n修正原因\: \n1. TAKELEAVE_STATUS新增ISNULL判斷\n\n*/\nDECLARE @nowDate DATE \= convert(date,convert(varchar,getdate(),111));\t--現在系統日\nDECLARE @HHMMSS varchar(10) \= convert(varchar,getdate(),108);\t--現在系統日之時分秒\nDECLARE @WORK_STIME varchar(10);\t--假單起始時間\nDECLARE @WORK_ETIME varchar(10);\t--假單結束時間\nDECLARE @WORK_SDATE date;\t\t\t--假單起始日期\nDECLARE @WORK_EDATE date;\t\t\t--假單結束日期\nDECLARE @USERID varchar(50);\t\t--使用者帳號\nDECLARE @USERNAME varchar(50);\t\t--使用者名稱\nDECLARE @WORK_STATUS varchar(50);\t--出缺勤/假單類別\nDECLARE @JOB_CODE varchar(10);\t\t--班別表\nDECLARE @reClaimStatus int;\t\t\t--找出該假單是否已有撤單的件數\nDECLARE @TAKELEAVE_STATUS varchar(1);\t--請假狀態\nDECLARE @AUDIT_USERID varchar(50);\t--審核人員\n\nBEGIN TRY\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n    ;WITH DAYOFF_RCD(USERID,USERNAME,WORK_STATUS,DAYOFF_SECODE,WORK_DATE,WORK_TIME,TAKELEAVE_STATUS,JOB_CODE,DAYOFF_SEQ,AUDIT_USERID,DATA_STATUS,ADD_USER_ID\t--AUDIT_USERID, 2020.04.06 ADDED\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID,ADD_DT)AS \n\t(\n\t\tSELECT USERID,\n\t\t\t   USERNAME,\n\t\t\t   WORK_STATUS,\n\t\t\t   DAYOFF_SECODE,\n\t\t\t   WORK_DATE,\n\t\t\t   WORK_TIME,\n\t\t\t   TAKELEAVE_STATUS,\n\t\t\t   JOB_CODE,\n\t\t\t   DAYOFF_SEQ,\n\t\t\t   AUDIT_USERID,\t\t\t\t\t\t\t--2020.04.06 ADDED\n\t\t\t   DATA_STATUS,\n\t\t\t   ADD_USER_ID,\n\t\t\t   ADD_USER_COMPANY_ID,\n\t\t\t   ADD_DT\n\t\t  FROM JH_SIGNON WITH (NOLOCK)\n\t\t WHERE DAYOFF_SEQ\='$$DAYOFF_SEQ$$'\n\t\t   AND DAYOFF_SECODE IN ('S','E')\n\t\t   --AND TAKELEAVE_STATUS \='Y'\t\t\t\t\t\t\t--2020.03.10\n\t\t   AND ISNULL(TAKELEAVE_STATUS,'') IN ('Y','W')\t\t\t--2020.04.24 MODIFIED\n\t)\n\t\n\tSELECT @USERID \= SR.USERID,\n\t\t   @USERNAME\= SR.USERNAME,\n\t\t   @WORK_SDATE \= SR.WORK_DATE,\n\t\t   @WORK_STIME \= SR.WORK_TIME,\n\t\t   @WORK_EDATE \= ER.WORK_DATE,\n\t\t   @WORK_ETIME \= ER.WORK_TIME,\n\t\t   @WORK_STATUS \= SR.WORK_STATUS,\n\t\t   @JOB_CODE \= SR.JOB_CODE,\n\t\t   @TAKELEAVE_STATUS \= SR.TAKELEAVE_STATUS,\t\t--2020.03.11 ADDED\n\t\t   @AUDIT_USERID \= SR.AUDIT_USERID\t\t\t\t--2020.04.06 ADDED\n\t  FROM DAYOFF_RCD SR\n\tINNER JOIN DAYOFF_RCD ER\n\t\tON SR.DAYOFF_SEQ \= ER.DAYOFF_SEQ\n\t\tAND SR.DAYOFF_SECODE\='S'\n\t\tAND ER.DAYOFF_SECODE \= 'E';\n\t\t\n\tSET @reClaimStatus \= (SELECT COUNT(*)\n\t\t\t\t\t\t   FROM JH_SIGNON WITH (NOLOCK)\n\t\t\t\t\t\t  WHERE DAYOFF_SEQ\='$$DAYOFF_SEQ$$'\n\t\t\t\t\t\t\tAND ISNULL(TAKELEAVE_STATUS,'') \= 'C');\n\t\t   \n\t/*檢核該時間點是否可以撤單\=>假單(已通過/審核中)開始時間要大於系統時間才可以撤單且該假單沒有被撤銷過*/\n\tIF (((@WORK_STIME > @HHMMSS AND @WORK_SDATE\=@nowDate) OR (@WORK_SDATE>@nowDate)) OR ISNULL(@TAKELEAVE_STATUS,'') \= 'W')\n\t\tAND @reClaimStatus \= 0\t\t--2020.03.11 MODIFIED\n\tBEGIN\n\t\t/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t/* 這一段 update 可用noli的excel 檔中的  INSERT 產生器，來產生對應的欄位及語法  */\n\t\t/****新增撤假單起時******/\n\t\tInsert into JH_SIGNON /* WITH (ROWLOCK) */\n\t\t(\n\t\t USERID\n\t\t,USERNAME\n\t\t,WORK_STATUS\n\t\t,DAYOFF_SECODE\n\t\t,WORK_DATE\n\t\t,WORK_TIME\n\t\t,TAKELEAVE_STATUS\n\t\t,JOB_CODE\n\t\t,DAYOFF_SEQ\n\t\t,AUDIT_USERID\t\t\t--2020.04.06 ADDED\n\t\t,DATA_STATUS\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t) \n\t\tSELECT  USERID\n\t\t\t    ,USERNAME\n\t\t\t    ,WORK_STATUS\n\t\t\t\t,'S'\t\t\t--起\n\t\t\t\t,WORK_DATE\n\t\t\t\t,WORK_TIME\n\t\t\t\t,'C'\t\t\t--撤銷狀態\n\t\t\t\t,JOB_CODE\n\t\t\t  --,'$$DAYOFF_SEQ$$'\t--2020.04.06 \n\t\t\t\t,DAYOFF_SEQ\t\t\t--2020.04.06\n\t\t\t\t,AUDIT_USERID\t\t--2020.04.06 ADDED\n\t\t\t\t,DATA_STATUS\n\t\t\t\t,ADD_USER_ID\n\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t,CONVERT(VARCHAR,getdate(),120)\n\t\t  FROM JH_SIGNON WITH (NOLOCK)\n\t\t WHERE DAYOFF_SEQ\='$$DAYOFF_SEQ$$'\n\t\t   AND DAYOFF_SECODE\='S';\n\t\n\n\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t\t(\n\t\t\t\tFUNC_ID\n\t\t\t   ,PROC_TYPE\n\t\t\t   ,USER_ID\n\t\t\t   ,DATA_NO\n\t\t\t   ,EVENT_DT\n\t\t\t   ,MEMO\n\t\t\t   ,SessionID\n\t\t\t   ,ProcPK\n\t\t\t   ,PROC_TARGET\n\t\t)\n\t\tVALUES(\n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t   ,'insert'\n\t\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t\t   ,IDENT_CURRENT('JH_SIGNON') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t\t   ,'$$MEMO$$'\n\t\t\t   ,'${PARAM_SESSION_ID}'\n\t\t\t   ,'${LOGPK}'\n\t\t\t   ,'JH_SIGNON' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t);\n\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\tINSERT INTO LOG_JH_SIGNON  /* WITH (ROWLOCK) */ \n\t\t\t\t ( FUNC_ID \n\t\t\t\t  ,CRUD_STATE \n\t\t\t\t  ,PK_USERID\n\t\t\t\t  ,USERID\n\t\t\t\t  ,USERNAME\n\t\t\t\t  ,WORK_STATUS\n\t\t\t\t  ,DAYOFF_SECODE\n\t\t\t\t  ,WORK_DATE\n\t\t\t\t  ,WORK_TIME\n\t\t\t\t  ,TAKELEAVE_STATUS\n\t\t\t\t  ,JOB_CODE\n\t\t\t\t  ,DAYOFF_SEQ\n\t\t\t\t  ,AUDIT_USERID\t\t\t\t--2020.04.06 ADDED\n\t\t\t\t  ,DATA_STATUS\n\t\t\t\t  ,ADD_USER_ID\n\t\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t\t  ,ADD_DT\n\t\t\t\t  ,DATA_CHANGE_LOG_ID )\n\t\tVALUES(\n\t\t\t\t  '${PARAM_FUNC_ID}'\n\t\t\t\t  ,'C'\n\t\t\t\t  ,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t  ,@USERID\n\t\t\t\t  ,@USERNAME\n\t\t\t\t  ,@WORK_STATUS\n\t\t\t\t  ,'S'\n\t\t\t\t  ,@WORK_SDATE\n\t\t\t\t  ,@WORK_STIME\n\t\t\t\t  ,'C'\n\t\t\t\t  ,@JOB_CODE\n\t\t\t\t  ,'$$DAYOFF_SEQ$$'\n\t\t\t\t  ,@AUDIT_USERID\t\t\t--2020.04.06 ADDED\n\t\t\t\t  ,'0'\n\t\t\t\t  ,'${PARAM_SOURCE_COMING}'\n\t\t\t\t  ,'${PARAM_COMPANY}'\n\t\t\t\t  ,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t  ,IDENT_CURRENT('DATA_CHANGE_LOG'));\n\n\t\t/* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n\t\tINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t  ( ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE \n\t\t\t\t,RETURN_MSG \n\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t,MEMO)\n\t\tVALUES(        \n\t\t\t\t'${LOGPK}' \n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'0'\n\t\t\t\t,'已撤銷假單(S)'\n\t\t\t\t,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t,'C' \n\t\t\t\t,'$$MEMO$$');\n\t\t\t\t\n\t\t/****新增撤假單迄時******/\t\t\n\t\tInsert into JH_SIGNON /* WITH (ROWLOCK) */\n\t\t(\n\t\t USERID\n\t\t,USERNAME\n\t\t,WORK_STATUS\n\t\t,DAYOFF_SECODE\n\t\t,WORK_DATE\n\t\t,WORK_TIME\n\t\t,TAKELEAVE_STATUS\n\t\t,JOB_CODE\n\t\t,DAYOFF_SEQ\n\t\t,AUDIT_USERID\t\t\t\t\t--2020.04.06 ADDED\n\t\t,DATA_STATUS\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t) \n\t\tSELECT  USERID\n\t\t\t    ,USERNAME\n\t\t\t    ,WORK_STATUS\n\t\t\t\t,'E'\t\t\t--迄\n\t\t\t\t,WORK_DATE\n\t\t\t\t,WORK_TIME\n\t\t\t\t,'C'\t\t\t--撤銷狀態\n\t\t\t\t,JOB_CODE\n\t\t\t\t--,'$$DAYOFF_SEQ$$'\t\t--2020.04.06\n\t\t\t\t,DAYOFF_SEQ\t\t\t\t--2020.04.06\n\t\t\t\t,AUDIT_USERID\t\t\t--2020.04.06 ADDED\n\t\t\t\t,DATA_STATUS\n\t\t\t\t,ADD_USER_ID\n\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t,CONVERT(VARCHAR,getdate(),120)\n\t\t  FROM JH_SIGNON WITH (NOLOCK)\n\t\t WHERE DAYOFF_SEQ\='$$DAYOFF_SEQ$$'\n\t\t   AND DAYOFF_SECODE\='E';\n\n\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t\t(\n\t\t\t\tFUNC_ID\n\t\t\t   ,PROC_TYPE\n\t\t\t   ,USER_ID\n\t\t\t   ,DATA_NO\n\t\t\t   ,EVENT_DT\n\t\t\t   ,MEMO\n\t\t\t   ,SessionID\n\t\t\t   ,ProcPK\n\t\t\t   ,PROC_TARGET\n\t\t)\n\t\tVALUES(\n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t   ,'insert'\n\t\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t\t   ,IDENT_CURRENT('JH_SIGNON') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t\t   ,'$$MEMO$$'\n\t\t\t   ,'${PARAM_SESSION_ID}'\n\t\t\t   ,'${LOGPK}'\n\t\t\t   ,'JH_SIGNON' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t);\n\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\tINSERT INTO LOG_JH_SIGNON  /* WITH (ROWLOCK) */ \n\t\t\t\t ( FUNC_ID \n\t\t\t\t  ,CRUD_STATE \n\t\t\t\t  ,PK_USERID\n\t\t\t\t  ,USERID\n\t\t\t\t  ,USERNAME\n\t\t\t\t  ,WORK_STATUS\n\t\t\t\t  ,DAYOFF_SECODE\n\t\t\t\t  ,WORK_DATE\n\t\t\t\t  ,WORK_TIME\n\t\t\t\t  ,TAKELEAVE_STATUS\n\t\t\t\t  ,JOB_CODE\n\t\t\t\t  ,DAYOFF_SEQ\n\t\t\t\t  ,AUDIT_USERID\t\t\t--2020.04.06 ADDED\n\t\t\t\t  ,DATA_STATUS\n\t\t\t\t  ,ADD_USER_ID\n\t\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t\t  ,ADD_DT\n\t\t\t\t  ,DATA_CHANGE_LOG_ID )\n\t\tVALUES(\n\t\t\t\t  '${PARAM_FUNC_ID}'\n\t\t\t\t  ,'C'\n\t\t\t\t  ,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t  ,@USERID\n\t\t\t\t  ,@USERNAME\n\t\t\t\t  ,@WORK_STATUS\n\t\t\t\t  ,'E'\n\t\t\t\t  ,@WORK_EDATE\n\t\t\t\t  ,@WORK_ETIME\n\t\t\t\t  ,'C'\n\t\t\t\t  ,@JOB_CODE\n\t\t\t\t  ,'$$DAYOFF_SEQ$$'\n\t\t\t\t  ,@AUDIT_USERID\t\t--2020.04.06 ADDED\n\t\t\t\t  ,'0'\n\t\t\t\t  ,'${PARAM_SOURCE_COMING}'\n\t\t\t\t  ,'${PARAM_COMPANY}'\n\t\t\t\t  ,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t  ,IDENT_CURRENT('DATA_CHANGE_LOG'));\n\n\t\t/* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n\t\tINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t  ( ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE \n\t\t\t\t,RETURN_MSG \n\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t,MEMO)\n\t\tVALUES(        \n\t\t\t\t'${LOGPK}' \n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'0'\n\t\t\t\t,'已撤銷假單(E)'\n\t\t\t\t,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t,'C' \n\t\t\t\t,'$$MEMO$$');\n\tEND\n\tELSE IF @reClaimStatus > 0\n\tBEGIN\n\t\t INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t  ( ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE \n\t\t\t\t,RETURN_MSG \n\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t,MEMO)\n\t\t   VALUES (        \n\t\t\t\t'${LOGPK}' \n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,'該假單已撤銷\!'\n\t\t\t\t,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t,'C' \n\t\t\t\t,'$$MEMO$$');\n\tEND\n\tELSE\n\tBEGIN\n\t\t INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t  ( ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE \n\t\t\t\t,RETURN_MSG \n\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t,MEMO)\n\t\t   VALUES (        \n\t\t\t\t'${LOGPK}' \n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,'該假單已無法撤銷，請洽系統管理人員\!'\n\t\t\t\t,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t,'C' \n\t\t\t\t,'$$MEMO$$');\n\tEND\nEND\n ELSE\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK_COL 流水號欄位 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_SIGNON'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\n\nSELECT * FROM JH_SIGNON WITH (NOLOCK) WHERE PK_USERID \= '$$PK_USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/* 2.2 DATA Detail LOG (before modified) */\n  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */ \n   INSERT INTO LOG_JH_SIGNON /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,WORK_DATE\n          ,WORK_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,WORK_DATE\n          ,WORK_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM JH_SIGNON  WITH (NOLOCK)\n   WHERE PK_USERID \= '$$PK_USERID$$';\n/* 2.3 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n   ELSE\n   BEGIN\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n/* 2.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n   DELETE  JH_SIGNON WITH (ROWLOCK)\n   WHERE PK_USERID \= '$$PK_USERID$$';\nEND\n  ELSE\n   IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n   BEGIN\n\t\tIF EXISTS (\n\t\tSELECT * FROM JH_SIGNON WITH (NOLOCK) WHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$' AND TAKELEAVE_STATUS\='C' AND ISNULL(DATA_STATUS, 0) \= 0)\n\t\tBEGIN\n\t\t\tINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t\t  ( ProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE \n\t\t\t\t\t,RETURN_MSG \n\t\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t\t,MEMO)\n\t\t\t   VALUES ( \n\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'-1'\n\t\t\t\t\t,'假單已撤銷'\n\t\t\t\t\t,'$$DAYOFF_SEQ$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,'U' \n\t\t\t\t\t,'$$MEMO$$');\n\t\tEND\n\t    ELSE\n\t\tBEGIN\n\t\t\t/* 3.1 DATA_CHANGE_LOG */\n\t\t\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t\t\t(\n\t\t\t\t\tFUNC_ID\n\t\t\t\t   ,PROC_TYPE\n\t\t\t\t   ,USER_ID\n\t\t\t\t   ,DATA_NO\n\t\t\t\t   ,EVENT_DT\n\t\t\t\t   ,MEMO\n\t\t\t\t   ,SessionID\n\t\t\t\t   ,ProcPK\n\t\t\t\t   ,PROC_TARGET\n\t\t\t)\n\t\t\tVALUES(\n\t\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t   ,'update'\n\t\t\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t\t\t   ,'$$DAYOFF_SEQ$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t\t\t   ,'$$MEMO$$'\n\t\t\t\t   ,'${PARAM_SESSION_ID}'\n\t\t\t\t   ,'${LOGPK}'\n\t\t\t\t   ,'JH_SIGNON' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t);\n\t\t\tIF EXISTS (\n\t\t\tSELECT * FROM JH_SIGNON WITH (NOLOCK) WHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\t\t\tBEGIN\n\t\t\t/* 3.2 DATA Detail LOG (before modified) */\n\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\t\t   INSERT INTO LOG_JH_SIGNON /* WITH (ROWLOCK) */\n\t\t\t\t\t( FUNC_ID\n\t\t\t\t\t  ,CRUD_STATE\n\t\t\t\t\t  ,PK_USERID\n\t\t\t\t\t  ,USERID\n\t\t\t\t\t  ,USERNAME\n\t\t\t\t\t  ,WORK_STATUS\n\t\t\t\t\t  ,DAYOFF_SECODE\n\t\t\t\t\t  ,WORK_DATE\n\t\t\t\t\t  ,WORK_TIME\n\t\t\t\t\t  ,TAKELEAVE_STATUS\n\t\t\t\t\t  ,JOB_CODE\n\t\t\t\t\t  ,DAYOFF_SEQ\n\t\t\t\t\t  ,AUDIT_USERID\n\t\t\t\t\t  ,DATA_STATUS\n\t\t\t\t\t  ,ADD_USER_ID\n\t\t\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t\t\t  ,ADD_DT\n\t\t\t\t\t  ,LAST_MOD_USER_ID\n\t\t\t\t\t  ,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t  ,LAST_MOD_DT\n\t\t\t\t\t  ,DEL_USER_ID\n\t\t\t\t\t  ,DEL_USER_COMPANY_ID\n\t\t\t\t\t  ,DEL_DT\n\t\t\t\t\t  ,DATA_CHANGE_LOG_ID)\n\t\t\t   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n\t\t\t\t\t  ,'U' AS CRUD_STATE\n\t\t\t\t\t  ,PK_USERID\n\t\t\t\t\t  ,USERID\n\t\t\t\t\t  ,USERNAME\n\t\t\t\t\t  ,WORK_STATUS\n\t\t\t\t\t  ,DAYOFF_SECODE\n\t\t\t\t\t  ,WORK_DATE\n\t\t\t\t\t  ,WORK_TIME\n\t\t\t\t\t  ,TAKELEAVE_STATUS\n\t\t\t\t\t  ,JOB_CODE\n\t\t\t\t\t  ,DAYOFF_SEQ\n\t\t\t\t\t  ,AUDIT_USERID\n\t\t\t\t\t  ,DATA_STATUS\n\t\t\t\t\t  ,ADD_USER_ID\n\t\t\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t\t\t  ,ADD_DT\n\t\t\t\t\t  ,LAST_MOD_USER_ID\n\t\t\t\t\t  ,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t  ,LAST_MOD_DT\n\t\t\t\t\t  ,DEL_USER_ID\n\t\t\t\t\t  ,DEL_USER_COMPANY_ID\n\t\t\t\t\t  ,DEL_DT\n\t\t\t\t\t  ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t\t FROM JH_SIGNON WITH (NOLOCK)\n\t\t\t   WHERE DAYOFF_SEQ \= '$$DAYOFF_SEQ$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t;\n\t\t\t/* 3.3 Action Return */\n\t\t\t   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n\t\t\t\t   ( ProcPK\n\t\t\t\t\t ,hashValues\n\t\t\t\t\t ,RETURN_CODE\n\t\t\t\t\t ,RETURN_MSG\n\t\t\t\t\t ,DATA_UNIQUE_KEY\n\t\t\t\t\t ,DATA_ACTION_TYPE \n\t\t\t\t\t ,MEMO)\n\t\t\t   VALUES ( \n\t\t\t\t\t '${LOGPK}' \n\t\t\t\t\t ,@FROM_OUTSIDE\n\t\t\t\t\t ,'0'\n\t\t\t\t\t ,'SUCCESS'\n\t\t\t\t\t,'$$DAYOFF_SEQ$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t ,'U' \n\t\t\t\t\t ,'$$MEMO$$');\n\t\t\tEND\n\t\t\tELSE\n\t\t\tBEGIN\n\t\t\t/* 3.4 Action Return */\n\t\t\t   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t\t  ( ProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE \n\t\t\t\t\t,RETURN_MSG \n\t\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t\t,MEMO)\n\t\t\t   VALUES ( \n\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'-1'\n\t\t\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t\t\t,'$$DAYOFF_SEQ$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,'U' \n\t\t\t\t\t,'$$MEMO$$');\n\t\t\tEND\n\t\t\t/* 3.5 功能主要異動 Table */\n\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\tUPDATE JH_SIGNON WITH (ROWLOCK)\n\t\t\t   SET TAKELEAVE_STATUS \= 'W'\n\t\t\t\t   ,DATA_STATUS \= '1'\t\t\t--待撤銷\t--2020.04.09 ADDED\n\t\t\t\t   ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n\t\t\t\t   ,LAST_MOD_USER_COMPANY_ID\='${PARAM_COMPANY}'\n\t\t\t\t   ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\tWHERE DAYOFF_SEQ\='$$DAYOFF_SEQ$$';\n\t\tEND\n   END\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$PK_USERID$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
SIGNON_DAYOFF_RULES_UPD=/*\n新增日期\: 2020.10.06\n新增人員\: Noli\n新增原因\: 此功能為每日會跑的排程，會更新所有員工假別統計表(Table\: USER_DAYOFF_INFO_NEXT)之給假天數\n備註：●每日檢查每年到職日會給假的假別有\n\t\t1. 特休(包含當天度未休完之剩餘天數歸到遞延特休)\n\t\t2. 旅遊假\n\t\t3. 原民假\n\t\t4. 未住院病假\n\t\t5. 事假\n\t\t6. 家庭照顧假\n\t  ●每日檢查每兩年到職日一到會給假的假別有\n\t    1. 安胎假\n\t\t2. 住院病假\n\t  ●每月看到職日(不看年月)，遇到就給假的有生理假\n\t  ●每日(不看到職日)會更新撫育假給假時數(每日1.5小時)\n\t  ●每日不看到職日，只要用完就會給假的假別有\n\t\t1. 婚假\n\t\t2. 陪產假\n\t\t3. 產檢假\n\t\t4. 產假\n\t\t5. 小產假\n\t  ●只有到職日那天會給的假，就是喪假(即便用完遇到隔年到職日也不會再給假)\n\t  ●隔年度到職日一到若有剩餘補休將會清空\n\t  ●其它不需要給假的假別有\n\t    1. 公假\n\t    2. 公傷假\n\t    3. 天災假\n\t    4. 無薪假\n\t    5. 防疫假\n修改日期\: 2021.02.05\n修改原因\: \n1. 到職日一到，PAST_DAYS與PAST_DAYS_TEMP不管主管怎樣累積都要一樣的數字\n2. 當天到職日到重新職行,要防呆不管怎樣執行API幾次,PAST_DAYS與PAST_DAYS_TEMP不能一直累計下去\n修改日期\: 2021.06.10\n修改原因\: \n1. 因USER_DAYOFF_INFO 和USER_DAYOFF_INFO_NEXT新增PAST_LEFT_DAYS欄位(前週年的剩餘天數),\n因主管週年到會做遞延累計,故在遞延累計前需要將當週年的剩餘天數放置到前週年的剩餘天數,\n以便剩餘天數一覽表能計算出正確的前一週年已請天數\n\n2. 修正在職中的判斷, 若離職日當天是週年日,也要執行給假排程計算\n*/\n\nBEGIN TRY\n\nDECLARE @NEXT_TODAY DATETIME \= DATEADD(yy,1,getdate());\nDECLARE @TODAY DATETIME \= getdate();\nDECLARE @VTODAY VARCHAR(20) \= CONVERT(VARCHAR(20),@TODAY,120);\n/* 2020.11.20 計算當年度是否為閏年 ADDED*/\nDECLARE @leapYear SMALLINT \= 0;\t\ndeclare @thisyear int \= DATEPART(yyyy,getdate());\n\n/* 2021.01.07 計算當年度是否為閏年 MODIFIED */\nIF @thisyear%4\=0 and @thisyear%100<>0 or @thisyear%400\=0\nBEGIN\n\tPRINT 'A leap year\!';\nEND\nELSE\nBEGIN\n\tSET @leapYear \= -1;\n\tPRINT 'Not a leap year\!';\nEND\n\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD' \nBEGIN \n\n\t/* DECLARE @MASTER_LOG_IDENT INT; */\n\t\n\tDECLARE @tab table \n\t(\n\t\tPK_USERS INT,\t\t\t\t/* 員工PK */\n\t\tUSERID\tVARCHAR(50),\t\t/* 員工ID */\n\t\tSTART_DATE DATE,\t\t\t/* 到職日(或基準日) */\n\t\tDAYOFF_ID VARCHAR(10),\t\t/* 假別代碼 */\n\t\tDAYOFF_SUBID VARCHAR(10),\t/* 附屬假別代碼 */\n\t\tDAYOFF_FLAG CHAR(1),\t\t/* 假別規定的計算基準日 */\n\t\tLIMIT_DAYS NUMERIC(6,3),\t/* 給假天數 */\n\t\tDDAYS\t INT\t\t\t\t/* 多久(天數)會計算給假天數 */\n\t);\n\n\t/* 假別要以哪個基準日開始計算(預設是到職日) */\n    DECLARE @DAYOFF_FLAG CHAR(1)\='0';\n\t\n\t/* 取得假別規定的計算基準日 */\n\tSELECT @DAYOFF_FLAG \= DAYOFF_FLAG\n\t  FROM DAYOFFCLASS WITH (NOLOCK)\n\t WHERE DAYOFF_ID \= '$$DAYOFF_ID$$'\n\t   AND ISNULL('$$DAYOFF_ID$$','')<>'';\n\t   \n\t   \n\t/* 3.1 DATA_CHANGE_LOG */\n\t/* INSERT INTO DATA_CHANGE_LOG(FUNC_ID, PROC_TYPE, USER_ID, DATA_NO, EVENT_DT, MEMO, ADD_USER_COMPANY_ID, ADD_USER_ID, ADD_DT, SessionID, ProcPK, PROC_TARGET)\n\tVALUES ('Fn08X001','UPDATE','ALL','ALL',@VTODAY,'','JH','JH',@VTODAY,'999999999','999999999','USER_DAYOFF_INFO'); */\n\n\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得主檔寫入 DATA_CHANGE_LOG 的 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t/* SELECT @MASTER_LOG_IDENT \= SCOPE_IDENTITY(); */\n\n\t/* 3.2 DATA Detail LOG (before modified) */ \n\t/* INSERT INTO LOG_USER_DAYOFF_INFO(DATA_CHANGE_LOG_ID,FUNC_ID,CRUD_STATE,PK_UDI,PK_USERS,USERID,DAYOFF_ID,DAYOFF_SUBID,LEFT_DAYS,TOTAL_DAYS,PAST_DAYS,PAST_DAYS_TEMP,DATA_STATUS,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,DEL_USER_ID,DEL_USER_COMPANY_ID,DEL_DT,SV_ENDDT,SV_COMMENT) \n\tSELECT @MASTER_LOG_IDENT,'Fn08X001','U',PK_UDI,PK_USERS,USERID,DAYOFF_ID,DAYOFF_SUBID,LEFT_DAYS,TOTAL_DAYS,PAST_DAYS,PAST_DAYS_TEMP,DATA_STATUS,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,DEL_USER_ID,DEL_USER_COMPANY_ID,DEL_DT,SV_ENDDT,SV_COMMENT\n\tFROM USER_DAYOFF_INFO WITH (NOLOCK);  */\n\n\t/* 遞延今年度的特休及補休 \n\t\t一般員工只能遞延,且資料狀態還需要主管審核\n\t\t主管可以累積遞延,且資料狀態不需VINCENT審核\n\t\t2021.02.02 modified\n\t*/\n\tUPDATE UD WITH (ROWLOCK)\n\t   SET UD.PAST_TOTAL_DAYS \= UD.TOTAL_DAYS,\n\t       UD.PAST_LEFT_DAYS \= (CASE WHEN UG.GROUPID \= 'JH_ADMIN'\n\t\t                             THEN UD.LEFT_DAYS\n\t\t\t\t\t\t\t\t\t ELSE\n\t\t\t\t\t\t\t\t\t      NULL\n\t\t\t\t\t\t\t\t     END),\t\t\t\t\t/* 2021.06.10 ADDED */\n\t\t   UD.PAST_DAYS \= (CASE WHEN UG.GROUPID \= 'JH_USER' OR UG.GROUPID \= 'JH_HR'\n\t\t\t\t\t\t\t    THEN UD.LEFT_DAYS\n\t\t\t\t\t\t\t\tWHEN UG.GROUPID \= 'JH_ADMIN' AND \n\t\t\t\t\t\t\t\t    ((ISNULL(UD.PAST_DAYS_TEMP,0)+ISNULL(UD.LEFT_DAYS,0)-ISNULL(UD.PAST_DAYS,0))\=ISNULL(UD.LEFT_DAYS,0)) AND\n\t\t\t\t\t\t\t\t     CONVERT(date,UD.LAST_MOD_DT)\=CONVERT(date,@TODAY)\n\t\t\t\t\t\t\t\tTHEN ISNULL(UD.PAST_DAYS,0)\n\t\t\t\t\t\t\t\tWHEN UG.GROUPID \= 'JH_ADMIN'\n\t\t\t\t\t\t\t\tTHEN ISNULL(UD.PAST_DAYS_TEMP,0)+ISNULL(UD.LEFT_DAYS,0)  \t\t/* 2021.02.05 MODIFIED */\n\t\t\t\t\t\t\t\tEND),\n\t\t   UD.PAST_DAYS_TEMP \= (CASE WHEN UG.GROUPID \= 'JH_USER' OR UG.GROUPID \= 'JH_HR'\n\t\t\t\t\t\t\t\t\t THEN UD.LEFT_DAYS\n\t\t\t\t\t\t\t\t\t WHEN UG.GROUPID \= 'JH_ADMIN' AND \n\t\t\t\t\t\t\t\t\t     ((ISNULL(UD.PAST_DAYS_TEMP,0)+ISNULL(UD.LEFT_DAYS,0)-ISNULL(UD.PAST_DAYS,0))\=ISNULL(UD.LEFT_DAYS,0)) AND\n\t\t\t\t\t\t\t\t\t\t  CONVERT(date,UD.LAST_MOD_DT)\=CONVERT(date,@TODAY)\n\t\t\t\t\t\t\t\t\t THEN ISNULL(UD.PAST_DAYS,0)\n\t\t\t\t\t\t\t\t\t WHEN UG.GROUPID \= 'JH_ADMIN'\n\t\t\t\t\t\t\t\t\t THEN ISNULL(UD.PAST_DAYS_TEMP,0)+ISNULL(UD.LEFT_DAYS,0)\t/* 2021.02.05 MODIFIED */\n\t\t\t\t\t\t\t\t\t END),\n\t\t   UD.DATA_STATUS \= (CASE WHEN (UG.GROUPID \= 'JH_USER' OR UG.GROUPID \= 'JH_HR') AND UD.LEFT_DAYS>0\n\t\t\t\t\t\t\t    THEN '1'\n\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t     '0'\n\t\t\t\t\t\t\t\tEND),\n\t\t   UD.LAST_MOD_USER_ID\='JH',\n\t\t   UD.LAST_MOD_USER_COMPANY_ID\='JH',\n\t\t   UD.LAST_MOD_DT\=@VTODAY\n\t  FROM USER_DAYOFF_INFO UD\n\t  INNER JOIN JH_USERS JU\n\t  ON UD.PK_USERS \= JU.PK_USERS\n\t  INNER JOIN JH_DEP DEP\n\t  ON JU.DEP_ID \= DEP.DEP_ID\n\t  INNER JOIN USERGROUP UG\n\t  ON JU.USERID \= UG.USERID\n\t  AND (UG.GROUPID \= 'JH_USER'\n\t  OR UG.GROUPID \= 'JH_ADMIN'\n\t  OR UG.GROUPID \= 'JH_HR')\n      INNER JOIN DAYOFFCLASS DC\n\t  ON UD.DAYOFF_ID \= DC.DAYOFF_ID\n\t  AND UD.DAYOFF_SUBID \= DC.DAYOFF_SUBID\n\t  WHERE JU.DEP_ID<>'BO'\t\t/*排除老闆 */\n\t\tAND ((DATEPART(mm,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= DATEPART(mm,@NEXT_TODAY)\n\t\tAND DATEPART(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= DATEPART(dd,@NEXT_TODAY))\n\t\tOR (DATEPART(mm,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= 2\n\t\t\tAND DATEPART(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\t\tIIF(DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= 29\n\t\t\tAND DATEPART(mm,@NEXT_TODAY) \= 3\n\t\t\tAND DATEPART(dd,@NEXT_TODAY) \= 1\n\t\t\tAND @leapYear \= -1\n\t\t))\n\t\tAND (JU.END_DATE IS NULL\n\t     OR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY))\t\t\t/*在職中*/\n\t\tAND UD.DAYOFF_ID IN ('SV','CT')\n\t\tAND (UD.USERID \= '$$USERID$$'\n\t\tOR ISNULL('$$USERID$$','ALL') \= 'ALL');\n\t\t\n\t\t\n\t/* 將今年度其它(非特休及補休假別)仍有剩餘天數的假別做遞延 2021.02.02 MODIFIED */\n\tUPDATE UD WITH (ROWLOCK)\n\t   SET UD.PAST_TOTAL_DAYS \= UD.TOTAL_DAYS,\n\t       UD.PAST_DAYS \= UD.LEFT_DAYS,\n\t\t   UD.PAST_DAYS_TEMP \= UD.LEFT_DAYS,\n\t\t   UD.LAST_MOD_USER_ID\='JH',\n\t\t   UD.LAST_MOD_USER_COMPANY_ID\='JH',\n\t\t   UD.LAST_MOD_DT\=@VTODAY\n\t  FROM USER_DAYOFF_INFO UD\n\t  INNER JOIN JH_USERS JU\n\t  ON UD.PK_USERS \= JU.PK_USERS\n\t  INNER JOIN JH_DEP DEP\n\t  ON JU.DEP_ID \= DEP.DEP_ID\n\t  INNER JOIN USERGROUP UG\n\t  ON JU.USERID \= UG.USERID\n\t  AND (UG.GROUPID \= 'JH_USER'\n\t  OR UG.GROUPID \= 'JH_ADMIN'\n\t  OR UG.GROUPID \= 'JH_HR')\n      INNER JOIN DAYOFFCLASS DC\n\t  ON UD.DAYOFF_ID \= DC.DAYOFF_ID\n\t  AND UD.DAYOFF_SUBID \= DC.DAYOFF_SUBID\n\t  WHERE JU.DEP_ID<>'BO'\t\t/*排除老闆 */\n\t\tAND ((DATEPART(mm,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= DATEPART(mm,@NEXT_TODAY)\n\t\tAND DATEPART(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= DATEPART(dd,@NEXT_TODAY))\n\t\tOR (DATEPART(mm,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= 2\n\t\t\tAND DATEPART(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\t\tIIF(DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= 29\n\t\t\tAND DATEPART(mm,@NEXT_TODAY) \= 3\n\t\t\tAND DATEPART(dd,@NEXT_TODAY) \= 1\n\t\t\tAND @leapYear \= -1\n\t\t))\n\t\tAND (JU.END_DATE IS NULL\n\t     OR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY))\t\t\t/*在職中*/\n\t\tAND UD.DAYOFF_ID <> 'SV'\n\t\tAND UD.DAYOFF_ID <> 'CT'\n\t\tAND ISNULL(UD.LEFT_DAYS,0)>0\n\t\tAND (UD.USERID \= '$$USERID$$'\n\t\tOR ISNULL('$$USERID$$','ALL') \= 'ALL');\n\t\t\n\t\n\t/* 將隔年度之員工假別統計表更新到今年度 */\n\tUPDATE UDI\n\tSET\tUDI.LEFT_DAYS \= UDN.LEFT_DAYS,\n\t\tUDI.TOTAL_DAYS \= UDN.TOTAL_DAYS,\n\t\tUDI.SV_ENDDT \= NULL,\n\t\tUDI.SV_COMMENT \= NULL,\n\t\tUDI.CT_ENDDT \= NULL,\n\t\tUDI.CT_COMMENT \= NULL\n\tFROM USER_DAYOFF_INFO UDI\n\tINNER JOIN JH_USERS JU\n\tON UDI.PK_USERS \= JU.PK_USERS\n\tAND JU.DEP_ID<>'BO'\t\t/*排除老闆 */\n\tINNER JOIN USER_DAYOFF_INFO_NEXT UDN\n\tON UDI.USERID \= UDN.USERID\n\tAND UDI.DAYOFF_ID \= UDN.DAYOFF_ID\n\tAND UDI.DAYOFF_SUBID \= UDN.DAYOFF_SUBID\n\tINNER JOIN DAYOFFCLASS DC\n\tON UDI.DAYOFF_ID \= DC.DAYOFF_ID\n\tAND UDI.DAYOFF_SUBID \= DC.DAYOFF_SUBID\n\tWHERE ((DATEPART(mm,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= DATEPART(mm,@NEXT_TODAY)\n\t\tAND DATEPART(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= DATEPART(dd,@NEXT_TODAY))\n\t\tOR (DATEPART(mm,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= 2\n\t\t\tAND DATEPART(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\t\tIIF(DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= 29\n\t\t\tAND DATEPART(mm,@NEXT_TODAY) \= 3\n\t\t\tAND DATEPART(dd,@NEXT_TODAY) \= 1\n\t\t\tAND @leapYear \= -1\n\t\t))\n\t AND (JU.END_DATE IS NULL\n\t       OR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY))\t/*在職中*/\n\t\t   \n\t;\n\t\n\t\n\t/* 遞延截止日一到，若有特休或補休的遞延天數資料，資料狀態也要鎖住 2021.01.20 MODIFIED */\n\tUPDATE UD WITH (ROWLOCK)\n\t   SET UD.DATA_STATUS \= '1',\n\t\t   UD.LAST_MOD_USER_ID\='JH',\t\n\t\t   UD.LAST_MOD_USER_COMPANY_ID\='JH',\n\t\t   UD.LAST_MOD_DT\=@VTODAY\n\t  FROM USER_DAYOFF_INFO UD\n\tINNER JOIN JH_USERS JU\n\t ON UD.PK_USERS \= JU.PK_USERS\n\t WHERE (UD.USERID \= '$$USERID$$'\n\t OR ISNULL('$$USERID$$','ALL') \= 'ALL')\n\t AND (CONVERT(date,UD.SV_ENDDT) \= CONVERT(date,@TODAY)\n\t OR CONVERT(date,UD.CT_ENDDT) \= CONVERT(date,@TODAY))\n\t AND UD.DATA_STATUS \= '0'\n\t AND ISNULL(UD.PAST_DAYS_TEMP,0)>0\n\t AND (JU.END_DATE IS NULL\n\t     OR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY))\t     \t/*在職中*/\n\t ;\n\t \n\t/* 婚假、陪產假、產檢假、產假、小產假、喪假用完就自動給假(因一年內可能流產兩次?或一年之內年頭年尾都有懷孕) */\n\tUPDATE UD WITH (ROWLOCK)\n\tSET UD.TOTAL_DAYS \= DC.LIMIT_DAYS,\n\t\tUD.LEFT_DAYS \= DC.LIMIT_DAYS,\n\t\tUD.DATA_STATUS\='0',\n\t\tUD.LAST_MOD_USER_ID\='JH',\n\t\tUD.LAST_MOD_USER_COMPANY_ID\='JH',\n\t\tUD.LAST_MOD_DT\=@VTODAY\n\tFROM USER_DAYOFF_INFO UD\n\tINNER JOIN JH_USERS JU\n\tON UD.PK_USERS \= JU.PK_USERS\n\tAND (JU.END_DATE IS NULL\n\t\tOR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY)) /*在職中*/\n\tAND JU.DEP_ID<>'BO'\t\t/*排除老闆 */\n\tINNER JOIN DAYOFFCLASS DC\n\t ON UD.DAYOFF_ID \= DC.DAYOFF_ID\n\tAND UD.DAYOFF_SUBID \= DC.DAYOFF_SUBID\n\tWHERE ISNULL(UD.LEFT_DAYS,0)\=0\n\tAND DC.DAYOFF_ID IN ('WL','PL','MC','ML','MI','FL')\n\tAND (UD.USERID \= '$$USERID$$'\n\tOR ISNULL('$$USERID$$','ALL') \= 'ALL');\n\t\n\t\n\t/* 生理假每月重新給假一次 */\n\tUPDATE UD WITH (ROWLOCK)\n\tSET UD.TOTAL_DAYS \= DC.LIMIT_DAYS,\n\t\tUD.LEFT_DAYS \= DC.LIMIT_DAYS,\n\t\tUD.DATA_STATUS\='0',\n\t\tUD.LAST_MOD_USER_ID\='JH',\n\t\tUD.LAST_MOD_USER_COMPANY_ID\='JH',\n\t\tUD.LAST_MOD_DT\=@VTODAY\n\tFROM USER_DAYOFF_INFO UD\n\tINNER JOIN JH_USERS JU\n\tON UD.PK_USERS \= JU.PK_USERS\n\tAND (JU.END_DATE IS NULL\n\t\tOR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY)) /*在職中*/\n\tAND JU.DEP_ID<>'BO'\t\t/*排除老闆 */\n\tINNER JOIN DAYOFFCLASS DC\n\t ON UD.DAYOFF_ID \= DC.DAYOFF_ID\n\tAND UD.DAYOFF_SUBID \= DC.DAYOFF_SUBID\n\tWHERE DATEPART(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\tIIF(DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= DATEPART(dd,@NEXT_TODAY)\n\tAND DC.DAYOFF_ID \= 'MS'\n\tAND (UD.USERID \= '$$USERID$$'\n\tOR ISNULL('$$USERID$$','ALL') \= 'ALL');\n\t\n\t/* 撫育假每日要重設 */\n\tUPDATE UD WITH (ROWLOCK)\n\tSET UD.TOTAL_DAYS \= DC.LIMIT_DAYS,\n\t\tUD.LEFT_DAYS \= DC.LIMIT_DAYS,\n\t\tUD.DATA_STATUS\='0',\n\t\tUD.LAST_MOD_USER_ID\='JH',\n\t\tUD.LAST_MOD_USER_COMPANY_ID\='JH',\n\t\tUD.LAST_MOD_DT\=@VTODAY\n\tFROM USER_DAYOFF_INFO UD\n\tINNER JOIN JH_USERS JU\n\tON UD.PK_USERS \= JU.PK_USERS\n\tAND (JU.END_DATE IS NULL\n\t\tOR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY)) /*在職中*/\n\tAND JU.DEP_ID<>'BO'\t\t/*排除老闆 */\n\tINNER JOIN DAYOFFCLASS DC\n\t ON UD.DAYOFF_ID \= DC.DAYOFF_ID\n\tAND UD.DAYOFF_SUBID \= DC.DAYOFF_SUBID\n\tWHERE DC.DAYOFF_ID \= 'PT'\n\tAND (UD.USERID \= '$$USERID$$'\n\tOR ISNULL('$$USERID$$','ALL') \= 'ALL');\n\n\t\t\t\t\t\t\t\t\t\t\n\n\t/********** 以下開始計算次週年之假別天數更新 ***************/\n\t/* 處理特休假別之給假天數計算(依照年資) */\n\tINSERT INTO @tab\n\tSELECT TEMP.PK_USERS,\n\t\t   TEMP.USERID,\n\t\t   COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),TEMP.START_DATE),\n\t\t   DS.DAYOFF_ID,\n\t\t   IIF(DS.DAYOFF_ID\='SV','00',DS.DAYOFF_SUBID),\n\t\t   DS.DAYOFF_FLAG,\n\t\t   DS.LIMIT_DAYS,\n\t\t   DS.DDAYS\n\t  FROM (SELECT JU.PK_USERS,\n\t\t\t\t   JU.USERID,\n\t\t\t\t   JU.START_DATE,\n\t\t\t\t   DC.DAYOFF_ID,\n\t\t\t\t   MAX(DC.DDAYS) AS DDAYS\n\t\t\t  FROM JH_USERS JU WITH (NOLOCK)\n\t\t\t INNER JOIN DAYOFFCLASS DC WITH (NOLOCK)\n\t\t\t ON 1\=1\n\t\t\t AND DC.DAYOFF_FLAG \= @DAYOFF_FLAG\n\t\t\t WHERE JU.DEP_ID<>'BO'\t\t/*排除老闆 */\n\t\t\t   AND (JU.USERID \= '$$USERID$$'\n\t\t\t    OR ISNULL('$$USERID$$','ALL') \= 'ALL')\n\t\t\t   AND (JU.END_DATE IS NULL\n\t\t\t\t\tOR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY))\t     \t/*在職中*/\n\t\t\t   AND (DC.DAYOFF_ID \= '$$DAYOFF_ID$$'\n\t\t\t   OR ISNULL('$$DAYOFF_ID$$','ALL')\='ALL')\n\t\t\t   AND CONVERT(date,@NEXT_TODAY)>\=DC.EFFECTIVE_DTE\n\t\t\t   AND DC.DAYOFF_ID \= 'SV'\n\t\t\t   AND DC.DDAYS <\= DATEDIFF(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\t\t\t\t\t\t\tIIF(@DAYOFF_FLAG\='0' OR DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\t\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01'))),\n\t\t\t\t\t\t\t\t\t\t\tCONVERT(date,@NEXT_TODAY))\n\t\t\tGROUP BY JU.PK_USERS,JU.USERID,JU.START_DATE,DC.DAYOFF_ID\n\t\t\tUNION ALL\n\t\t\t/* 資歷未滿半年 */\n\t\t\tSELECT JU.PK_USERS,\n\t\t\t\t   JU.USERID,\n\t\t\t\t   JU.START_DATE,\n\t\t\t\t   DC.DAYOFF_ID,\n\t\t\t\t   MIN(DC.DDAYS) AS DDAYS\n\t\t\t  FROM JH_USERS JU WITH (NOLOCK)\n\t\t\t INNER JOIN DAYOFFCLASS DC WITH (NOLOCK)\n\t\t\t ON 1\=1\n\t\t\t AND DC.DAYOFF_FLAG \= @DAYOFF_FLAG\n\t\t\t WHERE JU.DEP_ID<>'BO'\t\t/*排除老闆 */\n\t\t\t   AND (JU.USERID \= '$$USERID$$'\n\t\t\t    OR ISNULL('$$USERID$$','ALL') \= 'ALL')\n\t\t\t   AND (JU.END_DATE IS NULL\n\t\t\t\t\tOR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY))\t     \t/*在職中*/\n\t\t\t   AND (DC.DAYOFF_ID \= '$$DAYOFF_ID$$'\n\t\t\t   OR ISNULL('$$DAYOFF_ID$$','ALL')\='ALL')\n\t\t\t   AND CONVERT(date,@NEXT_TODAY)>\=DC.EFFECTIVE_DTE\n\t\t\t   AND DC.DAYOFF_ID \= 'SV'\n\t\t\t   AND DC.DDAYS \= 179\n\t\t\t   AND DC.DDAYS >\= DATEDIFF(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\t\t\t\t\t\t\tIIF(@DAYOFF_FLAG\='0' OR DC.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\t\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01'))),\n\t\t\t\t\t\t\t\t\t\t\tCONVERT(date,@NEXT_TODAY))\n\t\t\tGROUP BY JU.PK_USERS,JU.USERID,JU.START_DATE,DC.DAYOFF_ID\n\t\t\t\t   ) TEMP\n\tINNER JOIN DAYOFFCLASS DS WITH (NOLOCK)\n\tON DS.DAYOFF_ID \= TEMP.DAYOFF_ID\n\tAND DS.DDAYS \= TEMP.DDAYS;\n\t\n\t/* 處理非特休假別之給假天數計算(因其他假別給假日與年資無關,故另外處理) */\n\tINSERT INTO @tab\n\tSELECT TEMP.PK_USERS,\n\t\t   TEMP.USERID,\n\t\t   COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),TEMP.START_DATE),\n\t\t   DS.DAYOFF_ID,\n\t\t   IIF(DS.DAYOFF_ID\='SV','00',DS.DAYOFF_SUBID),\n\t\t   DS.DAYOFF_FLAG,\n\t\t   DS.LIMIT_DAYS,\n\t\t   DS.DDAYS\n\t  FROM (SELECT JU.PK_USERS,\n\t\t\t\t   JU.USERID,\n\t\t\t\t   JU.START_DATE,\n\t\t\t\t   DC.DAYOFF_ID,\n\t\t\t\t   DC.DAYOFF_SUBID,\n\t\t\t\t   DC.LIMIT_DAYS,\n\t\t\t\t   DC.DDAYS\n\t\t\t  FROM JH_USERS JU WITH (NOLOCK)\n\t\t\t INNER JOIN DAYOFFCLASS DC WITH (NOLOCK)\n\t\t\t ON 1\=1\n\t\t\t AND DC.DAYOFF_FLAG \= @DAYOFF_FLAG\n\t\t\t WHERE JU.DEP_ID<>'BO'\t\t/*排除老闆 */\n\t\t\t   AND (JU.USERID \= '$$USERID$$'\n\t\t\t    OR ISNULL('$$USERID$$','ALL') \= 'ALL')\n\t\t\t   AND (JU.END_DATE IS NULL\n\t\t\t\t\tOR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY))\t     \t/*在職中*/\n\t\t\t   AND (DC.DAYOFF_ID \= '$$DAYOFF_ID$$'\n\t\t\t   OR ISNULL('$$DAYOFF_ID$$','ALL')\='ALL')\n\t\t\t   AND (DC.DAYOFF_SUBID \= '$$DAYOFF_SUBID$$'\n\t\t\t   OR ISNULL('$$DAYOFF_SUBID$$','ALL')\='ALL')\n\t\t\t   AND ((DC.DAYOFF_ID<>'SV'\n\t\t\t        AND DC.LIMIT_DAYS>0\n\t\t\t        )\n\t\t\t\t\tOR DC.DAYOFF_ID \= 'CT')\n\t\t\t   AND CONVERT(date,@NEXT_TODAY)>\=DC.EFFECTIVE_DTE\n\t\t\t\t   ) TEMP\n\tINNER JOIN DAYOFFCLASS DS WITH (NOLOCK)\n\tON DS.DAYOFF_ID \= TEMP.DAYOFF_ID\n\tAND DS.DAYOFF_SUBID \= TEMP.DAYOFF_SUBID; \n\n\tIF EXISTS\n\t  (SELECT 1 FROM @tab) \n\t\tBEGIN \n\t\t/* 3.1 DATA_CHANGE_LOG */\n\t\t/*INSERT INTO DATA_CHANGE_LOG(FUNC_ID, PROC_TYPE, USER_ID, DATA_NO, EVENT_DT, MEMO, ADD_USER_COMPANY_ID, ADD_USER_ID, ADD_DT, SessionID, ProcPK, PROC_TARGET)\n\t\tVALUES ('Fn08X001','UPDATE','ALL','ALL',@VTODAY,'','JH','JH',@VTODAY,'999999999','999999999','USER_DAYOFF_INFO_NEXT');\n\t\t*/\n\n\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 取得主檔寫入 DATA_CHANGE_LOG 的 IDENTITY 流水號 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t/* SELECT @MASTER_LOG_IDENT \= SCOPE_IDENTITY(); */\n\n\t\t/* 3.2 DATA Detail LOG (before modified) */ \n\t\t/* INSERT INTO LOG_USER_DAYOFF_INFO_NEXT(DATA_CHANGE_LOG_ID,FUNC_ID,CRUD_STATE,PK_UDI,PK_USERS,USERID,DAYOFF_ID,DAYOFF_SUBID,LEFT_DAYS,TOTAL_DAYS,PAST_DAYS,PAST_DAYS_TEMP,DATA_STATUS,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,DEL_USER_ID,DEL_USER_COMPANY_ID,DEL_DT,SV_ENDDT,SV_COMMENT) \n\t\tSELECT @MASTER_LOG_IDENT,'Fn08X001','U',PK_UDI,PK_USERS,USERID,DAYOFF_ID,DAYOFF_SUBID,LEFT_DAYS,TOTAL_DAYS,PAST_DAYS,PAST_DAYS_TEMP,DATA_STATUS,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,DEL_USER_ID,DEL_USER_COMPANY_ID,DEL_DT,SV_ENDDT,SV_COMMENT\n\t\tFROM USER_DAYOFF_INFO_NEXT WITH (NOLOCK); */\n\n\t\t/* 3.3 功能主要異動 Table */\n\t\t/* 當每年的月、日與每位同仁到職日(或有另給的參數基準日)比較，日期(不看年)相同將會更新同仁的假別統計表 */\n\t\tUPDATE UD WITH (ROWLOCK)\n\t\tSET UD.DATA_STATUS\= '0',\n\t\t\tUD.TOTAL_DAYS \= C.LIMIT_DAYS,\n\t\t\tUD.LEFT_DAYS \= C.LIMIT_DAYS,\n\t\t\tUD.LAST_MOD_USER_ID\='JH',\n\t\t\tUD.LAST_MOD_USER_COMPANY_ID\='JH',\n\t\t\tUD.LAST_MOD_DT\=@VTODAY\n\t\tFROM USER_DAYOFF_INFO_NEXT UD\n\t\tINNER JOIN JH_USERS JU\n\t\tON UD.PK_USERS \= JU.PK_USERS\n\t\tAND (JU.END_DATE IS NULL\n\t\t\tOR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY)) /*在職中*/\n\t\tAND JU.DEP_ID<>'BO'\t\t/*排除老闆 */\n\t\tINNER JOIN @tab C\n\t\tON UD.PK_USERS \= C.PK_USERS\n\t\tAND UD.DAYOFF_ID \= C.DAYOFF_ID\n\t\tAND UD.DAYOFF_SUBID \= C.DAYOFF_SUBID\n\t\tINNER JOIN DAYOFFCLASS DC\n\t\tON C.DAYOFF_ID \= DC.DAYOFF_ID\n\t\tAND C.DAYOFF_SUBID \= DC.DAYOFF_SUBID\n\t\tWHERE ((DATEPART(mm,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(C.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= DATEPART(mm,@NEXT_TODAY)\n\t\tAND DATEPART(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(C.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= DATEPART(dd,@NEXT_TODAY))\n\t\tOR (DATEPART(mm,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(C.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= 2\n\t\t\tAND DATEPART(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\t\tIIF(C.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= 29\n\t\t\tAND DATEPART(mm,@NEXT_TODAY) \= 3\n\t\t\tAND DATEPART(dd,@NEXT_TODAY) \= 1\n\t\t\tAND @leapYear \= -1\n\t\t))\n\t\tAND DC.UPDATE_FLAG \= 'Y'\n\t\tAND (UD.USERID \= '$$USERID$$'\n\t\tOR ISNULL('$$USERID$$','ALL') \= 'ALL');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t/* 婚假、陪產假、產檢假、產假、小產假、喪假用完就自動給假(因一年內可能流產兩次?或一年之內年頭年尾都有懷孕) */\n\t\tUPDATE UD WITH (ROWLOCK)\n\t\tSET UD.TOTAL_DAYS \= C.LIMIT_DAYS,\n\t\t\tUD.LEFT_DAYS \= C.LIMIT_DAYS,\n\t\t\tUD.DATA_STATUS\='0',\n\t\t\tUD.LAST_MOD_USER_ID\='JH',\n\t\t\tUD.LAST_MOD_USER_COMPANY_ID\='JH',\n\t\t\tUD.LAST_MOD_DT\=@VTODAY\n\t\tFROM USER_DAYOFF_INFO_NEXT UD\n\t\tINNER JOIN JH_USERS JU\n\t\tON UD.PK_USERS \= JU.PK_USERS\n\t\tAND (JU.END_DATE IS NULL\n\t\t\tOR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY)) /*在職中*/\n\t\tAND JU.DEP_ID<>'BO'\t\t/*排除老闆 */\n\t\tINNER JOIN @tab C\n\t\tON UD.PK_USERS \= C.PK_USERS\n\t\tAND UD.DAYOFF_ID \= C.DAYOFF_ID\n\t\tAND UD.DAYOFF_SUBID \= C.DAYOFF_SUBID\n\t\tWHERE ISNULL(UD.LEFT_DAYS,0)\=0\n\t\tAND C.DAYOFF_ID IN ('WL','PL','MC','ML','MI','FL')\n\t\tAND (UD.USERID \= '$$USERID$$'\n\t\tOR ISNULL('$$USERID$$','ALL') \= 'ALL');\n\n\t\t/* 安胎假每兩年需重新給假一次\n\t\t   以及病假的子類別(01)每兩年需重新給假一次 */\n\t\tUPDATE UD WITH (ROWLOCK)\n\t\tSET UD.TOTAL_DAYS \= C.LIMIT_DAYS,\n\t\t\tUD.LEFT_DAYS \= C.LIMIT_DAYS,\n\t\t\tUD.DATA_STATUS\='0',\n\t\t\tUD.LAST_MOD_USER_ID\='JH',\n\t\t\tUD.LAST_MOD_USER_COMPANY_ID\='JH',\n\t\t\tUD.LAST_MOD_DT\=@VTODAY\n\t\tFROM USER_DAYOFF_INFO_NEXT UD\n\t\tINNER JOIN JH_USERS JU\n\t\tON UD.PK_USERS \= JU.PK_USERS\n\t\tAND (JU.END_DATE IS NULL\n\t\t\tOR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY)) /*在職中*/\n\t\tINNER JOIN @tab C\n\t\tON UD.PK_USERS \= C.PK_USERS\n\t\tAND UD.DAYOFF_ID \= C.DAYOFF_ID\n\t\tAND UD.DAYOFF_SUBID \= C.DAYOFF_SUBID\n\t\tWHERE (((DATEPART(mm,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(C.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= DATEPART(mm,@NEXT_TODAY)\n\t\tAND DATEPART(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(C.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= DATEPART(dd,@NEXT_TODAY))\n\t\tOR (DATEPART(mm,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(C.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= 2\n\t\t\tAND DATEPART(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\t\tIIF(C.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= 29\n\t\t\tAND DATEPART(mm,@NEXT_TODAY) \= 3\n\t\t\tAND DATEPART(dd,@NEXT_TODAY) \= 1\n\t\t\tAND @leapYear \= -1\n\t\t))\n\t\tAND DATEDIFF(yy,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(C.DAYOFF_FLAG\='0',JU.START_DATE,'$$BASE_DTE$$')),\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01'))%2\=0)\n\t\tAND (C.DAYOFF_ID \= 'AL'\n\t\t\tOR (C.DAYOFF_ID \= 'SL'\n\t\t\tAND C.DAYOFF_SUBID \= '01'))\n\t\tAND (UD.USERID \= '$$USERID$$'\n\t\tOR ISNULL('$$USERID$$','ALL') \= 'ALL');\n\t\t\n\t\t/* 生理假每月重新給假一次 */\n\t\tUPDATE UD WITH (ROWLOCK)\n\t\tSET UD.TOTAL_DAYS \= C.LIMIT_DAYS,\n\t\t\tUD.LEFT_DAYS \= C.LIMIT_DAYS,\n\t\t\tUD.DATA_STATUS\='0',\n\t\t\tUD.LAST_MOD_USER_ID\='JH',\n\t\t\tUD.LAST_MOD_USER_COMPANY_ID\='JH',\n\t\t\tUD.LAST_MOD_DT\=@VTODAY\n\t\tFROM USER_DAYOFF_INFO_NEXT UD\n\t\tINNER JOIN JH_USERS JU\n\t\tON UD.PK_USERS \= JU.PK_USERS\n\t\tAND (JU.END_DATE IS NULL\n\t\t\tOR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY)) /*在職中*/\n\t\tAND JU.DEP_ID<>'BO'\t\t/*排除老闆 */\n\t\tINNER JOIN @tab C\n\t\tON UD.PK_USERS \= C.PK_USERS\n\t\tAND UD.DAYOFF_ID \= C.DAYOFF_ID\n\t\tAND UD.DAYOFF_SUBID \= C.DAYOFF_SUBID\n\t\tWHERE DATEPART(dd,COALESCE(IIF('$$BASE_DTE$$'\='',NULL,'$$BASE_DTE$$'),\n\t\t\t\t\tIIF(C.DAYOFF_FLAG\='0',JU.START_DATE,\n\t\t\t\t\t\tCONVERT(date,CONVERT(varchar,DATEPART(yy,@NEXT_TODAY))+'-01-01')))) \= DATEPART(dd,@NEXT_TODAY)\n\t\tAND C.DAYOFF_ID \= 'MS'\n\t\tAND (UD.USERID \= '$$USERID$$'\n\t\tOR ISNULL('$$USERID$$','ALL') \= 'ALL');\n\t\t\n\t\t/* 撫育假每日要重設 */\n\t\tUPDATE UD WITH (ROWLOCK)\n\t\tSET UD.TOTAL_DAYS \= C.LIMIT_DAYS,\n\t\t\tUD.LEFT_DAYS \= C.LIMIT_DAYS,\n\t\t\tUD.DATA_STATUS\='0',\n\t\t\tUD.LAST_MOD_USER_ID\='JH',\n\t\t\tUD.LAST_MOD_USER_COMPANY_ID\='JH',\n\t\t\tUD.LAST_MOD_DT\=@VTODAY\n\t\tFROM USER_DAYOFF_INFO_NEXT UD\n\t\tINNER JOIN JH_USERS JU\n\t\tON UD.PK_USERS \= JU.PK_USERS\n\t\tAND (JU.END_DATE IS NULL\n\t\t\tOR CONVERT(date,JU.END_DATE) >\= CONVERT(date,@TODAY)) /*在職中*/\n\t\tAND JU.DEP_ID<>'BO'\t\t/*排除老闆 */\n\t\tINNER JOIN @tab C\n\t\tON UD.PK_USERS \= C.PK_USERS\n\t\tAND UD.DAYOFF_ID \= C.DAYOFF_ID\n\t\tAND UD.DAYOFF_SUBID \= C.DAYOFF_SUBID\n\t\tWHERE C.DAYOFF_ID \= 'PT'\n\t\tAND (UD.USERID \= '$$USERID$$'\n\t\tOR ISNULL('$$USERID$$','ALL') \= 'ALL');\n\n\t\t/* 3.4 Action Return */\n\t\tINSERT INTO MEM_API_RESULT(ProcPK, hashValues, RETURN_CODE, RETURN_MSG, DATA_UNIQUE_KEY, DATA_ACTION_TYPE, MEMO)\n\t\tVALUES ('${LOGPK}',@FROM_OUTSIDE,'0','SUCCESS','ALL','U','$$MEMO$$');\n\n\tEND \n\tELSE \n\tBEGIN \n\t/* 3.5 Action Return */\n\tINSERT INTO MEM_API_RESULT(ProcPK, hashValues, RETURN_CODE, RETURN_MSG, DATA_UNIQUE_KEY, DATA_ACTION_TYPE, MEMO)\n\tVALUES ('${LOGPK}',@FROM_OUTSIDE,'-1','資料正在審核流程中，無法修改','ALL','U','$$MEMO$$');\n\n\tEND \nEND   \nIF @RETURN_CODE IS NULL \nBEGIN\nSELECT @RETURN_CODE \= RETURN_CODE,\n       @RETURN_MSG \= RETURN_MSG,\n       @RETURN_TEST \=\n  (SELECT ProcPK,\n          hashValues,\n          RETURN_CODE,\n          RETURN_MSG,\n          DATA_UNIQUE_KEY,\n          DATA_ACTION_TYPE,\n          MEMO\n   FROM MEM_API_RESULT\n   WHERE hashValues \= @FROM_OUTSIDE\n     FOR JSON AUTO)\nFROM MEM_API_RESULT\nWHERE hashValues \= @FROM_OUTSIDE;\n\nEND;\n\nEND TRY \nBEGIN CATCH \nIF @@TRANCOUNT > 0\nROLLBACK TRANSACTION;\nBEGIN\nSELECT @RETURN_CODE \= ERROR_NUMBER(),\n       @RETURN_MSG \= ERROR_MESSAGE(),\n       @RETURN_TEST \=\n  (SELECT *\n   FROM\n     (SELECT '${LOGPK}' AS ProcPK,\n             @FROM_OUTSIDE AS hashValues,\n             ERROR_NUMBER() AS RETURN_CODE,\n             ERROR_MESSAGE() AS RETURN_MSG,\n\t\t\t 'ALL' AS DATA_UNIQUE_KEY,\n             '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE,\n             '$$MEMO$$' AS MEMO) AS A\n   FOR JSON AUTO);\n\nEND;\n\nEND CATCH;
SIGNON_DAYOFFCNT=/** Last updated date\: 2020/06/02\nLast updated by \: Noli\n修正原因\: 日期相減改為用DAYDIFF函式\n功能：計算假單起迄日總天數 (目前此版, 起迄日如果選到的不是工作日,那麼算天數會有問題, 已改為由前台檢核起迄日是否正確)\n\n另外，如果請5/20~ 12\:00~ 5/21 9\:00只要迄時比起時小，目前計算也會有問題，將由前台檢核不能這樣請\n以及請5/20~17\:00到5/20 15\:00雖然前台已有檢核不能這樣申請, 但天數仍會計算錯誤, 將由前台改為0\n**/\nSELECT *\n  FROM (SELECT COUNT(*) AS totalProperty\n\t\t  FROM\n\t\t\t (SELECT *\t\t--2020.04.29 MODIFIED\n\t\t\t\tFROM DFM_DATE WITH (NOLOCK)\n\t\t\t   WHERE convert(varchar,D_F_DATE,111)>\='$$START_DT$$'\n\t\t\t\t AND convert(varchar,D_F_DATE,111)<\='$$END_DT$$'\n\t\t\t\t AND WORKING_FLAG \= 'N')A) TEMPA,\n\t\t(SELECT ROW_NUMBER() OVER (\n                  ORDER BY daycount ASC) AS RowNum,\n\t\t\t\t  daycount,\n\t\t\t\t  cSENotWorkDay,\n\t\t\t\t  chkCalender,\n\t\t\t\t  break_sTime,\t --2020.04.29 ADDED\n\t\t\t\t  break_eTime\t --2020.04.29 ADDED\n\t\t   FROM \n\t\t\t (SELECT convert(varchar,(DATEDIFF(day,'$$START_DT$$','$$END_DT$$')+1 - NOT_WORKDAY)+\t--假單起迄天數差\t--2020.04.28 MODIFIED\n\t\t\t\t(CASE WHEN DATEDIFF(day,'$$START_DT$$','$$END_DT$$')+1>1\t\t\t\t\t\t\t--假單有起迄天數差\t--2020.04.28 MODIFIED\n\t\t\t\t\t  AND (CAST(datepart(hh,'$$END_DT$$') AS FLOAT)-CAST(datepart(hh,'$$START_DT$$') AS FLOAT))/8<\=1 \n\t\t\t\t\t  AND datepart(hh,'$$END_DT$$')>BERAK_SHOURS AND datepart(hh,'$$START_DT$$')<BERAK_EHOURS\t\t--假單起迄工時介於12-13點間則不能計入\t\t   \n\t\t\t\t\t   THEN (CAST(datepart(hh,'$$END_DT$$') AS FLOAT)-1-CAST(datepart(hh,'$$START_DT$$') AS FLOAT))/8 --假單起迄工時相差小於8(hr),扣一天\n\t\t\t\t\t  WHEN DATEDIFF(day,'$$START_DT$$','$$END_DT$$')+1>1\t\t--2020.04.28 MODIFIED\t\t\t--假單有起迄天數差(非間距+1)且假單起迄工時不在12-13點之間\n\t\t\t\t\t   AND (CAST(datepart(hh,'$$END_DT$$') AS FLOAT)-CAST(datepart(hh,'$$START_DT$$') AS FLOAT))/8<\=1\n\t\t\t\t\t   THEN (CAST(datepart(hh,'$$END_DT$$') AS FLOAT)-CAST(datepart(hh,'$$START_DT$$') AS FLOAT))/8 --假單起迄工時相差小於8(hr),扣一天\n\t\t\t\t\t  WHEN DATEDIFF(day,'$$START_DT$$','$$END_DT$$')+1>1\t\t--假單有起迄天數差\t--2020.04.28 MODIFIED\n\t\t\t\t\t   AND (CAST(datepart(hh,'$$END_DT$$') AS FLOAT)-CAST(datepart(hh,'$$START_DT$$') AS FLOAT))/8>1  THEN 0 --假單起迄工時相差等於8(hr),不扣天\n\t\t\t\t\t  --假單只請小時，若起迄時間介於12-13點間則不能計入\n\t\t\t\t\t  WHEN datepart(hh,'$$END_DT$$')>BERAK_SHOURS AND datepart(hh,'$$START_DT$$')<BERAK_EHOURS\n\t\t\t\t\t\tAND DATEDIFF(day,'$$START_DT$$','$$END_DT$$')+1\=1\t\t--2020.04.28 MODIFIED\n\t\t\t\t\t\tTHEN (CAST (datepart(hh,'$$END_DT$$') AS FLOAT)-1-CAST(datepart(hh,'$$START_DT$$') AS FLOAT))/8\n\t\t\t\t\t  --假單只請小時，且起迄未在12-13點之間\n\t\t\t\t\t  WHEN DATEDIFF(day,'$$START_DT$$','$$END_DT$$')+1\=1 \t--2020.04.28 MODIFIED\n\t\t\t\t\t\tTHEN (CAST (datepart(hh,'$$END_DT$$') AS FLOAT)-CAST(datepart(hh,'$$START_DT$$') AS FLOAT))/8\n\t\t\t\t\tEND)-(CASE WHEN DATEDIFF(day,'$$START_DT$$','$$END_DT$$')+1>1\t--2020.04.28 MODIFIED\n\t\t\t\t\t   AND (CAST(datepart(hh,'$$END_DT$$') AS FLOAT)-CAST(datepart(hh,'$$START_DT$$') AS FLOAT))/8>1 THEN 0 ELSE 1 END)  --只有剛好滿8小時，不用扣回一天，其他都要扣回一天\n\t\t\t\t\t)AS daycount,\n\t\t\t\t\tcSENotWorkDay,\n\t\t\t\t\tchkCalender,\n\t\t\t\t\tbreak_sTime,\t--2020.04.29 ADDED\n\t\t\t\t\tbreak_eTime\t\t--2020.04.29 ADDED\n\t\t\t   FROM\n\t\t\t\t(SELECT count(*) AS NOT_WORKDAY,\n\t\t\t\t\t\t(SELECT COUNT(*) \n\t\t\t\t\t\t   FROM DFM_DATE WITH (NOLOCK) \n\t\t\t\t\t\t   WHERE (D_F_DATE\=convert(date,'$$START_DT$$') OR D_F_DATE\=convert(date,'$$END_DT$$')) and WORKING_FLAG \= 'N'\n\t\t\t\t\t\t ) AS cSENotWorkDay,\t--檢查假單起迄日是否選到假日\=>大於0,表示選到假日\n\t\t\t\t\t\t(SELECT COUNT(*) \n\t\t\t\t\t\t   FROM DFM_DATE WITH (NOLOCK) \n\t\t\t\t\t\t  WHERE D_F_DATE\=convert(date,'$$END_DT$$')\n\t\t\t\t\t\t ) AS chkCalender,\t\t--檢查是否選到的假單起迄日尚未設定在萬年曆裡面 \=>等於0,表示沒設定\n\t\t\t\t\t\t(SELECT SUBSTRING(JJ.BREAK_STIME,1,2) \n\t\t\t\t\t\t   FROM JH_USERS JUSR WITH (NOLOCK)\n\t\t\t\t\t\t  INNER JOIN JH_JOBTIME JJ\n\t\t\t\t\t\t  ON JUSR.JOB_CODE \= JJ.JOB_CODE\n\t\t\t\t\t\t  WHERE JUSR.USERID \= '$$USERID$$') AS BERAK_SHOURS,\t--午休起時(hh)\n\t\t\t\t\t\t(SELECT SUBSTRING(JJ.BREAK_ETIME,1,2) \n\t\t\t\t\t\t   FROM JH_USERS JUSR WITH (NOLOCK)\n\t\t\t\t\t\t  INNER JOIN JH_JOBTIME JJ WITH (NOLOCK)\n\t\t\t\t\t\t  ON JUSR.JOB_CODE \= JJ.JOB_CODE\n\t\t\t\t\t\t  WHERE JUSR.USERID \= '$$USERID$$') AS BERAK_EHOURS,     --午休迄時(hh)\n\t\t\t\t\t\t(SELECT JJ.BREAK_STIME\n\t\t\t\t\t\t   FROM JH_USERS JUSR WITH (NOLOCK)\n\t\t\t\t\t\t  INNER JOIN JH_JOBTIME JJ\n\t\t\t\t\t\t  ON JUSR.JOB_CODE \= JJ.JOB_CODE\n\t\t\t\t\t\t  WHERE JUSR.USERID \= '$$USERID$$') AS break_sTime,\t\t--午休起時\t--2020.04.29 ADDED\n\t\t\t\t\t\t(SELECT JJ.BREAK_ETIME\n\t\t\t\t\t\t   FROM JH_USERS JUSR WITH (NOLOCK)\n\t\t\t\t\t\t  INNER JOIN JH_JOBTIME JJ\n\t\t\t\t\t\t  ON JUSR.JOB_CODE \= JJ.JOB_CODE\n\t\t\t\t\t\t  WHERE JUSR.USERID \= '$$USERID$$') AS break_eTime\t\t--午休迄時\t--2020.04.29 ADDED\n\t\t\t\t   FROM DFM_DATE WITH (NOLOCK)\n\t\t\t\t  WHERE convert(varchar,D_F_DATE,111)>\='$$START_DT$$'\n\t\t\t\t\tAND convert(varchar,D_F_DATE,111)<\='$$END_DT$$'\n\t\t\t\t\tAND WORKING_FLAG \= 'N') TEMP) B) TEMPB\nWHERE 1 \= 1;
SIGNON_DAYOFFTYPE=SELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM DAYOFFCLASS\n    WHERE DATA_STATUS  \= 'Y'\n\t  AND DAYOFF_ID<>'ON') A,\n\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY DAYOFF_ID DESC) AS RowNum,\n                            DAYOFF_ID,\n\t\t\t\t\t\t\tDAYOFF_ID+' '+DAYOFF_NAME AS DAYOFF_NAME\n     FROM DAYOFFCLASS\n    WHERE DATA_STATUS  \= 'Y'\n\t  AND DAYOFF_ID<>'ON') B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n;
SIGNON_DAYOFFTYPE_ALL=/* Last Updated\: 2020/03/31\n取得假別清單+ALL的API*/\nSELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM (SELECT '0' AS RowNum,\n\t\t\t\t  'ALL_EXCEPT_ON' AS DAYOFF_ID,\n\t\t\t\t  'ALL' AS DAYOFF_NAME\n\t\t\tUNION ALL\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\t\t\t\t\t ORDER BY DAYOFF_ID DESC) AS RowNum,\n\t\t\t\t\t\t\t\t\tDAYOFF_ID,\n\t\t\t\t\t\t\t\t\tDAYOFF_ID+' '+DAYOFF_NAME AS DAYOFF_NAME\n\t\t\t FROM DAYOFFCLASS\n\t\t\tWHERE DATA_STATUS  \= 'Y'\n\t\t\t  AND DAYOFF_ID<>'ON') A_INNER\n\t\t   ) A,\n  (SELECT '0' AS RowNum,\n\t\t  'ALL_EXCEPT_ON' AS DAYOFF_ID,\n\t\t  'ALL' AS DAYOFF_NAME\n\tUNION ALL\n\tSELECT ROW_NUMBER() OVER (\n                             ORDER BY DAYOFF_ID DESC) AS RowNum,\n                            DAYOFF_ID,\n\t\t\t\t\t\t\tDAYOFF_ID+' '+DAYOFF_NAME AS DAYOFF_NAME\n     FROM DAYOFFCLASS\n    WHERE DATA_STATUS  \= 'Y'\n\t  AND DAYOFF_ID<>'ON') B\nWHERE 1 \= 1\n  AND RowNum >\= $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n;
SIGNON_DS=/* Last Updated Date\: 2020/05/13\nUpdated by Noli\n修正原因\: 修改工時顯示方式, 回傳的JSON，DB的值123.45應是123.45而非123.5 (issue \#561)\n功能：取得當天登入者的工作日誌*/\n\nSELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM (SELECT JOBL.PK_JOB,\n\t\t\t\t  JOBL.USERID,\n\t\t\t\t  JPRJ.PRJ_ID,\n\t\t\t\t  JPRJ.PRJ_NAME,\n\t\t\t\t  JOBT.JOB_ID,\n\t\t\t\t  JOBT.JOB_NAME,\n\t\t\t\t  JOBL.JOB_DESC,\n\t\t\t\t  CAST(JOBL.WORK_HOURS AS VARCHAR) WORK_HOURS,\t\t--2020.05.13 MODIFIED\n\t\t\t\t  JPRJ.PRJ_STATUS,\n\t\t\t\t  JOBL.DATA_STATUS,\t\t\t\t\t--固定欄位必需取出\n\t\t\t\t  JOBL.ADD_USER_ID,\t\t\t\t\t--固定欄位必需取出\n\t\t\t\t  JOBL.ADD_USER_COMPANY_ID, \t\t--固定欄位必需取出\n\t\t\t\t  JOBL.ADD_DT, \t\t\t\t\t\t--固定欄位必需取出\n\t\t\t\t  JOBL.LAST_MOD_USER_ID, \t\t\t--固定欄位必需取出\n\t\t\t\t  JOBL.LAST_MOD_USER_COMPANY_ID, \t--固定欄位必需取出\n\t\t\t\t  JOBL.LAST_MOD_DT, \t\t\t\t--固定欄位必需取出\n\t\t\t\t  JOBL.DEL_USER_ID, \t\t\t\t--固定欄位必需取出\n\t\t\t\t  JOBL.DEL_USER_COMPANY_ID, \t\t--固定欄位必需取出\n\t\t\t\t  JOBL.DEL_DT \t\t\t\t\t\t--固定欄位必需取出\n\t\t\t FROM JH_JOBLOG JOBL\n\t\t\t\t INNER JOIN JH_PROJECT JPRJ\n\t\t\t\t ON JOBL.PRJ_ID \= JPRJ.PRJ_ID\n\t\t\t\t INNER JOIN JH_JOBTYPE JOBT\n\t\t\t\t ON JOBL.JOB_ID \= JOBT.JOB_ID\n\t\t\t WHERE JOBL.USERID \= '$$USERID$$'\n\t\t\t   AND CONVERT(date,JOBL.ADD_DT) \= CONVERT(date,CONVERT(varchar,getdate(),120))\n\t\t ) C\n\t ) A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY JOBL.ADD_DT) AS RowNum,\n\t\t  JOBL.PK_JOB,\n\t\t  JOBL.USERID,\n\t\t  JPRJ.PRJ_ID,\n\t\t  JPRJ.PRJ_NAME,\n\t\t  JOBT.JOB_ID,\n\t\t  JOBT.JOB_NAME,\n\t\t  JOBL.JOB_DESC,\n\t\t  CAST(JOBL.WORK_HOURS AS VARCHAR) WORK_HOURS,\t\t--2020.05.13 MODIFIED\n\t\t  JPRJ.PRJ_STATUS,\n\t\t  JOBL.DATA_STATUS,\t\t\t\t\t--固定欄位必需取出\n\t\t  JOBL.ADD_USER_ID,\t\t\t\t\t--固定欄位必需取出\n\t\t  JOBL.ADD_USER_COMPANY_ID, \t\t--固定欄位必需取出\n\t\t  JOBL.ADD_DT, \t\t\t\t\t\t--固定欄位必需取出\n\t\t  JOBL.LAST_MOD_USER_ID, \t\t\t--固定欄位必需取出\n\t\t  JOBL.LAST_MOD_USER_COMPANY_ID, \t--固定欄位必需取出\n\t\t  JOBL.LAST_MOD_DT, \t\t\t\t--固定欄位必需取出\n\t\t  JOBL.DEL_USER_ID, \t\t\t\t--固定欄位必需取出\n\t\t  JOBL.DEL_USER_COMPANY_ID, \t\t--固定欄位必需取出\n\t\t  JOBL.DEL_DT \t\t\t\t\t\t--固定欄位必需取出\n\t FROM JH_JOBLOG JOBL\n\t\t INNER JOIN JH_PROJECT JPRJ\n\t\t ON JOBL.PRJ_ID \= JPRJ.PRJ_ID\n\t\t INNER JOIN JH_JOBTYPE JOBT\n\t\t ON JOBL.JOB_ID \= JOBT.JOB_ID\n\t WHERE JOBL.USERID \= '$$USERID$$'\n\t   AND CONVERT(date,JOBL.ADD_DT) \= CONVERT(date,CONVERT(varchar,getdate(),120))\n\t ) B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n;
SIGNON_DS_CB1=/* Last Updated Date\: 2020/04/14\nUpdated by Noli\n修正原因\: \n功能：取得專案代碼清單*/\n\nSELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM (SELECT PRJ_ID,\n\t\t\t\t  PRJ_NAME,\n\t\t\t\t  PRJ_STATUS\n\t\t\t FROM JH_PROJECT\n\t\t ) C\n\t ) A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY PRJ_ID) AS RowNum,\n\t\t  PRJ_ID,\n\t\t  PRJ_NAME,\n\t\t  PRJ_STATUS\n\t FROM JH_PROJECT\n\t ) B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n;
SIGNON_DS_CB2=/* Last Updated Date\: 2020/05/15\nUpdated by Noli\n修正原因\: 拿掉start和limit變數\n功能：取得工作項目代碼 */\n\nSELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM (SELECT JOB_ID,\n\t\t\t\t  JOB_NAME\n\t\t\t FROM JH_JOBTYPE\n\t\t    WHERE (ISNULL(JOB_NAME,'') \= '$$JOB_NAME$$'\n\t\t\t   OR '$$JOB_NAME$$' \= 'ALL')\n\t\t ) C\n\t ) A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY JOB_ID) AS RowNum,\n\t\tJOB_ID,\n\t\tJOB_NAME\n\tFROM (SELECT JOB_ID,\n\t\t\t\t JOB_NAME\n\t\t\tFROM JH_JOBTYPE\n\t\t   WHERE (ISNULL(JOB_NAME,'') \= '$$JOB_NAME$$'\n\t\t\t  OR '$$JOB_NAME$$' \= 'ALL')\n\t\t ) C\n\t ) B\nWHERE 1 \= 1\n;
SIGNON_DS_CB3=/* Last Updated Date\: 2020/04/13\nUpdated by Noli\n修正原因\: \n功能：取得工作項目清單*/\n\nSELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM (SELECT JOB_ID,\n\t\t\t\t JOB_NAME\n\t\t\tFROM JH_JOBTYPE\n\t\t   WHERE (ISNULL(JOB_TITLE,'') \= '$$JOB_TITLE$$'\n\t\t\t\tOR '$$JOB_TITLE$$' \= 'ALL')\n\t\t ) C\n\t ) A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY JOB_ID) AS RowNum,\n\t\tJOB_ID,\n\t\tJOB_NAME\n\tFROM (SELECT JOB_ID,\n\t\t\t\t JOB_NAME\n\t\t\tFROM JH_JOBTYPE\n\t\t   WHERE (ISNULL(JOB_TITLE,'') \= '$$JOB_TITLE$$'\n\t\t\t\tOR '$$JOB_TITLE$$' \= 'ALL')\n\t\t ) C\n\t ) B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n;
SIGNON_FUNCTION_AUTHOR=SELECT ROW_NUMBER() OVER (\n\t\tORDER BY USER_ID ASC\n\t\t) AS RowNum\n\t,M.GROUPID\n\t,M.[USER_ID]\n\t,'{' + LEFT(M.GROUPAUTH, LEN(M.GROUPAUTH) - 1) + '}' AS GROUP_AUTH\nFROM (\n\tSELECT '$$SysGroup$$' AS [GROUPID]\n\t\t,'$$SysUser$$' AS [USER_ID]\n\t\t,(\n\t\t\tSELECT CASE \n\t\t\t\t\tWHEN [qry] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_query_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_query_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [prn] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_prn_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_prn_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [exp] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_exp_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_exp_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [add] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_add_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_add_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [del] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_del_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_del_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [mod] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_mod_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_mod_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [aut] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_aut_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_aut_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [apr] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_apr_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_apr_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [rej] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_rej_disabled"\:false'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_rej_disabled"\:true'\n\t\t\t\t\tEND + ','\n\t\t\tFROM (\n\t\t\t\tSELECT A.[GROUPID]\n\t\t\t\t\t,B.[USER_ID]\n\t\t\t\t\t,A.[FUNC_ID]\n\t\t\t\t\t,ISNULL(B.U_QRY, A.QRY) AS QRY\n\t\t\t\t\t,ISNULL(B.U_PRN, A.PRN) AS PRN\n\t\t\t\t\t,ISNULL(B.U_EXP, A.[EXP]) AS [EXP]\n\t\t\t\t\t,ISNULL(B.U_ADD, A.[ADD]) AS [ADD]\n\t\t\t\t\t,ISNULL(B.U_DEL, A.[DEL]) AS [DEL]\n\t\t\t\t\t,ISNULL(B.U_MOD, A.[MOD]) AS [MOD]\n\t\t\t\t\t,ISNULL(B.U_AUT, A.[AUT]) AS [AUT]\n\t\t\t\t\t,ISNULL(B.U_APR, A.[APR]) AS [APR]\n\t\t\t\t\t,ISNULL(B.U_REJ, A.[REJ]) AS [REJ]\n\t\t\t\tFROM GROUP_FUNC_AUTH A\n\t\t\t\tLEFT OUTER JOIN (\n\t\t\t\t\tSELECT GROUPID\n\t\t\t\t\t\t,USER_ID\n\t\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t\t,[QRY] AS U_QRY\n\t\t\t\t\t\t,[PRN] AS U_PRN\n\t\t\t\t\t\t,[EXP] AS U_EXP\n\t\t\t\t\t\t,[ADD] AS U_ADD\n\t\t\t\t\t\t,[DEL] AS U_DEL\n\t\t\t\t\t\t,[MOD] AS U_MOD\n\t\t\t\t\t\t,[AUT] AS U_AUT\n\t\t\t\t\t\t,[APR] AS U_APR\n\t\t\t\t\t\t,[REJ] AS U_REJ\n\t\t\t\t\tFROM USER_FUNC_AUTH\n\t\t\t\t\tWHERE USER_ID \= '$$SysUser$$'\n\t\t\t\t\t\tAND GROUPID \= '$$SysGroup$$'\n\t\t\t\t\t) B ON (\n\t\t\t\t\t\tA.GROUPID \= B.GROUPID\n\t\t\t\t\t\tAND A.FUNC_ID \= B.FUNC_ID\n\t\t\t\t\t\tAND A.COMPANY_ID \= B.COMPANY_ID\n\t\t\t\t\t\t)\n\t\t\t\tWHERE A.GROUPID \= '$$SysGroup$$'\n\t\t\t\t\tAND (\n\t\t\t\t\t\tA.FUNC_ID LIKE '%$$FUNC_ID$$%'\n\t\t\t\t\t\tOR 'ALL' \= '$$FUNC_ID$$'\n\t\t\t\t\t\t)\n\t\t\t\t) N \n\t\t\tFOR XML PATH('')\n\t\t\t) GROUPAUTH\n\t) M
SIGNON_GENERATE_MAIL=/*  UPDATED AT 2020/05/26\n1. 修正邏輯, 改為不UPDATE JH_SENDMAIL_CONTENT, 改傳取代CONTENT變數到公版procedure\: JHSP_WRITE_EMAIL 即可(不改procedure的邏輯)\n*/\n\nDECLARE @MAIL_TYPE       VARCHAR(100)\='$$MAIL_TYPE$$',\n        @SUB_TYPE        VARCHAR(100)\='$$SUB_TYPE$$',\n\t\t@LOGIN_ID        VARCHAR(20)\='$$LOGIN_ID$$',       \t--寄件人ID(用在信件標題內容)\n\t\t@DATADT          VARCHAR(20)\='$$DATA_DT$$',       \t--日期(用在信件標題內容)\n\t    @AIMSID          VARCHAR(20)\='$$AIMSID$$',      \t--產品編號(用在信件標題內容)\n\t\t@DAYOFF_SEQ\t\t VARCHAR(12)\='$$DAYOFF_SEQ$$',\t\t--假單編號\n\t\t@AUDITOR\t\t VARCHAR(50)\='$$AUDITOR$$',\t\t\t--審核人員\n\t\t@APPLY_DTE\t\t VARCHAR(20)\='$$APPLY_DTE$$',\t    --申請時間\n\t\t@DAYOFF_ID\t\t VARCHAR(10)\='$$DAYOFF_ID$$',\t\t--假別代碼\t\n\t\t@WORK_SDATE\t\t VARCHAR(10)\='$$WORK_SDATE$$',\t\t--請假開始日期\t\t\n\t\t@WORK_STIME\t\t VARCHAR(10)\='$$WORK_STIME$$',\t\t--請假開始時間\t\t\n\t\t@WORK_EDATE\t\t VARCHAR(10)\='$$WORK_EDATE$$',\t\t--請假結束日期\t\t\n\t\t@WORK_ETIME\t\t VARCHAR(10)\='$$WORK_ETIME$$',\t\t--請假結束時間\n\t\t@CONTENT         varchar(8000) \= '$$CONTENT$$', \t--內容\n\t    @GROUPID         VARCHAR(20),\t\t  \t\t\t\t--收件人群組\n\t\t@CC_GROUPID      VARCHAR(20)\t\t\t\t\t\t--CC收件人群組\n\t\t\nBEGIN TRY\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n\t/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t/*  這一段 update 可用noli的excel 檔中的  INSERT 產生器，來產生對應的欄位及語法  */\n\t\n\tDECLARE @XDAYOFF_SEQ\t   NUMERIC(12,0),\t \t--假單編號(數字型態)\n\t\t\t@USERID\t\t\t   VARCHAR(50),\t\t  \t--假單申請人\n\t\t\t@AGREE_TIME\t\t   VARCHAR(20),\t\t\t--假單放行/退回/刪除時間\n\t\t\t@SUBJECT           varchar(300),        --主旨\n\t\t\t@MAIN_RECEIVER     varchar(8000),       --預設主收件人   \n            @CC_RECEIVER       varchar(8000),       --預設副本收件人 \n\t\t\t@CF_RECEIVER\t   varchar(8000),\n\t\t\t@ATTACH_FILE_NAME  varchar(100),\n\t\t\t@ATTACH_FILE_PATH  varchar(100),\n\t\t\t@CREATE_DATETIME   datetime,\n\t\t\t@DELIVER_DATETIME  datetime,\n\t\t\t@STATUS \t\t   varchar(1),\n\t\t\t@RETURN_MESSAGE    varchar(1000),\n\t\t\t@TRIGGER_SOURCE    varchar(20),\n\t\t\t@COMPANY_ID \t   varchar(50)\n\t\n\t--當@DAYOFF_SEQ不為空值，要多判斷SUBT_TYPE變數\='DAYOFF_RECLAIM'才要撤假單\t\t--2020.04.08 MODIFIED\n\tIF @DAYOFF_SEQ \= '\#NO_DATA\#'\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.22 ADDED\n\tBEGIN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.22 ADDED\n\t\tSET @XDAYOFF_SEQ \= 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.22 ADDED\n\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.22 ADDED\n\tELSE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.22 ADDED\n\tBEGIN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.22 ADDED\n\t\tSET @XDAYOFF_SEQ \= CONVERT(NUMERIC(12,0),@DAYOFF_SEQ);\t\t\t\t\t\t--2020.03.10 ADDED\n\tEND;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.22 ADDED\n\t\n\tIF NULLIF(ISNULL(@XDAYOFF_SEQ,0), 0) IS NOT NULL AND @MAIL_TYPE\='SIGNON_INFO'\t--2020.03.10 ADDED\n\tBEGIN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.03.10 ADDED\n\t\tIF @SUB_TYPE <> 'DAYOFF_APPLY'\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\tBEGIN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t\tSELECT @AUDITOR \= AUDIT_USERID,\t\t\t\t\t\t\t\t\t\t\t--2020.03.10 ADDED\n\t\t\t\t   @APPLY_DTE \= REPLACE(CONVERT(VARCHAR,getdate(),120),'-','/'),\t--2020.03.10 ADDED\n\t\t\t\t   @WORK_SDATE \= REPLACE(CONVERT(VARCHAR,WORK_DATE,120),'-','/'),\t--2020.04.10 MODIFIED\n\t\t\t\t   @WORK_STIME \= WORK_TIME,\t\t\t\t\t\t\t\t\t\t\t--2020.03.10 ADDED\n\t\t\t\t   @DAYOFF_ID \= WORK_STATUS\t\t\t\t\t\t\t\t\t\t\t--2020.03.10 ADDED\n\t\t\t  FROM JH_SIGNON \t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.03.10 ADDED\n\t\t\t WHERE DAYOFF_SEQ \= @XDAYOFF_SEQ \t\t\t\t\t\t\t\t\t\t--2020.03.10 ADDED\n\t\t\t   AND DAYOFF_SECODE \= 'S' \t\t\t\t\t\t\t\t\t\t\t\t--2020.03.10 ADDED\n\t\t\t   AND ISNULL(TAKELEAVE_STATUS,'') IN ('Y','W','N','C');\t\t\t\t--2020.04.08 MODFIEID 增加'N','C'的判斷\n\t\t\t \n\t\t\tSELECT @WORK_EDATE \= REPLACE(CONVERT(VARCHAR,WORK_DATE,120),'-','/'),\t--2020.04.10 MODIFIED\n\t\t\t\t   @WORK_ETIME \= WORK_TIME\t\t\t\t\t\t\t\t\t\t\t--2020.03.10 ADDED\n\t\t\t  FROM JH_SIGNON \t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.03.10 ADDED\n\t\t\t WHERE DAYOFF_SEQ \= @XDAYOFF_SEQ \t\t\t\t\t\t\t\t\t\t--2020.03.10 ADDED\n\t\t\t   AND DAYOFF_SECODE \= 'E' \t\t\t\t\t\t\t\t\t\t\t\t--2020.03.10 ADDED\n\t\t\t   AND ISNULL(TAKELEAVE_STATUS,'') IN ('Y','W','N','C');\t\t\t\t--2020.04.08 MODFIEID 增加'N','C'的判斷\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t\t--取得主管放行/刪除/或退回資訊\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t\tSELECT @USERID \= USERID,\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t\t\t   @AGREE_TIME\= REPLACE(CONVERT(VARCHAR,AGREE_TIME,120),'-','/')\t--2020.04.10 MODIFIED\n\t\t\t  FROM DAYOFF_APPLY_DETAIL\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t\t WHERE DAYOFF_SEQ \= @XDAYOFF_SEQ;\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\t\t\n\tEND\t--2020.03.10 ADDED\n\t  \n\t \n\tSELECT @CONTENT \=REPLACE(@CONTENT,'@LOGIN_ID',ISNULL(dbo.INITCAP(@LOGIN_ID) , ''))\t--2020.03.10 MODIFIED\n\tSELECT @CONTENT \=REPLACE(@CONTENT,'@AUDITOR',ISNULL(dbo.INITCAP(@AUDITOR) , ''))\t\t--2020.03.06 ADDED\n\tSELECT @CONTENT \=REPLACE(@CONTENT,'@APPLY_DTE',ISNULL(@APPLY_DTE , ''))\t--2020.03.06 ADDED\n\tSELECT @CONTENT \=REPLACE(@CONTENT,'@DAYOFF_SEQ',ISNULL(NULLIF(@XDAYOFF_SEQ, 0),ISNULL(IDENT_CURRENT('JH_SIGNON')-1, '')))\t\t--2020.04.08 MODIFIED\n\tSELECT @CONTENT \=REPLACE(@CONTENT,'@WORK_SDATE',ISNULL(@WORK_SDATE , ''))\t--2020.03.06 ADDED\n\tSELECT @CONTENT \=REPLACE(@CONTENT,'@WORK_STIME',ISNULL(@WORK_STIME , ''))\t--2020.03.06 ADDED\n\tSELECT @CONTENT \=REPLACE(@CONTENT,'@WORK_EDATE',ISNULL(@WORK_EDATE , ''))\t--2020.03.06 ADDED\n\tSELECT @CONTENT \=REPLACE(@CONTENT,'@WORK_ETIME',ISNULL(@WORK_ETIME , ''))\t--2020.03.06 ADDED\n\tSELECT @CONTENT \=REPLACE(@CONTENT,'@DAYOFF_ID',ISNULL((SELECT DAYOFF_NAME FROM DAYOFFCLASS WHERE DAYOFF_ID \= @DAYOFF_ID) , ''))\t--2020.03.09 ADDED\n\tSELECT @CONTENT \=REPLACE(@CONTENT,'@USERID',ISNULL(dbo.INITCAP(@USERID) , ''))\t--2020.04.08 ADDED\n\tSELECT @CONTENT \=REPLACE(@CONTENT,'@AGREE_TIME',ISNULL(@AGREE_TIME , ''))\t\t--2020.04.08 ADDED\n\t\n\t\n        \n\tIF @SUB_TYPE \= 'DAYOFF_APPLY' OR @SUB_TYPE \= 'DAYOFF_RECLAIM'\t\t\t\t\t--2020.04.09 MODIFIED\n\tBEGIN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t/*取得審核者的@GROUPID */\n\t\tSELECT @GROUPID \= UG.GROUPID FROM USERGROUP UG\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t  LEFT JOIN USERS U\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t\tON U.USERID \= UG.USERID\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t WHERE UG.USERID \=  @AUDITOR\t\t\t\t\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t   AND UG.GROUPID LIKE 'JH_SU%';\t\t\t\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\tELSE IF @MAIL_TYPE \= 'SIGNON_INFO'\t\t\t\t\t\t\t\t\t\t\t\t--2020.05.26 MODIFIED\n\tBEGIN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t/*取得假單動作申請者的@GROUPID */\n\t\tSELECT @GROUPID \= UG.GROUPID FROM USERGROUP UG\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t  LEFT JOIN USERS U\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t\tON U.USERID \= UG.USERID\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t WHERE UG.USERID \=  @USERID\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t   AND UG.GROUPID LIKE 'JH_AC%';\t\t\t\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\n\t\t --當原審核人員與放行/退回/刪除人員非同一位時\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t IF @AUDITOR<>@LOGIN_ID\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t BEGIN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t\t--代誰放行/退回/刪除，要CC給原假單審核人員\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t\t/* SET @CC_RECEIVER\=(SELECT T1.EMAIL\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t\t\t\t\t\t\t   FROM USERS T1\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t\t\t\t\t\t\t   INNER JOIN DEPARTMENT T2 ON T1.DEPID \= T2.DEPID\t--2020.04.08 ADDED\n\t\t\t\t\t\t\t\t\tAND T1.DEPID \= '0000'\t--暫掛系統管理員\t\t--2020.04.08 ADDED\n\t\t\t\t\t\t\t\t\tAND (\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t\t\t\t\t\t\t\t\tUSERID LIKE ('%'+@AUDITOR+'%')\t\t\t\t--2020.04.08 ADDED\n\t\t\t\t\t\t\t\t\t\tOR 'ALL' \= @AUDITOR\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\t\t\t\t\t\t\t\t\t));\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED */\n\t\t\t/*取得CC者的@GROUPID */\n\t\t\tSELECT @CC_GROUPID \= UG.GROUPID FROM USERGROUP UG\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t\t  LEFT JOIN USERS U\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t\t\tON U.USERID \= UG.USERID\t\t\t\t\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t\t WHERE UG.USERID \=  @AUDITOR\t\t\t\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t\t   AND UG.GROUPID  LIKE 'JH_SU%';\t\t\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t\t \n\t\t END\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\tEND\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--2020.04.08 ADDED\n\t\n\t\n\tDECLARE @XRETURN_CODE INT,\t\t\t\t\t--2020.05.26 ADDED\n\t\t\t@XRETURN_MSG VARCHAR(1000)\t\t\t--2020.05.26 ADDED\n\t/* START\: 寫入JH_SENDMAIL_LIST */\n\tSET QUOTED_IDENTIFIER OFF\t\t\t\t\t\n\t\n\tEXEC [JHSP_WRITE_EMAIL] N'$$MAIL_TYPE$$', N'$$SUB_TYPE$$', N'$$LOGIN_ID$$', N'$$DATADT$$',N'$$AIMSID$$',@GROUPID, @CC_GROUPID,@CONTENT, @XRETURN_CODE OUTPUT, @XRETURN_MSG OUTPUT;\n\n\tSET QUOTED_IDENTIFIER ON\n\t/* END\: 寫入JH_SENDMAIL_LIST */\n\n\tSELECT @MAIN_RECEIVER \= MAIN_RECEIVER,\t\t\t\t\t--2020.05.26 ADDED\n\t\t   @CC_RECEIVER \= CC_RECEIVER,\t\t\t\t\t\t--2020.05.26 ADDED\n\t       @CF_RECEIVER \= CF_RECEIVER,\n\t\t   @ATTACH_FILE_NAME \= ATTACH_FILE_NAME,\n\t\t   @ATTACH_FILE_PATH \= ATTACH_FILE_PATH,\n\t\t   @SUBJECT \= SUBJECT,\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t\t   @CONTENT \= CONTENT,\t\t\t\t\t\t\t\t--2020.05.26 ADDED\n\t       @CREATE_DATETIME\=CREATE_DATETIME,\n\t       @DELIVER_DATETIME\=DELIVER_DATETIME,\n\t\t   @STATUS \= STATUS,\n\t\t   @RETURN_MESSAGE \= RETURN_MESSAGE,\n\t\t   @TRIGGER_SOURCE \= TRIGGER_SOURCE,\n\t\t   @COMPANY_ID \= COMPANY_ID\n\t  FROM JH_SENDMAIL_LIST\n\t WHERE PK_SENDMAIL_LIST \= IDENT_CURRENT('JH_SENDMAIL_LIST');\n\t\n\t\n\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t(\n\t\t\tFUNC_ID\n\t\t   ,PROC_TYPE\n\t\t   ,USER_ID\n\t\t   ,DATA_NO\n\t\t   ,EVENT_DT\n\t\t   ,MEMO\n\t\t   ,SessionID\n\t\t   ,ProcPK\n\t\t   ,PROC_TARGET\n\t)\n\tVALUES(\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t   ,'insert'\n\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t   ,IDENT_CURRENT('JH_SENDMAIL_LIST') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t   ,'$$MEMO$$'\n\t\t   ,'${PARAM_SESSION_ID}'\n\t\t   ,'${LOGPK}'\n\t\t   ,'JH_SENDMAIL_LIST' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t);\n\t \n\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\tINSERT INTO LOG_JH_SENDMAIL_LIST  /* WITH (ROWLOCK) */ \n\t\t\t ( FUNC_ID \n\t\t\t  ,CRUD_STATE \n\t\t\t  ,PK_SENDMAIL_LIST\n\t\t\t  ,MAIN_RECEIVER\n\t\t\t  ,CC_RECEIVER\n\t\t\t  ,CF_RECEIVER\n\t\t\t  ,ATTACH_FILE_NAME\n\t\t\t  ,ATTACH_FILE_PATH\n\t\t\t  ,SUBJECT\n\t\t\t  ,CONTENT\n\t\t\t  ,CREATE_DATETIME\n\t\t\t  ,DELIVER_DATETIME\n\t\t\t  ,STATUS\n\t\t\t  ,RETURN_MESSAGE\n\t\t\t  ,TRIGGER_SOURCE\n\t\t\t  ,DATA_STATUS\n\t\t\t  ,ADD_DT\n\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t  ,ADD_USER_ID\n\t\t\t  ,COMPANY_ID\n\t\t\t  ,DATA_CHANGE_LOG_ID )\n\tVALUES(\n\t\t\t  '${PARAM_FUNC_ID}'\n\t\t\t  ,'C'\n\t\t\t  ,IDENT_CURRENT('JH_SENDMAIL_LIST')\n\t\t\t  ,@MAIN_RECEIVER\n\t\t\t  ,@CC_RECEIVER\n\t\t\t  ,@CF_RECEIVER\n\t\t\t  ,@ATTACH_FILE_NAME\n\t\t\t  ,@ATTACH_FILE_PATH\n\t\t\t  ,@SUBJECT\n\t\t\t  ,@CONTENT\n\t\t\t  ,@CREATE_DATETIME\n\t\t\t  ,@DELIVER_DATETIME\n\t\t\t  ,@STATUS\n\t\t\t  ,@RETURN_MESSAGE\n\t\t\t  ,@TRIGGER_SOURCE\n\t\t\t  ,'0'\n\t\t\t  ,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t  ,'${PARAM_COMPANY}'\n\t\t\t  ,'${PARAM_SOURCE_COMING}'\n\t\t\t  ,@COMPANY_ID\n\t\t\t  ,IDENT_CURRENT('DATA_CHANGE_LOG'));\n\n\t/* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES (        \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,@XRETURN_CODE\n        ,@XRETURN_MSG\n        ,IDENT_CURRENT('JH_SENDMAIL_LIST')\n        ,'C' \n        ,'$$MEMO$$');\nEND\n ELSE\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_SENDMAIL_LIST$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK_COL 流水號欄位 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_SENDMAIL_LIST'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\n\nSELECT * FROM JH_SENDMAIL_LIST WITH (NOLOCK) WHERE PK_SENDMAIL_LIST \= '$$PK_SENDMAIL_LIST$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/* 2.2 DATA Detail LOG (before modified) */\n  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */ \n   INSERT INTO LOG_JH_SENDMAIL_LIST /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,PK_SENDMAIL_LIST\n          ,MAIN_RECEIVER\n          ,CC_RECEIVER\n          ,CF_RECEIVER\n          ,ATTACH_FILE_NAME\n          ,ATTACH_FILE_PATH\n          ,SUBJECT\n          ,CONTENT\n          ,CREATE_DATETIME\n          ,DELIVER_DATETIME\n          ,STATUS\n          ,RETURN_MESSAGE\n          ,TRIGGER_SOURCE\n          ,DATA_STATUS\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,ADD_DT\n          ,LAST_MOD_DT\n          ,DEL_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DEL_DT\n          ,COMPANY_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '$$FunctionID$$' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,PK_SENDMAIL_LIST\n          ,MAIN_RECEIVER\n          ,CC_RECEIVER\n          ,CF_RECEIVER\n          ,ATTACH_FILE_NAME\n          ,ATTACH_FILE_PATH\n          ,SUBJECT\n          ,CONTENT\n          ,CREATE_DATETIME\n          ,DELIVER_DATETIME\n          ,STATUS\n          ,RETURN_MESSAGE\n          ,TRIGGER_SOURCE\n          ,DATA_STATUS\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,ADD_DT\n          ,LAST_MOD_DT\n          ,DEL_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DEL_DT\n          ,COMPANY_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM JH_SENDMAIL_LIST  WITH (NOLOCK)\n   WHERE PK_SENDMAIL_LIST \= '$$PK_SENDMAIL_LIST$$';\n/* 2.3 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$PK_SENDMAIL_LIST$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n   ELSE\n   BEGIN\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$PK_SENDMAIL_LIST$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n/* 2.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n   DELETE  JH_SENDMAIL_LIST WITH (ROWLOCK)\n   WHERE PK_SENDMAIL_LIST \= '$$PK_SENDMAIL_LIST$$';\nEND\n  ELSE\n   IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n   BEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_SENDMAIL_LIST$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_SENDMAIL_LIST' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\nSELECT * FROM JH_SENDMAIL_LIST WITH (NOLOCK) WHERE PK_SENDMAIL_LIST \= '$$PK_SENDMAIL_LIST$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n   INSERT INTO LOG_JH_SENDMAIL_LIST /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,PK_SENDMAIL_LIST\n          ,MAIN_RECEIVER\n          ,CC_RECEIVER\n          ,CF_RECEIVER\n          ,ATTACH_FILE_NAME\n          ,ATTACH_FILE_PATH\n          ,SUBJECT\n          ,CONTENT\n          ,CREATE_DATETIME\n          ,DELIVER_DATETIME\n          ,STATUS\n          ,RETURN_MESSAGE\n          ,TRIGGER_SOURCE\n          ,DATA_STATUS\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,ADD_DT\n          ,LAST_MOD_DT\n          ,DEL_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DEL_DT\n          ,COMPANY_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '$$FunctionID$$' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,PK_SENDMAIL_LIST\n          ,MAIN_RECEIVER\n          ,CC_RECEIVER\n          ,CF_RECEIVER\n          ,ATTACH_FILE_NAME\n          ,ATTACH_FILE_PATH\n          ,SUBJECT\n          ,CONTENT\n          ,CREATE_DATETIME\n          ,DELIVER_DATETIME\n          ,STATUS\n          ,RETURN_MESSAGE\n          ,TRIGGER_SOURCE\n          ,DATA_STATUS\n          ,DEL_USER_ID\n          ,LAST_MOD_USER_ID\n          ,ADD_DT\n          ,LAST_MOD_DT\n          ,DEL_USER_COMPANY_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_USER_ID\n          ,DEL_DT\n          ,COMPANY_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM JH_SENDMAIL_LIST WITH (NOLOCK)\n   WHERE PK_SENDMAIL_LIST \= '$$PK_SENDMAIL_LIST$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n;\n/* 3.3 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n        ,'$$PK_SENDMAIL_LIST$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\n    ELSE\n    BEGIN\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$PK_SENDMAIL_LIST$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\n/* 3.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\nUPDATE JH_SENDMAIL_LIST WITH (ROWLOCK)\n    SET MAIN_RECEIVER\=(CASE WHEN SUBSTRING('$$MAIN_RECEIVER$$',1,8000)\=SUBSTRING('\#NO_DATA\#',1,8000) THEN MAIN_RECEIVER ELSE SUBSTRING('$$MAIN_RECEIVER$$',1,8000) END)\n    ,CC_RECEIVER\=(CASE WHEN SUBSTRING('$$CC_RECEIVER$$',1,8000)\=SUBSTRING('\#NO_DATA\#',1,8000) THEN CC_RECEIVER ELSE SUBSTRING('$$CC_RECEIVER$$',1,8000) END)\n    ,CF_RECEIVER\=(CASE WHEN SUBSTRING('$$CF_RECEIVER$$',1,8000)\=SUBSTRING('\#NO_DATA\#',1,8000) THEN CF_RECEIVER ELSE SUBSTRING('$$CF_RECEIVER$$',1,8000) END)\n    ,ATTACH_FILE_NAME\=(CASE WHEN SUBSTRING('$$ATTACH_FILE_NAME$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN ATTACH_FILE_NAME ELSE SUBSTRING('$$ATTACH_FILE_NAME$$',1,100) END)\n    ,ATTACH_FILE_PATH\=(CASE WHEN SUBSTRING('$$ATTACH_FILE_PATH$$',1,100)\=SUBSTRING('\#NO_DATA\#',1,100) THEN ATTACH_FILE_PATH ELSE SUBSTRING('$$ATTACH_FILE_PATH$$',1,100) END)\n    ,SUBJECT\=(CASE WHEN SUBSTRING('$$SUBJECT$$',1,300)\=SUBSTRING('\#NO_DATA\#',1,300) THEN SUBJECT ELSE SUBSTRING('$$SUBJECT$$',1,300) END)\n    ,CONTENT\=(CASE WHEN SUBSTRING('$$CONTENT$$',1,8000)\=SUBSTRING('\#NO_DATA\#',1,8000) THEN CONTENT ELSE SUBSTRING('$$CONTENT$$',1,8000) END)\n    ,CREATE_DATETIME\=(CASE WHEN ISDATE('$$CREATE_DATETIME$$')\=1 THEN (CASE WHEN ISNULL(CREATE_DATETIME,CONVERT(DATETIME, '', 23))\='$$CREATE_DATETIME$$' THEN CREATE_DATETIME ELSE CONVERT(datetime,'$$CREATE_DATETIME$$') END) ELSE CREATE_DATETIME END)\n    ,DELIVER_DATETIME\=(CASE WHEN ISDATE('$$DELIVER_DATETIME$$')\=1 THEN (CASE WHEN ISNULL(DELIVER_DATETIME,CONVERT(DATETIME, '', 23))\='$$DELIVER_DATETIME$$' THEN DELIVER_DATETIME ELSE CONVERT(datetime,'$$DELIVER_DATETIME$$') END) ELSE DELIVER_DATETIME END)\n    ,STATUS\=(CASE WHEN SUBSTRING('$$STATUS$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN STATUS ELSE SUBSTRING('$$STATUS$$',1,1) END)\n    ,RETURN_MESSAGE\=(CASE WHEN SUBSTRING('$$RETURN_MESSAGE$$',1,1000)\=SUBSTRING('\#NO_DATA\#',1,1000) THEN RETURN_MESSAGE ELSE SUBSTRING('$$RETURN_MESSAGE$$',1,1000) END)\n    ,TRIGGER_SOURCE\=(CASE WHEN SUBSTRING('$$TRIGGER_SOURCE$$',1,20)\=SUBSTRING('\#NO_DATA\#',1,20) THEN TRIGGER_SOURCE ELSE SUBSTRING('$$TRIGGER_SOURCE$$',1,20) END)\n    ,DATA_STATUS\='0'\n    ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\n    ,COMPANY_ID\=(CASE WHEN SUBSTRING('$$COMPANY_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN COMPANY_ID ELSE SUBSTRING('$$COMPANY_ID$$',1,50) END)\n    ,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\nWHERE PK_SENDMAIL_LIST\='$$PK_SENDMAIL_LIST$$';\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$PK_SENDMAIL_LIST$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
SIGNON_GETDAYOFF=/* Last Updated\: 2020/03/03\n檢查假單起迄日是否是非工作日的API */\nSELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM OFFICIAL_WORKDAY\n\tWHERE convert(varchar,ONOFF_DATE,111)>\='$$START_DT$$'\n\t  and convert(varchar,ONOFF_DATE,111) <\='$$END_DT$$'\n\t  and WORKING_FLAG \= 'N') A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY NOT_WORKDAY DESC) AS RowNum\n     FROM\n\t\t    (SELECT COUNT(*) AS NOT_WORKDAY\n              FROM OFFICIAL_WORKDAY\n\t\t\t WHERE convert(varchar,ONOFF_DATE,111)>\='$$START_DT$$'\n\t\t\t\tand convert(varchar,ONOFF_DATE,111)<\='$$END_DT$$'\n\t\t\t\tand WORKING_FLAG \= 'N') AB) B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n;
SIGNON_JOBLOG_CUD=/*  UPDATED AT 20200414 \n 1. 新增工作日誌新刪修API\n*/\nBEGIN TRY\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n/*  這一段 update 可用noli的excel 檔中的  INSERT 產生器，來產生對應的欄位及語法  */\nInsert into JH_JOBLOG /* WITH (ROWLOCK) */\n(\nUSERID\n,PRJ_ID\n,WORK_DATE\n,JOB_ID\n,JOB_DESC\n,WORK_HOURS\n,DATA_STATUS\n,ADD_USER_ID\n,ADD_USER_COMPANY_ID\n,ADD_DT\n) \nVALUES(\n'${PARAM_SOURCE_COMING}'\n,'$$PRJ_ID$$'\n,CONVERT(DATE,CONVERT(VARCHAR,getdate(),120))\n,'$$JOB_ID$$'\n,'$$JOB_DESC$$'\n,CONVERT(NUMERIC(5,2),'$$WORK_HOURS$$')\n,0\n,'${PARAM_SOURCE_COMING}'\n,'${PARAM_COMPANY}'\n,CONVERT(VARCHAR(20), GETDATE(), 120)\n);\n/* 1.2 DATA_CHANGE_LOG for Master Table */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'insert'\n       ,'${PARAM_SOURCE_COMING}'\n       ,IDENT_CURRENT('DAYOFF_APPLY_DETAIL') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'DAYOFF_APPLY_DETAIL' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\n/* 1.3 DATA Detail LOG for Master Table(before modified) */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\nINSERT INTO LOG_JH_JOBLOG  /* WITH (ROWLOCK) */ \n         ( FUNC_ID \n          ,CRUD_STATE \n          ,PK_JOB\n          ,USERID\n          ,PRJ_ID\n          ,WORK_DATE\n          ,JOB_ID\n          ,JOB_DESC\n          ,WORK_HOURS\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,DATA_CHANGE_LOG_ID )\nVALUES(\n          '${PARAM_FUNC_ID}'\n          ,'C'\n          ,IDENT_CURRENT('JH_JOBLOG')\n          ,'${PARAM_SOURCE_COMING}'\n          ,'$$PRJ_ID$$'\n          ,CONVERT(DATE,CONVERT(VARCHAR,getdate(),120))\n          ,'$$JOB_ID$$'\n          ,'$$JOB_DESC$$'\n          ,CONVERT(NUMERIC(5,2),'$$WORK_HOURS$$')\n          ,'0'\n          ,'${PARAM_SOURCE_COMING}'\n          ,'${PARAM_COMPANY}'\n          ,CONVERT(VARCHAR(20), GETDATE(), 120)\n          ,IDENT_CURRENT('DATA_CHANGE_LOG'));\n/* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES (        \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0'\n        ,'SUCCESS'\n        ,IDENT_CURRENT('JH_JOBLOG')\n        ,'C' \n        ,'$$MEMO$$');\nEND\n ELSE\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_JOB$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK_COL 流水號欄位 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_JOBLOG'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\n\nSELECT * FROM JH_JOBLOG WITH (NOLOCK) WHERE PK_JOB \= '$$PK_JOB$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/* 2.2 DATA Detail LOG (before modified) */\n  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */ \n   INSERT INTO LOG_JH_JOBLOG /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,PK_JOB\n          ,USERID\n          ,PRJ_ID\n          ,WORK_DATE\n          ,JOB_ID\n          ,JOB_DESC\n          ,WORK_HOURS\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,PK_JOB\n          ,USERID\n          ,PRJ_ID\n          ,WORK_DATE\n          ,JOB_ID\n          ,JOB_DESC\n          ,WORK_HOURS\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM JH_JOBLOG  WITH (NOLOCK)\n   WHERE PK_JOB \= '$$PK_JOB$$';\n/* 2.3 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$PK_JOB$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n   ELSE\n   BEGIN\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$PK_JOB$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n/* 2.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n   DELETE  JH_JOBLOG WITH (ROWLOCK)\n   WHERE PK_JOB \= '$$PK_JOB$$';\nEND\n  ELSE\n   IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n   BEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_JOB$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_JOBLOG' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\nSELECT * FROM JH_JOBLOG WITH (NOLOCK) WHERE PK_JOB \= '$$PK_JOB$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n   INSERT INTO LOG_JH_JOBLOG /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,PK_JOB\n          ,USERID\n          ,PRJ_ID\n          ,WORK_DATE\n          ,JOB_ID\n          ,JOB_DESC\n          ,WORK_HOURS\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,PK_JOB\n          ,USERID\n          ,PRJ_ID\n          ,WORK_DATE\n          ,JOB_ID\n          ,JOB_DESC\n          ,WORK_HOURS\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM JH_JOBLOG WITH (NOLOCK)\n   WHERE PK_JOB \= '$$PK_JOB$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n;\n/* 3.3 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n        ,'$$PK_JOB$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\n    ELSE\n    BEGIN\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$PK_JOB$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\n/* 3.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\nUPDATE JH_JOBLOG WITH (ROWLOCK)\n    SET USERID\=(CASE WHEN SUBSTRING('$$USERID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN USERID ELSE SUBSTRING('$$USERID$$',1,50) END)\n    ,PRJ_ID\=(CASE WHEN SUBSTRING('$$PRJ_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN PRJ_ID ELSE SUBSTRING('$$PRJ_ID$$',1,50) END)\n    ,WORK_DATE\=CONVERT(date,CONVERT(varchar,getdate(),120))\n    ,JOB_ID\=(CASE WHEN SUBSTRING('$$JOB_ID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN JOB_ID ELSE SUBSTRING('$$JOB_ID$$',1,50) END)\n    ,JOB_DESC\=(CASE WHEN SUBSTRING('$$JOB_DESC$$',1,4000)\=SUBSTRING('\#NO_DATA\#',1,4000) THEN JOB_DESC ELSE SUBSTRING('$$JOB_DESC$$',1,4000) END)\n    ,WORK_HOURS\=(CASE WHEN ISNUMERIC('$$WORK_HOURS$$')\=1 THEN (CASE WHEN ISNULL(WORK_HOURS,'0')\='$$WORK_HOURS$$'  THEN (CASE WHEN '$$WORK_HOURS$$'\='0' THEN '0' ELSE WORK_HOURS END) ELSE '$$WORK_HOURS$$'  END) ELSE WORK_HOURS END)\n    ,DATA_STATUS\='0'\n    ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n    ,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\nWHERE PK_JOB\='$$PK_JOB$$';\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$PK_JOB$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH\n
SIGNON_ND_CUD=/*  UPDATED AT 20191001 \n 1. 針對 INT、NUMERIC、DECIMAL 數值欄位修正修改語法\n 2. 針對日期欄位修正修改語法\n此功能為　國定假日維護之ＣＵＤ（僅Ｕ有使用到）\n*/\nBEGIN TRY\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n/*  這一段 update 可用noli的excel 檔中的  INSERT 產生器，來產生對應的欄位及語法  */\nInsert into DFM_DATE /* WITH (ROWLOCK) */\n(\nD_F_DATE\n,D_DATE\n,Y_YEAR\n,M_MONTH\n,D_DAY\n,W_WEEK\n,Q_Quarter\n,W_N_WEEKEND\n,W_E_WEEKEND\n,W_C_WEEKEND\n,MD_DAYS\n,WORKING_FLAG\n,DATA_STATUS\n,ADD_USER_ID\n,ADD_USER_COMPANY_ID\n,ADD_DT\n) \nVALUES(\n'$$D_F_DATE$$'\n,'$$D_DATE$$'\n,'$$Y_YEAR$$'\n,'$$M_MONTH$$'\n,'$$D_DAY$$'\n,'$$W_WEEK$$'\n,'$$Q_Quarter$$'\n,'$$W_N_WEEKEND$$'\n,'$$W_E_WEEKEND$$'\n,'$$W_C_WEEKEND$$'\n,'$$MD_DAYS$$'\n,'$$WORKING_FLAG$$'\n,0\n,'${PARAM_SOURCE_COMING}'\n,'${PARAM_COMPANY}'\n,CONVERT(VARCHAR(20), GETDATE(), 120)\n);\n/* 1.2 DATA_CHANGE_LOG for Master Table */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'insert'\n       ,'${PARAM_SOURCE_COMING}'\n       ,IDENT_CURRENT('DFM_DATE') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'DFM_DATE' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\n/* 1.3 DATA Detail LOG for Master Table(before modified) */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\nINSERT INTO LOG_DFM_DATE  /* WITH (ROWLOCK) */ \n         ( FUNC_ID \n          ,CRUD_STATE \n          ,ID_NO\n          ,D_F_DATE\n          ,D_DATE\n          ,Y_YEAR\n          ,M_MONTH\n          ,D_DAY\n          ,W_WEEK\n          ,Q_Quarter\n          ,W_N_WEEKEND\n          ,W_E_WEEKEND\n          ,W_C_WEEKEND\n          ,MD_DAYS\n          ,WORKING_FLAG\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,DATA_CHANGE_LOG_ID )\nVALUES(\n          '${PARAM_FUNC_ID}'\n          ,'C'\n          ,IDENT_CURRENT('DFM_DATE')\n          ,'$$D_F_DATE$$'\n          ,'$$D_DATE$$'\n          ,'$$Y_YEAR$$'\n          ,'$$M_MONTH$$'\n          ,'$$D_DAY$$'\n          ,'$$W_WEEK$$'\n          ,'$$Q_Quarter$$'\n          ,'$$W_N_WEEKEND$$'\n          ,'$$W_E_WEEKEND$$'\n          ,'$$W_C_WEEKEND$$'\n          ,'$$MD_DAYS$$'\n          ,'$$WORKING_FLAG$$'\n          ,'0'\n          ,'${PARAM_SOURCE_COMING}'\n          ,'${PARAM_COMPANY}'\n          ,CONVERT(VARCHAR(20), GETDATE(), 120)\n          ,IDENT_CURRENT('DATA_CHANGE_LOG'));\n/* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES (        \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0'\n        ,'SUCCESS'\n        ,IDENT_CURRENT('DFM_DATE')\n        ,'C' \n        ,'$$MEMO$$');\nEND\n ELSE\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$ID_NO$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK_COL 流水號欄位 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'DFM_DATE'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\n\nSELECT * FROM DFM_DATE WITH (NOLOCK) WHERE ID_NO \= '$$ID_NO$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/* 2.2 DATA Detail LOG (before modified) */\n  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */ \n   INSERT INTO LOG_DFM_DATE /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,ID_NO\n          ,D_F_DATE\n          ,D_DATE\n          ,Y_YEAR\n          ,M_MONTH\n          ,D_DAY\n          ,W_WEEK\n          ,Q_Quarter\n          ,W_N_WEEKEND\n          ,W_E_WEEKEND\n          ,W_C_WEEKEND\n          ,MD_DAYS\n          ,WORKING_FLAG\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '$$FunctionID$$' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,ID_NO\n          ,D_F_DATE\n          ,D_DATE\n          ,Y_YEAR\n          ,M_MONTH\n          ,D_DAY\n          ,W_WEEK\n          ,Q_Quarter\n          ,W_N_WEEKEND\n          ,W_E_WEEKEND\n          ,W_C_WEEKEND\n          ,MD_DAYS\n          ,WORKING_FLAG\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM DFM_DATE  WITH (NOLOCK)\n   WHERE ID_NO \= '$$ID_NO$$';\n/* 2.3 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$ID_NO$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n   ELSE\n   BEGIN\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$ID_NO$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n/* 2.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n   DELETE  DFM_DATE WITH (ROWLOCK)\n   WHERE ID_NO \= '$$ID_NO$$';\nEND\n  ELSE\n   IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n   BEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '$$FunctionID$$'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$ID_NO$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'DFM_DATE' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\nSELECT * FROM DFM_DATE WITH (NOLOCK) WHERE ID_NO \= '$$ID_NO$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n   INSERT INTO LOG_DFM_DATE /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,ID_NO\n          ,D_F_DATE\n          ,D_DATE\n          ,Y_YEAR\n          ,M_MONTH\n          ,D_DAY\n          ,W_WEEK\n          ,Q_Quarter\n          ,W_N_WEEKEND\n          ,W_E_WEEKEND\n          ,W_C_WEEKEND\n          ,MD_DAYS\n          ,WORKING_FLAG\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '$$FunctionID$$' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,ID_NO\n          ,D_F_DATE\n          ,D_DATE\n          ,Y_YEAR\n          ,M_MONTH\n          ,D_DAY\n          ,W_WEEK\n          ,Q_Quarter\n          ,W_N_WEEKEND\n          ,W_E_WEEKEND\n          ,W_C_WEEKEND\n          ,MD_DAYS\n          ,WORKING_FLAG\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM DFM_DATE WITH (NOLOCK)\n   WHERE ID_NO \= '$$ID_NO$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n;\n/* 3.3 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n        ,'$$ID_NO$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\n    ELSE\n    BEGIN\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$ID_NO$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\n/* 3.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\nUPDATE DFM_DATE WITH (ROWLOCK)\n    SET D_F_DATE\=(CASE WHEN ISDATE('$$D_F_DATE$$')\=1 THEN (CASE WHEN ISNULL(D_F_DATE,CONVERT(DATETIME, '', 23))\='$$D_F_DATE$$' THEN D_F_DATE ELSE CONVERT(date,'$$D_F_DATE$$') END) ELSE D_F_DATE END)\n    ,D_DATE\=(CASE WHEN SUBSTRING('$$D_DATE$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN D_DATE ELSE SUBSTRING('$$D_DATE$$',1,10) END)\n    ,Y_YEAR\=(CASE WHEN SUBSTRING('$$Y_YEAR$$',1,4)\=SUBSTRING('\#NO_DATA\#',1,4) THEN Y_YEAR ELSE SUBSTRING('$$Y_YEAR$$',1,4) END)\n    ,M_MONTH\=(CASE WHEN SUBSTRING('$$M_MONTH$$',1,2)\=SUBSTRING('\#NO_DATA\#',1,2) THEN M_MONTH ELSE SUBSTRING('$$M_MONTH$$',1,2) END)\n    ,D_DAY\=(CASE WHEN SUBSTRING('$$D_DAY$$',1,2)\=SUBSTRING('\#NO_DATA\#',1,2) THEN D_DAY ELSE SUBSTRING('$$D_DAY$$',1,2) END)\n    ,W_WEEK\=(CASE WHEN SUBSTRING('$$W_WEEK$$',1,2)\=SUBSTRING('\#NO_DATA\#',1,2) THEN W_WEEK ELSE SUBSTRING('$$W_WEEK$$',1,2) END)\n    ,Q_Quarter\=(CASE WHEN SUBSTRING('$$Q_Quarter$$',1,2)\=SUBSTRING('\#NO_DATA\#',1,2) THEN Q_Quarter ELSE SUBSTRING('$$Q_Quarter$$',1,2) END)\n    ,W_N_WEEKEND\=(CASE WHEN SUBSTRING('$$W_N_WEEKEND$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN W_N_WEEKEND ELSE SUBSTRING('$$W_N_WEEKEND$$',1,10) END)\n    ,W_E_WEEKEND\=(CASE WHEN SUBSTRING('$$W_E_WEEKEND$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN W_E_WEEKEND ELSE SUBSTRING('$$W_E_WEEKEND$$',1,10) END)\n    ,W_C_WEEKEND\=(CASE WHEN SUBSTRING('$$W_C_WEEKEND$$',1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN W_C_WEEKEND ELSE SUBSTRING('$$W_C_WEEKEND$$',1,10) END)\n    ,MD_DAYS\=(CASE WHEN SUBSTRING('$$MD_DAYS$$',1,2)\=SUBSTRING('\#NO_DATA\#',1,2) THEN MD_DAYS ELSE SUBSTRING('$$MD_DAYS$$',1,2) END)\n    ,WORKING_FLAG\=(CASE WHEN SUBSTRING('$$WORKING_FLAG$$',1,1)\=SUBSTRING('\#NO_DATA\#',1,1) THEN WORKING_FLAG ELSE SUBSTRING('$$WORKING_FLAG$$',1,1) END)\n    ,DATA_STATUS\='0'\n    ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n    ,LAST_MOD_USER_COMPANY_ID\='$$COMPANY_ID$$'\n    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\nWHERE ID_NO\='$$ID_NO$$';\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$ID_NO$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
SIGNON_ND_DS=/* Last Updated Date\: 2020/03/26\nUpdated by Noli\n修正原因\:\n\t\t1. 預設AUTOLOAD為全部資料，新增WROKING_FLAG和D_F_DATE參數\n功能：取得今年與隔年度的國定假日資料*/\n\nSELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM DFM_DATE\n    WHERE (WORKING_FLAG  \= '$$WORKING_FLAG$$'\n\t  OR '$$WORKING_FLAG$$' \= 'ALL')\n\t  AND (D_F_DATE \= '$$D_F_DATE$$'\n\t  OR '$$D_F_DATE$$'\= 'ALL')\n\t  AND datepart(year,D_F_DATE) >\= datepart(year, getdate())\n\t  AND datepart(year,D_F_DATE) <\= datepart(year, getdate())+1) A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY ID_NO) AS RowNum\n\t\t\t\t\t\t\t,ID_NO\n\t\t\t\t\t\t\t,CONVERT(VARCHAR,D_F_DATE,23) AS D_F_DATE\n\t\t\t\t\t\t\t,D_DATE\n\t\t\t\t\t\t\t,Y_YEAR\n\t\t\t\t\t\t\t,M_MONTH\n\t\t\t\t\t\t\t,D_DAY\n\t\t\t\t\t\t\t,W_WEEK\n\t\t\t\t\t\t\t,Q_Quarter\n\t\t\t\t\t\t\t,W_N_WEEKEND\n\t\t\t\t\t\t\t,W_E_WEEKEND\n\t\t\t\t\t\t\t,W_C_WEEKEND\n\t\t\t\t\t\t\t,MD_DAYS\n\t\t\t\t\t\t\t,WORKING_FLAG\n\t\t\t\t\t\t\t,DATA_STATUS --固定欄位必需取出\n\t\t\t\t\t\t\t,ADD_USER_ID --固定欄位必需取出\n\t\t\t\t\t\t\t,ADD_USER_COMPANY_ID --固定欄位必需取出\n\t\t\t\t\t\t\t,ADD_DT --固定欄位必需取出\n\t\t\t\t\t\t\t,LAST_MOD_USER_ID --固定欄位必需取出\n\t\t\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID --固定欄位必需取出\n\t\t\t\t\t\t\t,LAST_MOD_DT --固定欄位必需取出\n\t\t\t\t\t\t\t,DEL_USER_ID --固定欄位必需取出\n\t\t\t\t\t\t\t,DEL_USER_COMPANY_ID --固定欄位必需取出\n\t\t\t\t\t\t\t,DEL_DT --固定欄位必需取出\n     FROM DFM_DATE\n    WHERE (WORKING_FLAG  \= '$$WORKING_FLAG$$'\n\t  OR '$$WORKING_FLAG$$' \= 'ALL')\n\t  AND (D_F_DATE \= '$$D_F_DATE$$'\n\t  OR '$$D_F_DATE$$'\= 'ALL')\n\t  AND datepart(year,D_F_DATE) >\= datepart(year, getdate())\n\t  AND datepart(year,D_F_DATE) <\= datepart(year, getdate())+1) B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n;
SIGNON_ONCUD=/*  UPDATED AT 2020/05/22\nUPDATED BY Noli\n 修正原因\:\n \n 1. 寫入打卡同仁的經緯度和電腦IP\n*/\nDECLARE @MAX_OFFSDT DATE\t\t\t\t\t\t\t\t\t\t\t\t--打卡與請假時間衝突之請假起日\n\t\t,@MAX_OFFEDT DATE\t\t\t\t\t\t\t\t\t\t\t\t--打卡與請假時間衝突之請假迄日\n\t\t,@CHK_DATE DATE\t\t\t\t\t\t\t\t\t\t\t\t\t--確認打卡時間與請假時間衝突之請假迄日以前之間有無任何請假起日\n\t\t,@DAYOFF_NAME   VARCHAR(50)\t\t\t\t\t\t\t\t\t\t--假別\n\t\t,@MAX_WORKSTIME VARCHAR(10)\t\t\t\t\t\t\t\t\t\t--請假開始時間\n\t\t,@MAX_WORKETIME VARCHAR(10)\t\t\t\t\t\t\t\t\t\t--請假結束時間\n\t\t,@EX_STIME VARCHAR(10)\t\t\t\t\t\t\t\t\t\t\t--已打卡的上班時間\n\t\t,@EX_ETIME VARCHAR(10)\t\t\t\t\t\t\t\t\t\t\t--已打卡的下班時間\n\t\t,@DAYOFF_SEQ NUMERIC(12,0)\=0\t\t\t\t\t\t\t\t\t--取得打卡與請假時間發生衝突的假單流水編號 --2020.04.20 MODIFIED\n\t\t,@sCNT int\t\t\t\t\t\t\t\t\t\t\t\t\t\t--小計當天上班打卡的次數\n\t\t,@eCNT int\t\t\t\t\t\t\t\t\t\t\t\t\t\t--小計當天下班打卡的次數\n\t\t,@reClaimStatus int \t\t\t\t\t\t\t\t\t\t\t--確認審核中的假單是否已撤銷\n\t\t,@JOB_CODE VARCHAR(10);\t\t\t\t\t\t\t\t\t\t\t--班別 --2020.04.22 ADDED\nDECLARE @nowDate DATE \= convert(date,convert(varchar,getdate(),111));\t--現在系統日\nDECLARE @nowTime varchar(10) \= convert(varchar,getdate(),108);\t\t\t--現在系統時間\t\n\t\t\n\nBEGIN TRY\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\nBEGIN\n\t/* 檢核一、檢查當天有沒有打卡紀錄 */\n\tIF (SELECT COUNT(*) FROM JH_SIGNON WHERE WORK_STATUS \= '$$WORK_STATUS$$' AND DAYOFF_SECODE\='$$DAYOFF_SECODE$$' AND USERID \= '$$USERID$$' AND WORK_DATE \= @nowDate)\=0\n\tBEGIN \n\n\t\tSET @sCNT \= (SELECT COUNT(*) \t\t\t\t\t--計算當天上班打卡次數\n\t\t\t\t\t   FROM JH_SIGNON \n\t\t\t\t\t  WHERE WORK_STATUS \= 'ON' \n\t\t\t\t\t\tAND DAYOFF_SECODE\='S'\n\t\t\t\t\t\tAND USERID \= '$$USERID$$'\t\t--2020.05.12 ADDED\n\t\t\t\t\t\tAND WORK_DATE \= @nowDate);\n\n\t\tSET @eCNT \= (SELECT COUNT(*) \t\t\t\t\t--計算當天下班打卡次數\n\t\t\t\t\t   FROM JH_SIGNON \n\t\t\t\t\t  WHERE WORK_STATUS \= 'ON' \n\t\t\t\t\t\tAND DAYOFF_SECODE\='E' \n\t\t\t\t\t\tAND USERID \= '$$USERID$$' \n\t\t\t\t\t\tAND WORK_DATE \= @nowDate);\t\t \n\n\t\t\t/* 檢核二、ELSE\=>當天沒打卡上班，就不能打卡下班 */\n\t\tIF ((@sCNT>0 AND @eCNT\=0 AND '$$DAYOFF_SECODE$$'\='E') OR '$$DAYOFF_SECODE$$'\='S')\n\t\tBEGIN \n\t\t\n\t\t\t/*取得人員的班別表 2020.04.23 ADDED */\n\t\t\tSET @JOB_CODE \= ISNULL((SELECT JOB_CODE\n\t\t\t\t\t\t\t\t\t  FROM JH_USERS\n\t\t\t\t\t\t\t\t\t WHERE USERID \= '$$USERID$$'),'$$JOB_CODE$$');\n\n\t\t\t/* 檢核三、下班前沒打工作紀錄，則不能打卡下班 (IF 通過, 繼續檢核, ELSE 產生錯誤訊息)-- 2020.04.15 ADD FUNCTION\: CHK_WORKLOG_HOURS */\n\t\t\t/*IF ('$$WORK_STATUS$$'\='ON' AND '$$DAYOFF_SECODE$$' \= 'E' AND dbo.CHK_WORKLOG_HOURS('$$USERID$$',@nowDate,@nowTime,@JOB_CODE)<>-1) OR ('$$WORK_STATUS$$' \='ON' AND '$$DAYOFF_SECODE$$'\='S') */\n\t\t\tIF (('$$WORK_STATUS$$'\='ON' AND '$$DAYOFF_SECODE$$' \= 'E' AND (SELECT COUNT(*)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t FROM JH_JOBLOG \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE WORK_DATE \= CONVERT(VARCHAR,getdate(),111) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AND USERID\='$$USERID$$')>0) --改為只要有填寫工作日誌，不管多少小時皆可下班 2020.04.23 ADDED\n\t\t\t\tOR ('$$WORK_STATUS$$' \='ON' AND '$$DAYOFF_SECODE$$'\='S'))\n\t\t\tBEGIN\n\t\t\t\t--找出是否有已通過且未撤銷的假單\n\t\t\t\tSET @DAYOFF_SEQ \= (SELECT dbo.CHK_SIGNON_VOCATION('$$USERID$$','$$DAYOFF_SECODE$$','Y'));\n\n\t\t\t\t/*檢核四、上班或下班打卡若衝到請假時間(且該請假時間並未撤銷[狀態為已通過])，則不能打卡 (IF 通過, 寫入DB, ELSE 產生錯誤訊息)*/\n\t\t\t\tIF ISNULL(@DAYOFF_SEQ,0)\=0\t--OR @MAX_WORKSTIME <\=CONVERT(VARCHAR,getdate(),108)\n\t\t\t\t BEGIN\n\t\t\t\t\t\tSET @DAYOFF_SEQ \= (SELECT dbo.CHK_SIGNON_VOCATION('$$USERID$$','$$DAYOFF_SECODE$$','W'));\n\t\t\t\t\t\t\n\t\t\t\t\t\t--取得有衝突假單(審核中且未撤銷)的資訊\n\t\t\t\t\t\tSELECT @MAX_OFFSDT \= SI.WORK_DATE,@MAX_WORKSTIME\=SI.WORK_TIME,@MAX_OFFEDT \= SIG.WORK_DATE,@MAX_WORKETIME\=SIG.WORK_TIME,@DAYOFF_NAME\=DC.DAYOFF_NAME\n\t\t\t\t\t\t  FROM JH_SIGNON SI\n\t\t\t\t\t\t  INNER JOIN DAYOFFCLASS DC\n\t\t\t\t\t\t  ON SI.WORK_STATUS \= DC.DAYOFF_ID\n\t\t\t\t\t\t  INNER JOIN JH_SIGNON SIG\n\t\t\t\t\t\t   ON SI.DAYOFF_SEQ \= SIG.DAYOFF_SEQ\n\t\t\t\t\t\t   AND SIG.DAYOFF_SECODE \= 'E'\n\t\t\t\t\t\t WHERE SI.DAYOFF_SEQ \= @DAYOFF_SEQ\n\t\t\t\t\t\t   AND SI.DAYOFF_SECODE \= 'S';\n\t\t\t\t\t\t   \n\t\t\t\t\t\t/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t\t\t\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t/*  這一段 update 可用noli的excel 檔中的  INSERT 產生器，來產生對應的欄位及語法  */\n\t\t\t\t\t  \n\t\t\t\t\t\tInsert into JH_SIGNON /* WITH (ROWLOCK) */\n\t\t\t\t\t\t(\n\t\t\t\t\t\t USERID\n\t\t\t\t\t\t,USERNAME\n\t\t\t\t\t\t,WORK_STATUS\n\t\t\t\t\t\t,DAYOFF_SECODE\n\t\t\t\t\t\t,WORK_DATE\n\t\t\t\t\t\t,WORK_TIME\n\t\t\t\t\t\t,JOB_CODE\n\t\t\t\t\t\t,LATITUDE\n\t\t\t\t\t\t,LONGITUDE\n\t\t\t\t\t\t,SIGNONIP\n\t\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t) \n\t\t\t\t\t\tVALUES(\n\t\t\t\t\t\t'$$USERID$$'\n\t\t\t\t\t\t,'$$USERNAME$$'\n\t\t\t\t\t\t,'$$WORK_STATUS$$'\n\t\t\t\t\t\t,'$$DAYOFF_SECODE$$'\n\t\t\t\t\t\t,@nowDate\n\t\t\t\t\t\t,@nowTime\n\t\t\t\t\t\t,@JOB_CODE\n\t\t\t\t\t\t,CONVERT(DECIMAL(10,7),(CASE WHEN '$$LATITUDE$$'\='' THEN NULL ELSE '$$LATITUDE$$' END))\n\t\t\t\t\t\t,CONVERT(DECIMAL(10,7),(CASE WHEN '$$LONGITUDE$$'\='' THEN NULL ELSE '$$LONGITUDE$$' END))\n\t\t\t\t\t\t,'$$SIGNONIP$$'\n\t\t\t\t\t\t,0\n\t\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\t\t\t\t\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tFUNC_ID\n\t\t\t\t\t\t\t   ,PROC_TYPE\n\t\t\t\t\t\t\t   ,USER_ID\n\t\t\t\t\t\t\t   ,DATA_NO\n\t\t\t\t\t\t\t   ,EVENT_DT\n\t\t\t\t\t\t\t   ,MEMO\n\t\t\t\t\t\t\t   ,SessionID\n\t\t\t\t\t\t\t   ,ProcPK\n\t\t\t\t\t\t\t   ,PROC_TARGET\n\t\t\t\t\t\t)\n\t\t\t\t\t\tVALUES(\n\t\t\t\t\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t\t\t\t   ,'insert'\n\t\t\t\t\t\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t\t\t   ,IDENT_CURRENT('JH_SIGNON') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t\t\t\t\t\t   ,'$$MEMO$$'\n\t\t\t\t\t\t\t   ,'${PARAM_SESSION_ID}'\n\t\t\t\t\t\t\t   ,'${LOGPK}'\n\t\t\t\t\t\t\t   ,'JH_SIGNON' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t);\n\t\t\t\t\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t\t\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\t\t\t\t\tINSERT INTO LOG_JH_SIGNON  /* WITH (ROWLOCK) */ \n\t\t\t\t\t\t\t\t ( FUNC_ID \n\t\t\t\t\t\t\t\t  ,CRUD_STATE \n\t\t\t\t\t\t\t\t  ,PK_USERID\n\t\t\t\t\t\t\t\t  ,USERID\n\t\t\t\t\t\t\t\t  ,USERNAME\n\t\t\t\t\t\t\t\t  ,WORK_STATUS\n\t\t\t\t\t\t\t\t  ,DAYOFF_SECODE\n\t\t\t\t\t\t\t\t  ,WORK_DATE\n\t\t\t\t\t\t\t\t  ,WORK_TIME\n\t\t\t\t\t\t\t\t  ,TAKELEAVE_STATUS\n\t\t\t\t\t\t\t\t  ,JOB_CODE\n\t\t\t\t\t\t\t\t  ,DAYOFF_SEQ\n\t\t\t\t\t\t\t\t  ,LATITUDE\n\t\t\t\t\t\t\t\t  ,LONGITUDE\n\t\t\t\t\t\t\t\t  ,SIGNONIP\n\t\t\t\t\t\t\t\t  ,DATA_STATUS\n\t\t\t\t\t\t\t\t  ,ADD_USER_ID\n\t\t\t\t\t\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t\t\t  ,ADD_DT\n\t\t\t\t\t\t\t\t  ,DATA_CHANGE_LOG_ID )\n\t\t\t\t\t\tVALUES(\n\t\t\t\t\t\t\t\t  '${PARAM_FUNC_ID}'\n\t\t\t\t\t\t\t\t  ,'C'\n\t\t\t\t\t\t\t\t  ,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t\t\t\t\t  ,'$$USERID$$'\n\t\t\t\t\t\t\t\t  ,'$$USERNAME$$'\n\t\t\t\t\t\t\t\t  ,'$$WORK_STATUS$$'\n\t\t\t\t\t\t\t\t  ,'$$DAYOFF_SECODE$$'\n\t\t\t\t\t\t\t\t  ,@nowDate\n\t\t\t\t\t\t\t\t  ,@nowTime\n\t\t\t\t\t\t\t\t  ,''\n\t\t\t\t\t\t\t\t  ,@JOB_CODE\n\t\t\t\t\t\t\t\t  ,NULL\n\t\t\t\t\t\t\t\t  ,CONVERT(DECIMAL(10,7),(CASE WHEN '$$LATITUDE$$'\='' THEN NULL ELSE '$$LATITUDE$$' END))\n\t\t\t\t\t\t\t\t  ,CONVERT(DECIMAL(10,7),(CASE WHEN '$$LONGITUDE$$'\='' THEN NULL ELSE '$$LONGITUDE$$' END))\n\t\t\t\t\t\t\t\t  ,'$$SIGNONIP$$'\n\t\t\t\t\t\t\t\t  ,'0'\n\t\t\t\t\t\t\t\t  ,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t\t\t\t  ,'${PARAM_COMPANY}'\n\t\t\t\t\t\t\t\t  ,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t\t\t\t  ,IDENT_CURRENT('DATA_CHANGE_LOG'));\n\n\t\t\t\t\t\t/* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n\t\t\t\t\t    INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t\t\t\t\t  ( ProcPK\n\t\t\t\t\t\t\t\t,hashValues\n\t\t\t\t\t\t\t\t,RETURN_CODE \n\t\t\t\t\t\t\t\t,RETURN_MSG \n\t\t\t\t\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t\t\t\t\t,MEMO)\n\t\t\t\t\t    VALUES (        \n\t\t\t\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t\t\t\t,'0'\n\t\t\t\t\t\t\t\t,(CASE WHEN '$$WORK_STATUS$$'\='ON' AND '$$DAYOFF_SECODE$$'\='S' AND ISNULL(@DAYOFF_SEQ,0)>0\n\t\t\t\t\t\t\t\t\t\t THEN '上班打卡成功，提醒有審核中的假單，請記得撤銷<br/>假別：'+ @DAYOFF_NAME +'，請假時間：'+ CONVERT(varchar,@MAX_OFFSDT,111)+' '+\n\t\t\t\t\t\t\t\t\t\t @MAX_WORKSTIME +'~'+CONVERT(varchar,@MAX_OFFEDT,111)+' '\n\t\t\t\t\t\t\t\t\t\t +@MAX_WORKETIME\n\t\t\t\t\t\t\t\t\t   WHEN '$$WORK_STATUS$$'\='ON' AND '$$DAYOFF_SECODE$$'\='E' AND ISNULL(@DAYOFF_SEQ,0)>0\n\t\t\t\t\t\t\t\t\t\t THEN '下班打卡成功，提醒有審核中的假單，請記得撤銷<br/>假別：'+ @DAYOFF_NAME +'，請假時間：'+ CONVERT(varchar,@MAX_OFFSDT,111)+' '+\n\t\t\t\t\t\t\t\t\t\t @MAX_WORKSTIME +'~'+CONVERT(varchar,@MAX_OFFEDT,111)+' '\n\t\t\t\t\t\t\t\t\t\t +@MAX_WORKETIME\n\t\t\t\t\t\t\t\t\t   WHEN '$$WORK_STATUS$$'\='ON' AND '$$DAYOFF_SECODE$$'\='S'   \n\t\t\t\t\t\t\t\t\t\t THEN '上班打卡成功' \n\t\t\t\t\t\t\t\t\t   WHEN '$$WORK_STATUS$$'\='ON' AND '$$DAYOFF_SECODE$$'\='E' \n\t\t\t\t\t\t\t\t\t\t THEN '下班打卡成功' ELSE 'SUCCESS' END)\n\t\t\t\t\t\t\t\t,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t\t\t\t\t,'C' \n\t\t\t\t\t\t\t\t,'$$MEMO$$');\n\t\t\t\t\n\t\t\t\tEND\n\t\t\t\tELSE\n\t\t\t\tBEGIN\n\t\t\t\t\t--取得有衝突假單(已通過且未被撤銷)的資訊\n\t\t\t\t\tSELECT @MAX_OFFSDT \= SI.WORK_DATE,@MAX_WORKSTIME\=SI.WORK_TIME,@MAX_OFFEDT \= SIG.WORK_DATE,@MAX_WORKETIME\=SIG.WORK_TIME,@DAYOFF_NAME\=DC.DAYOFF_NAME\n\t\t\t\t\t  FROM JH_SIGNON SI\n\t\t\t\t\t  INNER JOIN DAYOFFCLASS DC\n\t\t\t\t\t  ON SI.WORK_STATUS \= DC.DAYOFF_ID\n\t\t\t\t\t  INNER JOIN JH_SIGNON SIG\n\t\t\t\t\t   ON SI.DAYOFF_SEQ \= SIG.DAYOFF_SEQ\n\t\t\t\t\t   AND SIG.DAYOFF_SECODE \= 'E'\n\t\t\t\t\t WHERE SI.DAYOFF_SEQ \= @DAYOFF_SEQ\n\t\t\t\t\t   AND SI.DAYOFF_SECODE \= 'S';\n\t\t\t\t\t\n\t\t\t\t\tIF (@MAX_OFFSDT<>@MAX_OFFEDT OR (@MAX_OFFSDT\=@MAX_OFFEDT AND (convert(int,substring(@MAX_WORKETIME,1,2))-convert(int,substring(@MAX_WORKSTIME,1,2)))\=9))\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t--ELSE IF 打卡檢核到與已通過的假單發生衝突(跨天\=>通常都是請整天整天的)還是要擋(不可打卡)，或者請滿一整天也不能打卡\n\t\t\t\t\t\tINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t\t\t\t\t( ProcPK\n\t\t\t\t\t\t\t,hashValues\n\t\t\t\t\t\t\t,RETURN_CODE \n\t\t\t\t\t\t\t,RETURN_MSG \n\t\t\t\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t\t\t\t,MEMO)\n\t\t\t\t\t\tVALUES (\n\t\t\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t\t\t,'-1'\n\t\t\t\t\t\t\t,'打卡時間與請假時間衝突，請撤單或於請假時間結束後再打卡。'\n\t\t\t\t\t\t\t,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t\t\t\t,'C' \n\t\t\t\t\t\t\t,'$$MEMO$$');\n\t\t\t\t\tEND\n\t\t\t\t\tELSE\n\t\t\t\t\tBEGIN\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t--'打卡時間與請假時間衝突，前台請跳訊息讓使用者確定是否仍要打卡'\n\t\t\t\t\t\tINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t\t\t\t\t( ProcPK\n\t\t\t\t\t\t\t,hashValues\n\t\t\t\t\t\t\t,RETURN_CODE \n\t\t\t\t\t\t\t,RETURN_MSG \n\t\t\t\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t\t\t\t,MEMO)\n\t\t\t\t\t\tVALUES (        \n\t\t\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t\t\t,'1'\n\t\t\t\t\t\t\t,'打卡時間與請假時間衝突，仍要確定打卡?<br/>假別：'+ @DAYOFF_NAME +'，請假時間：'+CONVERT(varchar,@MAX_OFFSDT,111)+' '+@MAX_WORKSTIME +'~'+\n\t\t\t\t\t\t\tCONVERT(varchar,@MAX_OFFEDT,111)+' '+@MAX_WORKETIME\n\t\t\t\t\t\t\t,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t\t\t\t,'C' \n\t\t\t\t\t\t\t,'$$MEMO$$');\n\t\t\t\t\tEND\n\t\t\t\tEND\n\t\t\tEND\n\t\t\tELSE \n\t\t\tBEGIN\n\t\t\t  INSERT INTO MEM_API_RESULT   -- WITH (ROWLOCK)\n\t\t\t\t( ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE \n\t\t\t\t,RETURN_MSG \n\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t,MEMO)\n\t\t\t  VALUES (        \n\t\t\t\t'${LOGPK}' \n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'-1'\n\t\t\t\t,(CASE WHEN '$$WORK_STATUS$$'\='ON' AND '$$DAYOFF_SECODE$$'\='E' THEN '請先填寫工作日誌' ELSE 'FAILURE1' END)\n\t\t\t\t,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t,'C' \n\t\t\t\t,'$$MEMO$$');\n\t\t\tEND\n\t\tEND\n\t\tELSE\n\t\tBEGIN\n\n\t\t\t\t/*顯示已打卡的時間給前台*/\n\t\t\t\tSET @EX_STIME \= (SELECT MAX(WORK_TIME)\n\t\t\t\t\t\t\t\tFROM JH_SIGNON\n\t\t\t\t\t\t\t   WHERE USERID \= '$$USERID$$'\n\t\t\t\t\t\t\t\t AND WORK_STATUS \= 'ON'\n\t\t\t\t\t\t\t\t AND DAYOFF_SECODE \= 'S'\n\t\t\t\t\t\t\t\t AND WORK_DATE \= @nowDate);\n\t\t\t\t\n\t\t\t\tSET @EX_ETIME \= (SELECT MAX(WORK_TIME)\n\t\t\t\t\t\t\t\tFROM JH_SIGNON\n\t\t\t\t\t\t\t   WHERE USERID \= '$$USERID$$'\n\t\t\t\t\t\t\t\t AND WORK_STATUS \= 'ON'\n\t\t\t\t\t\t\t\t AND DAYOFF_SECODE \= 'E'\n\t\t\t\t\t\t\t\t AND WORK_DATE \= @nowDate);\n\n\t\t\t\tINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t\t\t( ProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE \n\t\t\t\t\t,RETURN_MSG \n\t\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t\t,MEMO)\n\t\t\t\tVALUES (        \n\t\t\t\t\t'${LOGPK}' \n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'-1'\n\t\t\t\t\t,(CASE WHEN '$$DAYOFF_SECODE$$'\='E' AND @sCNT\=0 THEN '本日未打卡上班，請洽系統管理人員'\n\t\t\t\t\t\t   ELSE 'FAILURE2' END)\n\t\t\t\t\t,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t\t,'C' \n\t\t\t\t\t,'$$MEMO$$');\n\t\tEND\n\tEND\n\tELSE\n\tBEGIN\n\t\t/*顯示已打卡的時間給前台*/\n\t\tSET @EX_STIME \= (SELECT MAX(WORK_TIME)\n\t\t\t\t\t\tFROM JH_SIGNON\n\t\t\t\t\t   WHERE USERID \= '$$USERID$$'\n\t\t\t\t\t\t AND WORK_STATUS \= 'ON'\n\t\t\t\t\t\t AND DAYOFF_SECODE \= 'S'\n\t\t\t\t\t\t AND WORK_DATE \= @nowDate);\n\t\t\n\t\tSET @EX_ETIME \= (SELECT MAX(WORK_TIME)\n\t\t\t\t\t\tFROM JH_SIGNON\n\t\t\t\t\t   WHERE USERID \= '$$USERID$$'\n\t\t\t\t\t\t AND WORK_STATUS \= 'ON'\n\t\t\t\t\t\t AND DAYOFF_SECODE \= 'E'\n\t\t\t\t\t\t AND WORK_DATE \= @nowDate);\n\t   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t  ( ProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE \n\t\t\t,RETURN_MSG \n\t\t\t,DATA_UNIQUE_KEY \n\t\t\t,DATA_ACTION_TYPE \n\t\t\t,MEMO)\n\t   VALUES (        \n\t\t\t'${LOGPK}' \n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'-1'\n\t\t\t,(CASE WHEN '$$WORK_STATUS$$'\='ON'  AND '$$DAYOFF_SECODE$$'\='S' THEN '本日已打卡上班<br/>打卡時間\:' +@EX_STIME \n\t\t\t\t   WHEN '$$WORK_STATUS$$'\='ON'  AND '$$DAYOFF_SECODE$$'\='E' THEN '本日已打卡下班<br/>打卡時間\:' +@EX_ETIME \n\t\t\t\t   ELSE 'FAILURE4' END)\n\t\t\t,IDENT_CURRENT('JH_SIGNON')\n\t\t\t,'C' \n\t\t\t,'$$MEMO$$');\n\tEND;\nEND\n ELSE\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK_COL 流水號欄位 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_SIGNON'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\n\nSELECT * FROM JH_SIGNON WITH (NOLOCK) WHERE PK_USERID \= '$$PK_USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/* 2.2 DATA Detail LOG (before modified) */\n  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */ \n   INSERT INTO LOG_JH_SIGNON /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,WORK_DATE\n          ,WORK_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,WORK_DATE\n          ,WORK_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM JH_SIGNON  WITH (NOLOCK)\n   WHERE PK_USERID \= '$$PK_USERID$$';\n/* 2.3 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n   ELSE\n   BEGIN\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n/* 2.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n   DELETE  JH_SIGNON WITH (ROWLOCK)\n   WHERE PK_USERID \= '$$PK_USERID$$';\nEND\n  ELSE\n   IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n   BEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_SIGNON' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\nSELECT * FROM JH_SIGNON WITH (NOLOCK) WHERE PK_USERID \= '$$PK_USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n   INSERT INTO LOG_JH_SIGNON /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,WORK_DATE\n          ,WORK_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,WORK_DATE\n          ,WORK_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM JH_SIGNON WITH (NOLOCK)\n   WHERE PK_USERID \= '$$PK_USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n;\n/* 3.3 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\n    ELSE\n    BEGIN\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\n/* 3.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\nUPDATE JH_SIGNON WITH (ROWLOCK)\n    SET USERID\=(CASE WHEN SUBSTRING('$$USERID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN USERID ELSE SUBSTRING('$$USERID$$',1,50) END)\n    ,USERNAME\=(CASE WHEN SUBSTRING('$$USERNAME$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN USERNAME ELSE SUBSTRING('$$USERNAME$$',1,50) END)\n    ,WORK_STATUS\=(CASE WHEN SUBSTRING('$$WORK_STATUS$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN WORK_STATUS ELSE SUBSTRING('$$WORK_STATUS$$',1,50) END)\n    ,WORK_DATE\=@nowDate\n    ,WORK_TIME\=(CASE WHEN SUBSTRING(@nowTime,1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN WORK_TIME ELSE SUBSTRING(@nowTime,1,10) END)\n    ,DATA_STATUS\='0'\n    ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n    ,LAST_MOD_USER_COMPANY_ID\='${PARAM_COMPANY}'\n    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\nWHERE PK_USERID\='$$PK_USERID$$';\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$PK_USERID$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
SIGNON_ONCUD_AGAIN=/*  UPDATED AT 2020.05.22\n 新增原因\:\n \n  1. 寫入打卡同仁的經緯度和電腦IP\n\t\n*/\nDECLARE @nowDate DATE \= convert(date,convert(varchar,getdate(),111));\t--現在系統日\t--2020.05.08 ADDED\nDECLARE @nowTime varchar(10) \= convert(varchar,getdate(),108);\t\t\t--現在系統時間\t--2020.05.08 ADDED\nDECLARE @JOB_CODE VARCHAR(10);\t--班別 --2020.04.22 ADDED\n\nBEGIN TRY\n IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n BEGIN\n \n /*取得人員的班別表 2020.04.23 ADDED */\n SET @JOB_CODE \= ISNULL((SELECT JOB_CODE\n\t\t\t\t\t\t   FROM JH_USERS\n\t\t\t\t\t\t  WHERE USERID \= '$$USERID$$'),'$$JOB_CODE$$');\n/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n/*  這一段 update 可用noli的excel 檔中的  INSERT 產生器，來產生對應的欄位及語法  */\n\t\tInsert into JH_SIGNON /* WITH (ROWLOCK) */\n\t\t(\n\t\t USERID\n\t\t,USERNAME\n\t\t,WORK_STATUS\n\t\t,DAYOFF_SECODE\n\t\t,WORK_DATE\n\t\t,WORK_TIME\n\t\t,JOB_CODE\n\t\t,LATITUDE\n\t\t,LONGITUDE\n\t\t,SIGNONIP\n\t\t,DATA_STATUS\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t) \n\t\tVALUES(\n\t\t'$$USERID$$'\n\t\t,'$$USERNAME$$'\n\t\t,'$$WORK_STATUS$$'\n\t\t,'$$DAYOFF_SECODE$$'\n\t\t,@nowDate\n\t\t,@nowTime\n\t\t,@JOB_CODE\n\t\t,CONVERT(DECIMAL(10,7),(CASE WHEN '$$LATITUDE$$'\='' THEN NULL ELSE '$$LATITUDE$$' END))\n\t\t,CONVERT(DECIMAL(10,7),(CASE WHEN '$$LONGITUDE$$'\='' THEN NULL ELSE '$$LONGITUDE$$' END))\n\t\t,'$$SIGNONIP$$'\n\t\t,0\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'${PARAM_COMPANY}'\n\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t);\n\n\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\tINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n\t\t(\n\t\t\t\tFUNC_ID\n\t\t\t   ,PROC_TYPE\n\t\t\t   ,USER_ID\n\t\t\t   ,DATA_NO\n\t\t\t   ,EVENT_DT\n\t\t\t   ,MEMO\n\t\t\t   ,SessionID\n\t\t\t   ,ProcPK\n\t\t\t   ,PROC_TARGET\n\t\t)\n\t\tVALUES(\n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t   ,'insert'\n\t\t\t   ,'${PARAM_SOURCE_COMING}'\n\t\t\t   ,IDENT_CURRENT('JH_SIGNON') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t   ,CONVERT(VARCHAR(20),GETDATE(),120)\n\t\t\t   ,'$$MEMO$$'\n\t\t\t   ,'${PARAM_SESSION_ID}'\n\t\t\t   ,'${LOGPK}'\n\t\t\t   ,'JH_SIGNON' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t);\n\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\tINSERT INTO LOG_JH_SIGNON  /* WITH (ROWLOCK) */ \n\t\t\t\t ( FUNC_ID \n\t\t\t\t  ,CRUD_STATE \n\t\t\t\t  ,PK_USERID\n\t\t\t\t  ,USERID\n\t\t\t\t  ,USERNAME\n\t\t\t\t  ,WORK_STATUS\n\t\t\t\t  ,DAYOFF_SECODE\n\t\t\t\t  ,WORK_DATE\n\t\t\t\t  ,WORK_TIME\n\t\t\t\t  ,JOB_CODE\n\t\t\t\t  ,LATITUDE\n\t\t\t\t  ,LONGITUDE\n\t\t\t\t  ,SIGNONIP\n\t\t\t\t  ,DATA_STATUS\n\t\t\t\t  ,ADD_USER_ID\n\t\t\t\t  ,ADD_USER_COMPANY_ID\n\t\t\t\t  ,ADD_DT\n\t\t\t\t  ,DATA_CHANGE_LOG_ID )\n\t\tVALUES(\n\t\t\t\t  '${PARAM_FUNC_ID}'\n\t\t\t\t  ,'C'\n\t\t\t\t  ,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t  ,'$$USERID$$'\n\t\t\t\t  ,'$$USERNAME$$'\n\t\t\t\t  ,'$$WORK_STATUS$$'\n\t\t\t\t  ,'$$DAYOFF_SECODE$$'\n\t\t\t\t  ,@nowDate\n\t\t\t\t  ,@nowTime\n\t\t\t\t  ,@JOB_CODE\n\t\t\t\t  ,CONVERT(DECIMAL(10,7),(CASE WHEN '$$LATITUDE$$'\='' THEN NULL ELSE '$$LATITUDE$$' END))\n\t\t\t\t  ,CONVERT(DECIMAL(10,7),(CASE WHEN '$$LONGITUDE$$'\='' THEN NULL ELSE '$$LONGITUDE$$' END))\n\t\t\t\t  ,'$$SIGNONIP$$'\n\t\t\t\t  ,'0'\n\t\t\t\t  ,'${PARAM_SOURCE_COMING}'\n\t\t\t\t  ,'${PARAM_COMPANY}'\n\t\t\t\t  ,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t  ,IDENT_CURRENT('DATA_CHANGE_LOG'));\n\n\t\t/* 1.4 Action Return ，此全域暫存表格(\#\#TMP_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n\t\t   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t\t  ( ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE \n\t\t\t\t,RETURN_MSG \n\t\t\t\t,DATA_UNIQUE_KEY \n\t\t\t\t,DATA_ACTION_TYPE \n\t\t\t\t,MEMO)\n\t\t   VALUES (        \n\t\t\t\t'${LOGPK}' \n\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t,'0'\n\t\t\t\t,(CASE WHEN '$$WORK_STATUS$$'\='ON' AND '$$DAYOFF_SECODE$$'\='S'   THEN '上班打卡成功' WHEN '$$WORK_STATUS$$'\='ON' AND '$$DAYOFF_SECODE$$'\='E' THEN '下班打卡成功' ELSE 'SUCCESS' END)\n\t\t\t\t,IDENT_CURRENT('JH_SIGNON')\n\t\t\t\t,'C' \n\t\t\t\t,'$$MEMO$$');\nEND\n ELSE\n  IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n  BEGIN\n  /* 2.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'delete'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK_COL 流水號欄位 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_SIGNON'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\n\nSELECT * FROM JH_SIGNON WITH (NOLOCK) WHERE PK_USERID \= '$$PK_USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\n\nBEGIN\n/* 2.2 DATA Detail LOG (before modified) */\n  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */ \n   INSERT INTO LOG_JH_SIGNON /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,WORK_DATE\n          ,WORK_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n          ,'D' AS CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,WORK_DATE\n          ,WORK_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM JH_SIGNON  WITH (NOLOCK)\n   WHERE PK_USERID \= '$$PK_USERID$$';\n/* 2.3 Action Return */\n   INSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'0' \n        ,'SUCCESS' \n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n   ELSE\n   BEGIN\n/* 2.4 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE\n        ,RETURN_MSG\n        ,DATA_UNIQUE_KEY\n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法刪除'\n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'D' \n        ,'$$MEMO$$');\nEND\n/* 2.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n   DELETE  JH_SIGNON WITH (ROWLOCK)\n   WHERE PK_USERID \= '$$PK_USERID$$';\nEND\n  ELSE\n   IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n   BEGIN\n/* 3.1 DATA_CHANGE_LOG */\nINSERT INTO DATA_CHANGE_LOG  /* WITH (ROWLOCK) */\n(\n        FUNC_ID\n       ,PROC_TYPE\n       ,USER_ID\n       ,DATA_NO\n       ,EVENT_DT\n       ,MEMO\n       ,SessionID\n       ,ProcPK\n       ,PROC_TARGET\n)\nVALUES(\n        '${PARAM_FUNC_ID}'\n       ,'update'\n       ,'${PARAM_SOURCE_COMING}'\n       ,'$$PK_USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n       ,CONVERT(VARCHAR(20),GETDATE(),120)\n       ,'$$MEMO$$'\n       ,'${PARAM_SESSION_ID}'\n       ,'${LOGPK}'\n       ,'JH_SIGNON' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n);\nIF EXISTS (\nSELECT * FROM JH_SIGNON WITH (NOLOCK) WHERE PK_USERID \= '$$PK_USERID$$' AND ISNULL(DATA_STATUS, 0) \= 0)\nBEGIN\n/* 3.2 DATA Detail LOG (before modified) */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n   INSERT INTO LOG_JH_SIGNON /* WITH (ROWLOCK) */\n        ( FUNC_ID\n          ,CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,WORK_DATE\n          ,WORK_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,DATA_CHANGE_LOG_ID)\n   SELECT '${PARAM_FUNC_ID}' AS FUNC_ID\n          ,'U' AS CRUD_STATE\n          ,PK_USERID\n          ,USERID\n          ,USERNAME\n          ,WORK_STATUS\n          ,WORK_DATE\n          ,WORK_TIME\n          ,DATA_STATUS\n          ,ADD_USER_ID\n          ,ADD_USER_COMPANY_ID\n          ,ADD_DT\n          ,LAST_MOD_USER_ID\n          ,LAST_MOD_USER_COMPANY_ID\n          ,LAST_MOD_DT\n          ,DEL_USER_ID\n          ,DEL_USER_COMPANY_ID\n          ,DEL_DT\n          ,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n     FROM JH_SIGNON WITH (NOLOCK)\n   WHERE PK_USERID \= '$$PK_USERID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n;\n/* 3.3 Action Return */\n   INSERT INTO MEM_API_RESULT  /* WITH (ROWLOCK) */\n       ( ProcPK\n         ,hashValues\n         ,RETURN_CODE\n         ,RETURN_MSG\n         ,DATA_UNIQUE_KEY\n         ,DATA_ACTION_TYPE \n         ,MEMO)\n   VALUES ( \n         '${LOGPK}' \n         ,@FROM_OUTSIDE\n         ,'0'\n         ,'SUCCESS'\n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n         ,'U' \n         ,'$$MEMO$$');\nEND\n    ELSE\n    BEGIN\n/* 3.4 Action Return */\n   INSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n      ( ProcPK\n        ,hashValues\n        ,RETURN_CODE \n        ,RETURN_MSG \n        ,DATA_UNIQUE_KEY \n        ,DATA_ACTION_TYPE \n        ,MEMO)\n   VALUES ( \n        '${LOGPK}' \n        ,@FROM_OUTSIDE\n        ,'-1'\n        ,'資料正在審核流程中，無法修改'\n        ,'$$PK_USERID$$'  /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n        ,'U' \n        ,'$$MEMO$$');\nEND\n/* 3.5 功能主要異動 Table */\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\nUPDATE JH_SIGNON WITH (ROWLOCK)\n    SET USERID\=(CASE WHEN SUBSTRING('$$USERID$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN USERID ELSE SUBSTRING('$$USERID$$',1,50) END)\n    ,USERNAME\=(CASE WHEN SUBSTRING('$$USERNAME$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN USERNAME ELSE SUBSTRING('$$USERNAME$$',1,50) END)\n    ,WORK_STATUS\=(CASE WHEN SUBSTRING('$$WORK_STATUS$$',1,50)\=SUBSTRING('\#NO_DATA\#',1,50) THEN WORK_STATUS ELSE SUBSTRING('$$WORK_STATUS$$',1,50) END)\n    ,WORK_DATE\=@nowDate\n    ,WORK_TIME\=(CASE WHEN SUBSTRING(@nowTime,1,10)\=SUBSTRING('\#NO_DATA\#',1,10) THEN WORK_TIME ELSE SUBSTRING(@nowTime,1,10) END)\n    ,DATA_STATUS\='0'\n    ,LAST_MOD_USER_ID\='${PARAM_SOURCE_COMING}'\n    ,LAST_MOD_USER_COMPANY_ID\='${PARAM_COMPANY}'\n    ,LAST_MOD_DT\=CONVERT(VARCHAR(20), GETDATE(), 120)\nWHERE PK_USERID\='$$PK_USERID$$';\nEND\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n \nEND TRY \n\nBEGIN CATCH\n\n SELECT @RETURN_CODE \= ERROR_NUMBER() ,\n     @RETURN_MSG \= ERROR_MESSAGE() ,\n     @RETURN_TEST \=\n   (SELECT *\n    FROM\n   (SELECT '${LOGPK}' AS ProcPK ,\n     @FROM_OUTSIDE AS hashValues ,\n     ERROR_NUMBER() AS RETURN_CODE ,\n     ERROR_MESSAGE() AS RETURN_MSG ,    \n     '$$PK_USERID$$' AS DATA_UNIQUE_KEY ,\n     '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n     '$$MEMO$$' AS MEMO) AS A  /* WITH (ROWLOCK) */\n    FOR JSON AUTO)\nEND CATCH
SIGNON_PERSONNEL=/* Last updated date\: 2020/03/11\nLast updated by\: Noli\n\n修正原因\: 暫訂讀取部門代碼為'0000',不然多個部門代碼會找到多個todd,假單送出時會有問題\n此功能\: 顯示假單審核人員清單\n*/\nSELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY USERID ASC\n\t\t\t) AS RowNum\n\t\t,T1.USERID\n\t\t,T1.USERNAME\n\t\t,T1.EMAIL\n\tFROM USERS T1\n\tINNER JOIN DEPARTMENT T2 ON T1.DEPID \= T2.DEPID\n\t\tAND T1.DEPID\='0000'\t--暫訂\n\t\tAND (\n\t\t\tUSERID LIKE ('%$$USERID$$%')\n\t\t\tOR 'ALL' \= '$$USERID$$'\n\t\t\t)\n\t\tAND (\n\t\t\tUSERNAME LIKE ('%$$USERNAME$$%')\n\t\t\tOR 'ALL' \= '$$USERNAME$$'\n\t\t\t)\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY USERID ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,T1.USERID\n\t\t\t\t,T1.USERNAME\n\t\t\t\t,T1.EMAIL\n\t\t\tFROM USERS T1\n\t\t\tINNER JOIN DEPARTMENT T2 ON T1.DEPID \= T2.DEPID\n\t\t\t\tAND T1.DEPID\='0000' --暫訂\n\t\t\t\tAND (\n\t\t\t\t\tUSERID LIKE ('%$$USERID$$%')\n\t\t\t\t\tOR 'ALL' \= '$$USERID$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tUSERNAME LIKE ('%$$USERNAME$$%')\n\t\t\t\t\tOR 'ALL' \= '$$USERNAME$$'\n\t\t\t\t\t)\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)
SIGNON_PERSONNEL_ALL=/* Last updated date\: 2020/03/31\nLast updated by\: Noli\n\n取得公司人員清單+ALL選項\n*/\nSELECT *\nFROM (\n\tSELECT '0' AS RowNum,\n\t\t   'ALL' AS USERID,\n\t\t   'ALL' AS USERNAME\n\tUNION ALL\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY USERID ASC\n\t\t\t) AS RowNum\n\t\t,T1.USERID\n\t\t,T1.USERNAME\n\tFROM USERS T1\n\tINNER JOIN DEPARTMENT T2 ON T1.DEPID \= T2.DEPID\n\t\tAND T1.DEPID\='0000'\t--暫訂\n\t\tAND (\n\t\t\tUSERID LIKE ('%$$USERID$$%')\n\t\t\tOR 'ALL' \= '$$USERID$$'\n\t\t\t)\n\t\tAND (\n\t\t\tUSERNAME LIKE ('%$$USERNAME$$%')\n\t\t\tOR 'ALL' \= '$$USERNAME$$'\n\t\t\t)\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT '0' AS RowNum,\n\t\t\t\t   'ALL' AS USERID,\n\t\t\t\t   'ALL' AS USERNAME\n\t\t\tUNION ALL\t   \n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY USERID ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,T1.USERID\n\t\t\t\t,T1.USERNAME\n\t\t\tFROM USERS T1\n\t\t\tINNER JOIN DEPARTMENT T2 ON T1.DEPID \= T2.DEPID\n\t\t\t\tAND T1.DEPID\='0000' --暫訂\n\t\t\t\tAND (\n\t\t\t\t\tUSERID LIKE ('%$$USERID$$%')\n\t\t\t\t\tOR 'ALL' \= '$$USERID$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tUSERNAME LIKE ('%$$USERNAME$$%')\n\t\t\t\t\tOR 'ALL' \= '$$USERNAME$$'\n\t\t\t\t\t)\n\t\t\t) AS B\n\t\t) AS B\nWHERE 1 \= 1\n\tAND RowNum >\= $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)
SIGNON_TLSSTATUS_CB=/* Last Updated Date\: 2020/04/09\nUpdated by Noli\n修正原因\: W 審核中有兩種狀態,待審核和待撤銷\n功能：取得假單狀態清單*/\n\nSELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM (SELECT \n\t\t\t'W' AS TAKELEAVE_STATUS,\n\t\t\t'待審核 / 待撤銷' AS TAKELEAVE_CSTATUS\t--2020.04.09 MODIFIED\n\t\t UNION ALL\n\t\t SELECT \n\t\t\t'Y' AS TAKELEAVE_STATUS,\n\t\t\t'已通過' AS TAKELEAVE_CSTATUS\n\t\t UNION ALL\n\t\t SELECT \n\t\t\t'N' AS TAKELEAVE_STATUS,\n\t\t\t'已退回' AS TAKELEAVE_CSTATUS\n\t\t UNION ALL\t\t\t\t\t\t\t\t--2020.04.07 ADDED\n\t\t SELECT \t\t\t\t\t\t\t\t--2020.04.07 ADDED\n\t\t\t'C' AS TAKELEAVE_STATUS,\t\t\t--2020.04.07 ADDED\n\t\t\t'已撤銷' AS TAKELEAVE_CSTATUS\t\t--2020.04.07 ADDED\n\t\t ) C\n\t ) A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY TAKELEAVE_CSTATUS desc) AS RowNum,\n\t\tTAKELEAVE_STATUS,\n\t\tTAKELEAVE_CSTATUS\n\tFROM (SELECT \n\t\t\t'W' AS TAKELEAVE_STATUS,\n\t\t\t'待審核 / 待撤銷' AS TAKELEAVE_CSTATUS\t--2020.04.09 MODIFIED\n\t\t UNION ALL\n\t\t SELECT \n\t\t\t'Y' AS TAKELEAVE_STATUS,\n\t\t\t'已通過' AS TAKELEAVE_CSTATUS\n\t\t UNION ALL\n\t\t SELECT \n\t\t\t'N' AS TAKELEAVE_STATUS,\n\t\t\t'已退回' AS TAKELEAVE_CSTATUS\n\t\t UNION ALL\t\t\t\t\t\t\t\t--2020.04.07 ADDED\n\t\t SELECT \t\t\t\t\t\t\t\t--2020.04.07 ADDED\n\t\t\t'C' AS TAKELEAVE_STATUS,\t\t\t--2020.04.07 ADDED\n\t\t\t'已撤銷' AS TAKELEAVE_CSTATUS\t\t--2020.04.07 ADDED\n\t\t ) C\n\t ) B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)\n;
SIGNON_USERGROUP=/* Last Updated Date\: 2020/05/26\nUpdated by Noli\n修改原因\: 因為USERGROUP, 一個帳號有可能有多重角色\n功能：取得志弘打卡登入時帳號的所屬角色*/\n\nSELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n     FROM (SELECT GROUPID\n\t\t     FROM USERGROUP\n\t\t    WHERE USERID \= '$$USERID$$'\n\t\t      AND COMPANY_ID \= 'JH'\n\t\t\t  AND GROUPID IN ('JH_USER','JH_ADMIN')\t\t\t\t\t--2020.05.26 ADDED\n\t\t ) C\n\t ) A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY GROUPID desc) AS RowNum,\n\t\tGROUPID\n\tFROM (SELECT GROUPID\n\t\t    FROM USERGROUP\n\t\t   WHERE USERID \= '$$USERID$$'\n\t\t     AND COMPANY_ID \= 'JH'\n\t\t\t AND GROUPID IN ('JH_USER','JH_ADMIN')\t\t\t\t\t--2020.05.26 ADDED\n\t\t ) C\n\t ) B\nWHERE 1 \= 1\n;
SourceVersionCTRL=SourceVersionCTRL/Entrances.kjb
SYNCHRONIZE_MW_PROP=PLUGINS/SYNCHRONIZE_PROP/SYNCHRONIZE_MW_PROP.kjb
SYNCHRONIZE_PROP=PLUGINS/SYNCHRONIZE_PROP/SYNCHRONIZE_PROP_MAIN.kjb
SYS_9000_ROOTS=SELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n   FROM PROP_MASTER\n   WHERE PROP_TYPE \= 'SSH'\n     AND ENABLED_FLAG \= 'Y') A,\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY PK_PROP ASC) AS RowNum,\n                            PROP_ID AS ROOT_ID,\n                            JNDI_NAME AS ROOT_NAME\n   FROM PROP_MASTER\n   WHERE PROP_TYPE \= 'SSH'\n     AND ENABLED_FLAG \= 'Y' ) B\nWHERE 1 \= 1\n  AND RowNum > '$$start$$'\n  AND RowNum <\= '$$limit$$'
SYS_BACKUP=PLUGINS/BACKUP/BACKUP_MAIN.kjb
SYS_BUILD_REPORT=PLUGINS/BUILD_REPORT/BUILD_REPORT_MAIN.kjb
SYS_BUILD_REPORT_JNDI=PLUGINS/BUILD_REPORT/BUILD_REPORT_MAIN.kjb
SYS_BUILD_REPORT_THRESH_TEST_REPORT=PLUGINS/BUILD_REPORT/BUILD_REPORT_MAIN.kjb
SYS_CHANGE_COMPANYID=PLUGINS/CHANGE_COMPANYID/MAIN.kjb
SYS_CHANGE_FOLW_STATUS=UPDATE JH_WS02_FLOW_LIST WITH(ROWLOCK) SET FLOW_STATUS \= '$$PARAM_FLOW_STATUS$$' WHERE FLOW_ID \= '$$PARAM_FLOW_ID$$';
SYS_CHANGE_USER_DT=PLUGINS/CHANGE_USER_DT/MAIN.kjb
SYS_COLUMNS_DFM=SELECT *\nFROM (\n\tSELECT COUNT(*) AS totalProperty\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE TABLE_NAME \= 'USERS'\n\t) A\n\t,(\n\t\t/* 全欄位 */\n\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\tORDER BY ORDINAL_POSITION ASC\n\t\t\t\t) AS RownNum\n\t\t\t,TABLE_CATALOG\n\t\t\t,TABLE_SCHEMA\n\t\t\t,TABLE_NAME\n\t\t\t,COLUMN_NAME\n\t\t\t,ORDINAL_POSITION\n\t\t\t,COLUMN_DEFAULT\n\t\t\t,IS_NULLABLE\n\t\t\t,DATA_TYPE\n\t\t\t,CHARACTER_MAXIMUM_LENGTH\n\t\t\t,CHARACTER_OCTET_LENGTH\n\t\t\t,NUMERIC_PRECISION\n\t\t\t,NUMERIC_PRECISION_RADIX\n\t\t\t,NUMERIC_SCALE\n\t\t\t,DATETIME_PRECISION\n\t\t\t,CHARACTER_SET_CATALOG\n\t\t\t,CHARACTER_SET_SCHEMA\n\t\t\t,CHARACTER_SET_NAME\n\t\t\t,COLLATION_CATALOG\n\t\t\t,COLLATION_SCHEMA\n\t\t\t,COLLATION_NAME\n\t\t\t,DOMAIN_CATALOG\n\t\t\t,DOMAIN_SCHEMA\n\t\t\t,DOMAIN_NAME\n\t\tFROM INFORMATION_SCHEMA.COLUMNS\n\t\tWHERE TABLE_NAME \= '$$QRY_TABLE_NAME$$'\n\t\t) B\nWHERE 1 \= 1\n\tAND RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$ limit$$)\n
SYS_COMPANY=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM COMPANY\n\t\tWHERE 1 \= 1\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY COMPANY_ID ASC\n\t\t\t) AS RowNum\n\t\t,COMPANY_ID\n\t\t,COMPANY_ID + ' ' + COMPANY_CNAME AS COMPANY_CNAME\n\tFROM COMPANY\n\tWHERE 1 \= 1\n\t) AS new1\n
SYS_DATA_CHANGE_LOG=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM DATA_CHANGE_LOG\n\t\tWHERE FUNC_ID \= '$$FUNC_ID$$'\n\t\t\tAND DATA_NO \= '$$DATA_NO$$'\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY LOG_ID DESC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM DATA_CHANGE_LOG\n\tWHERE FUNC_ID \= '$$FUNC_ID$$'\n\t\tAND DATA_NO \= '$$DATA_NO$$'\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$);\n
SYS_DB_CHECK=SELECT *\nFROM (\n\tSELECT USERID\n\t\t,USERNAME\n\t\t,USER_ID_NAME\n\t\t,PASSWORD\n\t\t,COMPANY_ID\n\t\t,COMPANY_CNAME\n\t\t,DEPID\n\t\t,DEPARTNAME\n\t\t,CASE \n\t\t\tWHEN A.GROUPID IS NOT NULL\n\t\t\t\tTHEN A.GROUPID\n\t\t\tELSE B.GROUPID\n\t\t\tEND AS 'GROUPID'\n\t\t,CASE \n\t\t\tWHEN A.GROUPNAME IS NOT NULL\n\t\t\t\tTHEN A.GROUPNAME\n\t\t\tELSE B.GROUPNAME\n\t\t\tEND AS 'GROUPNAME'\n\t\t,CASE\n\t\t\tWHEN A.PASSWORD \= '$$PARAM_PW$$'\n\t\t\t\tTHEN 'Y'\n\t\t\tELSE 'N'\n\t\t\tEND AS LOGIN_VALIDATE\n\t\t,ISLOCK\n\t\t,DATA_STATUS\n\tFROM (\n\t\tSELECT *\n\t\tFROM VW_VERIFY_USERS\n\t\t) A\n\t\t,(\n\t\t\tSELECT GROUPID\n\t\t\t\t,GROUPNAME\n\t\t\tFROM GROUPS\n\t\t\tWHERE GROUPID \= '$$GUEST$$'\n\t\t\t) B\n\t) NEW1\nWHERE USERID \= '$$PARAM_ACCOUNT$$'\n\tAND GROUPID \= '$$GROUPID$$'\nAND PASSWORD \= '$$PARAM_PW$$'
SYS_DFM_ROOTS=SELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n   FROM JH_WS02_FM_LIST WITH(NOLOCK)\n   WHERE FM_SET_POINT IN ('COMPANYROOT',\n                          'DEPROOT',\n                          'USERROOT')) A,\n\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY FM_SET_POINT ASC) AS RowNum,\n                            FM_TEXT AS ROOT_NAME,\n                            FM_SET_POINT AS ROOT_ID\n   FROM JH_WS02_FM_LIST WITH(NOLOCK)\n   WHERE FM_SET_POINT IN ('COMPANYROOT',\n                          'DEPROOT',\n                          'USERROOT') ) B\nWHERE 1 \= 1\n  AND RowNum > '$$start$$'\n  AND RowNum < \= '$$limit$$'
SYS_EXPORT=Funs/Export2API/Entrance.kjb
SYS_EXPORT_GETOBJ10=IF '$$PARAM_CODE_TYPE$$' \= 'CODE'\n\tBEGIN\n\t\tSELECT (SELECT * FROM JH_WS02_CODE_LIST WITH(NOLOCK) WHERE CODE_ID \= '$$PARAM_API_CODE$$' FOR JSON AUTO,ROOT('JH_WS02_CODE_LIST')) AS 'Idx0'\n\tEND\nELSE\n\tBEGIN\n\t\tSELECT (SELECT * FROM JH_WS02_FLOW_LIST WITH(NOLOCK) WHERE FLOW_ID \= '$$PARAM_API_CODE$$' FOR JSON AUTO,ROOT('JH_WS02_FLOW_LIST')) AS 'Idx0'\n\tEND
SYS_EXPORT_GETOBJ11=IF '$$PARAM_CODE_TYPE$$' \= 'CODE'\n\tBEGIN\n\t\tSELECT (SELECT * FROM JH_WS02_CODE_FORMAT_LIST WITH(NOLOCK) WHERE CODE_ID_PK \= (SELECT PK FROM JH_WS02_CODE_LIST WITH(NOLOCK) WHERE CODE_ID \= '$$PARAM_API_CODE$$') FOR JSON AUTO,ROOT('JH_WS02_CODE_FORMAT_LIST')) AS 'Idx1'\n\tEND\nELSE\n\tBEGIN\n\t\tSELECT (SELECT * FROM JH_WS02_FLOW_SCHEDULE_LIST WITH(NOLOCK) WHERE FLOW_ID_PK \= (SELECT PK FROM JH_WS02_FLOW_LIST WITH(NOLOCK) WHERE FLOW_ID \= '$$PARAM_API_CODE$$') FOR JSON AUTO,ROOT('JH_WS02_FLOW_SCHEDULE_LIST')) AS 'Idx1'\n\tEND
SYS_EXPORT_GETOBJ12=IF '$$PARAM_CODE_TYPE$$' \= 'CODE'\n\tBEGIN\n\t\tSELECT (SELECT * FROM JH_WS02_CODE_IP_RELATION WITH(NOLOCK) WHERE CODE_ID_PK \= (SELECT PK FROM JH_WS02_CODE_LIST WITH(NOLOCK) WHERE CODE_ID \= '$$PARAM_API_CODE$$') FOR JSON AUTO,ROOT('JH_WS02_CODE_IP_RELATION')) AS 'Idx2'\n\tEND\nELSE\n\tBEGIN\n\t\tSELECT (SELECT * FROM JH_WS02_FLOW_IP_RELATION WITH(NOLOCK) WHERE FLOW_ID_PK \= (SELECT PK FROM JH_WS02_FLOW_LIST WITH(NOLOCK) WHERE FLOW_ID \= '$$PARAM_API_CODE$$') FOR JSON AUTO,ROOT('JH_WS02_FLOW_IP_RELATION')) AS 'Idx2'\n\tEND
SYS_EXPORT_GETOBJ13=IF '$$PARAM_CODE_TYPE$$' \= 'CODE'\n\tBEGIN\n\t\tSELECT (SELECT * FROM JH_WS02_CODE_WS_RELATION WITH(NOLOCK) WHERE CODE_ID_PK \= (SELECT PK FROM JH_WS02_CODE_LIST WITH(NOLOCK) WHERE CODE_ID \= '$$PARAM_API_CODE$$') FOR JSON AUTO,ROOT('JH_WS02_CODE_WS_RELATION')) AS 'Idx3'\n\tEND\nELSE\n\tBEGIN\n\t\tSELECT (SELECT * FROM JH_WS02_FLOW_WS_RELATION WITH(NOLOCK) WHERE FLOW_ID_PK \= (SELECT PK FROM JH_WS02_FLOW_LIST WITH(NOLOCK) WHERE FLOW_ID \= '$$PARAM_API_CODE$$') FOR JSON AUTO,ROOT('JH_WS02_FLOW_WS_RELATION')) AS 'Idx3'\n\tEND
SYS_EXPORT_GETOBJ14=IF '$$PARAM_CODE_TYPE$$' \= 'CODE'\n\tBEGIN\n\t\tSELECT (SELECT * FROM JH_WS02_CODE_RANGE_ANALYSIS WITH(NOLOCK) WHERE CODE_ID_PK \= (SELECT PK FROM JH_WS02_CODE_LIST WITH(NOLOCK) WHERE CODE_ID \= '$$PARAM_API_CODE$$') FOR JSON AUTO,ROOT('JH_WS02_CODE_RANGE_ANALYSIS')) AS 'Idx4'\n\tEND\nELSE\n\tBEGIN\n\t\tSELECT (SELECT * FROM JH_WS02_FLOW_RANGE_ANALYSIS WITH(NOLOCK) WHERE FLOW_ID_PK \= (SELECT PK FROM JH_WS02_FLOW_LIST WITH(NOLOCK) WHERE FLOW_ID \= '$$PARAM_API_CODE$$') FOR JSON AUTO,ROOT('JH_WS02_FLOW_RANGE_ANALYSIS')) AS 'Idx4'\n\tEND
SYS_FILE_9000_DIR=Funs/SAP4FileList/Entrances.kjb
SYS_FILE_9000_DIR_UAT_JSON={\n  "Row"\: [\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "cheyli",\n      "GROUP"\: "it",\n      "FILE_SIZE"\: "2.64 KB",\n      "FILE_SIZE_NOFORMAT"\: "270336",\n      "LAST_MOD_FILE_TIME"\: "2020-03-19",\n      "FILE_PATH"\: "/home/ftp/data/X2.0319",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/X2.0319",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "X2.0319",\n      "FM_FILE_NAME"\: "X2.0319",\n      "FOLDER_PATH"\: "/home/ftp/data",\n      "FM_PATH"\: "/home/ftp/data",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "0319",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/X2.0319",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "cheyli",\n      "GROUP"\: "it",\n      "FILE_SIZE"\: "6.56 KB",\n      "FILE_SIZE_NOFORMAT"\: "71744",\n      "LAST_MOD_FILE_TIME"\: "2020-03-19",\n      "FILE_PATH"\: "/home/ftp/data/X90000.0319",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/X90000.0319",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "X90000.0319",\n      "FM_FILE_NAME"\: "X90000.0319",\n      "FOLDER_PATH"\: "/home/ftp/data",\n      "FM_PATH"\: "/home/ftp/data",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "0319",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/X90000.0319",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-r--r--",\n      "number"\: "1",\n      "OWNER_NAME"\: "ftpjhdfm",\n      "GROUP"\: "staff",\n      "FILE_SIZE"\: "1.56 KB",\n      "FILE_SIZE_NOFORMAT"\: "159744",\n      "LAST_MOD_FILE_TIME"\: "2020-04-17",\n      "FILE_PATH"\: "/home/ftp/data/X9A000.0701",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/X9A000.0701",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "X9A000.0701",\n      "FM_FILE_NAME"\: "X9A000.0701",\n      "FOLDER_PATH"\: "/home/ftp/data",\n      "FM_PATH"\: "/home/ftp/data",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "0701",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/X9A000.0701",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "root",\n      "GROUP"\: "guest",\n      "FILE_SIZE"\: "162 B",\n      "FILE_SIZE_NOFORMAT"\: "162",\n      "LAST_MOD_FILE_TIME"\: "2020-04-18",\n      "FILE_PATH"\: "/home/ftp/data/col/form/pcb54r1.1090401.13",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/col/form/pcb54r1.1090401.13",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "pcb54r1.1090401.13",\n      "FM_FILE_NAME"\: "pcb54r1.1090401.13",\n      "FOLDER_PATH"\: "/home/ftp/data/col/form",\n      "FM_PATH"\: "/home/ftp/data/col/form",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "13",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/col/form/pcb54r1.1090401.13",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "root",\n      "GROUP"\: "guest",\n      "FILE_SIZE"\: "0 B",\n      "FILE_SIZE_NOFORMAT"\: "0",\n      "LAST_MOD_FILE_TIME"\: "2020-04-18",\n      "FILE_PATH"\: "/home/ftp/data/col/form/pcb54r1.1090402.13",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/col/form/pcb54r1.1090402.13",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "pcb54r1.1090402.13",\n      "FM_FILE_NAME"\: "pcb54r1.1090402.13",\n      "FOLDER_PATH"\: "/home/ftp/data/col/form",\n      "FM_PATH"\: "/home/ftp/data/col/form",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "13",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/col/form/pcb54r1.1090402.13",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "root",\n      "GROUP"\: "guest",\n      "FILE_SIZE"\: "0 B",\n      "FILE_SIZE_NOFORMAT"\: "0",\n      "LAST_MOD_FILE_TIME"\: "2020-04-18",\n      "FILE_PATH"\: "/home/ftp/data/col/form/pcb54r1.1090403.13",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/col/form/pcb54r1.1090403.13",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "pcb54r1.1090403.13",\n      "FM_FILE_NAME"\: "pcb54r1.1090403.13",\n      "FOLDER_PATH"\: "/home/ftp/data/col/form",\n      "FM_PATH"\: "/home/ftp/data/col/form",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "13",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/col/form/pcb54r1.1090403.13",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "root",\n      "GROUP"\: "guest",\n      "FILE_SIZE"\: "344 B",\n      "FILE_SIZE_NOFORMAT"\: "344",\n      "LAST_MOD_FILE_TIME"\: "2020-04-18",\n      "FILE_PATH"\: "/home/ftp/data/col/form/pcb54r1.13",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/col/form/pcb54r1.13",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "pcb54r1.13",\n      "FM_FILE_NAME"\: "pcb54r1.13",\n      "FOLDER_PATH"\: "/home/ftp/data/col/form",\n      "FM_PATH"\: "/home/ftp/data/col/form",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "13",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/col/form/pcb54r1.13",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "root",\n      "GROUP"\: "guest",\n      "FILE_SIZE"\: "1 B",\n      "FILE_SIZE_NOFORMAT"\: "1",\n      "LAST_MOD_FILE_TIME"\: "2020-04-18",\n      "FILE_PATH"\: "/home/ftp/data/col/form/ps040rPS.13",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/col/form/ps040rPS.13",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "ps040rPS.13",\n      "FM_FILE_NAME"\: "ps040rPS.13",\n      "FOLDER_PATH"\: "/home/ftp/data/col/form",\n      "FM_PATH"\: "/home/ftp/data/col/form",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "13",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/col/form/ps040rPS.13",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "hsiywang",\n      "GROUP"\: "edp",\n      "FILE_SIZE"\: "13.83 MB",\n      "FILE_SIZE_NOFORMAT"\: "1450180608",\n      "LAST_MOD_FILE_TIME"\: "2020-04-06",\n      "FILE_PATH"\: "/home/ftp/data/psg07r2.out",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/psg07r2.out",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "psg07r2.out",\n      "FM_FILE_NAME"\: "psg07r2.out",\n      "FOLDER_PATH"\: "/home/ftp/data",\n      "FM_PATH"\: "/home/ftp/data",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "out",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/psg07r2.out",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-r--r--",\n      "number"\: "1",\n      "OWNER_NAME"\: "ftpjhdfm",\n      "GROUP"\: "staff",\n      "FILE_SIZE"\: "822 B",\n      "FILE_SIZE_NOFORMAT"\: "822",\n      "LAST_MOD_FILE_TIME"\: "2020-04-17",\n      "FILE_PATH"\: "/home/ftp/data/cle34r_90000.0415",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/cle34r_90000.0415",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "cle34r_90000.0415",\n      "FM_FILE_NAME"\: "cle34r_90000.0415",\n      "FOLDER_PATH"\: "/home/ftp/data",\n      "FM_PATH"\: "/home/ftp/data",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "0415",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/cle34r_90000.0415",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "root",\n      "GROUP"\: "guest",\n      "FILE_SIZE"\: "808 B",\n      "FILE_SIZE_NOFORMAT"\: "808",\n      "LAST_MOD_FILE_TIME"\: "2020-04-17",\n      "FILE_PATH"\: "/home/ftp/data/cle34r_9A000.0415",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/cle34r_9A000.0415",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "cle34r_9A000.0415",\n      "FM_FILE_NAME"\: "cle34r_9A000.0415",\n      "FOLDER_PATH"\: "/home/ftp/data",\n      "FM_PATH"\: "/home/ftp/data",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "0415",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/cle34r_9A000.0415",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "kao",\n      "GROUP"\: "it",\n      "FILE_SIZE"\: "5.06 KB",\n      "FILE_SIZE_NOFORMAT"\: "518144",\n      "LAST_MOD_FILE_TIME"\: "2020-03-26",\n      "FILE_PATH"\: "/home/ftp/data/UpL11_1090309.txt",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/UpL11_1090309.txt",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "UpL11_1090309.txt",\n      "FM_FILE_NAME"\: "UpL11_1090309.txt",\n      "FOLDER_PATH"\: "/home/ftp/data",\n      "FM_PATH"\: "/home/ftp/data",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "txt",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/UpL11_1090309.txt",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "kao",\n      "GROUP"\: "it",\n      "FILE_SIZE"\: "1.69 KB",\n      "FILE_SIZE_NOFORMAT"\: "173056",\n      "LAST_MOD_FILE_TIME"\: "2020-03-26",\n      "FILE_PATH"\: "/home/ftp/data/UpL11_1090319.txt",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/UpL11_1090319.txt",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "UpL11_1090319.txt",\n      "FM_FILE_NAME"\: "UpL11_1090319.txt",\n      "FOLDER_PATH"\: "/home/ftp/data",\n      "FM_PATH"\: "/home/ftp/data",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "txt",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/UpL11_1090319.txt",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "kao",\n      "GROUP"\: "it",\n      "FILE_SIZE"\: "5.34 KB",\n      "FILE_SIZE_NOFORMAT"\: "546816",\n      "LAST_MOD_FILE_TIME"\: "2020-04-13",\n      "FILE_PATH"\: "/home/ftp/data/UpL11_1090408.txt",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/UpL11_1090408.txt",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "UpL11_1090408.txt",\n      "FM_FILE_NAME"\: "UpL11_1090408.txt",\n      "FOLDER_PATH"\: "/home/ftp/data",\n      "FM_PATH"\: "/home/ftp/data",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "txt",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/UpL11_1090408.txt",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "kao",\n      "GROUP"\: "it",\n      "FILE_SIZE"\: "1.69 KB",\n      "FILE_SIZE_NOFORMAT"\: "177209344",\n      "LAST_MOD_FILE_TIME"\: "2020-04-16",\n      "FILE_PATH"\: "/home/ftp/data/UpL11_1090414.txt",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/UpL11_1090414.txt",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "UpL11_1090414.txt",\n      "FM_FILE_NAME"\: "UpL11_1090414.txt",\n      "FOLDER_PATH"\: "/home/ftp/data",\n      "FM_PATH"\: "/home/ftp/data",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "txt",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/UpL11_1090414.txt",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-rw-rw-",\n      "number"\: "1",\n      "OWNER_NAME"\: "kao",\n      "GROUP"\: "it",\n      "FILE_SIZE"\: "3.09 KB",\n      "FILE_SIZE_NOFORMAT"\: "316416",\n      "LAST_MOD_FILE_TIME"\: "2020-04-16",\n      "FILE_PATH"\: "/home/ftp/data/UpL11_1090415.txt",\n      "FILE_TEXT_PATH"\: "/home/ftp/data/UpL11_1090415.txt",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "UpL11_1090415.txt",\n      "FM_FILE_NAME"\: "UpL11_1090415.txt",\n      "FOLDER_PATH"\: "/home/ftp/data",\n      "FM_PATH"\: "/home/ftp/data",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "txt",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data/UpL11_1090415.txt",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-r--r--",\n      "number"\: "1",\n      "OWNER_NAME"\: "ftpjhdfm",\n      "GROUP"\: "staff",\n      "FILE_SIZE"\: "822 B",\n      "FILE_SIZE_NOFORMAT"\: "822",\n      "LAST_MOD_FILE_TIME"\: "2020-04-17",\n      "FILE_PATH"\: "/home/ftp/data//cle34r_90000.0415",\n      "FILE_TEXT_PATH"\: "/home/ftp/data//cle34r_90000.0415",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "cle34r_90000.0415",\n      "FM_FILE_NAME"\: "cle34r_90000.0415",\n      "FOLDER_PATH"\: "/home/ftp/data/",\n      "FM_PATH"\: "/home/ftp/data/",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "0415",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data//cle34r_90000.0415",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    },\n    {\n      "attributes"\: "-rw-r--r--",\n      "number"\: "1",\n      "OWNER_NAME"\: "ftpjhdfm",\n      "GROUP"\: "staff",\n      "FILE_SIZE"\: "1.56 KB",\n      "FILE_SIZE_NOFORMAT"\: "159744",\n      "LAST_MOD_FILE_TIME"\: "2020-04-17",\n      "FILE_PATH"\: "/home/ftp/data//X9A000.0701",\n      "FILE_TEXT_PATH"\: "/home/ftp/data//X9A000.0701",\n      "FM_LIST_PK"\: "56275",\n      "FM_REAL_ROOT_RECORD"\: "9000",\n      "FILE_NAME"\: "X9A000.0701",\n      "FM_FILE_NAME"\: "X9A000.0701",\n      "FOLDER_PATH"\: "/home/ftp/data/",\n      "FM_PATH"\: "/home/ftp/data/",\n      "TYPE"\: "file",\n      "IS_READ"\: true,\n      "IS_WRITE"\: true,\n      "FILE_EXTENSION"\: "0701",\n      "FM_TEXT_REAL_PATH"\: "/home/ftp/data//X9A000.0701",\n      "CONTROL_BTN_UPLOAD"\: "Y",\n      "CONTROL_BTN_DOWNLOAD"\: "Y",\n      "CONTROL_BTN_CREATE_FOLDER"\: "N",\n      "CONTROL_BTN_DELETE_FOLDER"\: "N",\n      "CONTROL_BTN_RENAME"\: "N",\n      "CONTROL_BTN_COPY_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_FOLDER"\: "N",\n      "CONTROL_BTN_MOVE_MENU_FOLDER"\: "N",\n      "CONTROL_BTN_SHARE"\: "N",\n      "CONTROL_BTN_ZIP"\: "N"\n    }\n  ],\n  "action_code"\: "SYS_FILE_9000_DIR",\n  "RETURN_CODE"\: "0",\n  "RETURN_MSG"\: "執行成功",\n  "RETURN_LOGURL"\: "/JHDFM/EAP-7.0.0/standalone/log/pdi/B3081801_SYS_FILE_9000_DIR_20200420100230194.log",\n  "RETURN_LOGPK"\: "",\n  "totalProperty"\: 18,\n  "success"\: true,\n  "RETURN_DETAIL_MSG"\: "[]",\n  "4GE_RETURN_CODE"\: "",\n  "4GE_RETURN_MSG"\: ""\n}
SYS_FILE_CHECK_LINK_RULE=PLUGINS/SYS_FILE/CHECK_LINK_RULE/BASE_MODEL.kjb
SYS_FILE_CHECK_RULE_END_DT=\n\nBEGIN TRY\nDECLARE @TOTAL_DELETE NVARCHAR(50)\n\n        --統計刪除筆數\n        SELECT @TOTAL_DELETE \= \n        (\n        SELECT '總共刪除'+CONVERT(VARCHAR(19),COUNT (PK))+'筆'         \n        FROM JH_WS02_FM_RULE\n        WHERE FM_RULE_END_DT IS NOT NULL\n        AND FM_DATA_TYPE \= '$$PARAM_DATA_TYPE$$' \n        AND FM_RULE_END_DT < GETDATE()\n        )\n\n        \n        --刪除資料\n        DELETE FROM JH_WS02_FM_RULE\n        WHERE FM_RULE_END_DT IS NOT NULL\n        AND FM_DATA_TYPE \= '$$PARAM_DATA_TYPE$$'  \n        AND FM_RULE_END_DT < GETDATE()\n\n\n        --顯示刪除筆數\n        SELECT @RETURN_CODE \= 0,@RETURN_MSG\=@TOTAL_DELETE\n\n        SELECT @RETURN_CODE \= RETURN_CODE\n            ,@RETURN_MSG \= RETURN_MSG \n            ,@RETURN_TEST \= \n                        (\n                        SELECT ProcPK\n                            ,hashValues\n                            ,RETURN_CODE\n                            ,RETURN_MSG\n                            ,DATA_UNIQUE_KEY\n                            ,DATA_ACTION_TYPE\n                            ,MEMO\n                        FROM MEM_API_RESULT\n                        WHERE hashValues \= @FROM_OUTSIDE\n                        FOR JSON AUTO\n                        )\n        FROM MEM_API_RESULT\n        WHERE hashValues \= @FROM_OUTSIDE\nEND TRY\n\nBEGIN CATCH\n    SELECT @RETURN_CODE \= ERROR_NUMBER()\n        , @RETURN_MSG\= ERROR_MESSAGE()\n        ,@RETURN_TEST \= (\n            SELECT *\n            FROM (\n                SELECT '${LOGPK}' AS ProcPK\n                    ,@FROM_OUTSIDE AS hashValues\n                    ,ERROR_NUMBER() AS RETURN_CODE\n                    ,ERROR_MESSAGE() AS RETURN_MSG\n                    ,'$$PK$$' AS DATA_UNIQUE_KEY\n                    ,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n                    ,'$$MEMO$$' AS MEMO\n                ) AS A\n            FOR JSON AUTO\n            )\nEND CATCH\n\n
SYS_FILE_COPY_FOLDER=PLUGINS/SYS_FILE/COPY_FOLDER/BASE_MODEL.kjb
SYS_FILE_CREATE_FOLDER=PLUGINS/SYS_FILE/CREATE_FOLDER/CREATE_FOLDER.kjb
SYS_FILE_DELETE=PLUGINS/SYS_FILE/DELETE/DELETE_MAIN.kjb
SYS_FILE_DELETE_FOLDER=PLUGINS/SYS_FILE/DELETE_FLODER/BASE_MODEL.kjb
SYS_FILE_DIR=PLUGINS/SYS_FILE/DIR/DIR_MAIN.kjb
SYS_FILE_DOWNLOAD=PLUGINS/SYS_FILE/DOWNLOAD/BASE_MODEL.kjb
SYS_FILE_MODIFY_FOLDER=PLUGINS/SYS_FILE/MODIFY_FOLDER/MODIFY_FOLDER.kjb
SYS_FILE_MOVE_FOLDER=PLUGINS/SYS_FILE/MOVE_FOLDER/BASE_MODEL.kjb
SYS_FILE_SEARCH=PLUGINS\\SYS_FILE\\SEARCH\\SEARCH_MAIN.kjb
SYS_FILE_SHARE=PLUGINS/SYS_FILE/SHARE/SHARE_MAIN.kjb
SYS_FILE_SYNCHRONIZE_DIR=PLUGINS/SYS_FILE/SYNCHRONIZE_DIR/SYNCHRONIZE_DIR_MAIN.kjb
SYS_FILE_TO_TABLE=PLUGINS/SYS_REPORT2/FILE_TO_TABLE_MAIN.kjb
SYS_FILE_UPLOAD=PLUGINS/SYS_FILE/UPLOAD/UPLOAD_MAIN.kjb
SYS_FILE_ZIP=PLUGINS/SYS_FILE/COPY_BACKUP/COPY_BACKUP_MAIN.kjb
SYS_FILE_ZIP_FOLDER=PLUGINS/SYS_FILE/ZIP/BASE_MODEL.kjb
SYS_FM_DEP_CUD=/*  UPDATED AT 20200908\n 1. DATA_CHANGE_LOG 追加 ADD_USER_ID、ADD_USER_COMPANY_ID、ADD_DT 資訊\n*/\nBEGIN TRY\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n\tBEGIN\n\t\t/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t/*  這一段 update 可用noli的excel 檔中的  INSERT 產生器，來產生對應的欄位及語法  */\n\t\tINSERT INTO JH_WS02_FM_DEP_LIST (\n\t\t\tFM_PARENT_PK\n\t\t\t,FM_TEXT\n\t\t\t,FM_LEAF\n\t\t\t,FM_EXPANDABLE\n\t\t\t,FM_SET_POINT\n\t\t\t,FM_DEP_CODE\n\t\t\t,FM_DEP_TYPE\n\t\t\t,FM_LV\n\t\t\t,FM_REAL_PATH\n\t\t\t,FM_HELP\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tVALUES (\n\t\t\t(CASE WHEN '$$FM_PARENT_PK$$' \= 'N' THEN NULL ELSE '$$FM_PARENT_PK$$' END)\n\t\t\t,'$$FM_TEXT$$'\n\t\t\t,'$$FM_LEAF$$'\n\t\t\t,'$$FM_EXPANDABLE$$'\n\t\t\t,'$$FM_SET_POINT$$'\n\t\t\t,'$$FM_DEP_CODE$$'\n\t\t\t,'$$FM_DEP_TYPE$$'\n\t\t\t,(CASE WHEN '$$FM_PARENT_PK$$' \= 'N' THEN '0' ELSE (CAST('$$FM_LV$$' AS INT) + 1)  END)\n\t\t\t,'$$FM_REAL_PATH$$/' + CONVERT(VARCHAR, IDENT_CURRENT('JH_WS02_FM_DEP_LIST'))\n\t\t\t,'$$FM_HELP$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,0\n\t\t\t);\n\n\t\tUPDATE JH_WS02_FM_DEP_LIST WITH (ROWLOCK)\n\t\tSET FM_EXPANDABLE \= 'true'\n\t\tWHERE PK \= '$$PK$$';\n\n\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n            ,ADD_USER_COMPANY_ID\n            ,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$FunctionID$$'\n\t\t\t,'insert'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('JH_WS02_FM_DEP_LIST') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n            ,'${PARAM_COMPANY}'\n            ,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'JH_WS02_FM_DEP_LIST' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t);\n\n\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\tINSERT INTO LOG_JH_WS02_FM_DEP_LIST (\n\t\t\tFUNC_ID\n\t\t\t,CRUD_STATE\n\t\t\t,PK\n\t\t\t,FM_PARENT_PK\n\t\t\t,FM_TEXT\n\t\t\t,FM_LEAF\n\t\t\t,FM_EXPANDABLE\n\t\t\t,FM_SET_POINT\n\t\t\t,FM_DEP_CODE\n\t\t\t,FM_DEP_TYPE\n\t\t\t,FM_LV\n\t\t\t,FM_REAL_PATH\n\t\t\t,FM_HELP\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,DATA_STATUS\n\t\t\t,DATA_CHANGE_LOG_ID\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$FunctionID$$'\n\t\t\t,'C'\n\t\t\t,'$$PK$$'\n\t\t\t,(CASE WHEN '$$FM_PARENT_PK$$' \= 'N' THEN NULL ELSE '$$FM_PARENT_PK$$' END)\n\t\t\t,'$$FM_TEXT$$'\n\t\t\t,'$$FM_LEAF$$'\n\t\t\t,'$$FM_EXPANDABLE$$'\n\t\t\t,'$$FM_SET_POINT$$'\n\t\t\t,'$$FM_DEP_CODE$$'\n\t\t\t,'$$FM_DEP_TYPE$$'\n\t\t\t,(CASE WHEN '$$FM_PARENT_PK$$' \= 'N' THEN '0' ELSE (CAST('$$FM_LV$$' AS INT) + 1)  END)\n\t\t\t,'$$FM_REAL_PATH$$'\n\t\t\t,'$$FM_HELP$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'0'\n\t\t\t,IDENT_CURRENT('DATA_CHANGE_LOG')\n\t\t\t);\n\n\t\t/* 1.4 Action Return ，此記憶體表格(MEM_API_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n\t\tINSERT INTO MEM_API_RESULT (\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,'$$PK$$'\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN\n\t\t\t/* 2.1 DATA_CHANGE_LOG */\n\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\tFUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t,ADD_USER_ID\n\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t,ADD_DT\n\t\t\t\t,SessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,PROC_TARGET\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'$$FunctionID$$'\n\t\t\t\t,'delete'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK_COL 流水號欄位 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'JH_WS02_FM_DEP_LIST' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t);\n\n\t\t\t/* 2.2 DATA Detail LOG (before modified) */\n\t\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\tINSERT INTO LOG_JH_WS02_FM_DEP_LIST(\n\t\t\t\t\tFUNC_ID\n\t\t\t\t\t,CRUD_STATE\n\t\t\t\t\t,PK\n\t\t\t\t\t,FM_PARENT_PK\n\t\t\t\t\t,FM_TEXT\n\t\t\t\t\t,FM_LEAF\n\t\t\t\t\t,FM_EXPANDABLE\n\t\t\t\t\t,FM_SET_POINT\n\t\t\t\t\t,FM_DEP_CODE\n\t\t\t\t\t,FM_DEP_TYPE\n\t\t\t\t\t,FM_LV\n\t\t\t\t\t,FM_REAL_PATH\n\t\t\t\t\t,FM_HELP\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t,DEL_DT\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t,DATA_CHANGE_LOG_ID\n\t\t\t\t\t)\n\t\t\t\tSELECT '$$FunctionID$$' AS FUNC_ID\n\t\t\t\t\t,'D' AS CRUD_STATE\n\t\t\t\t\t,PK\n\t\t\t\t\t,FM_PARENT_PK\n\t\t\t\t\t,FM_TEXT\n\t\t\t\t\t,FM_LEAF\n\t\t\t\t\t,FM_EXPANDABLE\n\t\t\t\t\t,FM_SET_POINT\n\t\t\t\t\t,FM_DEP_CODE\n\t\t\t\t\t,FM_DEP_TYPE\n\t\t\t\t\t,FM_LV\n\t\t\t\t\t,FM_REAL_PATH\n\t\t\t\t\t,FM_HELP\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t,DEL_DT\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t\tFROM JH_WS02_FM_DEP_LIST WITH (NOLOCK)\n\t\t\t\tWHERE PK \= '$$PK$$';\n\n\t\t\t\t/* 2.3 Action Return */\n\t\t\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\tProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'0'\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t,'$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\n\t\t\t/* 2.5 功能主要異動 Table */\n\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t/*START\: 刪了兒子之後，才去檢查爸爸還有沒有兒子，如果沒有兒子，就把爸爸的EXPANDABLE關掉*/\n\t\t\tIF (\n\t\t\t\t\tSELECT COUNT(*)\n\t\t\t\t\tFROM JH_WS02_FM_DEP_LIST WITH (NOLOCK)\n\t\t\t\t\tWHERE fm_PARENT_pK IN (\n\t\t\t\t\t\t\tSELECT fm_PARENT_pK\n\t\t\t\t\t\t\tFROM JH_WS02_FM_DEP_LIST\n\t\t\t\t\t\t\tWHERE pk \= '$$PK$$'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t) \= 1\n\t\t\tBEGIN\n\t\t\t\tUPDATE JH_WS02_FM_DEP_LIST WITH (ROWLOCK)\n\t\t\t\tSET FM_EXPANDABLE \= 'false'\n\t\t\t\tWHERE PK \= (\n\t\t\t\t\t\tSELECT fm_PARENT_pK\n\t\t\t\t\t\tFROM JH_WS02_FM_DEP_LIST\n\t\t\t\t\t\tWHERE pk \= '$$PK$$'\n\t\t\t\t\t\t);\n\n\t\t\t\t/* START\: 刪除節點連同子項一併刪除*/\n\t\t\t\tWITH HH (PK, FM_PARENT_PK, FM_TEXT, FM_REAL_PATH, level) AS\n\t\t\t\t(\n\t\t\t\t\tSELECT PK, FM_PARENT_PK, FM_TEXT, FM_REAL_PATH, 0\n\t\t\t\t\tFROM JH_WS02_FM_DEP_LIST\n\t\t\t\t\tWHERE FM_DEP_TYPE \= '$$FM_DEP_TYPE$$' AND PK \= '$$PK$$'\n\t\t\t\t\t/* 替換介面傳遞的參數 */\n\n\t\t\t\t\tUNION ALL\n\n\t\t\t\t\tSELECT B.PK, B.FM_PARENT_PK, B.FM_TEXT, B.FM_REAL_PATH , level + 1\n\t\t\t\t\tFROM JH_WS02_FM_DEP_LIST AS B\n\t\t\t\t\tINNER JOIN HH ON HH.PK \= B.FM_PARENT_PK\n\t\t\t\t)\n\t\t\t\tDELETE JH_WS02_FM_DEP_LIST WHERE PK IN (SELECT DISTINCT PK FROM HH);\n\t\t\t\t/* END\: 刪除節點連同子項一併刪除*/\n\t\t\tEND\n\t\t\tELSE\n\t\t\tBEGIN\n\n\t\t\t    /* START\: 刪除節點連同子項一併刪除*/\n\t\t\t\tWITH HH (PK, FM_PARENT_PK, FM_TEXT, FM_REAL_PATH, level) AS\n\t\t\t\t(\n\t\t\t\t\tSELECT PK, FM_PARENT_PK, FM_TEXT, FM_REAL_PATH, 0\n\t\t\t\t\tFROM JH_WS02_FM_DEP_LIST\n\t\t\t\t\tWHERE FM_DEP_TYPE \= '$$FM_DEP_TYPE$$' AND PK \= '$$PK$$'\n\t\t\t\t\t/* 替換介面傳遞的參數 */\n\n\t\t\t\t\tUNION ALL\n\n\t\t\t\t\tSELECT B.PK, B.FM_PARENT_PK, B.FM_TEXT, B.FM_REAL_PATH , level + 1\n\t\t\t\t\tFROM JH_WS02_FM_DEP_LIST AS B\n\t\t\t\t\tINNER JOIN HH ON HH.PK \= B.FM_PARENT_PK\n\t\t\t\t)\n\t\t\t\tDELETE JH_WS02_FM_DEP_LIST WHERE PK IN (SELECT DISTINCT PK FROM HH);\n\t\t\t\t/* END\: 刪除節點連同子項一併刪除*/\n\t\t\tEND;\n\t\t\t\t\t/*END\: 刪了兒子之後，才去檢查爸爸還有沒有兒子，如果沒有兒子，就把爸爸的EXPANDABLE關掉*/\n\t\tEND\n\t\tELSE\n\t\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\t\t\tBEGIN\n\t\t\t\t/* 3.1 DATA_CHANGE_LOG */\n\t\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\t\tFUNC_ID\n\t\t\t\t\t,PROC_TYPE\n\t\t\t\t\t,USER_ID\n\t\t\t\t\t,DATA_NO\n\t\t\t\t\t,EVENT_DT\n\t\t\t\t\t,MEMO\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,SessionID\n\t\t\t\t\t,ProcPK\n\t\t\t\t\t,PROC_TARGET\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'$$FunctionID$$'\n\t\t\t\t\t,'update'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t\t,'${LOGPK}'\n\t\t\t\t\t,'JH_WS02_FM_DEP_LIST' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t);\n\n\t\t\t\tIF EXISTS (\n\t\t\t\t\t\t/* 手動修改 */\n\t\t\t\t\t\tSELECT *\n\t\t\t\t\t\tFROM JH_WS02_FM_DEP_LIST WITH (NOLOCK)\n\t\t\t\t\t\tWHERE PK \= '$$PK$$'\n\t\t\t\t\t\t\tAND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t\t\t)\n\t\t\t\t\t/* 手動修改 - End */\n\t\t\t\tBEGIN\n\t\t\t\t\t/* 3.2 DATA Detail LOG (before modified) */\n\t\t\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\tINSERT INTO LOG_JH_WS02_FM_DEP_LIST (\n\t\t\t\t\t\tFUNC_ID\n\t\t\t\t\t\t,CRUD_STATE\n\t\t\t\t\t\t,PK\n\t\t\t\t\t\t,FM_PARENT_PK\n\t\t\t\t\t\t,FM_TEXT\n\t\t\t\t\t\t,FM_LEAF\n\t\t\t\t\t\t,FM_EXPANDABLE\n\t\t\t\t\t\t,FM_SET_POINT\n\t\t\t\t\t\t,FM_DEP_CODE\n\t\t\t\t\t\t,FM_DEP_TYPE\n\t\t\t\t\t\t,FM_LV\n\t\t\t\t\t\t,FM_REAL_PATH\n\t\t\t\t\t\t,FM_HELP\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t\t,DEL_DT\n\t\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t\t,DATA_CHANGE_LOG_ID\n\t\t\t\t\t\t)\n\t\t\t\t\tSELECT '$$FunctionID$$' AS FUNC_ID\n\t\t\t\t\t\t,'U' AS CRUD_STATE\n\t\t\t\t\t\t,PK\n\t\t\t\t\t\t,FM_PARENT_PK\n\t\t\t\t\t\t,FM_TEXT\n\t\t\t\t\t\t,FM_LEAF\n\t\t\t\t\t\t,FM_EXPANDABLE\n\t\t\t\t\t\t,FM_SET_POINT\n\t\t\t\t\t\t,FM_DEP_CODE\n\t\t\t\t\t\t,FM_DEP_TYPE\n\t\t\t\t\t\t,FM_LV\n\t\t\t\t\t\t,FM_REAL_PATH\n\t\t\t\t\t\t,FM_HELP\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t\t,DEL_DT\n\t\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t\t,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t\t\tFROM JH_WS02_FM_DEP_LIST\n\t\t\t\t\tWHERE PK \= '$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t;\n\n\t\t\t\t\t/* 3.3 Action Return */\n\t\t\t\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t\tProcPK\n\t\t\t\t\t\t,hashValues\n\t\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t\t,MEMO\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES (\n\t\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t\t,'0'\n\t\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t\t,'$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t,'U'\n\t\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t\t);\n\t\t\t\tEND\n\t\t\t\tELSE\n\t\t\t\tBEGIN\n\t\t\t\t\t/* 3.4 Action Return */\n\t\t\t\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t\tProcPK\n\t\t\t\t\t\t,hashValues\n\t\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t\t,MEMO\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES (\n\t\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t\t,'-1'\n\t\t\t\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t\t\t\t,'$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t,'U'\n\t\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t\t);\n\t\t\t\tEND\n\n\t\t\t\t/* 3.5 功能主要異動 Table */\n\t\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\tUPDATE JH_WS02_FM_DEP_LIST WITH (ROWLOCK)\n\t\t\t\tSET FM_PARENT_PK \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$FM_PARENT_PK$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(FM_PARENT_PK, '0') \= '$$FM_PARENT_PK$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$FM_PARENT_PK$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE FM_PARENT_PK\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$FM_PARENT_PK$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE FM_PARENT_PK\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_TEXT \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_TEXT$$', 1, 100) \= SUBSTRING('\#NO_DATA\#', 1, 100)\n\t\t\t\t\t\t\t\tTHEN FM_TEXT\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_TEXT$$', 1, 100)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_LEAF \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_LEAF$$', 1, 10) \= SUBSTRING('\#NO_DATA\#', 1, 10)\n\t\t\t\t\t\t\t\tTHEN FM_LEAF\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_LEAF$$', 1, 10)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_EXPANDABLE \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_EXPANDABLE$$', 1, 10) \= SUBSTRING('\#NO_DATA\#', 1, 10)\n\t\t\t\t\t\t\t\tTHEN FM_EXPANDABLE\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_EXPANDABLE$$', 1, 10)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_SET_POINT \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_SET_POINT$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN FM_SET_POINT\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_SET_POINT$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_DEP_CODE \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_DEP_CODE$$', 1, 100) \= SUBSTRING('\#NO_DATA\#', 1, 100)\n\t\t\t\t\t\t\t\tTHEN FM_DEP_CODE\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_DEP_CODE$$', 1, 100)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_DEP_TYPE \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_DEP_TYPE$$', 1, 100) \= SUBSTRING('\#NO_DATA\#', 1, 100)\n\t\t\t\t\t\t\t\tTHEN FM_DEP_TYPE\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_DEP_TYPE$$', 1, 100)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_LV \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_LV$$', 1, 100) \= SUBSTRING('\#NO_DATA\#', 1, 100)\n\t\t\t\t\t\t\t\tTHEN FM_LV\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_LV$$', 1, 100)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_REAL_PATH \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_REAL_PATH$$', 1, 4000) \= SUBSTRING('\#NO_DATA\#', 1, 4000)\n\t\t\t\t\t\t\t\tTHEN FM_REAL_PATH\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_REAL_PATH$$', 1, 4000)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_HELP \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_HELP$$', 1, 4000) \= SUBSTRING('\#NO_DATA\#', 1, 4000)\n\t\t\t\t\t\t\t\tTHEN FM_HELP\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_HELP$$', 1, 4000)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,DATA_STATUS \= '0'\n\t\t\t\tWHERE PK \= '$$PK$$';\n\n\t\t\t\t/**修改爸爸的兒子們之節點說明，孫子則不用修改**/\n\t\t\t\tUPDATE JH_WS02_FM_DEP_LIST WITH (ROWLOCK)\n\t\t\t\tSET FM_HELP \= '屬於' + (\n\t\t\t\t\t\tSELECT FM_TEXT\n\t\t\t\t\t\tFROM JH_WS02_FM_DEP_LIST\n\t\t\t\t\t\tWHERE PK \= '$$PK$$'\n\t\t\t\t\t\t) + '目錄下'\n\t\t\t\tWHERE FM_PARENT_PK \= '$$PK$$';\n\t\t\t\t\t/**/\n\t\t\tEND\n\n\tSELECT @RETURN_CODE \= RETURN_CODE\n\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\tFROM MEM_API_RESULT\n\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\tFOR JSON AUTO\n\t\t\t)\n\tFROM MEM_API_RESULT\n\tWHERE hashValues \= @FROM_OUTSIDE\nEND TRY\n\nBEGIN CATCH\n\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t,'$$PK$$' AS DATA_UNIQUE_KEY\n\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t) AS A\n\t\t\tFOR JSON AUTO\n\t\t\t)\nEND CATCH
SYS_FM_DEP_LIST=SELECT *,\n\n  (SELECT COUNT(*)\n   FROM JH_WS02_FM_DEP_LIST A WITH (NOLOCK)/* 也要顯示未對應到的節點 */\n   LEFT OUTER JOIN JH_WS02_VL_LIST B ON A.FM_DEP_CODE \= B.L_ORG_CODE AND A.FM_DEP_TYPE \= B.L_ORG_TYPE\n   WHERE A.FM_DEP_TYPE \= '$$FM_DEP_TYPE$$'\n     AND (A.DATA_STATUS \= '$$DATA_STATUS$$'\n          OR '$$DATA_STATUS$$' \= 'ALL') ) AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY A.PK) AS RowNum,\n                            A.PK,\n                            A.PK AS id,\n                            A.FM_PARENT_PK,\n                            A.FM_PARENT_PK AS parentId,\n                            A.FM_TEXT,\n                            A.FM_TEXT AS text,\n                            A.FM_LEAF,\n                            A.FM_LEAF AS leaf,\n                            A.FM_EXPANDABLE,\n                            A.FM_EXPANDABLE AS expandable,\n                            A.FM_SET_POINT,\n                            A.FM_DEP_CODE,\n                            A.FM_DEP_TYPE,\n                            A.FM_LV,\n                            B.L_PATH,\n                            B.L_PATH_VL,\n                            A.FM_HELP,\n                            A.ADD_USER_ID,\n                            A.ADD_USER_COMPANY_ID,\n                            A.ADD_DT,\n                            A.LAST_MOD_USER_ID,\n                            A.LAST_MOD_USER_COMPANY_ID,\n                            A.LAST_MOD_DT,\n                            A.DEL_USER_ID,\n                            A.DEL_USER_COMPANY_ID,\n                            A.DEL_DT,\n                            A.DATA_STATUS,\n                            A.FM_EXPANDABLE AS expanded\n   FROM JH_WS02_FM_DEP_LIST A WITH (NOLOCK)/* 也要顯示未對應到的節點 */\n   LEFT OUTER JOIN JH_WS02_VL_LIST B ON A.FM_DEP_CODE \= B.L_ORG_CODE AND A.FM_DEP_TYPE \= B.L_ORG_TYPE\n   WHERE A.FM_DEP_TYPE \= '$$FM_DEP_TYPE$$'\n     AND (A.DATA_STATUS \= '$$DATA_STATUS$$'\n          OR '$$DATA_STATUS$$' \= 'ALL')) AS new1 /*WHERE RowNum > $$start$$\n AND RowNum <\= ($$start$$ + $$limit$$);*/
SYS_FM_PATH=/* Last Version Last Updated by  Last Updated Date Comment； \n\tv2.2.3   Steve   20200720   1. 以 COUNT(*) OVER() 方式解決 2 段子查詢問題\n\tv2.2.3   Min     20200828   1. 增加 @R1_CONDITION 註解說明\n\tv2.2.3   Steve   20201016   1. 調整註解*/\nSELECT *\nFROM (\n\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t,ROW_NUMBER() OVER (\n\t\t\tORDER BY PK_PROP\n\t\t\t) AS RowNum\n\t\t,PK_PROP\n\t\t,COMPANY_ID\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,PROP_ID\n\t\t,JNDI_NAME\n\t\t,ADD_USER_ID\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,ADD_USER_COMPANY_ID\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT\t\t\t/*固定欄位必須輸出，不可移除 */\n\t\t,LAST_MOD_USER_ID\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,LAST_MOD_USER_COMPANY_ID\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT  /*固定欄位必須輸出，不可移除*/\n\t\t,DEL_USER_ID\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,DEL_USER_COMPANY_ID\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t,DATA_STATUS\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\tFROM PROP_MASTER WITH (NOLOCK)\n\tWHERE (\n\t\t\t(DATA_STATUS \= 'ALL' OR 'ALL' \= 'ALL')\n\t\t\tAND\n\t\t\t(PROP_TYPE \= 'PATH')\n\t\t\tAND\n\t\t\t(ENABLED_FLAG \= 'Y')\n\t\t\t) /* 當條件為數值時 */ /* AND (COLUMN1 \= TRY_CONVERT(INT, NULLIF('$$COLUMN1$$','')) OR '$$COLUMN1$$' \= 'ALL') */ /* 當條件為日期時 */ /* AND (COLUMN1 \= TRY_CONVERT(DATETIME, NULLIF('$$COLUMN1$$','')) OR '$$COLUMN1$$' \= 'ALL') */ /* 當條件為數值起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND不易除錯) */ /* 請自行依 SA 規格書調整其大於、大於等於、小於、小於等於       AND (COLUMN1 >\= TRY_CONVERT(INT, NULLIF('$$START$$','')) OR '$$START$$' \= 'ALL')       AND (COLUMN1 <\= TRY_CONVERT(INT, NULLIF('$$END$$','')) OR '$$END$$'   \= 'ALL')    */ /* 當條件為日期起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND不易除錯) */ /* 請自行依 SA 規格書調整其大於、大於等於、小於、小於等於       AND (COLUMN1 >\= TRY_CONVERT(DATETIME, NULLIF('$$START$$','')) OR '$$START$$' \= 'ALL')       AND (COLUMN1 <\= TRY_CONVERT(DATETIME, NULLIF('$$END$$','')) OR '$$END$$'   \= 'ALL')    */\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)
SYS_FM_TASK=/* Last Version\tLast Updated by\t\tLast Updated Date   Comment； \n\tv2.2.3\t\t\tSteve\t\t\t\t20200720\t\t\t1. 以 COUNT(*) OVER() 方式解決 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2 段子查詢問題\n\tv2.2.3\t\t\tMin\t\t\t\t\t20200828\t\t\t1. 增加 @R1_CONDITION 註解說明\n\tv2.2.3\t\t\tSteve\t\t\t\t20201016\t\t\t1. 調整註解*/\n\nSELECT *\nFROM\n(\n    SELECT COUNT(*) OVER() AS totalProperty, \n           ROW_NUMBER() OVER(\n           ORDER BY TASK_IDX) AS RowNum, \n           TASK_IDX, \n           TASK_ID, \n           TASK_NAME, \n           TASK_TARGET, \n           TASK_DESC, \n           IS_DISABLED, \n           ADD_USER_ID,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           ADD_USER_COMPANY_ID,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT,\n\n           /*固定欄位必須輸出，不可移除 */\n\n           LAST_MOD_USER_ID,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           LAST_MOD_USER_COMPANY_ID,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT,\n\n           /*固定欄位必須輸出，不可移除 */\n\n           DEL_USER_ID,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           DEL_USER_COMPANY_ID,\n\n           /*固定欄位必須輸出，不可移除*/\n\n           CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT,\n\n           /*固定欄位必須輸出，不可移除 */\n\n           DATA_STATUS\n\n    /*固定欄位必須輸出，不可移除*/\n\n    FROM TASK_FLOW_MASTER WITH(NOLOCK)\n    WHERE(DATA_STATUS \= 'ALL'\n          OR 'ALL' \= 'ALL')\n\n/* 當條件為數值時 */\n/* AND (COLUMN1 \= TRY_CONVERT(INT, NULLIF('$$COLUMN1$$','')) OR '$$COLUMN1$$' \= 'ALL') */\n/* 當條件為日期時 */\n/* AND (COLUMN1 \= TRY_CONVERT(DATETIME, NULLIF('$$COLUMN1$$','')) OR '$$COLUMN1$$' \= 'ALL') */\n/* 當條件為數值起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND不易除錯) */\n/* 請自行依 SA 規格書調整其大於、大於等於、小於、小於等於\n\t\t   AND (COLUMN1 >\= TRY_CONVERT(INT, NULLIF('$$START$$','')) OR '$$START$$' \= 'ALL')\n\t\t   AND (COLUMN1 <\= TRY_CONVERT(INT, NULLIF('$$END$$','')) OR '$$END$$'   \= 'ALL')\n\t\t*/\n/* 當條件為日期起迄範圍時, 則依起迄條件分開寫(因為介面條件,可能只輸入起或迄, 使用BETWEEN AND不易除錯) */\n/* 請自行依 SA 規格書調整其大於、大於等於、小於、小於等於\n\t\t   AND (COLUMN1 >\= TRY_CONVERT(DATETIME, NULLIF('$$START$$','')) OR '$$START$$' \= 'ALL')\n\t\t   AND (COLUMN1 <\= TRY_CONVERT(DATETIME, NULLIF('$$END$$','')) OR '$$END$$'   \= 'ALL')\n\t\t*/\n\n) AS new1\n WHERE RowNum > $$start$$ AND RowNum <\= ($$start$$ + $$limit$$);
SYS_Fn01A004_COPY=IF '$$PARAM_SWITCH_VALUE$$' \= 'DELALL'\nBEGIN\n\n\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\tFUNC_ID\n\t\t,PROC_TYPE\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,SessionID\n\t\t,ProcPK\n\t\t,PROC_TARGET\n\t\t)\n\tVALUES (\n\t\t'${PARAM_FUNC_ID}'\n\t\t,'delete'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t,''\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'${PARAM_COMPANY}'\n\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t,'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'JH_WS02_CODE_LIST' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\tFUNC_ID\n\t\t,PROC_TYPE\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,SessionID\n\t\t,ProcPK\n\t\t,PROC_TARGET\n\t\t)\n\t\tSELECT \n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'delete'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,FORMAT_IDX /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,''\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'JH_WS02_CODE_FORMAT_LIST'\n\t\tFROM JH_WS02_CODE_FORMAT_LIST\n\t\tWHERE CODE_ID_PK \= '$$PK$$';\n\n\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\tFUNC_ID\n\t\t,PROC_TYPE\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,SessionID\n\t\t,ProcPK\n\t\t,PROC_TARGET\n\t\t)\n\t\tSELECT \n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'delete'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,FORMAT_IDX /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,''\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'JH_WS02_CODE_IP_RELATION'\n\t\tFROM JH_WS02_CODE_IP_RELATION\n\t\tWHERE CODE_ID_PK \= '$$PK$$';\n\n\n\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\tFUNC_ID\n\t\t,PROC_TYPE\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,SessionID\n\t\t,ProcPK\n\t\t,PROC_TARGET\n\t\t)\n\t\tSELECT \n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'delete'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,CW_IDX /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,''\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'JH_WS02_CODE_WS_RELATION'\n\t\tFROM JH_WS02_CODE_WS_RELATION\n\t\tWHERE CODE_ID_PK \= '$$PK$$';\n\n\n\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\tFUNC_ID\n\t\t,PROC_TYPE\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,SessionID\n\t\t,ProcPK\n\t\t,PROC_TARGET\n\t\t)\n\t\tSELECT \n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'delete'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,FORMAT_IDX /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,''\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'JH_WS02_CODE_RANGE_ANALYSIS'\n\t\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\t\tWHERE CODE_ID_PK \= '$$PK$$';\n\n\n\tDELETE\n\tFROM JH_WS02_CODE_LIST\n\tWHERE PK \= '$$PK$$';\n\n\tDELETE\n\tFROM JH_WS02_CODE_FORMAT_LIST\n\tWHERE CODE_ID_PK \= '$$PK$$';\n\n\tDELETE\n\tFROM JH_WS02_CODE_IP_RELATION\n\tWHERE CODE_ID_PK \= '$$PK$$';\n\n\tDELETE\n\tFROM JH_WS02_CODE_WS_RELATION\n\tWHERE CODE_ID_PK \= '$$PK$$';\n\n\tDELETE\n\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\tWHERE CODE_ID_PK \= '$$PK$$';\nEND\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'COPYADD'\n\tBEGIN\n\t\tINSERT INTO JH_WS02_CODE_LIST (\n\t\t\tCODE_ID\n\t\t\t,API_DESC\n\t\t\t,JNDI_USE\n\t\t\t,EXEC_TYPE\n\t\t\t,ACTION_TYPE\n\t\t\t,SQL_PROP_KEY\n\t\t\t,AUTH_KEY\n\t\t\t,INPUT_FIELD\n\t\t\t,CODE_HELP\n\t\t\t,CODE_TYPE\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,DEL_USER_ID\n\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t,DEL_DT\n\t\t\t,DATA_STATUS\n\t\t\t,URL_VAR_FIELD\n\t\t\t,IS_ENCODE\n\t\t\t,INPUT_ENCODE\n\t\t\t,OUTPUT_ENCODE\n\t\t\t)\n\t\tSELECT '$$CODE_ID$$' AS CODE_ID\n\t\t\t,API_DESC\n\t\t\t,JNDI_USE\n\t\t\t,EXEC_TYPE\n\t\t\t,ACTION_TYPE\n\t\t\t,'$$SQL_PROP_KEY$$' AS SQL_PROP_KEY\n\t\t\t,AUTH_KEY\n\t\t\t,INPUT_FIELD\n\t\t\t,CODE_HELP\n\t\t\t,CODE_TYPE\n\t\t\t,'$$SysUser$$' AS ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,CONVERT(VARCHAR(100), GETDATE(), 120) AS ADD_DT\n\t\t\t,NULL AS LAST_MOD_USER_ID\n\t\t\t,NULL AS LAST_MOD_USER_COMPANY_ID\n\t\t\t,NULL AS LAST_MOD_DT\n\t\t\t,NULL AS DEL_USER_ID\n\t\t\t,NULL AS DEL_USER_COMPANY_ID\n\t\t\t,NULL AS DEL_DT\n\t\t\t,'0' AS DATA_STATUS\n\t\t\t,NULL AS URL_VAR_FIELD\n\t\t\t,'N' AS IS_ENCODE\n\t\t\t,NULL AS INPUT_ENCODE\n\t\t\t,NULL AS OUTPUT_ENCODE\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE PK \= '$$PK$$'\n\n\t\tINSERT INTO JH_WS02_CODE_FORMAT_LIST (\n\t\t\tCODE_ID_PK\n\t\t\t,CLASS_NUM\n\t\t\t,UP_PK_FIELD\n\t\t\t,DOWN_PK_FIELD\n\t\t\t,OUTPUT_FIELD\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,DEL_USER_ID\n\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t,DEL_DT\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tSELECT IDENT_CURRENT('JH_WS02_CODE_LIST') AS CODE_ID_PK\n\t\t\t,CLASS_NUM\n\t\t\t,UP_PK_FIELD\n\t\t\t,DOWN_PK_FIELD\n\t\t\t,OUTPUT_FIELD\n\t\t\t,'$$SysUser$$' AS ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,CONVERT(VARCHAR(100), GETDATE(), 120) AS ADD_DT\n\t\t\t,NULL AS LAST_MOD_USER_ID\n\t\t\t,NULL AS LAST_MOD_USER_COMPANY_ID\n\t\t\t,NULL AS LAST_MOD_DT\n\t\t\t,NULL AS DEL_USER_ID\n\t\t\t,NULL AS DEL_USER_COMPANY_ID\n\t\t\t,NULL AS DEL_DT\n\t\t\t,'0' AS DATA_STATUS\n\t\tFROM JH_WS02_CODE_FORMAT_LIST\n\t\tWHERE CODE_ID_PK \= '$$PK$$'\n\n\t\tINSERT INTO JH_WS02_CODE_IP_RELATION (\n\t\t\tCODE_ID_PK\n\t\t\t,ACCESSED_IP\n\t\t\t,ACCESSED_DESC\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,DEL_USER_ID\n\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t,DEL_DT\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tSELECT IDENT_CURRENT('JH_WS02_CODE_LIST') AS CODE_ID_PK\n\t\t\t,ACCESSED_IP\n\t\t\t,ACCESSED_DESC\n\t\t\t,'$$SysUser$$' AS ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,CONVERT(VARCHAR(100), GETDATE(), 120) AS ADD_DT\n\t\t\t,NULL AS LAST_MOD_USER_ID\n\t\t\t,NULL AS LAST_MOD_USER_COMPANY_ID\n\t\t\t,NULL AS LAST_MOD_DT\n\t\t\t,NULL AS DEL_USER_ID\n\t\t\t,NULL AS DEL_USER_COMPANY_ID\n\t\t\t,NULL AS DEL_DT\n\t\t\t,'0' AS DATA_STATUS\n\t\tFROM JH_WS02_CODE_IP_RELATION\n\t\tWHERE CODE_ID_PK \= '$$PK$$'\n\n\t\tINSERT INTO JH_WS02_CODE_WS_RELATION (\n\t\t\tCODE_ID_PK\n\t\t\t,CLASS_NUM\n\t\t\t,WEB_SERVICE_CODE\n\t\t\t,CODE_URL\n\t\t\t,IS_DOING\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,DEL_USER_ID\n\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t,DEL_DT\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tSELECT IDENT_CURRENT('JH_WS02_CODE_LIST') AS CODE_ID_PK\n\t\t\t,CLASS_NUM\n\t\t\t,WEB_SERVICE_CODE\n\t\t\t,CODE_URL\n\t\t\t,IS_DOING\n\t\t\t,'$$SysUser$$' AS ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,CONVERT(VARCHAR(100), GETDATE(), 120) AS ADD_DT\n\t\t\t,NULL AS LAST_MOD_USER_ID\n\t\t\t,NULL AS LAST_MOD_USER_COMPANY_ID\n\t\t\t,NULL AS LAST_MOD_DT\n\t\t\t,NULL AS DEL_USER_ID\n\t\t\t,NULL AS DEL_USER_COMPANY_ID\n\t\t\t,NULL AS DEL_DT\n\t\t\t,'0' AS DATA_STATUS\n\t\tFROM JH_WS02_CODE_WS_RELATION\n\t\tWHERE CODE_ID_PK \= '$$PK$$'\n\n\t\tINSERT INTO JH_WS02_CODE_RANGE_ANALYSIS (\n\t\t\tCODE_ID_PK\n\t\t\t,INPUT_FIELD\n\t\t\t,INPUT_DEFAULT_VAL\n\t\t\t,REG_FIELD\n\t\t\t,REG_DESC\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,DEL_USER_ID\n\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t,DEL_DT\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tSELECT IDENT_CURRENT('JH_WS02_CODE_LIST') AS CODE_ID_PK\n\t\t\t,INPUT_FIELD\n\t\t\t,INPUT_DEFAULT_VAL\n\t\t\t,REG_FIELD\n\t\t\t,REG_DESC\n\t\t\t,'$$SysUser$$' AS ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,CONVERT(VARCHAR(100), GETDATE(), 120) AS ADD_DT\n\t\t\t,NULL AS LAST_MOD_USER_ID\n\t\t\t,NULL AS LAST_MOD_USER_COMPANY_ID\n\t\t\t,NULL AS LAST_MOD_DT\n\t\t\t,NULL AS DEL_USER_ID\n\t\t\t,NULL AS DEL_USER_COMPANY_ID\n\t\t\t,NULL AS DEL_DT\n\t\t\t,'0' AS DATA_STATUS\n\t\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\t\tWHERE CODE_ID_PK \= '$$PK$$'\n         ORDER BY FORMAT_IDX \n\n\n\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'insert'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('JH_WS02_CODE_LIST') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,''\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'JH_WS02_CODE_LIST' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t);\n\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\t\tSELECT \n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t,'insert'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,IDENT_CURRENT('JH_WS02_CODE_FORMAT_LIST') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,''\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'JH_WS02_CODE_FORMAT_LIST'\n\t\t\tFROM JH_WS02_CODE_FORMAT_LIST\n\t\t\tWHERE CODE_ID_PK \= '$$PK$$';\n\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\t\tSELECT \n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t,'insert'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,IDENT_CURRENT('JH_WS02_CODE_IP_RELATION') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,''\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'JH_WS02_CODE_IP_RELATION'\n\t\t\tFROM JH_WS02_CODE_IP_RELATION\n\t\t\tWHERE CODE_ID_PK \= '$$PK$$';\n\n\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\t\tSELECT \n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t,'insert'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,IDENT_CURRENT('JH_WS02_CODE_WS_RELATION') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,''\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'JH_WS02_CODE_WS_RELATION'\n\t\t\tFROM JH_WS02_CODE_WS_RELATION\n\t\t\tWHERE CODE_ID_PK \= '$$PK$$';\n\n\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\t\tSELECT \n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t,'insert'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,IDENT_CURRENT('JH_WS02_CODE_RANGE_ANALYSIS') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,''\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'JH_WS02_CODE_RANGE_ANALYSIS'\n\t\t\tFROM JH_WS02_CODE_RANGE_ANALYSIS\n\t\t\tWHERE CODE_ID_PK \= '$$PK$$';\n\n\n\n\n\tEND
SYS_Fn01A007_1=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM JH_WS02_FLOW_LIST\n\t\tWHERE 1 \= 1\n\t\t\tAND (\n\t\t\t\tFLOW_ID LIKE '%$$FLOW_ID$$%'\n\t\t\t\tOR 'ALL' \= '$$FLOW_ID$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tAPI_DESC LIKE '%$$API_DESC$$%'\n\t\t\t\tOR 'ALL' \= '$$API_DESC$$'\n\t\t\t\t)\n\t\t\tAND (\n\t\t\t\tFLOW_TYPE \= $$FLOW_TYPE$$\n\t\t\t\tOR 99 \= $$FLOW_TYPE$$\n\t\t\t\t)\n\t\t\tAND PK IN (\n\t\t\t\tSELECT FLOW_ID_PK\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT A.FLOW_ID\n\t\t\t\t\t\t,C.PK\n\t\t\t\t\t\t,(\n\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\tWHEN B.FLOW_ID_PK IS NULL\n\t\t\t\t\t\t\t\t\tTHEN A.PK\n\t\t\t\t\t\t\t\tELSE B.FLOW_ID_PK\n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t) AS FLOW_ID_PK\n\t\t\t\t\tFROM JH_WS02_FLOW_LIST AS A\n\t\t\t\t\tLEFT JOIN JH_WS02_FLOW_SCHEDULE_LIST B ON A.PK \= B.FLOW_ID_PK\n\t\t\t\t\tLEFT JOIN JH_WS02_CODE_LIST C ON B.CALL_CODE_ID \= C.CODE_ID\n\t\t\t\t\t) AS D\n\t\t\t\tWHERE (\n\t\t\t\t\t\tPK IN ($$PK$$)\n\t\t\t\t\t\tOR '0' \= '$$PK$$'\n\t\t\t\t\t\t)\n\t\t\t\tGROUP BY FLOW_ID_PK\n\t\t\t\t\t/* HAVING COUNT(DISTINCT PK) >\= 0*/\n\t\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY PK ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM JH_WS02_FLOW_LIST\n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tFLOW_ID LIKE '%$$FLOW_ID$$%'\n\t\t\tOR 'ALL' \= '$$FLOW_ID$$'\n\t\t\t)\n\t\tAND (\n\t\t\tAPI_DESC LIKE '%$$API_DESC$$%'\n\t\t\tOR 'ALL' \= '$$API_DESC$$'\n\t\t\t)\n\t\tAND (\n\t\t\tFLOW_TYPE \= $$FLOW_TYPE$$\n\t\t\tOR 99 \= $$FLOW_TYPE$$\n\t\t\t)\n\t\tAND PK IN (\n\t\t\tSELECT FLOW_ID_PK\n\t\t\tFROM (\n\t\t\t\tSELECT A.FLOW_ID\n\t\t\t\t\t,C.PK\n\t\t\t\t\t,(\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN B.FLOW_ID_PK IS NULL\n\t\t\t\t\t\t\t\tTHEN A.PK\n\t\t\t\t\t\t\tELSE B.FLOW_ID_PK\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t) AS FLOW_ID_PK\n\t\t\t\tFROM JH_WS02_FLOW_LIST AS A\n\t\t\t\tLEFT JOIN JH_WS02_FLOW_SCHEDULE_LIST B ON A.PK \= B.FLOW_ID_PK\n\t\t\t\tLEFT JOIN JH_WS02_CODE_LIST C ON B.CALL_CODE_ID \= C.CODE_ID\n\t\t\t\t) AS D\n\t\t\tWHERE (\n\t\t\t\t\tPK IN ($$PK$$)\n\t\t\t\t\tOR '0' \= '$$PK$$'\n\t\t\t\t\t)\n\t\t\tGROUP BY FLOW_ID_PK\n\t\t\t\t/* HAVING COUNT(DISTINCT PK) >\= 0*/\n\t\t\t)\n\t) AS new1\nWHERE RowNum > $$start$$\n\tAND RowNum < \= ($$start$$ + $$limit$$);
SYS_Fn01A007_COPY=IF '$$PARAM_SWITCH_VALUE$$' \= 'DELALL'\nBEGIN\n\n\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\tFUNC_ID\n\t\t,PROC_TYPE\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,SessionID\n\t\t,ProcPK\n\t\t,PROC_TARGET\n\t\t)\n\tVALUES (\n\t\t'${PARAM_FUNC_ID}'\n\t\t,'delete'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t,''\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'${PARAM_COMPANY}'\n\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t,'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'JH_WS02_FLOW_LIST' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\tFUNC_ID\n\t\t,PROC_TYPE\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,SessionID\n\t\t,ProcPK\n\t\t,PROC_TARGET\n\t\t)\n\t\tSELECT \n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'delete'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,FORMAT_IDX /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,''\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'JH_WS02_FLOW_SCHEDULE_LIST'\n\t\tFROM JH_WS02_FLOW_SCHEDULE_LIST\n\t\tWHERE FLOW_ID_PK \= '$$PK$$';\n\n\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\tFUNC_ID\n\t\t,PROC_TYPE\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,SessionID\n\t\t,ProcPK\n\t\t,PROC_TARGET\n\t\t)\n\t\tSELECT \n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'delete'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,FORMAT_IDX /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,''\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'JH_WS02_FLOW_IP_RELATION'\n\t\tFROM JH_WS02_FLOW_IP_RELATION\n\t\tWHERE FLOW_ID_PK \= '$$PK$$';\n\n\n\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\tFUNC_ID\n\t\t,PROC_TYPE\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,SessionID\n\t\t,ProcPK\n\t\t,PROC_TARGET\n\t\t)\n\t\tSELECT \n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'delete'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,CW_IDX /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,''\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'JH_WS02_FLOW_WS_RELATION'\n\t\tFROM JH_WS02_FLOW_WS_RELATION\n\t\tWHERE FLOW_ID_PK \= '$$PK$$';\n\n\n\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\tFUNC_ID\n\t\t,PROC_TYPE\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,SessionID\n\t\t,ProcPK\n\t\t,PROC_TARGET\n\t\t)\n\t\tSELECT \n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'delete'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,FORMAT_IDX /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,''\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'JH_WS02_FLOW_RANGE_ANALYSIS'\n\t\tFROM JH_WS02_FLOW_RANGE_ANALYSIS\n\t\tWHERE FLOW_ID_PK \= '$$PK$$';\n\n\tDELETE\n\tFROM JH_WS02_FLOW_LIST\n\tWHERE PK \= '$$PK$$';\n\n\tDELETE\n\tFROM JH_WS02_FLOW_SCHEDULE_LIST\n\tWHERE FLOW_ID_PK \= '$$PK$$';\n\n\tDELETE\n\tFROM JH_WS02_FLOW_IP_RELATION\n\tWHERE FLOW_ID_PK \= '$$PK$$';\n\n\tDELETE\n\tFROM JH_WS02_FLOW_WS_RELATION\n\tWHERE FLOW_ID_PK \= '$$PK$$';\n\n\tDELETE\n\tFROM JH_WS02_FLOW_RANGE_ANALYSIS\n\tWHERE FLOW_ID_PK \= '$$PK$$';\nEND\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'COPYADD'\n\tBEGIN\n\t\tINSERT INTO JH_WS02_FLOW_LIST (\n\t\t\tFLOW_ID\n\t\t\t,API_DESC\n\t\t\t,ACTION_TYPE\n\t\t\t,IS_STOP\n\t\t\t,SHOW_ALL_INFO\n\t\t\t,FLOW_HELP\n\t\t\t,AUTH_KEY\n\t\t\t,FLOW_TYPE\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,DEL_USER_ID\n\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t,DEL_DT\n\t\t\t,DATA_STATUS\n\t\t\t,URL_VAR_FIELD\n\t\t\t)\n\t\tSELECT '$$FLOW_ID$$' AS FLOW_ID\n\t\t\t,API_DESC\n\t\t\t,ACTION_TYPE\n\t\t\t,IS_STOP\n\t\t\t,SHOW_ALL_INFO\n\t\t\t,FLOW_HELP\n\t\t\t,AUTH_KEY\n\t\t\t,FLOW_TYPE\n\t\t\t,'$$SysUser$$' AS ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,CONVERT(VARCHAR(100), GETDATE(), 120) AS ADD_DT\n\t\t\t,NULL AS LAST_MOD_USER_ID\n\t\t\t,NULL AS LAST_MOD_USER_COMPANY_ID\n\t\t\t,NULL AS LAST_MOD_DT\n\t\t\t,NULL AS DEL_USER_ID\n\t\t\t,NULL AS DEL_USER_COMPANY_ID\n\t\t\t,NULL AS DEL_DT\n\t\t\t,'0' AS DATA_STATUS\n\t\t\t,NULL AS URL_VAR_FIELD\n\t\tFROM JH_WS02_FLOW_LIST\n\t\tWHERE PK \= '$$PK$$'\n\n\t\tINSERT INTO JH_WS02_FLOW_SCHEDULE_LIST (\n\t\t\tFLOW_ID_PK\n\t\t\t,CLASS_NUM\n\t\t\t,UP_CODE_ID\n\t\t\t,CALL_CODE_ID\n\t\t\t,IS_PASS\n\t\t\t,FLOW_HELP\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,DEL_USER_ID\n\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t,DEL_DT\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tSELECT IDENT_CURRENT('JH_WS02_FLOW_LIST') AS FLOW_ID_PK\n\t\t\t,CLASS_NUM\n\t\t\t,UP_CODE_ID\n\t\t\t,CALL_CODE_ID\n\t\t\t,IS_PASS\n\t\t\t,FLOW_HELP\n\t\t\t,'$$SysUser$$' AS ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,CONVERT(VARCHAR(100), GETDATE(), 120) AS ADD_DT\n\t\t\t,NULL AS LAST_MOD_USER_ID\n\t\t\t,NULL AS LAST_MOD_USER_COMPANY_ID\n\t\t\t,NULL AS LAST_MOD_DT\n\t\t\t,NULL AS DEL_USER_ID\n\t\t\t,NULL AS DEL_USER_COMPANY_ID\n\t\t\t,NULL AS DEL_DT\n\t\t\t,'0' AS DATA_STATUS\n\t\tFROM JH_WS02_FLOW_SCHEDULE_LIST\n\t\tWHERE FLOW_ID_PK \= '$$PK$$'\n\n\t\tINSERT INTO JH_WS02_FLOW_IP_RELATION (\n\t\t\tFLOW_ID_PK\n\t\t\t,ACCESSED_IP\n\t\t\t,ACCESSED_DESC\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,DEL_USER_ID\n\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t,DEL_DT\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tSELECT IDENT_CURRENT('JH_WS02_FLOW_LIST') AS FLOW_ID_PK\n\t\t\t,ACCESSED_IP\n\t\t\t,ACCESSED_DESC\n\t\t\t,'$$SysUser$$' AS ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,CONVERT(VARCHAR(100), GETDATE(), 120) AS ADD_DT\n\t\t\t,NULL AS LAST_MOD_USER_ID\n\t\t\t,NULL AS LAST_MOD_USER_COMPANY_ID\n\t\t\t,NULL AS LAST_MOD_DT\n\t\t\t,NULL AS DEL_USER_ID\n\t\t\t,NULL AS DEL_USER_COMPANY_ID\n\t\t\t,NULL AS DEL_DT\n\t\t\t,'0' AS DATA_STATUS\n\t\tFROM JH_WS02_FLOW_IP_RELATION\n\t\tWHERE FLOW_ID_PK \= '$$PK$$'\n\n\t\tINSERT INTO JH_WS02_FLOW_WS_RELATION (\n\t\t\tFLOW_ID_PK\n\t\t\t,CLASS_NUM\n\t\t\t,WEB_SERVICE_CODE\n\t\t\t,FLOW_URL\n\t\t\t,IS_DOING\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,DEL_USER_ID\n\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t,DEL_DT\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tSELECT IDENT_CURRENT('JH_WS02_FLOW_LIST') AS FLOW_ID_PK\n\t\t\t,CLASS_NUM\n\t\t\t,WEB_SERVICE_CODE\n\t\t\t,FLOW_URL\n\t\t\t,IS_DOING\n\t\t\t,'$$SysUser$$' AS ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,CONVERT(VARCHAR(100), GETDATE(), 120) AS ADD_DT\n\t\t\t,NULL AS LAST_MOD_USER_ID\n\t\t\t,NULL AS LAST_MOD_USER_COMPANY_ID\n\t\t\t,NULL AS LAST_MOD_DT\n\t\t\t,NULL AS DEL_USER_ID\n\t\t\t,NULL AS DEL_USER_COMPANY_ID\n\t\t\t,NULL AS DEL_DT\n\t\t\t,'0' AS DATA_STATUS\n\t\tFROM JH_WS02_FLOW_WS_RELATION\n\t\tWHERE FLOW_ID_PK \= '$$PK$$'\n\n\t\tINSERT INTO JH_WS02_FLOW_RANGE_ANALYSIS (\n\t\t\tFLOW_ID_PK\n\t\t\t,INPUT_FIELD\n\t\t\t,INPUT_DEFAULT_VAL\n\t\t\t,REG_FIELD\n\t\t\t,REG_DESC\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,DEL_USER_ID\n\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t,DEL_DT\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tSELECT IDENT_CURRENT('JH_WS02_FLOW_LIST') AS FLOW_ID_PK\n\t\t\t,INPUT_FIELD\n\t\t\t,INPUT_DEFAULT_VAL\n\t\t\t,REG_FIELD\n\t\t\t,REG_DESC\n\t\t\t,'$$SysUser$$' AS ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,CONVERT(VARCHAR(100), GETDATE(), 120) AS ADD_DT\n\t\t\t,NULL AS LAST_MOD_USER_ID\n\t\t\t,NULL AS LAST_MOD_USER_COMPANY_ID\n\t\t\t,NULL AS LAST_MOD_DT\n\t\t\t,NULL AS DEL_USER_ID\n\t\t\t,NULL AS DEL_USER_COMPANY_ID\n\t\t\t,NULL AS DEL_DT\n\t\t\t,'0' AS DATA_STATUS\n\t\tFROM JH_WS02_FLOW_RANGE_ANALYSIS\n\t\tWHERE FLOW_ID_PK \= '$$PK$$'\n\n\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t,'insert'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('JH_WS02_FLOW_LIST') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,''\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'JH_WS02_FLOW_LIST' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t);\n\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\t\tSELECT \n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t,'insert'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,IDENT_CURRENT('JH_WS02_FLOW_SCHEDULE_LIST') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,''\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'JH_WS02_FLOW_SCHEDULE_LIST'\n\t\t\tFROM JH_WS02_FLOW_SCHEDULE_LIST\n\t\t\tWHERE FLOW_ID_PK \= '$$PK$$';\n\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\t\tSELECT \n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t,'insert'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,IDENT_CURRENT('JH_WS02_FLOW_IP_RELATION') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,''\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'JH_WS02_FLOW_IP_RELATION'\n\t\t\tFROM JH_WS02_FLOW_IP_RELATION\n\t\t\tWHERE FLOW_ID_PK \= '$$PK$$';\n\n\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\t\tSELECT \n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t,'insert'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,IDENT_CURRENT('JH_WS02_FLOW_WS_RELATION') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,''\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'JH_WS02_FLOW_WS_RELATION'\n\t\t\tFROM JH_WS02_FLOW_WS_RELATION\n\t\t\tWHERE FLOW_ID_PK \= '$$PK$$';\n\n\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\t\tSELECT \n\t\t\t\t'${PARAM_FUNC_ID}'\n\t\t\t\t,'insert'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,IDENT_CURRENT('JH_WS02_FLOW_RANGE_ANALYSIS') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,''\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'JH_WS02_FLOW_RANGE_ANALYSIS'\n\t\t\tFROM JH_WS02_FLOW_RANGE_ANALYSIS\n\t\t\tWHERE FLOW_ID_PK \= '$$PK$$';\n\tEND
SYS_FUNCTION_AUTHOR=SELECT ROW_NUMBER() OVER (\n\t\tORDER BY USER_ID ASC\n\t\t) AS RowNum\n\t,M.GROUPID\n\t,M.[USER_ID]\n\t,'{' + LEFT(M.GROUPAUTH, LEN(M.GROUPAUTH) - 1) + '}' AS GROUP_AUTH\nFROM (\n\tSELECT '$$SysGroup$$' AS [GROUPID]\n\t\t,'$$SysUser$$' AS [USER_ID]\n\t\t,(\n\t\t\tSELECT CASE \n\t\t\t\t\tWHEN [qry] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_query_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_query_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [prn] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_prn_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_prn_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [exp] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_exp_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_exp_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [add] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_add_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_add_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [del] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_del_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_del_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [mod] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_mod_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_mod_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [aut] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_aut_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_aut_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [apr] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_apr_disabled"\:false,'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_apr_disabled"\:true,'\n\t\t\t\t\tEND + CASE \n\t\t\t\t\tWHEN [rej] \= 1\n\t\t\t\t\t\tTHEN '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_rej_disabled"\:false'\n\t\t\t\t\tELSE '"' + (SUBSTRING(FUNC_ID, 1, 4) + UPPER(SUBSTRING(FUNC_ID, 6, LEN(FUNC_ID)))) + '_rej_disabled"\:true'\n\t\t\t\t\tEND + ','\n\t\t\tFROM (\n\t\t\t\tSELECT A.[GROUPID]\n\t\t\t\t\t,B.[USER_ID]\n\t\t\t\t\t,A.[FUNC_ID]\n\t\t\t\t\t,ISNULL(B.U_QRY, A.QRY) AS QRY\n\t\t\t\t\t,ISNULL(B.U_PRN, A.PRN) AS PRN\n\t\t\t\t\t,ISNULL(B.U_EXP, A.[EXP]) AS [EXP]\n\t\t\t\t\t,ISNULL(B.U_ADD, A.[ADD]) AS [ADD]\n\t\t\t\t\t,ISNULL(B.U_DEL, A.[DEL]) AS [DEL]\n\t\t\t\t\t,ISNULL(B.U_MOD, A.[MOD]) AS [MOD]\n\t\t\t\t\t,ISNULL(B.U_AUT, A.[AUT]) AS [AUT]\n\t\t\t\t\t,ISNULL(B.U_APR, A.[APR]) AS [APR]\n\t\t\t\t\t,ISNULL(B.U_REJ, A.[REJ]) AS [REJ]\n\t\t\t\tFROM GROUP_FUNC_AUTH A\n\t\t\t\tLEFT OUTER JOIN (\n\t\t\t\t\tSELECT GROUPID\n\t\t\t\t\t\t,USER_ID\n\t\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t\t,[QRY] AS U_QRY\n\t\t\t\t\t\t,[PRN] AS U_PRN\n\t\t\t\t\t\t,[EXP] AS U_EXP\n\t\t\t\t\t\t,[ADD] AS U_ADD\n\t\t\t\t\t\t,[DEL] AS U_DEL\n\t\t\t\t\t\t,[MOD] AS U_MOD\n\t\t\t\t\t\t,[AUT] AS U_AUT\n\t\t\t\t\t\t,[APR] AS U_APR\n\t\t\t\t\t\t,[REJ] AS U_REJ\n\t\t\t\t\tFROM USER_FUNC_AUTH\n\t\t\t\t\tWHERE USER_ID \= '$$SysUser$$'\n\t\t\t\t\t\tAND GROUPID \= '$$SysGroup$$'\n\t\t\t\t\t) B ON (\n\t\t\t\t\t\tA.GROUPID \= B.GROUPID\n\t\t\t\t\t\tAND A.FUNC_ID \= B.FUNC_ID\n\t\t\t\t\t\tAND A.COMPANY_ID \= B.COMPANY_ID\n\t\t\t\t\t\t)\n\t\t\t\tWHERE A.GROUPID \= '$$SysGroup$$'\n\t\t\t\t\tAND (\n\t\t\t\t\t\tA.FUNC_ID LIKE '%$$FUNC_ID$$%'\n\t\t\t\t\t\tOR 'ALL' \= '$$FUNC_ID$$'\n\t\t\t\t\t\t)\n\t\t\t\t) N \n\t\t\tFOR XML PATH('')\n\t\t\t) GROUPAUTH\n\t) M\n
SYS_IMPORT=Funs/Imort2API/Entrance.kjb
SYS_IMPORT_GETOBJ100=IF(SELECT COUNT(*) FROM JH_WS02_CODE_LIST WITH(NOLOCK) WHERE CODE_ID \= '$$CODE_ID$$') \= 0\n\tBEGIN\n\t\tINSERT INTO JH_WS02_CODE_LIST\n\t\t(CODE_ID,API_DESC,JNDI_USE,EXEC_TYPE,ACTION_TYPE,SQL_PROP_KEY,AUTH_KEY,INPUT_FIELD,CODE_HELP\n\t\t,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,DATA_STATUS\n\t\t,URL_VAR_FIELD,IS_ENCODE,INPUT_ENCODE,OUTPUT_ENCODE,CODE_TYPE)\n\t\tVALUES\n\t\t('$$CODE_ID$$','$$API_DESC$$','$$JNDI_USE$$','$$EXEC_TYPE$$','$$ACTION_TYPE$$','$$SQL_PROP_KEY$$','$$AUTH_KEY$$','$$INPUT_FIELD$$','$$CODE_HELP$$'\n\t\t,'$$PARAM_SOURCE_COMING$$','$$PARAM_COMPANY$$',CONVERT(VARCHAR,GETDATE(),120),'$$DATA_STATUS$$'\n\t\t,'$$URL_VAR_FIELD$$','$$IS_ENCODE$$','$$INPUT_ENCODE$$','$$OUTPUT_ENCODE$$','$$CODE_TYPE$$')\n\tEND\nELSE\n\tBEGIN\n\t\tUPDATE JH_WS02_CODE_LIST\n\t\tSET API_DESC \= '$$API_DESC$$',JNDI_USE \= '$$JNDI_USE$$',EXEC_TYPE \= '$$EXEC_TYPE$$',ACTION_TYPE \= '$$ACTION_TYPE$$',SQL_PROP_KEY \= '$$SQL_PROP_KEY$$'\n\t\t,AUTH_KEY \= '$$AUTH_KEY$$',INPUT_FIELD \= '$$INPUT_FIELD$$',CODE_HELP \= '$$CODE_HELP$$'\n\t\t,LAST_MOD_USER_ID \= '$$PARAM_SOURCE_COMING$$',LAST_MOD_USER_COMPANY_ID \= '$$PARAM_COMPANY$$',LAST_MOD_DT \= CONVERT(VARCHAR,GETDATE(),120)\n\t\t,DATA_STATUS \= '$$DATA_STATUS$$',URL_VAR_FIELD \= '$$URL_VAR_FIELD$$',IS_ENCODE \= '$$IS_ENCODE$$',INPUT_ENCODE \= '$$INPUT_ENCODE$$',OUTPUT_ENCODE \= '$$OUTPUT_ENCODE$$',CODE_TYPE \= '$$CODE_TYPE$$'\n\t\tWHERE CODE_ID \= '$$CODE_ID$$'\n\tEND\n
SYS_IMPORT_GETOBJ10=SELECT \n\t(CASE RIGHT(WEB_SERVICE_SUB_DOMAIN,3) WHEN 443 \n\tTHEN CONCAT('https\://',WEB_SERVICE_SUB_DOMAIN,'/',WEB_SERVICE_NAME,'/','jh/SYS/lv/JHreLoadPROP') \n\tELSE CONCAT('http\://',WEB_SERVICE_SUB_DOMAIN,'/',WEB_SERVICE_NAME,'/','jh/SYS/lv/JHreLoadPROP') END) AS 'API'\n\t,WEB_SERVICE_CODE\n\t,WEB_SERVICE_SUB_DOMAIN\nFROM \n\tJH_WS02_WEBSERVICE_INFO WITH(NOLOCK) \nWHERE \n\tIS_DOING \= 'Y'
SYS_IMPORT_TARGET=SELECT *\nFROM\n  (SELECT COUNT(*) AS totalProperty\n   FROM (\n\t\tSELECT * FROM ( \n\t\tSELECT \n\t\t\tA.PK AS 'PK',A.FLOW_ID AS 'API_NAME',A.API_DESC AS 'API_DESC' \n\t\tFROM \n\t\t\tJH_WS02_FLOW_LIST AS A WITH(NOLOCK) \n\t\tINNER JOIN \n\t\t\tJH_WS02_FLOW_RANGE_ANALYSIS AS B WITH(NOLOCK) ON A.PK \= \n\t\tB.FLOW_ID_PK AND B.INPUT_FIELD \= 'API_TYPE' AND B.INPUT_DEFAULT_VAL \= \n\t\t'$$IMPORT_KEY$$'\n\n\t\tUNION \n\n\t\tSELECT \n\t\t\tA.PK AS 'PK',A.CODE_ID AS 'API_NAME',A.API_DESC AS 'API_DESC' \n\t\tFROM \n\t\t\tJH_WS02_CODE_LIST AS A WITH(NOLOCK) \n\t\tINNER JOIN \n\t\t\tJH_WS02_CODE_RANGE_ANALYSIS AS B WITH(NOLOCK) ON A.PK \= \n\t\tB.CODE_ID_PK AND B.INPUT_FIELD \= 'API_TYPE' AND B.INPUT_DEFAULT_VAL \= \n\t\t'$$IMPORT_KEY$$'\n\t\t) AS C) LIST) A,\n\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY PK ASC) AS RowNum,\n                            *\n   FROM (\n\t\tSELECT * FROM ( \n\t\tSELECT \n\t\t\tA.PK AS 'PK',A.FLOW_ID AS 'API_NAME',A.API_DESC AS 'API_DESC' \n\t\tFROM \n\t\t\tJH_WS02_FLOW_LIST AS A WITH(NOLOCK) \n\t\tINNER JOIN \n\t\t\tJH_WS02_FLOW_RANGE_ANALYSIS AS B WITH(NOLOCK) ON A.PK \= \n\t\tB.FLOW_ID_PK AND B.INPUT_FIELD \= 'API_TYPE' AND B.INPUT_DEFAULT_VAL \= \n\t\t'$$IMPORT_KEY$$'\n\n\t\tUNION \n\n\t\tSELECT \n\t\t\tA.PK AS 'PK',A.CODE_ID AS 'API_NAME',A.API_DESC AS 'API_DESC' \n\t\tFROM \n\t\t\tJH_WS02_CODE_LIST AS A WITH(NOLOCK) \n\t\tINNER JOIN \n\t\t\tJH_WS02_CODE_RANGE_ANALYSIS AS B WITH(NOLOCK) ON A.PK \= \n\t\tB.CODE_ID_PK AND B.INPUT_FIELD \= 'API_TYPE' AND B.INPUT_DEFAULT_VAL \= \n\t\t'$$IMPORT_KEY$$'\n\t\t) AS C) LIST ) B\nWHERE 1 \= 1\n  AND RowNum > $$start$$\n  AND RowNum < \= ($$start$$ + $$limit$$)
SYS_JNDI_LIST=SELECT *\nFROM (\n\tSELECT COUNT(*) AS totalProperty\n\tFROM PROP_MASTER A\n\tLEFT JOIN JH_WS02_REF_MAPDATA_TYPE C ON A.PROP_TYPE \= C.VALUE\n\tWHERE C.IS_BINDING \= 'Y'\n\t\tAND A.ENABLED_FLAG \= 'Y'\n\t) A\n\t,(\n\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\tORDER BY PK_PROP\n\t\t\t\t) AS RowNum\n\t\t\t,(CASE WHEN CHARINDEX('DFM', PROP_ID) <> 0 THEN 'DFM' \n\t\t\t\tWHEN CHARINDEX('SIGN', PROP_ID) <> 0 THEN 'SIGN' END) AS CONN_DB \n\t\t\t,PK_PROP\n\t\t\t,COMPANY_ID\n\t\t\t,PROP_ID\n\t\t\t,JNDI_NAME\n\t\t\t,PROP_DESC\n\t\t\t,PROP_FILE\n\t\t\t,PROP_TYPE\n\t\t\t,ENABLED_FLAG\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,LAST_MOD_USER_ID\n\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t,LAST_MOD_DT\n\t\t\t,DEL_USER_ID\n\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t,DEL_DT\n\t\t\t,DATA_STATUS\n\t\tFROM PROP_MASTER A\n\t\tLEFT JOIN JH_WS02_REF_MAPDATA_TYPE C ON A.PROP_TYPE \= C.VALUE\n\t\tWHERE C.IS_BINDING \= 'Y'\n\t\t\tAND A.ENABLED_FLAG \= 'Y'\n\t\t) B\nWHERE 1 \= 1\n\tAND RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)\n
SYS_LOCKED_OVER_DAYS=UPDATE USERS\n\t\t  SET \n\t\t\t  ISLOCK \= 'Y'\n\t\tWHERE USERID IN\n\t\t(\n\t\t\tSELECT USERID\n\t\t\tFROM\n\t\t\t(\n\t\t\t\tSELECT USER_ID, \n\t\t\t\t\t   CONVERT(VARCHAR(20), MAX(LOGIN_DT), 120) AS LAST_LOGIN_DT, \n\t\t\t\t\t   NULL AS ADD_DT\n\t\t\t\tFROM LOGIN_LOG\n\t\t\t\tGROUP BY USER_ID\n\t\t\t) A\n\t\t\tRIGHT OUTER JOIN USERS C ON A.USER_ID \= C.USERID\n\t\t\tWHERE USERID NOT IN('ROOT')\n\t\t\tAND $$OVER_DAYS$$ <\= (CASE WHEN LAST_LOGIN_DT IS NULL THEN DATEDIFF(DAY, C.ADD_DT, GETDATE()) ELSE DATEDIFF(DAY, LAST_LOGIN_DT, GETDATE()) END)\n\t\t);\n\n
SYS_LOGIN_GROUP=SELECT G.USERID\n\t,S.*\n\t,ISNULL(U.ISLOCK, 'N') AS ISLOCK\nFROM (\n\tSELECT DISTINCT A.GROUPID\n\t\t,B.GROUPNAME\n\t\t,A.MAIN_SET\n\tFROM USERGROUP A\n\tLEFT JOIN GROUPS B ON A.GROUPID \= B.GROUPID\n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tUSERID \= '$$GUEST$$'\n\t\t\tOR 'ALL' \= '$$GUEST$$'\n\t\t\t)\n\t) S\nINNER JOIN (\n\tSELECT *\n\tFROM USERGROUP\n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tUSERID \= '$$GUEST$$'\n\t\t\tOR 'ALL' \= '$$GUEST$$'\n\t\t\t)\n\t) G ON S.GROUPID \= G.GROUPID\nLEFT JOIN USERS U ON G.USERID \= U.USERID
SYS_LOGIN_LOG=IF '$$PARAM_SWITCH_VALUE$$' \= 'ADD'\nBEGIN\n\t/* LOGIN */\n\tINSERT INTO LOGIN_LOG (\n\t\t[USER_ID]\n\t\t,USER_IP\n\t\t,LOGIN_DT\n\t\t,[USER_NAME]\n\t\t,USER_GROUP\n\t\t,USER_COMPANY\n\t\t,USER_DEP\n\t\t,SESSION_ID\n\t\t,BROWSER\n\t\t,AUTH_TYPE\n\t\t,LOGIN_STATUS\n\t\t,LOGIN_DESC\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t)\n\tVALUES (\n\t\t'$$USER_ID$$'\n\t\t,'$$USER_IP$$'\n\t\t,'$$LOGIN_DT$$'\n\t\t,'$$USER_NAME$$'\n\t\t,'$$USER_GROUP_ID$$'\n\t\t,'$$USER_COMPANY_ID$$'\n\t\t,'$$USER_DEP_ID$$'\n\t\t,'$$SESSION_ID$$'\n\t\t,'$$BROWSER$$'\n\t\t,'$$AUTH_TYPE$$'\n\t\t,'$$LOGIN_STATUS$$'\n\t\t,'$$LOGIN_DESC$$'\n\t\t,'root'\n\t\t,'$$USER_COMPANY_ID$$'\n\t\t,CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t);\n\n\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\tFUNC_ID\n\t\t,PROC_TYPE\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,SessionID\n\t\t,ProcPK\n\t\t,PROC_TARGET\n\t\t)\n\tVALUES (\n\t\t'LOGIN'\n\t\t,'insert'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$USER_ID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t,'Login'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'${PARAM_COMPANY}'\n\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t,'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'LOGIN_LOG' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t);\n\n\tIF '$$LOGIN_STATUS$$' \= '0'\n\tBEGIN\n\t\tUPDATE USERS\n\t\tSET wrong_times \= '$$WRONG_TIMES$$'\n\t\tWHERE USERID \= 'root'\n\tEND\nEND\nELSE\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'MOD'\n\tBEGIN\n\t\t/* LOGOUT */\n\t\tUPDATE LOGIN_LOG\n\t\tSET LOGOUT_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\t\t,LAST_MOD_USER_ID \= '$$USER_ID$$'\n\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(19), GETDATE(), 120)\n\t\tWHERE SESSION_ID \= '$$SESSION_ID$$'\n\n\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\tFUNC_ID\n\t\t,PROC_TYPE\n\t\t,USER_ID\n\t\t,DATA_NO\n\t\t,EVENT_DT\n\t\t,MEMO\n\t\t,ADD_USER_ID\n\t\t,ADD_USER_COMPANY_ID\n\t\t,ADD_DT\n\t\t,SessionID\n\t\t,ProcPK\n\t\t,PROC_TARGET\n\t\t)\n\tVALUES (\n\t\t'LOGOUT'\n\t\t,'update'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'$$USER_ID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t,'Logout'\n\t\t,'${PARAM_SOURCE_COMING}'\n\t\t,'${PARAM_COMPANY}'\n\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t,'${PARAM_SESSION_ID}'\n\t\t,'${LOGPK}'\n\t\t,'LOGIN_LOG' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t);\n\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'INVALID_LOGIN'\n\t\tBEGIN\n\t\t\tUPDATE USERS\n\t\t\tSET wrong_times \= '$$WRONG_TIMES$$'\n\t\t\t\t,ISLOCK \= '$$ISLOCK$$'\n\t\t\tWHERE USERID \= 'root'\n\n\t\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\t\tFUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t,ADD_USER_ID\n\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t,ADD_DT\n\t\t\t\t,SessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,PROC_TARGET\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'LOGIN'\n\t\t\t\t,'insert'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'$$USER_ID$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'Invalid Login'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'LOGIN_LOG' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t);\n\t\tEND
SYS_MW_IP_RESET_CODE=BEGIN TRY\n\nDECLARE @CODE_ID VARCHAR(100);\nDECLARE @PK VARCHAR(100); \nSET @CODE_ID \= 'SYS_MW_IP_RESET_CODE' \nSET @PK \= (SELECT PK FROM JH_WS02_CODE_LIST WHERE CODE_ID \= @CODE_ID)\n\n/*刪除目的資料*/\nDELETE FROM JH_WS02_CODE_IP_RELATION\n\n            INSERT INTO DATA_CHANGE_LOG\n            (FUNC_ID, \n             PROC_TYPE, \n             USER_ID, \n             DATA_NO, \n             EVENT_DT, \n             MEMO, \n\t\t\t ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             SessionID, \n             ProcPK, \n             PROC_TARGET\n            )\n            VALUES\n            (@CODE_ID, \n             'DELETE', \n             'todd', \n             IDENT_CURRENT('JH_WS02_FLOW_WS_RELATION') ,\n\n             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '$$MEMO$$', \n\t\t\t 'todd', \n             'JH', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             'NONESID', \n             '1741217', \n             @CODE_ID\n\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            );\n\n\n/*新增四組IP*/\nINSERT INTO JH_WS02_CODE_IP_RELATION( CODE_ID_PK,ACCESSED_IP,ACCESSED_DESC,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,DEL_USER_ID,DEL_USER_COMPANY_ID,DEL_DT,DATA_STATUS ) SELECT PK AS 'CODE_ID_PK',INPUT_DEFAULT_VAL,NULL,'root','MLI',CONVERT(VARCHAR(19), GETDATE(),120),NULL,NULL,NULL,NULL,NULL,NULL,'0' AS 'DATA_STATUS' FROM JH_WS02_CODE_LIST AS M LEFT JOIN (SELECT INPUT_DEFAULT_VAL FROM JH_WS02_CODE_RANGE_ANALYSIS WHERE CODE_ID_PK \= @PK) AS D ON 1\=1 ORDER BY PK\n\nINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t( ProcPK\n\t\t,hashValues\n\t\t,RETURN_CODE \n\t\t,RETURN_MSG \n\t\t,DATA_UNIQUE_KEY \n\t\t,DATA_ACTION_TYPE \n\t\t,MEMO)\nVALUES(        \n\t\t'1741217' \n\t\t,@FROM_OUTSIDE\n\t\t,'0'\n\t\t,'SUCCESS'\n\t\t,''\n\t\t,'D' \n\t\t,'');\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n\n            INSERT INTO DATA_CHANGE_LOG\n            (FUNC_ID, \n             PROC_TYPE, \n             USER_ID, \n             DATA_NO, \n             EVENT_DT, \n             MEMO, \n\t\t\t ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             SessionID, \n             ProcPK, \n             PROC_TARGET\n            )\n            VALUES\n            (@CODE_ID, \n             'INSERT', \n             'todd', \n             IDENT_CURRENT('JH_WS02_FLOW_WS_RELATION') ,\n\n             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '$$MEMO$$', \n\t\t\t 'todd', \n             'JH', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             'NONESID', \n             '1741217', \n             @CODE_ID\n\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            );\n\n\nEND TRY \n\nBEGIN CATCH\n\n\tSELECT @RETURN_CODE \= ERROR_NUMBER() ,\n\t\t   @RETURN_MSG \= ERROR_MESSAGE() ,\n\t\t   @RETURN_TEST \=\n\t  (SELECT *\n\t   FROM\n\t\t (SELECT '1741217' AS ProcPK ,\n\t\t\t\t @FROM_OUTSIDE AS hashValues ,\n\t\t\t\t ERROR_NUMBER() AS RETURN_CODE ,\n\t\t\t\t ERROR_MESSAGE() AS RETURN_MSG ,\n\t\t\t\t '$$COLUMN1$$' AS DATA_UNIQUE_KEY ,\n\t\t\t\t '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n\t\t\t\t '$$MEMO$$' AS MEMO) AS A\n\t   FOR JSON AUTO)\nEND CATCH
SYS_MW_IP_RESET_FLOW=BEGIN TRY\n\nDECLARE @CODE_ID VARCHAR(100);\nDECLARE @PK VARCHAR(100); \nSET @CODE_ID \= 'SYS_MW_IP_RESET_FLOW' \nSET @PK \= (SELECT PK FROM JH_WS02_CODE_LIST WHERE CODE_ID \= @CODE_ID)\n\n/*刪除目的資料*/\nDELETE FROM JH_WS02_FLOW_IP_RELATION\n\n            INSERT INTO DATA_CHANGE_LOG\n            (FUNC_ID, \n             PROC_TYPE, \n             USER_ID, \n             DATA_NO, \n             EVENT_DT, \n             MEMO, \n\t\t\t ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             SessionID, \n             ProcPK, \n             PROC_TARGET\n            )\n            VALUES\n            (@CODE_ID,\n             'DELETE', \n             'todd', \n             IDENT_CURRENT('JH_WS02_FLOW_WS_RELATION') ,\n\n             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '$$MEMO$$', \n\t\t\t 'todd', \n             'JH', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             'NONESID', \n             '1741217', \n             @CODE_ID\n\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            );\n\n/*新增四組IP*/\nINSERT INTO JH_WS02_FLOW_IP_RELATION( FLOW_ID_PK,ACCESSED_IP,ACCESSED_DESC,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,DEL_USER_ID,DEL_USER_COMPANY_ID,DEL_DT,DATA_STATUS )\nSELECT PK AS 'FLOW_ID_PK',INPUT_DEFAULT_VAL,NULL,'root','MLI',CONVERT(VARCHAR(19), GETDATE(),120),NULL,NULL,NULL,NULL,NULL,NULL,'0' AS 'DATA_STATUS' FROM JH_WS02_FLOW_LIST AS M LEFT JOIN (\nSELECT INPUT_DEFAULT_VAL FROM JH_WS02_CODE_RANGE_ANALYSIS WHERE CODE_ID_PK \= @PK) AS D ON 1\=1 ORDER BY PK\n\n\n\nINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t( ProcPK\n\t\t,hashValues\n\t\t,RETURN_CODE \n\t\t,RETURN_MSG \n\t\t,DATA_UNIQUE_KEY \n\t\t,DATA_ACTION_TYPE \n\t\t,MEMO)\nVALUES(        \n\t\t'1741217' \n\t\t,@FROM_OUTSIDE\n\t\t,'0'\n\t\t,'SUCCESS'\n\t\t,''\n\t\t,'D' \n\t\t,'');\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n\n            INSERT INTO DATA_CHANGE_LOG\n            (FUNC_ID, \n             PROC_TYPE, \n             USER_ID, \n             DATA_NO, \n             EVENT_DT, \n             MEMO, \n\t\t\t ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             SessionID, \n             ProcPK, \n             PROC_TARGET\n            )\n            VALUES\n            (@CODE_ID,\n             'INSERT', \n             'todd', \n             IDENT_CURRENT('JH_WS02_FLOW_WS_RELATION') ,\n\n             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '$$MEMO$$', \n\t\t\t 'todd', \n             'JH', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             'NONESID', \n             '1741217', \n             @CODE_ID\n\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            );\n\nEND TRY \n\nBEGIN CATCH\n\n\tSELECT @RETURN_CODE \= ERROR_NUMBER() ,\n\t\t   @RETURN_MSG \= ERROR_MESSAGE() ,\n\t\t   @RETURN_TEST \=\n\t  (SELECT *\n\t   FROM\n\t\t (SELECT '1741217' AS ProcPK ,\n\t\t\t\t @FROM_OUTSIDE AS hashValues ,\n\t\t\t\t ERROR_NUMBER() AS RETURN_CODE ,\n\t\t\t\t ERROR_MESSAGE() AS RETURN_MSG ,\n\t\t\t\t '$$COLUMN1$$' AS DATA_UNIQUE_KEY ,\n\t\t\t\t '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n\t\t\t\t '$$MEMO$$' AS MEMO) AS A\n\t   FOR JSON AUTO)\nEND CATCH
SYS_MW_WS_RESET_CODE=BEGIN TRY\nDECLARE @CODE_ID VARCHAR(100);\nDECLARE @PK VARCHAR(100); \nSET @CODE_ID \= 'SYS_MW_WS_RESET_CODE' \nSET @PK \= (SELECT PK FROM JH_WS02_CODE_LIST WHERE CODE_ID \= @CODE_ID)\n\n/*刪除目的資料*/\nDELETE JH_WS02_CODE_WS_RELATION\n\n            INSERT INTO DATA_CHANGE_LOG\n            (FUNC_ID, \n             PROC_TYPE, \n             USER_ID, \n             DATA_NO, \n             EVENT_DT, \n             MEMO, \n\t\t\t ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             SessionID, \n             ProcPK, \n             PROC_TARGET\n            )\n            VALUES\n            (@CODE_ID,\n             'DELETE', \n             'todd', \n             IDENT_CURRENT('JH_WS02_FLOW_WS_RELATION') ,\n\n             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '$$MEMO$$', \n\t\t\t 'todd', \n             'JH', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             'NONESID', \n             '1741217', \n             @CODE_ID\n\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            );\n/*新增2組主機*/\nINSERT INTO JH_WS02_CODE_WS_RELATION( CODE_ID_PK,CLASS_NUM,WEB_SERVICE_CODE,CODE_URL,IS_DOING,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,DEL_USER_ID,DEL_USER_COMPANY_ID,DEL_DT,COMPANY_ID,DATA_STATUS) \nSELECT PK AS 'CODE_PK', CLASS_NUM,WEB_SERVICE_CODE,NULL,'Y','root','MLI',CONVERT(VARCHAR(19), GETDATE(),120),NULL,NULL,NULL,NULL,NULL,NULL,'MLI','0' AS 'DATA_STATUS' FROM JH_WS02_CODE_LIST AS M LEFT JOIN (\nSELECT         \nSUBSTRING(INPUT_DEFAULT_VAL, 1, CHARINDEX(',', INPUT_DEFAULT_VAL)-1) AS CLASS_NUM,\nSUBSTRING(INPUT_DEFAULT_VAL, CHARINDEX(',', INPUT_DEFAULT_VAL)+1,CHARINDEX(',', INPUT_DEFAULT_VAL)+10) AS WEB_SERVICE_CODE\nFROM JH_WS02_CODE_RANGE_ANALYSIS WHERE CODE_ID_PK \= @PK\n) AS D  ON 1\=1 ORDER BY PK\n\nINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t( ProcPK\n\t\t,hashValues\n\t\t,RETURN_CODE \n\t\t,RETURN_MSG \n\t\t,DATA_UNIQUE_KEY \n\t\t,DATA_ACTION_TYPE \n\t\t,MEMO)\nVALUES(        \n\t\t'1741217' \n\t\t,@FROM_OUTSIDE\n\t\t,'0'\n\t\t,'SUCCESS'\n\t\t,''\n\t\t,'D' \n\t\t,'');\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n\n            INSERT INTO DATA_CHANGE_LOG\n            (FUNC_ID, \n             PROC_TYPE, \n             USER_ID, \n             DATA_NO, \n             EVENT_DT, \n             MEMO, \n\t\t\t ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             SessionID, \n             ProcPK, \n             PROC_TARGET\n            )\n            VALUES\n            (@CODE_ID,\n             'INSERT', \n             'todd', \n             IDENT_CURRENT('JH_WS02_FLOW_WS_RELATION') ,\n\n             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '$$MEMO$$', \n\t\t\t 'todd', \n             'JH', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             'NONESID', \n             '1741217', \n             @CODE_ID\n\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            );\nEND TRY \n\nBEGIN CATCH\n\n\tSELECT @RETURN_CODE \= ERROR_NUMBER() ,\n\t\t   @RETURN_MSG \= ERROR_MESSAGE() ,\n\t\t   @RETURN_TEST \=\n\t  (SELECT *\n\t   FROM\n\t\t (SELECT '1741217' AS ProcPK ,\n\t\t\t\t @FROM_OUTSIDE AS hashValues ,\n\t\t\t\t ERROR_NUMBER() AS RETURN_CODE ,\n\t\t\t\t ERROR_MESSAGE() AS RETURN_MSG ,\n\t\t\t\t '$$COLUMN1$$' AS DATA_UNIQUE_KEY ,\n\t\t\t\t '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n\t\t\t\t '$$MEMO$$' AS MEMO) AS A\n\t   FOR JSON AUTO)\nEND CATCH
SYS_MW_WS_RESET_FLOW=/*  UPDATED AT 20200908\n 1. DATA_CHANGE_LOG 追加 ADD_USER_ID、ADD_USER_COMPANY_ID、ADD_DT 資訊\n*/\n\nBEGIN TRY\nDECLARE @CODE_ID VARCHAR(100);\nDECLARE @PK VARCHAR(100); \nSET @CODE_ID \= 'SYS_MW_WS_RESET_FLOW' \nSET @PK \= (SELECT PK FROM JH_WS02_CODE_LIST WHERE CODE_ID \= @CODE_ID)\n\n/*刪除目的資料*/\nDELETE JH_WS02_FLOW_WS_RELATION\n\n    INSERT INTO DATA_CHANGE_LOG\n    (FUNC_ID, \n        PROC_TYPE, \n        USER_ID, \n        DATA_NO, \n        EVENT_DT, \n        MEMO, \n        ADD_USER_ID, \n        ADD_USER_COMPANY_ID, \n        ADD_DT, \n        SessionID, \n        ProcPK, \n        PROC_TARGET\n    )\n    VALUES\n    (   @CODE_ID, \n        'DELETE', \n        'todd', \n        IDENT_CURRENT('JH_WS02_FLOW_WS_RELATION') ,\n\n        /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n        CONVERT(VARCHAR(20), GETDATE(), 120), \n        '$$MEMO$$', \n        'todd', \n        'JH', \n        CONVERT(VARCHAR(20), GETDATE(), 120), \n        'NONESID', \n        '1741217', \n        @CODE_ID\n\n    /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n    );\n\n\n\n/*新增2組主機*/\n\nINSERT INTO JH_WS02_FLOW_WS_RELATION( FLOW_ID_PK,CLASS_NUM,WEB_SERVICE_CODE,FLOW_URL,IS_DOING,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT,LAST_MOD_USER_ID,LAST_MOD_USER_COMPANY_ID,LAST_MOD_DT,DEL_USER_ID,DEL_USER_COMPANY_ID,DEL_DT,COMPANY_ID,DATA_STATUS) \nSELECT PK AS 'FLOW_ID_PK', CLASS_NUM,WEB_SERVICE_CODE,NULL,'Y','root','MLI',CONVERT(VARCHAR(19), GETDATE(),120),NULL,NULL,NULL,NULL,NULL,NULL,'MLI','0' AS 'DATA_STATUS' FROM JH_WS02_FLOW_LIST AS M LEFT JOIN (\nSELECT         \nSUBSTRING(INPUT_DEFAULT_VAL, 1, CHARINDEX(',', INPUT_DEFAULT_VAL)-1) AS CLASS_NUM,\nSUBSTRING(INPUT_DEFAULT_VAL, CHARINDEX(',', INPUT_DEFAULT_VAL)+1,CHARINDEX(',', INPUT_DEFAULT_VAL)+10) AS WEB_SERVICE_CODE\nFROM JH_WS02_CODE_RANGE_ANALYSIS WHERE CODE_ID_PK \= @PK\n) AS D  ON 1\=1 ORDER BY PK\n\nINSERT INTO MEM_API_RESULT   /* WITH (ROWLOCK) */\n\t\t( ProcPK\n\t\t,hashValues\n\t\t,RETURN_CODE \n\t\t,RETURN_MSG \n\t\t,DATA_UNIQUE_KEY \n\t\t,DATA_ACTION_TYPE \n\t\t,MEMO)\nVALUES(        \n\t\t'1741217' \n\t\t,@FROM_OUTSIDE\n\t\t,'0'\n\t\t,'SUCCESS'\n\t\t,''\n\t\t,'D' \n\t\t,'');\n\n SELECT @RETURN_CODE \= RETURN_CODE ,\n     @RETURN_MSG \= RETURN_MSG ,\n     @RETURN_TEST \=\n   (SELECT ProcPK ,\n     hashValues ,\n     RETURN_CODE ,\n     RETURN_MSG ,\n     DATA_UNIQUE_KEY ,\n     DATA_ACTION_TYPE ,\n     MEMO\n    FROM MEM_API_RESULT  /* WITH (ROWLOCK) */\n    WHERE hashValues \= @FROM_OUTSIDE\n   FOR JSON AUTO )\n FROM MEM_API_RESULT\n WHERE hashValues \= @FROM_OUTSIDE\n\n\n    INSERT INTO DATA_CHANGE_LOG\n    (FUNC_ID, \n        PROC_TYPE, \n        USER_ID, \n        DATA_NO, \n        EVENT_DT, \n        MEMO, \n        ADD_USER_ID, \n        ADD_USER_COMPANY_ID, \n        ADD_DT, \n        SessionID, \n        ProcPK, \n        PROC_TARGET\n    )\n    VALUES\n    (   @CODE_ID, \n        'INSERT', \n        'todd', \n        IDENT_CURRENT('JH_WS02_FLOW_WS_RELATION') ,\n\n        /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n        CONVERT(VARCHAR(20), GETDATE(), 120), \n        '$$MEMO$$', \n        'todd', \n        'JH', \n        CONVERT(VARCHAR(20), GETDATE(), 120), \n        'NONESID', \n        '1741217', \n        @CODE_ID\n/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n);\n\nEND TRY \n\nBEGIN CATCH\n\n\tSELECT @RETURN_CODE \= ERROR_NUMBER() ,\n\t\t   @RETURN_MSG \= ERROR_MESSAGE() ,\n\t\t   @RETURN_TEST \=\n\t  (SELECT *\n\t   FROM\n\t\t (SELECT '1741217' AS ProcPK ,\n\t\t\t\t @FROM_OUTSIDE AS hashValues ,\n\t\t\t\t ERROR_NUMBER() AS RETURN_CODE ,\n\t\t\t\t ERROR_MESSAGE() AS RETURN_MSG ,\n\t\t\t\t '$$COLUMN1$$' AS DATA_UNIQUE_KEY ,\n\t\t\t\t '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE ,\n\t\t\t\t '$$MEMO$$' AS MEMO) AS A\n\t   FOR JSON AUTO)\n\n\n\nEND CATCH
SYS_PARAM_PW_CHECK=SELECT IS_ENCRYPT\nFROM JH_WS02_CODE_RANGE_ANALYSIS\nWHERE CODE_ID_PK \= (\n\t\tSELECT PK\n\t\tFROM JH_WS02_CODE_LIST\n\t\tWHERE CODE_ID \= 'SYS_DB_CHECK'\n\t\t)\n\tAND INPUT_FIELD \= 'PARAM_PW'\n
SYS_PATH_SEARCH=SELECT *,\n\n  (SELECT COUNT(*)\n   FROM JH_WS02_FM_LIST\n   WHERE 1 \= 1\n     AND (FM_TEXT_REAL_PATH LIKE '%$$FM_TEXT_REAL_PATH$$%'\n          OR 'ALL' \= '$$FM_TEXT_REAL_PATH$$') ) AS totalProperty\nFROM\n  (SELECT ROW_NUMBER() OVER (\n                             ORDER BY PK ASC) AS RowNum,\n                            PK,\n                            FM_PARENT_PK,\n                            FM_TEXT,\n                            FM_REAL_PATH,\n                            FM_TEXT_REAL_PATH,\n                            ADD_USER_ID,\n                            ADD_USER_COMPANY_ID,\n                            ADD_DT,\n                            LAST_MOD_USER_ID,\n                            LAST_MOD_USER_COMPANY_ID,\n                            LAST_MOD_DT,\n                            DEL_USER_ID,\n                            DEL_USER_COMPANY_ID,\n                            DEL_DT,\n                            DATA_STATUS\n   FROM JH_WS02_FM_LIST WITH (NOLOCK)\n   WHERE 1 \= 1\n     AND (FM_TEXT_REAL_PATH LIKE '%$$FM_TEXT_REAL_PATH$$%'\n          OR 'ALL' \= '$$FM_TEXT_REAL_PATH$$')) AS new1\nWHERE RowNum > $$start$$\n  AND RowNum <\= ($$start$$ + $$limit$$)
SYS_PWD_UPD=EXEC('DECLARE @RETURN_CODE INT, @RETURN_MSG VARCHAR(1000)EXEC [JHSP_PWD_UPD] ''root'', ''$$OLD_PWD$$'', ''$$NEW_PWD$$'', ''$$COMPANY_ID$$'', @RETURN_CODE \= @RETURN_CODE OUTPUT, @RETURN_MSG \= @RETURN_MSG OUTPUT;')
SYS_RELOAD_PROP=Funs/Reload2API/Entrance.kjb
SYS_RELOAD_PROP_GETOBJ10=SELECT \n\t(CASE RIGHT(WEB_SERVICE_SUB_DOMAIN,3) WHEN 443 \n\tTHEN CONCAT('https\://',WEB_SERVICE_SUB_DOMAIN,'/',WEB_SERVICE_NAME,'/','jh/SYS/lv/JHreLoadPROP') \n\tELSE CONCAT('http\://',WEB_SERVICE_SUB_DOMAIN,'/',WEB_SERVICE_NAME,'/','jh/SYS/lv/JHreLoadPROP') END) AS 'API'\n\t,WEB_SERVICE_CODE\n\t,WEB_SERVICE_SUB_DOMAIN\nFROM \n\tJH_WS02_WEBSERVICE_INFO WITH(NOLOCK) \nWHERE \n\tIS_DOING \= 'Y'
SYS_REPORT=PLUGINS/SYS_REPORT/REPORT_MAIN.kjb
SYS_SEARCH_DIR_SCOPE=SELECT *\nFROM (\n\tSELECT COUNT(*) AS totalProperty\n\tFROM JH_WS02_FM_LIST\n\tWHERE FM_SET_POINT IS NOT NULL\n\t\tAND FM_SET_POINT \!\= 'ROOT'\n\t\tAND FM_LV \= '1'\n\t) A\n\t,(\n\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\tORDER BY PK ASC\n\t\t\t\t) AS RowNum\n\t\t\t,FM_TEXT\n\t\t\t,FM_SET_POINT\n\t\tFROM JH_WS02_FM_LIST\n\t\tWHERE FM_SET_POINT IS NOT NULL\n\t\t\tAND FM_SET_POINT \!\= 'ROOT'\n\t\t\tAND FM_LV \= '1'\n\t\t\t/*搜尋範圍排除網路資源 by Chris 20230427*/\n\t\t\tAND FM_TEXT NOT IN ('網路資源')\n\t\t) B\nWHERE 1 \= 1\n
SYS_SELF_TEST_API=PLUGINS/SYS_SELF_TEST_API/SELF_TEST_API_MAIN.kjb
SYS_SESSION_CHK=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM (\n\t\t\tSELECT B.*\n\t\t\tFROM LOGIN_LOG AS A\n\t\t\tLEFT JOIN (\n\t\t\t\tSELECT A.*\n\t\t\t\t\t,ISNULL(B.FUNC_GROUP_CNT, 0) AS FUNC_GROUP_CNT\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM VW_VERIFY_USERS\n\t\t\t\t\tWHERE 1 \= 1 /*USERID \= ''*/ /*AND PASSWORD \= ?*/\n\t\t\t\t\t) A\n\t\t\t\tLEFT OUTER JOIN (\n\t\t\t\t\t/* 第 1、6 類可用功能總數 */ SELECT GROUPID\n\t\t\t\t\t\t,FUNC_GROUP\n\t\t\t\t\t\t,COUNT(FUNC_GROUP) AS FUNC_GROUP_CNT\n\t\t\t\t\tFROM (\n\t\t\t\t\t\t/* 權限總表 */ SELECT A.[GROUPID]\n\t\t\t\t\t\t\t,B.[USER_ID]\n\t\t\t\t\t\t\t,LEFT(A.[FUNC_ID], 2) AS FUNC_GROUP\n\t\t\t\t\t\t\t,A.[FUNC_ID]\n\t\t\t\t\t\t\t,ISNULL(B.U_QRY, A.QRY) AS QRY\n\t\t\t\t\t\tFROM (\n\t\t\t\t\t\t\tSELECT GROUPID\n\t\t\t\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t\t\t\t,[QRY]\n\t\t\t\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t\t\tFROM GROUP_FUNC_AUTH\n\t\t\t\t\t\t\tWHERE [QRY] \= '1'\n\t\t\t\t\t\t\t) A\n\t\t\t\t\t\tLEFT OUTER JOIN (\n\t\t\t\t\t\t\tSELECT GROUPID\n\t\t\t\t\t\t\t\t,USER_ID\n\t\t\t\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t\t\t\t,[QRY] AS U_QRY\n\t\t\t\t\t\t\tFROM USER_FUNC_AUTH\n\t\t\t\t\t\t\tWHERE 1 \= 1 /*USER_ID \= ''*/\n\t\t\t\t\t\t\t\tAND GROUPID IN (\n\t\t\t\t\t\t\t\t\tSELECT GROUPID\n\t\t\t\t\t\t\t\t\tFROM VW_VERIFY_USERS\n\t\t\t\t\t\t\t\t\tWHERE 1 \= 1 /*USERID \= 'esb03732'*/\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tAND QRY \= '1'\n\t\t\t\t\t\t\t) B ON (\n\t\t\t\t\t\t\t\tA.GROUPID \= B.GROUPID\n\t\t\t\t\t\t\t\tAND A.FUNC_ID \= B.FUNC_ID\n\t\t\t\t\t\t\t\tAND A.COMPANY_ID \= B.COMPANY_ID\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\tWHERE A.GROUPID IN (\n\t\t\t\t\t\t\t\tSELECT GROUPID\n\t\t\t\t\t\t\t\tFROM VW_VERIFY_USERS\n\t\t\t\t\t\t\t\tWHERE 1 \= 1 /*USERID \= ''*/\n\t\t\t\t\t\t\t\t) /* 權限總表 */\n\t\t\t\t\t\t) B\n\t\t\t\t\tWHERE LEFT([FUNC_ID], 4) IN (\n\t\t\t\t\t\t\t'Fn01'\n\t\t\t\t\t\t\t,'Fn06'\n\t\t\t\t\t\t\t)\n\t\t\t\t\tGROUP BY GROUPID\n\t\t\t\t\t\t,FUNC_GROUP /* 第 1、6 類可用功能總數 */\n\t\t\t\t\t) B ON a.GROUPID \= b.GROUPID\n\t\t\t\t) B ON A.[USER_ID] \= B.USERID\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND LOGOUT_DT IS NULL\n\t\t\t\tAND (SESSION_ID \= '$$SESSION_ID$$')\n\t\t\t) AS CNT\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY USERID ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM (\n\t\tSELECT A.USER_IP\n\t\t\t,B.*\n\t\tFROM LOGIN_LOG AS A\n\t\tLEFT JOIN (\n\t\t\tSELECT A.*\n\t\t\t\t,ISNULL(B.FUNC_GROUP_CNT, 0) AS FUNC_GROUP_CNT\n\t\t\tFROM (\n\t\t\t\tSELECT *\n\t\t\t\tFROM VW_VERIFY_USERS\n\t\t\t\tWHERE 1 \= 1 /*USERID \= ''*/ /*AND PASSWORD \= ?*/\n\t\t\t\t) A\n\t\t\tLEFT OUTER JOIN (\n\t\t\t\t/* 第 1、6 類可用功能總數 */ SELECT GROUPID\n\t\t\t\t\t,FUNC_GROUP\n\t\t\t\t\t,COUNT(FUNC_GROUP) AS FUNC_GROUP_CNT\n\t\t\t\tFROM (\n\t\t\t\t\t/* 權限總表 */ SELECT A.[GROUPID]\n\t\t\t\t\t\t,B.[USER_ID]\n\t\t\t\t\t\t,LEFT(A.[FUNC_ID], 2) AS FUNC_GROUP\n\t\t\t\t\t\t,A.[FUNC_ID]\n\t\t\t\t\t\t,ISNULL(B.U_QRY, A.QRY) AS QRY\n\t\t\t\t\tFROM (\n\t\t\t\t\t\tSELECT GROUPID\n\t\t\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t\t\t,[QRY]\n\t\t\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t\tFROM GROUP_FUNC_AUTH\n\t\t\t\t\t\tWHERE [QRY] \= '1'\n\t\t\t\t\t\t) A\n\t\t\t\t\tLEFT OUTER JOIN (\n\t\t\t\t\t\tSELECT GROUPID\n\t\t\t\t\t\t\t,USER_ID\n\t\t\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t\t\t,COMPANY_ID\n\t\t\t\t\t\t\t,[QRY] AS U_QRY\n\t\t\t\t\t\tFROM USER_FUNC_AUTH\n\t\t\t\t\t\tWHERE 1 \= 1 /*USER_ID \= ''*/\n\t\t\t\t\t\t\tAND GROUPID IN (\n\t\t\t\t\t\t\t\tSELECT GROUPID\n\t\t\t\t\t\t\t\tFROM VW_VERIFY_USERS\n\t\t\t\t\t\t\t\tWHERE 1 \= 1 /*USERID \= ''*/\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tAND QRY \= '1'\n\t\t\t\t\t\t) B ON (\n\t\t\t\t\t\t\tA.GROUPID \= B.GROUPID\n\t\t\t\t\t\t\tAND A.FUNC_ID \= B.FUNC_ID\n\t\t\t\t\t\t\tAND A.COMPANY_ID \= B.COMPANY_ID\n\t\t\t\t\t\t\t)\n\t\t\t\t\tWHERE A.GROUPID IN (\n\t\t\t\t\t\t\tSELECT GROUPID\n\t\t\t\t\t\t\tFROM VW_VERIFY_USERS\n\t\t\t\t\t\t\tWHERE 1 \= 1 /*USERID \= ''*/\n\t\t\t\t\t\t\t) /* 權限總表 */\n\t\t\t\t\t) B\n\t\t\t\tWHERE LEFT([FUNC_ID], 4) IN (\n\t\t\t\t\t\t'Fn01'\n\t\t\t\t\t\t,'Fn06'\n\t\t\t\t\t\t)\n\t\t\t\tGROUP BY GROUPID\n\t\t\t\t\t,FUNC_GROUP /* 第 1、6 類可用功能總數 */\n\t\t\t\t) B ON a.GROUPID \= b.GROUPID\n\t\t\t) B ON A.[USER_ID] \= B.USERID\n\t\tWHERE 1 \= 1\n\t\t\tAND LOGOUT_DT IS NULL\n\t\t\tAND (SESSION_ID \= '$$SESSION_ID$$')\n\t\t) AS REC\n\t) AS new1;\n
SYS_SHARE_ADMIN=SELECT *\n ,(\n  SELECT COUNT(*)\nFROM JH_WS02_FM_RULE WITH (NOLOCK)\nWHERE 1 \= 1\n  AND (FM_DATA_TYPE \= '$$FM_DATA_TYPE$$'\n       OR 'ALL' \= '$$FM_DATA_TYPE$$')\n  AND (DATA_STATUS \= '$$DATA_STATUS$$'\n       OR 'ALL' \= '$$DATA_STATUS$$')) AS totalProperty\nFROM (\nSELECT ROW_NUMBER() OVER (\n   ORDER BY PK ASC) AS RowNum,\n\t\tPK,\n       FM_LIST_PK,\n       FM_REAL_PATH,\n       FM_FOLDER_NAME,\n       FM_FILE_NAME,\n       FM_DATA_TYPE,\n       FM_SHELVES,\n       FM_RULE_UNIT,\n       FM_RULE_VALUE,\n       FM_RULE_START_DT,\n       FM_RULE_END_DT,\n       FM_HELP,\n       OWNER_NAME,\n       ADD_DT,\n       ADD_USER_ID,\n       ADD_USER_COMPANY_ID,\n       LAST_MOD_USER_ID,\n       LAST_MOD_USER_COMPANY_ID,\n       LAST_MOD_DT,\n       DATA_STATUS\nFROM JH_WS02_FM_RULE WITH (NOLOCK)\nWHERE 1 \= 1\n  AND (FM_DATA_TYPE \= '$$FM_DATA_TYPE$$'\n       OR 'ALL' \= '$$FM_DATA_TYPE$$')\n  AND (DATA_STATUS \= '$$DATA_STATUS$$'\n       OR 'ALL' \= '$$DATA_STATUS$$')\n) AS new1\nWHERE RowNum > $$start$$\n AND RowNum <\= ($$start$$ + $$limit$$);
SYS_SHARE_DEP=SELECT RowNum\n\t,DEPARTMENT_IDX\n\t,DEPID + '-' + DEPARTNAME AS DEPARTNAME\n\t,DEPID\n\t,totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY DEPID ASC\n\t\t\t) AS RowNum\n\t\t,*\n\tFROM DEPARTMENT\n\tWHERE 1 \= 1\n\t\tAND (\n\t\t\tDEPID \= '$$DEPID$$'\n\t\t\tOR 'ALL' \= '$$DEPID$$'\n\t\t\t)\n\t\tAND (\n\t\t\tDEPARTNAME LIKE '%$$DEPARTNAME$$%'\n\t\t\tOR 'ALL' \= '$$DEPARTNAME$$'\n\t\t\t)\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY DEPID ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,*\n\t\t\tFROM DEPARTMENT\n\t\t\tWHERE 1 \= 1\n\t\t\t\tAND (\n\t\t\t\t\tDEPID \= '$$DEPID$$'\n\t\t\t\t\tOR 'ALL' \= '$$DEPID$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tDEPARTNAME LIKE '%$$DEPARTNAME$$%'\n\t\t\t\t\tOR 'ALL' \= '$$DEPARTNAME$$'\n\t\t\t\t\t)\n\t\t\t) AS B\n\t\t) AS B\n
SYS_SHARE_MGR=SELECT * FROM (\n/*-----------COUNTER-----------*/\n\n\tSELECT COUNT(*) AS totalProperty FROM (\n\t\tSELECT \n\t\t\tC.FM_RULE_VALUE,\n \t\t\tC.FM_RULE_VALUE_NAME,\n\t\t\tC.FM_FILE_NAME,\n\t\t\tC.FM_FILE_NAME AS [FILE_NAME],\n\t\t\tC.FM_FILE_NAME AS [XX_FILE_NAME],\n\t\t\tC.FM_RULE_START_DT,\n\t\t\tC.FM_RULE_END_DT\n\t\t FROM (\n\t\t\n\t\t\t /* 分享對象：人 */\n\t\t   (SELECT A.*,\n\t\t\t   B.USERNAME AS FM_RULE_VALUE_NAME\n\t\tFROM\n\t\t  (SELECT *,\n\t\t\t\t  (CASE\n\t\t\t\t\t   WHEN FM_DATA_TYPE \= '9000' THEN '9000ROOT'\n\t\t\t\t\t   ELSE FM_REAL_ROOT_RECORD\n\t\t\t\t   END) AS MAPPING_SET\n\t\t   FROM JH_WS02_FM_RULE\n\t\t   WHERE FM_RULE_UNIT \= 'USER' ) A\n\t\tLEFT JOIN USERS B ON A.FM_RULE_VALUE \= B.USERID)\n\t\t/* 分享對象：人 */\n\n\n\t\t\tUNION ALL \n\n\n\t\t\t/* 分享對象：部門 */\n\t\t\t(\n\t\t\t\tSELECT A.*,\n\t\t\t   B.DEPARTNAME AS FM_RULE_VALUE\n\t\tFROM\n\t\t  (SELECT *,\n\t\t\t\t  (CASE\n\t\t\t\t\t   WHEN FM_DATA_TYPE \= '9000' THEN '9000ROOT'\n\t\t\t\t\t   ELSE FM_REAL_ROOT_RECORD\n\t\t\t\t   END) AS MAPPING_SET\n\t\t   FROM JH_WS02_FM_RULE\n\t\t   WHERE FM_RULE_UNIT \= 'DEP' ) A\n\t\tLEFT JOIN DEPARTMENT B ON A.FM_RULE_VALUE \= B.DEPID\n\t\t\t)\n\t\t\t/* 分享對象：部門 */\n\t\t)C LEFT JOIN JH_WS02_FM_LIST D ON C.MAPPING_SET \= D.FM_SET_POINT\n\t\tWHERE 1 \= 1\n\t\tAND C.FM_DATA_TYPE \= '$$FM_DATA_TYPE$$'\n\n   \t\tAND ((OWNER_NAME \= '$$OWNER_NAME$$' OR 'ALL' \= '$$OWNER_NAME$$') OR (FM_RULE_VALUE \= '$$FM_RULE_VALUE$$' OR (FM_RULE_VALUE \= '$$OWNER_NAME$$' and OWNER_NAME \= '$$OWNER_NAME$$')))\n\t) CNT\n\tWHERE ((FM_RULE_VALUE LIKE '%$$VALUE_KEYWORD$$%' OR 'ALL' \= '$$VALUE_KEYWORD$$') OR (FM_RULE_VALUE_NAME LIKE '%$$VALUE_KEYWORD$$%' OR 'ALL' \= '$$VALUE_KEYWORD$$'))\n\tAND (FM_FILE_NAME LIKE '%$$RULE_KEYWORD$$%' OR 'ALL' \= '$$RULE_KEYWORD$$')\n/* 日期時間條件 */\nAND (\n\tCONVERT(VARCHAR, CONVERT(DATETIME, FM_RULE_START_DT), 120) >\=  CONCAT('$$START_DATE$$', ' ', '$$START_TIME$$') OR ('$$START_DATE$$' \= 'ALL')\n\t)\nAND (\n\t/*CONVERT(VARCHAR, CONVERT(SMALLDATETIME, ISNULL(FM_RULE_END_DT, CONVERT(VARCHAR, GETDATE(), 120))), 120) <\= CONCAT('$$END_DATE$$', ' ', '$$END_TIME$$') OR ('$$END_DATE$$' \= 'ALL')*/\n\t/* 未設定迄日的將由只查詢起日一併帶出*/\n\tCONVERT(VARCHAR, CONVERT(DATETIME, FM_RULE_END_DT), 120) <\= CONCAT('$$END_DATE$$', ' ', '$$END_TIME$$') OR ('$$END_DATE$$' \= 'ALL')\n\t)\n/* 日期時間條件 */\n   ) A,\n   (\n   /**/\n/*-----------DATA-----------*/\n\nSELECT ROW_NUMBER() OVER (ORDER BY PK ASC) AS RowNum, * FROM (\n\tSELECT \n\t\tC.PK,\n\t\tC.FM_LIST_PK,\n\t\tC.FM_REAL_ROOT_RECORD,\n\t\tD.FM_TEXT,\n\t\tC.FM_REAL_PATH,\n\t\tC.FM_TEXT_REAL_PATH,\n\t\tC.FM_FOLDER_NAME,\n\t\tC.FM_FILE_NAME,\n\t\tC.FM_FILE_NAME AS [FILE_NAME],\n\t\tC.FM_FILE_NAME AS [XX_FILE_NAME],\n\t\t/*不能用replace，假設原本檔案名稱就有zip的字，且只有本地端的才處理掉最後面的.zip，因為本地端上傳會壓縮成.zip*/\n\t\t(CASE \n\t\t\tWHEN ((C.FM_DATA_TYPE \= 'LOCAL') AND (C.FM_FILE_NAME LIKE '%.zip')) THEN SUBSTRING(C.FM_FILE_NAME, 1, (LEN(C.FM_FILE_NAME)-4)) \n\t\t\tWHEN ((C.FM_DATA_TYPE \= 'LOCAL') AND (C.FM_FILE_NAME IS NULL)) THEN ''\n\t\t\tWHEN (C.FM_FILE_NAME IS NOT NULL) THEN C.FM_FILE_NAME\n\t\tEND) AS DISPLAY_FM_FILE_NAME,\n\t\tC.FM_DATA_TYPE,\n\t\t(CASE\n\t\t\tWHEN C.FM_DATA_TYPE \= '9000' THEN '9000ROOT'\n\t\t\tELSE FM_DATA_TYPE\n\t\tEND) AS MAPPING_FM_DATA_TYPE,\n\t\tC.FM_SHELVES,\n\t\tC.FM_RULE_UNIT,\n\t\tC.FM_RULE_VALUE,\n \t\tC.FM_RULE_VALUE_NAME,\n\t\tC.FM_RULE_START_DT,\n\t\tCONVERT(VARCHAR, CAST(C.FM_RULE_START_DT AS DATE), 111) AS FM_RULE_START_DATE,\n\t\tCONVERT(VARCHAR, CAST(C.FM_RULE_START_DT AS TIME), 108) AS FM_RULE_START_TIME,\n\t\tC.FM_RULE_END_DT,\n\t\t(CASE WHEN C.FM_RULE_END_DT IS NULL THEN '' ELSE CONVERT(VARCHAR, CAST(C.FM_RULE_END_DT AS DATE), 111) END) AS FM_RULE_END_DATE,\n\t\t(CASE WHEN C.FM_RULE_END_DT IS NULL THEN '' ELSE CONVERT(VARCHAR, CAST(C.FM_RULE_END_DT AS TIME), 108) END) AS FM_RULE_END_TIME,\n\t\tC.FM_PATH_EXIST,\n\t\tC.FM_FILE_EXIST,\n\t\tC.FM_EXPIRED,\n\t\t(CASE\n\t\t\tWHEN CONVERT(DATETIME, GETDATE(), 120) >\= CONVERT(DATETIME, C.FM_RULE_END_DT, 120) THEN 'Y'\n\t\t\tELSE 'N'\n\t\tEND) AS IS_EXPIRED,\n\t\t(CASE\n\t\t\tWHEN C.FM_RULE_UNIT \= 'USER' THEN C.FM_RULE_VALUE\n\t\t\tELSE NULL\n\t\tEND) AS FM_RULE_VALUE_U,\n\t\t(CASE\n\t\t\tWHEN C.FM_RULE_UNIT \= 'DEP' THEN C.FM_RULE_VALUE\n\t\t\tELSE NULL\n\t\tEND) AS FM_RULE_VALUE_D,\n\t\tC.FM_HELP,\n\t\tC.OWNER_NAME,\n\t\tC.ADD_USER_ID,\n\t\tC.ADD_USER_COMPANY_ID,\n\t\tC.ADD_DT,\n\t\tC.LAST_MOD_USER_ID,\n\t\tC.LAST_MOD_USER_COMPANY_ID,\n\t\tC.LAST_MOD_DT,\n\t\tC.DEL_USER_ID,\n\t\tC.DEL_USER_COMPANY_ID,\n\t\tC.DEL_DT,\n\t\tC.DATA_STATUS\n\t FROM (\n\t\n\t\t /* 分享對象：人 */\n\t   (\n\t\tSELECT A.*,\n\t\t   B.USERNAME AS FM_RULE_VALUE_NAME\n\t\tFROM\n\t\t  (SELECT *,\n\t\t\t\t  (CASE\n\t\t\t\t\t   WHEN FM_DATA_TYPE \= '9000' THEN '9000ROOT'\n\t\t\t\t\t   ELSE FM_REAL_ROOT_RECORD\n\t\t\t\t   END) AS MAPPING_SET\n\t\t   FROM JH_WS02_FM_RULE\n\t\t   WHERE FM_RULE_UNIT \= 'USER' ) A\n\t\tLEFT JOIN USERS B ON A.FM_RULE_VALUE \= B.USERID\n\t\t)\n\t/* 分享對象：人 */\n\n\n\t\tUNION ALL \n\n\n\t\t/* 分享對象：部門 */\n\t\t(\n\t\tSELECT A.*,\n\t\t   B.DEPARTNAME AS FM_RULE_VALUE\n\t\tFROM\n\t\t  (SELECT *,\n\t\t\t\t  (CASE\n\t\t\t\t\t   WHEN FM_DATA_TYPE \= '9000' THEN '9000ROOT'\n\t\t\t\t\t   ELSE FM_REAL_ROOT_RECORD\n\t\t\t\t   END) AS MAPPING_SET\n\t\t   FROM JH_WS02_FM_RULE\n\t\t   WHERE FM_RULE_UNIT \= 'DEP' ) A\n\t\tLEFT JOIN DEPARTMENT B ON A.FM_RULE_VALUE \= B.DEPID\n\t\t)\n\t\t/* 分享對象：部門 */\n\n\t) C LEFT JOIN JH_WS02_FM_LIST D ON C.MAPPING_SET \= D.FM_SET_POINT\n\tWHERE 1 \= 1\n   AND C.FM_DATA_TYPE \= '$$FM_DATA_TYPE$$'\n\n   \tAND ((OWNER_NAME \= '$$OWNER_NAME$$' OR 'ALL' \= '$$OWNER_NAME$$') OR (FM_RULE_VALUE \= '$$FM_RULE_VALUE$$' OR (FM_RULE_VALUE \= '$$OWNER_NAME$$' and OWNER_NAME \= '$$OWNER_NAME$$')))\n) DATA\nWHERE ((FM_RULE_VALUE LIKE '%$$VALUE_KEYWORD$$%' OR 'ALL' \= '$$VALUE_KEYWORD$$') OR (FM_RULE_VALUE_NAME LIKE '%$$VALUE_KEYWORD$$%' OR 'ALL' \= '$$VALUE_KEYWORD$$'))\nAND (FM_FILE_NAME LIKE '%$$RULE_KEYWORD$$%' OR 'ALL' \= '$$RULE_KEYWORD$$')\n/* 日期時間條件 */\nAND (\n\tCONVERT(VARCHAR, CONVERT(DATETIME, FM_RULE_START_DT), 120) >\=  CONCAT('$$START_DATE$$', ' ', '$$START_TIME$$') OR ('$$START_DATE$$' \= 'ALL')\n\t)\nAND (\n\t/*CONVERT(VARCHAR, CONVERT(SMALLDATETIME, ISNULL(FM_RULE_END_DT, CONVERT(VARCHAR, GETDATE(), 120))), 120) <\= CONCAT('$$END_DATE$$', ' ', '$$END_TIME$$') OR ('$$END_DATE$$' \= 'ALL')*/\n\t/* 未設定迄日的將由只查詢起日一併帶出*/\n\tCONVERT(VARCHAR, CONVERT(DATETIME, FM_RULE_END_DT), 120) <\= CONCAT('$$END_DATE$$', ' ', '$$END_TIME$$') OR ('$$END_DATE$$' \= 'ALL')\n\t)\n/* 日期時間條件 */\n\t/**/\n   ) B\n    WHERE 1 \= 1\n   AND RowNum > $$start$$\n   AND RowNum <\= ($$start$$ + $$limit$$)\n   /**/
SYS_SHARE_USERS=SELECT *\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY USERID ASC\n\t\t\t) AS RowNum\n\t\t,T1.USERID\n\t\t,T1.USERNAME\n\t\t,T1.USERID + ' ' + T1.USERNAME AS USER_ID_NAME\n\t\t,T1.PASSWORD\n\t\t,T1.COMPANY\n\t\t,T1.DEPID\n\t\t,T1.EMAIL\n\t\t,T1.TEL1\n\t\t,T1.TEL2\n\t\t,T1.ISLOCK\n\t\t,T1.DEADLINE_DATE\n\t\t,T1.DATA_STATUS\n\t\t,T1.ADD_USER_ID\n\t\t,T1.ADD_USER_COMPANY_ID\n\t\t,T1.ADD_DT\n\t\t,T1.LAST_MOD_USER_ID\n\t\t,T1.LAST_MOD_USER_COMPANY_ID\n\t\t,T1.LAST_MOD_DT\n\t\t,T1.DEL_USER_ID\n\t\t,T1.DEL_USER_COMPANY_ID\n\t\t,T1.DEL_DT\n\t\t,T1.PRE_1_PASSWORD\n\t\t,T1.PRE_2_PASSWORD\n\t\t,T1.PRE_3_PASSWORD\n\t\t,T1.ACTIVE_DATE\n\t\t,T1.WRONG_TIMES\n\t\t,T2.DEPARTNAME\n\tFROM USERS T1\n\tINNER JOIN DEPARTMENT T2 ON T1.DEPID \= T2.DEPID\n\t\tAND (\n\t\t\tUSERID LIKE ('%$$USERID$$%')\n\t\t\tOR 'ALL' \= '$$USERID$$'\n\t\t\t)\n\t\tAND (\n\t\t\tUSERNAME LIKE ('%$$USERNAME$$%')\n\t\t\tOR 'ALL' \= '$$USERNAME$$'\n\t\t\t)\n\t) AS A\n\t,(\n\t\tSELECT COUNT(*) AS totalProperty\n\t\tFROM (\n\t\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\t\tORDER BY USERID ASC\n\t\t\t\t\t) AS RowNum\n\t\t\t\t,T1.USERID\n\t\t\t\t,T1.USERNAME\n\t\t\t\t,T1.PASSWORD\n\t\t\t\t,T1.COMPANY\n\t\t\t\t,T1.DEPID\n\t\t\t\t,T1.EMAIL\n\t\t\t\t,T1.TEL1\n\t\t\t\t,T1.TEL2\n\t\t\t\t,T1.ISLOCK\n\t\t\t\t,T1.DEADLINE_DATE\n\t\t\t\t,T1.DATA_STATUS\n\t\t\t\t,T1.ADD_USER_ID\n\t\t\t\t,T1.ADD_USER_COMPANY_ID\n\t\t\t\t,T1.ADD_DT\n\t\t\t\t,T1.LAST_MOD_USER_ID\n\t\t\t\t,T1.LAST_MOD_USER_COMPANY_ID\n\t\t\t\t,T1.LAST_MOD_DT\n\t\t\t\t,T1.DEL_USER_ID\n\t\t\t\t,T1.DEL_USER_COMPANY_ID\n\t\t\t\t,T1.DEL_DT\n\t\t\t\t,T1.PRE_1_PASSWORD\n\t\t\t\t,T1.PRE_2_PASSWORD\n\t\t\t\t,T1.PRE_3_PASSWORD\n\t\t\t\t,T1.ACTIVE_DATE\n\t\t\t\t,T1.WRONG_TIMES\n\t\t\t\t,T2.DEPARTNAME\n\t\t\tFROM USERS T1\n\t\t\tINNER JOIN DEPARTMENT T2 ON T1.DEPID \= T2.DEPID\n\t\t\t\tAND (\n\t\t\t\t\tUSERID LIKE ('%$$USERID$$%')\n\t\t\t\t\tOR 'ALL' \= '$$USERID$$'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tUSERNAME LIKE ('%$$USERNAME$$%')\n\t\t\t\t\tOR 'ALL' \= '$$USERNAME$$'\n\t\t\t\t\t)\n\t\t\t) AS B\n\t\t) AS B\n
SYS_SHARING_SETTING=/*  UPDATED AT 20200908\n*/\nBEGIN TRY\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n\tBEGIN /* 1.1 功能主要異動 MASTER_TABLE_NAME *//* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# *//*  這一段 update 可用noli的excel 檔中的  INSERT 產生器，來產生對應的欄位及語法  */\n\t\tIF '$$TYPE$$' \= 'folder'\n\t\t\tBEGIN\n\t\t\t\tINSERT INTO JH_WS02_FM_RULE /* WITH (ROWLOCK) */ (\n\t\t\t\t\tFM_LIST_PK\n\t\t\t\t\t,FM_REAL_ROOT_RECORD\n\t\t\t\t\t,FM_REAL_PATH\n\t\t\t\t\t,FM_TEXT_REAL_PATH\n\t\t\t\t\t,FM_FOLDER_NAME\n\t\t\t\t\t,FM_DATA_TYPE\n\t\t\t\t\t,FM_SHELVES\n\t\t\t\t\t,FM_RULE_UNIT\n\t\t\t\t\t,FM_RULE_VALUE\n\t\t\t\t\t,FM_RULE_START_DT\n\t\t\t\t\t,FM_RULE_END_DT\n\t\t\t\t\t,FM_HELP\n\t\t\t\t\t,OWNER_NAME\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'$$FM_LIST_PK$$'\n\t\t\t\t\t,'$$FM_REAL_ROOT_RECORD$$'\n\t\t\t\t\t,'$$FM_REAL_PATH$$'\n\t\t\t\t\t,'$$FM_TEXT_REAL_PATH$$'\n\t\t\t\t\t,'$$FILE_NAME$$'\n\t\t\t\t\t,'$$FM_DATA_TYPE$$'\n\t\t\t\t\t,'$$FM_SHELVES$$'\n\t\t\t\t\t,'$$FM_RULE_UNIT$$'\n\t\t\t\t\t,'$$FM_RULE_VALUE$$'\n\t\t\t\t\t,'$$FM_RULE_START_DATE$$' + ' ' + '$$FM_RULE_START_TIME$$'\n\t\t\t\t\t,(CASE WHEN '$$FM_RULE_END_DATE$$' \= '' THEN NULL ELSE '$$FM_RULE_END_DATE$$' + ' ' + '$$FM_RULE_END_TIME$$' END)\n\t\t\t\t\t,'$$FM_HELP$$'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'$$COMPANY_ID$$'\n\t\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,0\n\t\t\t\t\t);\n\n\t\t\t\t\t/* 1.3 folder */\n\t\t\t\t\tINSERT INTO LOG_JH_WS02_FM_RULE /* WITH (ROWLOCK) */ (\n\t\t\t\t\t\tFUNC_ID\n\t\t\t\t\t\t,CRUD_STATE\n\t\t\t\t\t\t,PK\n\t\t\t\t\t\t,FM_LIST_PK\n\t\t\t\t\t\t,FM_REAL_ROOT_RECORD\n\t\t\t\t\t\t,FM_REAL_PATH\n\t\t\t\t\t\t,FM_TEXT_REAL_PATH\n\t\t\t\t\t\t,FM_FOLDER_NAME\n\t\t\t\t\t\t,FM_DATA_TYPE\n\t\t\t\t\t\t,FM_SHELVES\n\t\t\t\t\t\t,FM_RULE_UNIT\n\t\t\t\t\t\t,FM_RULE_VALUE\n\t\t\t\t\t\t,FM_RULE_START_DT\n\t\t\t\t\t\t,FM_RULE_END_DT\n\t\t\t\t\t\t,FM_HELP\n\t\t\t\t\t\t,OWNER_NAME\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t\t,DATA_CHANGE_LOG_ID\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES (\n\t\t\t\t\t\t'$$FunctionID$$'\n\t\t\t\t\t\t,'C'\n\t\t\t\t\t\t,IDENT_CURRENT('JH_WS02_FM_RULE')\n\t\t\t\t\t\t,'$$FM_LIST_PK$$'\n\t\t\t\t\t\t,'$$FM_REAL_ROOT_RECORD$$'\n\t\t\t\t\t\t,'$$FM_REAL_PATH$$'\n\t\t\t\t\t\t,'$$FM_TEXT_REAL_PATH$$'\n\t\t\t\t\t\t,'$$FILE_NAME$$'\n\t\t\t\t\t\t,'$$FM_DATA_TYPE$$'\n\t\t\t\t\t\t,'$$FM_SHELVES$$'\n\t\t\t\t\t\t,'$$FM_RULE_UNIT$$'\n\t\t\t\t\t\t,'$$FM_RULE_VALUE$$'\n\t\t\t\t\t\t,'$$FM_RULE_START_DATE$$' + ' ' + '$$FM_RULE_START_TIME$$'\n\t\t\t\t\t\t,(CASE WHEN '$$FM_RULE_END_DATE$$' \= '' THEN NULL ELSE '$$FM_RULE_END_DATE$$' + ' ' + '$$FM_RULE_END_TIME$$' END)\n\t\t\t\t\t\t,'$$FM_HELP$$'\n\t\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t\t,'$$COMPANY_ID$$'\n\t\t\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t\t,'0'\n\t\t\t\t\t\t,IDENT_CURRENT('DATA_CHANGE_LOG')\n\t\t\t\t\t\t);\n\t\t\tEND\n\t\tELSE\n\t\t\tBEGIN\n\t\t\t\tINSERT INTO JH_WS02_FM_RULE /* WITH (ROWLOCK) */ (\n\t\t\t\t\tFM_LIST_PK\n\t\t\t\t\t,FM_REAL_ROOT_RECORD\n\t\t\t\t\t,FM_REAL_PATH\n\t\t\t\t\t,FM_TEXT_REAL_PATH\n\t\t\t\t\t,FM_FILE_NAME\n\t\t\t\t\t,FM_DATA_TYPE\n\t\t\t\t\t,FM_SHELVES\n\t\t\t\t\t,FM_RULE_UNIT\n\t\t\t\t\t,FM_RULE_VALUE\n\t\t\t\t\t,FM_RULE_START_DT\n\t\t\t\t\t,FM_RULE_END_DT\n\t\t\t\t\t,FM_HELP\n\t\t\t\t\t,OWNER_NAME\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'$$FM_LIST_PK$$'\n\t\t\t\t\t,'$$FM_REAL_ROOT_RECORD$$'\n\t\t\t\t\t,'$$FM_REAL_PATH$$'\n\t\t\t\t\t,'$$FM_TEXT_REAL_PATH$$'\n\t\t\t\t\t,'$$FILE_NAME$$'\n\t\t\t\t\t,'$$FM_DATA_TYPE$$'\n\t\t\t\t\t,'$$FM_SHELVES$$'\n\t\t\t\t\t,'$$FM_RULE_UNIT$$'\n\t\t\t\t\t,'$$FM_RULE_VALUE$$'\n\t\t\t\t\t,'$$FM_RULE_START_DATE$$' + ' ' + '$$FM_RULE_START_TIME$$'\n\t\t\t\t\t,(CASE WHEN '$$FM_RULE_END_DATE$$' \= '' THEN NULL ELSE '$$FM_RULE_END_DATE$$' + ' ' + '$$FM_RULE_END_TIME$$' END)\n\t\t\t\t\t,'$$FM_HELP$$'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'$$COMPANY_ID$$'\n\t\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,0\n\t\t\t\t\t);\n\n\t\t\t\t\t/* 1.3 file */\n\t\t\t\t\tINSERT INTO LOG_JH_WS02_FM_RULE /* WITH (ROWLOCK) */ (\n\t\t\t\t\t\tFUNC_ID\n\t\t\t\t\t\t,CRUD_STATE\n\t\t\t\t\t\t,PK\n\t\t\t\t\t\t,FM_LIST_PK\n\t\t\t\t\t\t,FM_REAL_ROOT_RECORD\n\t\t\t\t\t\t,FM_REAL_PATH\n\t\t\t\t\t\t,FM_TEXT_REAL_PATH\n\t\t\t\t\t\t,FM_FILE_NAME\n\t\t\t\t\t\t,FM_DATA_TYPE\n\t\t\t\t\t\t,FM_SHELVES\n\t\t\t\t\t\t,FM_RULE_UNIT\n\t\t\t\t\t\t,FM_RULE_VALUE\n\t\t\t\t\t\t,FM_RULE_START_DT\n\t\t\t\t\t\t,FM_RULE_END_DT\n\t\t\t\t\t\t,FM_HELP\n\t\t\t\t\t\t,OWNER_NAME\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t\t,DATA_CHANGE_LOG_ID\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES (\n\t\t\t\t\t\t'$$FunctionID$$'\n\t\t\t\t\t\t,'C'\n\t\t\t\t\t\t,IDENT_CURRENT('JH_WS02_FM_RULE')\n\t\t\t\t\t\t,'$$FM_LIST_PK$$'\n\t\t\t\t\t\t,'$$FM_REAL_ROOT_RECORD$$'\n\t\t\t\t\t\t,'$$FM_REAL_PATH$$'\n\t\t\t\t\t\t,'$$FM_TEXT_REAL_PATH$$'\n\t\t\t\t\t\t,'$$FILE_NAME$$'\n\t\t\t\t\t\t,'$$FM_DATA_TYPE$$'\n\t\t\t\t\t\t,'$$FM_SHELVES$$'\n\t\t\t\t\t\t,'$$FM_RULE_UNIT$$'\n\t\t\t\t\t\t,'$$FM_RULE_VALUE$$'\n\t\t\t\t\t\t,'$$FM_RULE_START_DATE$$' + ' ' + '$$FM_RULE_START_TIME$$'\n\t\t\t\t\t\t,(CASE WHEN '$$FM_RULE_END_DATE$$' \= '' THEN NULL ELSE '$$FM_RULE_END_DATE$$' + ' ' + '$$FM_RULE_END_TIME$$' END)\n\t\t\t\t\t\t,'$$FM_HELP$$'\n\t\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t\t,'$$COMPANY_ID$$'\n\t\t\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t\t,'0'\n\t\t\t\t\t\t,IDENT_CURRENT('DATA_CHANGE_LOG')\n\t\t\t\t\t\t);\n\t\t\tEND\n\n\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$FunctionID$$'\n\t\t\t,'insert'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('JH_WS02_FM_RULE') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'TASK_FLOW_DETAIL' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t);\n\n\t\t\n\n\t\t/* 1.4 Action Return ，此全域暫存表格(MEM_API_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */ (\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,'$$PK$$'\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN /* 2.1 DATA_CHANGE_LOG */\n\t\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\t\tFUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t,ADD_USER_ID\n\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t,ADD_DT\n\t\t\t\t,SessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,PROC_TARGET\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'$$FunctionID$$'\n\t\t\t\t,'delete'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK_COL 流水號欄位 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'JH_WS02_FM_RULE' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t);\n\n\t\t\tIF EXISTS (\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM JH_WS02_FM_RULE\n\t\t\t\t\tWHERE PK \= '$$PK$$'\n\t\t\t\t\t\tAND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t\t)\n\t\t\tBEGIN /* 2.2 DATA Detail LOG (before modified) *//* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\tINSERT INTO LOG_JH_WS02_FM_RULE /* WITH (ROWLOCK) */ (\n\t\t\t\t\tFUNC_ID\n\t\t\t\t\t,CRUD_STATE\n\t\t\t\t\t,PK\n\t\t\t\t\t,FM_LIST_PK\n\t\t\t\t\t,FM_REAL_ROOT_RECORD\n\t\t\t\t\t,FM_REAL_PATH\n\t\t\t\t\t,FM_FOLDER_NAME\n\t\t\t\t\t,FM_FILE_NAME\n\t\t\t\t\t,FM_DATA_TYPE\n\t\t\t\t\t,FM_SHELVES\n\t\t\t\t\t,FM_RULE_UNIT\n\t\t\t\t\t,FM_RULE_VALUE\n\t\t\t\t\t,FM_RULE_START_DT\n\t\t\t\t\t,FM_RULE_END_DT\n\t\t\t\t\t,FM_FILE_EXIST\n\t\t\t\t\t,FM_PATH_EXIST\n\t\t\t\t\t,FM_EXPIRED\n\t\t\t\t\t,FM_HELP\n\t\t\t\t\t,OWNER_NAME\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t,DEL_DT\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t,DATA_CHANGE_LOG_ID\n\t\t\t\t\t)\n\t\t\t\tSELECT '$$FunctionID$$' AS FUNC_ID\n\t\t\t\t\t,'D' AS CRUD_STATE\n\t\t\t\t\t,PK\n\t\t\t\t\t,FM_LIST_PK\n\t\t\t\t\t,FM_REAL_ROOT_RECORD\n\t\t\t\t\t,FM_REAL_PATH\n\t\t\t\t\t,FM_FOLDER_NAME\n\t\t\t\t\t,FM_FILE_NAME\n\t\t\t\t\t,FM_DATA_TYPE\n\t\t\t\t\t,FM_SHELVES\n\t\t\t\t\t,FM_RULE_UNIT\n\t\t\t\t\t,FM_RULE_VALUE\n\t\t\t\t\t,FM_RULE_START_DT\n\t\t\t\t\t,FM_RULE_END_DT\n\t\t\t\t\t,FM_FILE_EXIST\n\t\t\t\t\t,FM_PATH_EXIST\n\t\t\t\t\t,FM_EXPIRED\n\t\t\t\t\t,FM_HELP\n\t\t\t\t\t,OWNER_NAME\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t,DEL_DT\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t\tFROM JH_WS02_FM_RULE\n\t\t\t\tWHERE PK \= '$$PK$$';\n\n\t\t\t\t/* 2.3 Action Return */\n\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */ (\n\t\t\t\t\tProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'0'\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t,'$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND\n\t\t\tELSE\n\t\t\tBEGIN /* 2.4 Action Return */\n\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */ (\n\t\t\t\t\tProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'-1'\n\t\t\t\t\t,'資料正在審核流程中，無法刪除'\n\t\t\t\t\t,'$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND /* 2.5 功能主要異動 Table */ /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\t\tDELETE JH_WS02_FM_RULE\n\t\t\tWITH (ROWLOCK)\n\t\t\tWHERE PK \= '$$PK$$';\n\t\tEND\n\t\tELSE\n\t\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\t\t\tBEGIN /* 3.1 DATA_CHANGE_LOG */\n\t\t\t\tINSERT INTO DATA_CHANGE_LOG /* WITH (ROWLOCK) */ (\n\t\t\t\t\tFUNC_ID\n\t\t\t\t\t,PROC_TYPE\n\t\t\t\t\t,USER_ID\n\t\t\t\t\t,DATA_NO\n\t\t\t\t\t,EVENT_DT\n\t\t\t\t\t,MEMO\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,SessionID\n\t\t\t\t\t,ProcPK\n\t\t\t\t\t,PROC_TARGET\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'$$FunctionID$$'\n\t\t\t\t\t,'update'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t\t,'${LOGPK}'\n\t\t\t\t\t,'JH_WS02_FM_RULE' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t);\n\n\t\t\t\tIF EXISTS (\n\t\t\t\t\t\tSELECT *\n\t\t\t\t\t\tFROM JH_WS02_FM_RULE\n\t\t\t\t\t\tWHERE PK \= '$$PK$$'\n\t\t\t\t\t\t\tAND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t\t\t)\n\t\t\t\tBEGIN /* 3.2 DATA Detail LOG (before modified) *//* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\tINSERT INTO LOG_JH_WS02_FM_RULE /* WITH (ROWLOCK) */ (\n\t\t\t\t\t\tFUNC_ID\n\t\t\t\t\t\t,CRUD_STATE\n\t\t\t\t\t\t,PK\n\t\t\t\t\t\t,FM_LIST_PK\n\t\t\t\t\t\t,FM_REAL_ROOT_RECORD\n\t\t\t\t\t\t,FM_REAL_PATH\n\t\t\t\t\t\t,FM_FOLDER_NAME\n\t\t\t\t\t\t,FM_FILE_NAME\n\t\t\t\t\t\t,FM_DATA_TYPE\n\t\t\t\t\t\t,FM_SHELVES\n\t\t\t\t\t\t,FM_RULE_UNIT\n\t\t\t\t\t\t,FM_RULE_VALUE\n\t\t\t\t\t\t,FM_RULE_START_DT\n\t\t\t\t\t\t,FM_RULE_END_DT\n\t\t\t\t\t\t,FM_FILE_EXIST\n\t\t\t\t\t\t,FM_PATH_EXIST\n\t\t\t\t\t\t,FM_EXPIRED\n\t\t\t\t\t\t,FM_HELP\n\t\t\t\t\t\t,OWNER_NAME\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t\t,DEL_DT\n\t\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t\t,DATA_CHANGE_LOG_ID\n\t\t\t\t\t\t)\n\t\t\t\t\tSELECT '$$FunctionID$$' AS FUNC_ID\n\t\t\t\t\t\t,'U' AS CRUD_STATE\n\t\t\t\t\t\t,PK\n\t\t\t\t\t\t,FM_LIST_PK\n\t\t\t\t\t\t,FM_REAL_ROOT_RECORD\n\t\t\t\t\t\t,FM_REAL_PATH\n\t\t\t\t\t\t,FM_FOLDER_NAME\n\t\t\t\t\t\t,FM_FILE_NAME\n\t\t\t\t\t\t,FM_DATA_TYPE\n\t\t\t\t\t\t,FM_SHELVES\n\t\t\t\t\t\t,FM_RULE_UNIT\n\t\t\t\t\t\t,FM_RULE_VALUE\n\t\t\t\t\t\t,FM_RULE_START_DT\n\t\t\t\t\t\t,FM_RULE_END_DT\n\t\t\t\t\t\t,FM_FILE_EXIST\n\t\t\t\t\t\t,FM_PATH_EXIST\n\t\t\t\t\t\t,FM_EXPIRED\n\t\t\t\t\t\t,FM_HELP\n\t\t\t\t\t\t,OWNER_NAME\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t\t,DEL_DT\n\t\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t\t,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t\t\tFROM JH_WS02_FM_RULE\n\t\t\t\t\tWHERE PK \= '$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */;\n\n\t\t\t\t\t/* 3.3 Action Return */\n\t\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */ (\n\t\t\t\t\t\tProcPK\n\t\t\t\t\t\t,hashValues\n\t\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t\t,MEMO\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES (\n\t\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t\t,'0'\n\t\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t\t,'$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t,'U'\n\t\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t\t);\n\t\t\t\tEND\n\t\t\t\tELSE\n\t\t\t\tBEGIN /* 3.4 Action Return */\n\t\t\t\t\tINSERT INTO MEM_API_RESULT /* WITH (ROWLOCK) */ (\n\t\t\t\t\t\tProcPK\n\t\t\t\t\t\t,hashValues\n\t\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t\t,MEMO\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES (\n\t\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t\t,'-1'\n\t\t\t\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t\t\t\t,'$$PK$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t,'U'\n\t\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t\t);\n\t\t\t\tEND /* 3.5 功能主要異動 Table */ /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\t\t\tUPDATE JH_WS02_FM_RULE\n\t\t\t\tWITH (ROWLOCK)\n\n\t\t\t\tSET FM_LIST_PK \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ISNUMERIC('$$FM_LIST_PK$$') \= 1\n\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\tWHEN ISNULL(FM_LIST_PK, '0') \= '$$FM_LIST_PK$$'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN '$$FM_LIST_PK$$' \= '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN '0'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE FM_LIST_PK\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tELSE '$$FM_LIST_PK$$'\n\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tELSE FM_LIST_PK\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_REAL_ROOT_RECORD \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_REAL_ROOT_RECORD$$', 1, 100) \= SUBSTRING('\#NO_DATA\#', 1, 100)\n\t\t\t\t\t\t\t\tTHEN FM_REAL_ROOT_RECORD\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_REAL_ROOT_RECORD$$', 1, 100)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_REAL_PATH \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_REAL_PATH$$', 1, 500) \= SUBSTRING('\#NO_DATA\#', 1, 500)\n\t\t\t\t\t\t\t\tTHEN FM_REAL_PATH\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_REAL_PATH$$', 1, 500)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_TEXT_REAL_PATH \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_TEXT_REAL_PATH$$', 1, 500) \= SUBSTRING('\#NO_DATA\#', 1, 500)\n\t\t\t\t\t\t\t\tTHEN FM_TEXT_REAL_PATH\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_TEXT_REAL_PATH$$', 1, 500)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_FOLDER_NAME \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN '$$TYPE$$' \= 'folder' THEN \n\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\tWHEN SUBSTRING('$$FILE_NAME$$', 1, 200) \= SUBSTRING('\#NO_DATA\#', 1, 200)\n\t\t\t\t\t\t\t\t\t\tTHEN FM_FOLDER_NAME\n\t\t\t\t\t\t\t\t\tELSE SUBSTRING('$$FILE_NAME$$', 1, 200)\n\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_FILE_NAME \= (\n\t\t\t\t\t\tCASE\n\t\t\t\t\t\t\tWHEN '$$TYPE$$' \= 'folder' THEN \n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\tWHEN SUBSTRING('$$FILE_NAME$$', 1, 200) \= SUBSTRING('\#NO_DATA\#', 1, 200)\n\t\t\t\t\t\t\t\t\t\tTHEN FM_FILE_NAME\n\t\t\t\t\t\t\t\t\tELSE SUBSTRING('$$FILE_NAME$$', 1, 200)\n\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_DATA_TYPE \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_DATA_TYPE$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN FM_DATA_TYPE\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_DATA_TYPE$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_SHELVES \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_SHELVES$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n\t\t\t\t\t\t\t\tTHEN FM_SHELVES\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_SHELVES$$', 1, 1)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_RULE_UNIT \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_RULE_UNIT$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN FM_RULE_UNIT\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_RULE_UNIT$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_RULE_VALUE \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_RULE_VALUE$$', 1, 100) \= SUBSTRING('\#NO_DATA\#', 1, 100)\n\t\t\t\t\t\t\t\tTHEN FM_RULE_VALUE\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_RULE_VALUE$$', 1, 100)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_RULE_START_DT \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN ((SUBSTRING('$$FM_RULE_START_DATE$$', 1, 30) \= SUBSTRING('\#NO_DATA\#', 1, 30)) AND (SUBSTRING('$$FM_RULE_START_TIME$$', 1, 30) \= SUBSTRING('\#NO_DATA\#', 1, 30)))\n\t\t\t\t\t\t\t\tTHEN FM_RULE_START_DT\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_RULE_START_DATE$$' + ' ' + '$$FM_RULE_START_TIME$$', 1, 30)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,FM_RULE_END_DT \= (\n\t\t\t\t\t/*當結束日期或結束時間任一為空，介面會將兩者皆設成空，且當時間為空時，無法取得空值*/\n\t\t\t\t\t\t(CASE WHEN '$$FM_RULE_END_DATE$$' \= '\#NO_DATA\#' OR '$$FM_RULE_END_DATE$$' \= '' THEN \n\t\t\t\t\t\t\tNULL \n\t\t\t\t\t\tELSE \n\t\t\t\t\t\t\t'$$FM_RULE_END_DATE$$' + ' ' + '$$FM_RULE_END_TIME$$'\n\t\t\t\t\t\tEND)\n\t\t\t\t\t)\n\t\t\t\t\t,FM_HELP \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$FM_HELP$$', 1, 4000) \= SUBSTRING('\#NO_DATA\#', 1, 4000)\n\t\t\t\t\t\t\t\tTHEN FM_HELP\n\t\t\t\t\t\t\tELSE SUBSTRING('$$FM_HELP$$', 1, 4000)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t\n\t\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,DATA_STATUS \= '0'\n\t\t\t\tWHERE PK \= '$$PK$$';\n\t\t\tEND\n\n\tSELECT @RETURN_CODE \= RETURN_CODE\n\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\tFROM MEM_API_RESULT /* WITH (ROWLOCK) */\n\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\tFOR JSON AUTO\n\t\t\t)\n\tFROM MEM_API_RESULT\n\tWHERE hashValues \= @FROM_OUTSIDE\nEND TRY\n\nBEGIN CATCH\n\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t,'$$PK$$' AS DATA_UNIQUE_KEY\n\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t) AS A /* WITH (ROWLOCK) */\n\t\t\tFOR JSON AUTO\n\t\t\t)\nEND CATCH
SYS_TABLES_DFM=SELECT *\nFROM (\n\tSELECT COUNT(*) AS totalProperty\n\tFROM SYS.tables\n\t) AS A\n\t,(\n\t/* 全欄位 */\n\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\tORDER BY [name] ASC\n\t\t\t\t) AS RowNum\n\t\t\t,'DFM' AS CONN_DB\n\t\t\t,[name]\n\t\t\t,[object_id]\n\t\t\t,[principal_id]\n\t\t\t,[schema_id]\n\t\t\t,[parent_object_id]\n\t\t\t,[type]\n\t\t\t,[type_desc]\n\t\t\t,[create_date]\n\t\t\t,[modify_date]\n\t\t\t,[is_ms_shipped]\n\t\t\t,[is_published]\n\t\t\t,[is_schema_published]\n\t\t\t,[lob_data_space_id]\n\t\t\t,[filestream_data_space_id]\n\t\t\t,[max_column_id_used]\n\t\t\t,[lock_on_bulk_load]\n\t\t\t,[uses_ansi_nulls]\n\t\t\t,[is_replicated]\n\t\t\t,[has_replication_filter]\n\t\t\t,[is_merge_published]\n\t\t\t,[is_sync_tran_subscribed]\n\t\t\t,[has_unchecked_assembly_data]\n\t\t\t,[text_in_row_limit]\n\t\t\t,[large_value_types_out_of_row]\n\t\t\t,[is_tracked_by_cdc]\n\t\t\t,[lock_escalation]\n\t\t\t,[lock_escalation_desc]\n\t\t\t,[is_filetable]\n\t\t\t,[is_memory_optimized]\n\t\t\t,[durability]\n\t\t\t,[durability_desc]\n\t\t\t,[temporal_type]\n\t\t\t,[temporal_type_desc]\n\t\t\t,[history_table_id]\n\t\t\t,[is_remote_data_archive_enabled]\n\t\t\t,[is_external]\n\t\t\t,[history_retention_period]\n\t\t\t,[history_retention_period_unit]\n\t\t\t,[history_retention_period_unit_desc]\n\t\t\t,[is_node]\n\t\t\t,[is_edge]\n\t\tFROM SYS.tables\n\t\t) B\nWHERE 1 \= 1\n\tAND RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)\n
SYS_TABLES_SIGN=SELECT *\nFROM (\n\tSELECT COUNT(*) AS totalProperty\n\tFROM SYS.tables\n\t) AS A\n\t,(\n\t/* 全欄位 */\n\t\tSELECT ROW_NUMBER() OVER (\n\t\t\t\tORDER BY [name] ASC\n\t\t\t\t) AS RowNum\n\t\t\t,'SIGN' AS CONN_DB\n\t\t\t,[name]\n\t\t\t,[object_id]\n\t\t\t,[principal_id]\n\t\t\t,[schema_id]\n\t\t\t,[parent_object_id]\n\t\t\t,[type]\n\t\t\t,[type_desc]\n\t\t\t,[create_date]\n\t\t\t,[modify_date]\n\t\t\t,[is_ms_shipped]\n\t\t\t,[is_published]\n\t\t\t,[is_schema_published]\n\t\t\t,[lob_data_space_id]\n\t\t\t,[filestream_data_space_id]\n\t\t\t,[max_column_id_used]\n\t\t\t,[lock_on_bulk_load]\n\t\t\t,[uses_ansi_nulls]\n\t\t\t,[is_replicated]\n\t\t\t,[has_replication_filter]\n\t\t\t,[is_merge_published]\n\t\t\t,[is_sync_tran_subscribed]\n\t\t\t,[has_unchecked_assembly_data]\n\t\t\t,[text_in_row_limit]\n\t\t\t,[large_value_types_out_of_row]\n\t\t\t,[is_tracked_by_cdc]\n\t\t\t,[lock_escalation]\n\t\t\t,[lock_escalation_desc]\n\t\t\t,[is_filetable]\n\t\t\t,[is_memory_optimized]\n\t\t\t,[durability]\n\t\t\t,[durability_desc]\n\t\t\t,[temporal_type]\n\t\t\t,[temporal_type_desc]\n\t\t\t,[history_table_id]\n\t\t\t,[is_remote_data_archive_enabled]\n\t\t\t,[is_external]\n\t\t\t,[history_retention_period]\n\t\t\t,[history_retention_period_unit]\n\t\t\t,[history_retention_period_unit_desc]\n\t\t\t,[is_node]\n\t\t\t,[is_edge]\n\t\tFROM SYS.tables\n\t\t) B\nWHERE 1 \= 1\n\tAND RowNum > $$start$$\n\tAND RowNum <\= ($$start$$ + $$limit$$)\n
SYS_TASK_DETAIL_CUD=/*  UPDATED AT 20200908\n 1. DATA_CHANGE_LOG 追加 ADD_USER_ID、ADD_USER_COMPANY_ID、ADD_DT 資訊\n*/\nBEGIN TRY\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n\tBEGIN\n\t\t/* 1.1 功能主要異動 MASTER_TABLE_NAME */\n\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t/*  這一段 update 可用noli的excel 檔中的  INSERT 產生器，來產生對應的欄位及語法  */\n\t\tINSERT INTO TASK_FLOW_DETAIL (\n\t\t\tTASK_ID\n\t\t\t,TASK_PARENT\n\t\t\t,TASK_CHILD\n\t\t\t,expandable\n\t\t\t,DETAIL_DESC\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,DATA_STATUS\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$TASK_ID$$'\n\t\t\t,(CASE WHEN '$$TASK_PARENT$$' \= 'N' THEN NULL ELSE '$$TASK_PARENT$$' END)\n\t\t\t,'$$TASK_CHILD$$'\n\t\t\t,'$$expandable$$'\n\t\t\t,'$$DETAIL_DESC$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,0\n\t\t\t);\n\n\t\t/* 異動父節點的expandable 為true*/\n\t\tUPDATE TASK_FLOW_DETAIL\n\t\t   SET expandable\='true'\n\t\t WHERE TASK_CHILD \= '$$TASK_PARENT$$';\n\n\t\t/* 1.2 DATA_CHANGE_LOG for Master Table */\n\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\tFUNC_ID\n\t\t\t,PROC_TYPE\n\t\t\t,USER_ID\n\t\t\t,DATA_NO\n\t\t\t,EVENT_DT\n\t\t\t,MEMO\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,SessionID\n\t\t\t,ProcPK\n\t\t\t,PROC_TARGET\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$FunctionID$$'\n\t\t\t,'insert'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,IDENT_CURRENT('TASK_FLOW_DETAIL') /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'$$MEMO$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'${PARAM_COMPANY}'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t,'${LOGPK}'\n\t\t\t,'TASK_FLOW_DETAIL' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t);\n\n\t\t/* 1.3 DATA Detail LOG for Master Table(before modified) */\n\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\tINSERT INTO LOG_TASK_FLOW_DETAIL (\n\t\t\tFUNC_ID\n\t\t\t,CRUD_STATE\n\t\t\t,DETAIL_IDX\n\t\t\t,TASK_ID\n\t\t\t,TASK_PARENT\n\t\t\t,TASK_CHILD\n\t\t\t,expandable\n\t\t\t,DETAIL_DESC\n\t\t\t,ADD_USER_ID\n\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t,ADD_DT\n\t\t\t,DATA_STATUS\n\t\t\t,DATA_CHANGE_LOG_ID\n\t\t\t)\n\t\tVALUES (\n\t\t\t'$$FunctionID$$'\n\t\t\t,'C'\n\t\t\t,IDENT_CURRENT('TASK_FLOW_DETAIL')\n\t\t\t,'$$TASK_ID$$'\n\t\t\t,(CASE WHEN '$$TASK_PARENT$$' \= 'N' THEN NULL ELSE '$$TASK_PARENT$$' END)\n\t\t\t,'$$TASK_CHILD$$'\n\t\t\t,'$$expandable$$'\n\t\t\t,'$$DETAIL_DESC$$'\n\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t,'$$COMPANY_ID$$'\n\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t,'0'\n\t\t\t,IDENT_CURRENT('DATA_CHANGE_LOG')\n\t\t\t);\n\n\t\t/* 1.4 Action Return ，此全域暫存表格(MEM_API_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n\t\tINSERT INTO MEM_API_RESULT (\n\t\t\tProcPK\n\t\t\t,hashValues\n\t\t\t,RETURN_CODE\n\t\t\t,RETURN_MSG\n\t\t\t,DATA_UNIQUE_KEY\n\t\t\t,DATA_ACTION_TYPE\n\t\t\t,MEMO\n\t\t\t)\n\t\tVALUES (\n\t\t\t'${LOGPK}'\n\t\t\t,@FROM_OUTSIDE\n\t\t\t,'0'\n\t\t\t,'SUCCESS'\n\t\t\t,'$$DETAIL_IDX$$'\n\t\t\t,'C'\n\t\t\t,'$$MEMO$$'\n\t\t\t);\n\tEND\n\tELSE\n\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n\t\tBEGIN\n\t\t\t/* 2.1 DATA_CHANGE_LOG */\n\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\tFUNC_ID\n\t\t\t\t,PROC_TYPE\n\t\t\t\t,USER_ID\n\t\t\t\t,DATA_NO\n\t\t\t\t,EVENT_DT\n\t\t\t\t,MEMO\n\t\t\t\t,ADD_USER_ID\n\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t,ADD_DT\n\t\t\t\t,SessionID\n\t\t\t\t,ProcPK\n\t\t\t\t,PROC_TARGET\n\t\t\t\t)\n\t\t\tVALUES (\n\t\t\t\t'$$FunctionID$$'\n\t\t\t\t,'delete'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'$$DETAIL_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK_COL 流水號欄位 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'$$MEMO$$'\n\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t,'${LOGPK}'\n\t\t\t\t,'TASK_FLOW_DETAIL' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t);\n\n\t\t\tIF EXISTS (\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM TASK_FLOW_DETAIL\n\t\t\t\t\tWHERE DETAIL_IDX \= '$$DETAIL_IDX$$'\n\t\t\t\t\t\tAND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t\t)\n\t\t\tBEGIN\n\t\t\t\t/* 2.2 DATA Detail LOG (before modified) */\n\t\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\tINSERT INTO LOG_TASK_FLOW_DETAIL (\n\t\t\t\t\tFUNC_ID\n\t\t\t\t\t,CRUD_STATE\n\t\t\t\t\t,DETAIL_IDX\n\t\t\t\t\t,TASK_ID\n\t\t\t\t\t,TASK_PARENT\n\t\t\t\t\t,TASK_CHILD\n\t\t\t\t\t,expandable\n\t\t\t\t\t,DETAIL_DESC\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t,DEL_DT\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t,DATA_CHANGE_LOG_ID\n\t\t\t\t\t)\n\t\t\t\tSELECT '$$FunctionID$$' AS FUNC_ID\n\t\t\t\t\t,'D' AS CRUD_STATE\n\t\t\t\t\t,DETAIL_IDX\n\t\t\t\t\t,TASK_ID\n\t\t\t\t\t,TASK_PARENT\n\t\t\t\t\t,TASK_CHILD\n\t\t\t\t\t,expandable\n\t\t\t\t\t,DETAIL_DESC\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t,DEL_DT\n\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t\tFROM TASK_FLOW_DETAIL\n\t\t\t\tWHERE DETAIL_IDX \= '$$DETAIL_IDX$$';\n\n\t\t\t\t/* 2.3 Action Return */\n\t\t\t\tINSERT INTO MEM_API_RESULT (\n\t\t\t\t\tProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'0'\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t,'$$DETAIL_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND\n\t\t\tELSE\n\t\t\tBEGIN\n\t\t\t\t/* 2.4 Action Return */\n\t\t\t\tINSERT INTO MEM_API_RESULT (\n\t\t\t\t\tProcPK\n\t\t\t\t\t,hashValues\n\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t,MEMO\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t,'-1'\n\t\t\t\t\t,'資料正在審核流程中，無法刪除'\n\t\t\t\t\t,'$$DETAIL_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t);\n\t\t\tEND\n\n\t\t\t/* 2.5 功能主要異動 Table */\n\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\n\t\t/*START\: 檢查爸爸還有沒有兒子，如果沒有兒子，就把爸爸的EXPANDABLE關掉，再刪除自己的節點。如果爸爸還有其他兒子，則只刪除自己的節點即可*/ \n\t\tIF\n\t\t\t(SELECT COUNT(*)\n\t\t\tFROM TASK_FLOW_DETAIL\n\t\t\tWHERE TASK_PARENT IN\n\t\t\t\t(SELECT TASK_PARENT\n\t\t\t\tFROM TASK_FLOW_DETAIL\n\t\t\t\tWHERE DETAIL_IDX\='$$DETAIL_IDX$$'))\=1 \n\t\t\t\tBEGIN\n\t\t\n\t\t\t\t\tUPDATE TASK_FLOW_DETAIL\n\t\t\t\t\tSET expandable\='false'\n\t\t\t\t\tWHERE TASK_CHILD\=\n\t\t\t\t\t\t(SELECT TASK_PARENT\n\t\t\t\t\t\t\tFROM TASK_FLOW_DETAIL\n\t\t\t\t\t\t\tWHERE DETAIL_IDX\='$$DETAIL_IDX$$');\n\n\t\t\t\t\t/* START\: 刪除節點連同子項一併刪除*/\n\t\t\t\t\tWITH HH (TASK_CHILD, TASK_PARENT, level) AS\n\t\t\t\t\t(\n\t\t\t\t\t\tSELECT TASK_CHILD, TASK_PARENT, 0\n\t\t\t\t\t\tFROM TASK_FLOW_DETAIL\n\t\t\t\t\t\tWHERE DETAIL_IDX \= '$$DETAIL_IDX$$'\n\t\t\t\t\t\t/* 替換介面傳遞的參數 */\n\n\t\t\t\t\t\tUNION ALL\n\n\t\t\t\t\t\tSELECT B.TASK_CHILD, B.TASK_PARENT, level + 1\n\t\t\t\t\t\tFROM TASK_FLOW_DETAIL AS B\n\t\t\t\t\t\tINNER JOIN HH ON HH.TASK_CHILD \= B.TASK_PARENT\n\t\t\t\t\t)\n\t\t\t\t\tDELETE TASK_FLOW_DETAIL WHERE TASK_CHILD IN (SELECT DISTINCT TASK_CHILD FROM HH);\n\t \t\t\t   /* END\: 刪除節點連同子項一併刪除*/\n\n\t\t\t\tEND \n\t\tELSE \n\t\t\tBEGIN\n\t\t\t\t/* START\: 刪除節點連同子項一併刪除*/\n\t\t\t\tWITH HH (TASK_CHILD, TASK_PARENT, level) AS\n\t\t\t\t(\n\t\t\t\t\tSELECT TASK_CHILD, TASK_PARENT, 0\n\t\t\t\t\tFROM TASK_FLOW_DETAIL\n\t\t\t\t\tWHERE DETAIL_IDX \= '$$DETAIL_IDX$$'\n\t\t\t\t\t/* 替換介面傳遞的參數 */\n\n\t\t\t\t\tUNION ALL\n\n\t\t\t\t\tSELECT B.TASK_CHILD, B.TASK_PARENT, level + 1\n\t\t\t\t\tFROM TASK_FLOW_DETAIL AS B\n\t\t\t\t\tINNER JOIN HH ON HH.TASK_CHILD \= B.TASK_PARENT\n\t\t\t\t)\n\t\t\t\tDELETE TASK_FLOW_DETAIL WHERE TASK_CHILD IN (SELECT DISTINCT TASK_CHILD FROM HH);\n\t \t\t   /* END\: 刪除節點連同子項一併刪除*/\n\t\tEND;\n\n\t\t/*END\:  檢查爸爸還有沒有兒子，如果沒有兒子，就把爸爸的EXPANDABLE關掉，再刪除自己的節點。如果爸爸還有其他兒子，則只刪除自己的節點即可*/\n\t\tEND\n\t\tELSE\n\t\t\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n\t\t\tBEGIN\n\t\t\t\t/* 3.1 DATA_CHANGE_LOG */\n\t\t\t\tINSERT INTO DATA_CHANGE_LOG (\n\t\t\t\t\tFUNC_ID\n\t\t\t\t\t,PROC_TYPE\n\t\t\t\t\t,USER_ID\n\t\t\t\t\t,DATA_NO\n\t\t\t\t\t,EVENT_DT\n\t\t\t\t\t,MEMO\n\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t,ADD_DT\n\t\t\t\t\t,SessionID\n\t\t\t\t\t,ProcPK\n\t\t\t\t\t,PROC_TARGET\n\t\t\t\t\t)\n\t\t\t\tVALUES (\n\t\t\t\t\t'$$FunctionID$$'\n\t\t\t\t\t,'update'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'$$DETAIL_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t,'${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,'${PARAM_COMPANY}'\n\t\t\t\t\t,CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,'${PARAM_SESSION_ID}'\n\t\t\t\t\t,'${LOGPK}'\n\t\t\t\t\t,'TASK_FLOW_DETAIL' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t);\n\n\t\t\t\tIF EXISTS (\n\t\t\t\t\t\tSELECT *\n\t\t\t\t\t\tFROM TASK_FLOW_DETAIL\n\t\t\t\t\t\tWHERE DETAIL_IDX \= '$$DETAIL_IDX$$'\n\t\t\t\t\t\t\tAND ISNULL(DATA_STATUS, 0) \= 0\n\t\t\t\t\t\t)\n\t\t\t\tBEGIN\n\t\t\t\t\t/* 3.2 DATA Detail LOG (before modified) */\n\t\t\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\tINSERT INTO LOG_TASK_FLOW_DETAIL (\n\t\t\t\t\t\tFUNC_ID\n\t\t\t\t\t\t,CRUD_STATE\n\t\t\t\t\t\t,DETAIL_IDX\n\t\t\t\t\t\t,TASK_ID\n\t\t\t\t\t\t,TASK_PARENT\n\t\t\t\t\t\t,TASK_CHILD\n\t\t\t\t\t\t,expandable\n\t\t\t\t\t\t,DETAIL_DESC\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t\t,DEL_DT\n\t\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t\t,DATA_CHANGE_LOG_ID\n\t\t\t\t\t\t)\n\t\t\t\t\tSELECT '$$FunctionID$$' AS FUNC_ID\n\t\t\t\t\t\t,'U' AS CRUD_STATE\n\t\t\t\t\t\t,DETAIL_IDX\n\t\t\t\t\t\t,TASK_ID\n\t\t\t\t\t\t,TASK_PARENT\n\t\t\t\t\t\t,TASK_CHILD\n\t\t\t\t\t\t,expandable\n\t\t\t\t\t\t,DETAIL_DESC\n\t\t\t\t\t\t,ADD_USER_ID\n\t\t\t\t\t\t,ADD_USER_COMPANY_ID\n\t\t\t\t\t\t,ADD_DT\n\t\t\t\t\t\t,LAST_MOD_USER_ID\n\t\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID\n\t\t\t\t\t\t,LAST_MOD_DT\n\t\t\t\t\t\t,DEL_USER_ID\n\t\t\t\t\t\t,DEL_USER_COMPANY_ID\n\t\t\t\t\t\t,DEL_DT\n\t\t\t\t\t\t,DATA_STATUS\n\t\t\t\t\t\t,IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n\t\t\t\t\tFROM TASK_FLOW_DETAIL\n\t\t\t\t\tWHERE DETAIL_IDX \= '$$DETAIL_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t;\n\n\t\t\t\t\t/* 3.3 Action Return */\n\t\t\t\t\tINSERT INTO MEM_API_RESULT (\n\t\t\t\t\t\tProcPK\n\t\t\t\t\t\t,hashValues\n\t\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t\t,MEMO\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES (\n\t\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t\t,'0'\n\t\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t\t,'$$DETAIL_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t,'U'\n\t\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t\t);\n\t\t\t\tEND\n\t\t\t\tELSE\n\t\t\t\tBEGIN\n\t\t\t\t\t/* 3.4 Action Return */\n\t\t\t\t\tINSERT INTO MEM_API_RESULT (\n\t\t\t\t\t\tProcPK\n\t\t\t\t\t\t,hashValues\n\t\t\t\t\t\t,RETURN_CODE\n\t\t\t\t\t\t,RETURN_MSG\n\t\t\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t\t\t,MEMO\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES (\n\t\t\t\t\t\t'${LOGPK}'\n\t\t\t\t\t\t,@FROM_OUTSIDE\n\t\t\t\t\t\t,'-1'\n\t\t\t\t\t\t,'資料正在審核流程中，無法修改'\n\t\t\t\t\t\t,'$$DETAIL_IDX$$' /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\t\t\t\t\t\t,'U'\n\t\t\t\t\t\t,'$$MEMO$$'\n\t\t\t\t\t\t);\n\t\t\t\tEND\n\n\t\t\t\t/* 3.5 功能主要異動 Table */\n\t\t\t\t/* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n\t\t\t\t/* 異動前，先更新兒子的爸爸 */\n\t\t\t\tUPDATE TASK_FLOW_DETAIL\n\t\t\t\tSET TASK_PARENT \= '$$TASK_CHILD$$'\n\t\t\t\tWHERE TASK_PARENT IN (\n\t\t\t\tSELECT TASK_CHILD\n\t\t\t\tFROM TASK_FLOW_DETAIL\n\t\t\t\tWHERE DETAIL_IDX \= '$$DETAIL_IDX$$');\n\n\t\t\t\tUPDATE TASK_FLOW_DETAIL\n\t\t\t\tSET TASK_ID \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$TASK_ID$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n\t\t\t\t\t\t\t\tTHEN TASK_ID\n\t\t\t\t\t\t\tELSE SUBSTRING('$$TASK_ID$$', 1, 50)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,TASK_PARENT \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$TASK_PARENT$$', 1, 200) \= SUBSTRING('\#NO_DATA\#', 1, 200)\n\t\t\t\t\t\t\t\tTHEN TASK_PARENT\n\t\t\t\t\t\t\tELSE SUBSTRING('$$TASK_PARENT$$', 1, 200)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,TASK_CHILD \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$TASK_CHILD$$', 1, 200) \= SUBSTRING('\#NO_DATA\#', 1, 200)\n\t\t\t\t\t\t\t\tTHEN TASK_CHILD\n\t\t\t\t\t\t\tELSE SUBSTRING('$$TASK_CHILD$$', 1, 200)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,expandable \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$expandable$$', 1, 10) \= SUBSTRING('\#NO_DATA\#', 1, 10)\n\t\t\t\t\t\t\t\tTHEN expandable\n\t\t\t\t\t\t\tELSE SUBSTRING('$$expandable$$', 1, 10)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,DETAIL_DESC \= (\n\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\tWHEN SUBSTRING('$$DETAIL_DESC$$', 1, 200) \= SUBSTRING('\#NO_DATA\#', 1, 200)\n\t\t\t\t\t\t\t\tTHEN DETAIL_DESC\n\t\t\t\t\t\t\tELSE SUBSTRING('$$DETAIL_DESC$$', 1, 200)\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t)\n\t\t\t\t\t,LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}'\n\t\t\t\t\t,LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$'\n\t\t\t\t\t,LAST_MOD_DT \= CONVERT(VARCHAR(20), GETDATE(), 120)\n\t\t\t\t\t,DATA_STATUS \= '0'\n\t\t\t\tWHERE DETAIL_IDX \= '$$DETAIL_IDX$$';\n\n\t\t\tEND\n\n\tSELECT @RETURN_CODE \= RETURN_CODE\n\t\t,@RETURN_MSG \= RETURN_MSG\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT ProcPK\n\t\t\t\t,hashValues\n\t\t\t\t,RETURN_CODE\n\t\t\t\t,RETURN_MSG\n\t\t\t\t,DATA_UNIQUE_KEY\n\t\t\t\t,DATA_ACTION_TYPE\n\t\t\t\t,MEMO\n\t\t\tFROM MEM_API_RESULT\n\t\t\tWHERE hashValues \= @FROM_OUTSIDE\n\t\t\tFOR JSON AUTO\n\t\t\t)\n\tFROM MEM_API_RESULT\n\tWHERE hashValues \= @FROM_OUTSIDE\nEND TRY\n\nBEGIN CATCH\n\tSELECT @RETURN_CODE \= ERROR_NUMBER()\n\t\t,@RETURN_MSG \= ERROR_MESSAGE()\n\t\t,@RETURN_TEST \= (\n\t\t\tSELECT *\n\t\t\tFROM (\n\t\t\t\tSELECT '${LOGPK}' AS ProcPK\n\t\t\t\t\t,@FROM_OUTSIDE AS hashValues\n\t\t\t\t\t,ERROR_NUMBER() AS RETURN_CODE\n\t\t\t\t\t,ERROR_MESSAGE() AS RETURN_MSG\n\t\t\t\t\t,'$$DETAIL_IDX$$' AS DATA_UNIQUE_KEY\n\t\t\t\t\t,'$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE\n\t\t\t\t\t,'$$MEMO$$' AS MEMO\n\t\t\t\t) AS A\n\t\t\tFOR JSON AUTO\n\t\t\t)\nEND CATCH
SYS_TASK_DETAIL_LIST=SELECT *\n\t,(\n\t\tSELECT COUNT(*)\n\t\tFROM TASK_FLOW_DETAIL AS DETAIL WITH (NOLOCK)\n\t\tINNER JOIN TASK_FLOW_MASTER AS MAST WITH (NOLOCK)\n\t\tON MAST.TASK_ID \= DETAIL.TASK_ID\n\t\tWHERE (\n\t\t\tDETAIL.TASK_ID LIKE '%$$TASK_ID$$%'\n\t\t\tOR '$$TASK_ID$$' \= 'ALL'\n\t\t\t)\n\t\tAND (\n\t\t\tDETAIL.DATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t\t\t)\n\t\t) AS totalProperty\nFROM (\n\tSELECT ROW_NUMBER() OVER (\n\t\t\tORDER BY DETAIL_IDX\n\t\t\t) AS RowNum\n\t\t,DETAIL_IDX\n\t\t,TASK_CHILD AS id\n\t\t,FDEPT.DEPID AS TASK_PARENT\n\t\t,TASK_PARENT AS parentId\n\t\t,FDEPT.DEPARTNAME AS TASK_CHILD\n\t\t,FDEPT.DEPARTNAME AS text\n\t\t,'false' AS leaf\n\t\t,DETAIL.expandable\n\t\t,DETAIL.TASK_ID\n\t\t,MAST.TASK_NAME\n\t\t,DETAIL_DESC\n\t\t,DETAIL.ADD_USER_ID --固定欄位必需取出\n\t\t,DETAIL.ADD_USER_COMPANY_ID --固定欄位必需取出\n\t\t,DETAIL.ADD_DT --固定欄位必需取出\n\t\t,DETAIL.LAST_MOD_USER_ID --固定欄位必需取出\n\t\t,DETAIL.LAST_MOD_USER_COMPANY_ID --固定欄位必需取出\n\t\t,DETAIL.LAST_MOD_DT --固定欄位必需取出\n\t\t,DETAIL.DEL_USER_ID --固定欄位必需取出\n\t\t,DETAIL.DEL_USER_COMPANY_ID --固定欄位必需取出\n\t\t,DETAIL.DEL_DT --固定欄位必需取出\n\t\t,DETAIL.DATA_STATUS --固定欄位必需取出\n\tFROM TASK_FLOW_DETAIL AS DETAIL WITH (NOLOCK)\n\tINNER JOIN TASK_FLOW_MASTER AS MAST WITH (NOLOCK)\n\tON MAST.TASK_ID \= DETAIL.TASK_ID\n        LEFT JOIN DEPARTMENT FDEPT WITH (NOLOCK)\n\tON FDEPT.DEPID\=TASK_CHILD\n\tLEFT JOIN DEPARTMENT CDEPT WITH (NOLOCK)\n\tON CDEPT.DEPID\=TASK_PARENT\n\tWHERE (\n\t\t\tDETAIL.TASK_ID LIKE '%$$TASK_ID$$%'\n\t\t\tOR '$$TASK_ID$$' \= 'ALL'\n\t\t\t)\n\t\tAND (\n\t\t\tDETAIL.DATA_STATUS \= '$$DATA_STATUS$$'\n\t\t\tOR '$$DATA_STATUS$$' \= 'ALL'\n\t\t\t)\n\t) AS new1\n\t/*WHERE RowNum > $$start$$\n AND RowNum <\= ($$start$$ + $$limit$$)*/
SYS_TASK_FLOW_CUD=/*  UPDATED AT 20200908\n 1. DATA_CHANGE_LOG 追加 ADD_USER_ID、ADD_USER_COMPANY_ID、ADD_DT 資訊\n*/\n\nBEGIN TRY\n    IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD'\n        BEGIN\n\n            /* 1.1 功能主要異動 MASTER_TABLE_NAME */\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n            /*  這一段 update 可用noli的excel 檔中的  INSERT 產生器，來產生對應的欄位及語法  */\n\n            INSERT INTO TASK_FLOW_MASTER\n            (TASK_ID, \n             TASK_NAME, \n             TASK_TARGET, \n             TASK_DESC, \n             IS_DISABLED, \n             ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             DATA_STATUS\n            )\n            VALUES\n            ('$$TASK_ID$$', \n             '$$TASK_NAME$$', \n             '$$TASK_TARGET$$', \n             '$$TASK_DESC$$', \n             '$$IS_DISABLED$$', \n             '${PARAM_SOURCE_COMING}', \n             '$$COMPANY_ID$$', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             0\n            );\n\n            /* 1.2 DATA_CHANGE_LOG for Master Table */\n\n            INSERT INTO DATA_CHANGE_LOG\n            (FUNC_ID, \n             PROC_TYPE, \n             USER_ID, \n             DATA_NO, \n             EVENT_DT, \n             MEMO, \n\t\t\t ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             SessionID, \n             ProcPK, \n             PROC_TARGET\n            )\n            VALUES\n            ('$$FunctionID$$', \n             'insert', \n             '${PARAM_SOURCE_COMING}', \n             IDENT_CURRENT('TASK_FLOW_MASTER') ,\n\n             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '$$MEMO$$', \n\t\t\t '${PARAM_SOURCE_COMING}', \n             '${PARAM_COMPANY}', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '${PARAM_SESSION_ID}', \n             '${LOGPK}', \n             'TASK_FLOW_MASTER'\n\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            );\n\n            /* 1.3 DATA Detail LOG for Master Table(before modified) */\n            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n            INSERT INTO LOG_TASK_FLOW_MASTER\n            (FUNC_ID, \n             CRUD_STATE, \n             TASK_IDX, \n             TASK_ID, \n             TASK_NAME, \n             TASK_TARGET, \n             TASK_DESC, \n             IS_DISABLED, \n             ADD_USER_ID, \n             ADD_USER_COMPANY_ID, \n             ADD_DT, \n             DATA_STATUS, \n             DATA_CHANGE_LOG_ID\n            )\n            VALUES\n            ('$$FunctionID$$', \n             'C', \n             IDENT_CURRENT('TASK_FLOW_MASTER'), \n             '$$TASK_ID$$', \n             '$$TASK_NAME$$', \n             '$$TASK_TARGET$$', \n             '$$TASK_DESC$$', \n             '$$IS_DISABLED$$', \n             '${PARAM_SOURCE_COMING}', \n             '$$COMPANY_ID$$', \n             CONVERT(VARCHAR(20), GETDATE(), 120), \n             '0', \n             IDENT_CURRENT('DATA_CHANGE_LOG')\n            );\n\n            /* 1.4 Action Return ，此全域暫存表格(MEM_API_RESULT)主要是先記錄所有資料庫異動行為的回應結果，再一次次回傳給前端  */\n\n            INSERT INTO MEM_API_RESULT\n            (ProcPK, \n             hashValues, \n             RETURN_CODE, \n             RETURN_MSG, \n             DATA_UNIQUE_KEY, \n             DATA_ACTION_TYPE, \n             MEMO\n            )\n            VALUES\n            ('${LOGPK}', \n             @FROM_OUTSIDE, \n             '0', \n             'SUCCESS', \n             '$$TASK_IDX$$', \n             'C', \n             '$$MEMO$$'\n            );\n        END;\n        ELSE\n        IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'\n            BEGIN\n\n                /* 2.1 DATA_CHANGE_LOG */\n\n                INSERT INTO DATA_CHANGE_LOG\n                (FUNC_ID, \n                 PROC_TYPE, \n                 USER_ID, \n                 DATA_NO, \n                 EVENT_DT, \n                 MEMO, \n\t\t\t\t ADD_USER_ID, \n\t\t\t\t ADD_USER_COMPANY_ID, \n\t\t\t\t ADD_DT,\n                 SessionID, \n                 ProcPK, \n                 PROC_TARGET\n                )\n                VALUES\n                ('$$FunctionID$$', \n                 'delete', \n                 '${PARAM_SOURCE_COMING}', \n                 '$$TASK_IDX$$' ,\n\n                 /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK_COL 流水號欄位 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n                 CONVERT(VARCHAR(20), GETDATE(), 120), \n                 '$$MEMO$$', \n\t\t\t\t '${PARAM_SOURCE_COMING}', \n\t\t\t\t '${PARAM_COMPANY}', \n\t\t\t\t CONVERT(VARCHAR(20), GETDATE(), 120), \n                 '${PARAM_SESSION_ID}', \n                 '${LOGPK}', \n                 'TASK_FLOW_MASTER'\n\n                /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Master Table Name \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n                );\n                IF EXISTS\n                (\n                    SELECT *\n                    FROM TASK_FLOW_MASTER\n                    WHERE TASK_IDX \= '$$TASK_IDX$$'\n                          AND ISNULL(DATA_STATUS, 0) \= 0\n                )\n                    BEGIN\n\n                        /* 2.2 DATA Detail LOG (before modified) */\n                        /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n                        INSERT INTO LOG_TASK_FLOW_MASTER\n                        (FUNC_ID, \n                         CRUD_STATE, \n                         TASK_IDX, \n                         TASK_ID, \n                         TASK_NAME, \n                         TASK_TARGET, \n                         TASK_DESC, \n                         IS_DISABLED, \n                         ADD_USER_ID, \n                         ADD_USER_COMPANY_ID, \n                         ADD_DT, \n                         LAST_MOD_USER_ID, \n                         LAST_MOD_USER_COMPANY_ID, \n                         LAST_MOD_DT, \n                         DEL_USER_ID, \n                         DEL_USER_COMPANY_ID, \n                         DEL_DT, \n                         DATA_STATUS, \n                         DATA_CHANGE_LOG_ID\n                        )\n                               SELECT '$$FunctionID$$' AS FUNC_ID, \n                                      'D' AS CRUD_STATE, \n                                      TASK_IDX, \n                                      TASK_ID, \n                                      TASK_NAME, \n                                      TASK_TARGET, \n                                      TASK_DESC, \n                                      IS_DISABLED, \n                                      ADD_USER_ID, \n                                      ADD_USER_COMPANY_ID, \n                                      ADD_DT, \n                                      LAST_MOD_USER_ID, \n                                      LAST_MOD_USER_COMPANY_ID, \n                                      LAST_MOD_DT, \n                                      DEL_USER_ID, \n                                      DEL_USER_COMPANY_ID, \n                                      DEL_DT, \n                                      DATA_STATUS, \n                                      IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n                               FROM TASK_FLOW_MASTER\n                               WHERE TASK_IDX \= '$$TASK_IDX$$';\n\n                        /* 2.3 Action Return */\n\n                        INSERT INTO MEM_API_RESULT\n                        (ProcPK, \n                         hashValues, \n                         RETURN_CODE, \n                         RETURN_MSG, \n                         DATA_UNIQUE_KEY, \n                         DATA_ACTION_TYPE, \n                         MEMO\n                        )\n                        VALUES\n                        ('${LOGPK}', \n                         @FROM_OUTSIDE, \n                         '0', \n                         'SUCCESS', \n                         '$$TASK_IDX$$' ,\n\n                         /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n                         'D', \n                         '$$MEMO$$'\n                        );\n                    END;\n                    ELSE\n                    BEGIN\n\n                        /* 2.4 Action Return */\n\n                        INSERT INTO MEM_API_RESULT\n                        (ProcPK, \n                         hashValues, \n                         RETURN_CODE, \n                         RETURN_MSG, \n                         DATA_UNIQUE_KEY, \n                         DATA_ACTION_TYPE, \n                         MEMO\n                        )\n                        VALUES\n                        ('${LOGPK}', \n                         @FROM_OUTSIDE, \n                         '-1', \n                         '資料正在審核流程中，無法刪除', \n                         '$$TASK_IDX$$' ,\n\n                         /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n                         'D', \n                         '$$MEMO$$'\n                        );\n                    END;\n\n                /* 2.5 功能主要異動 Table */\n                /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n                DELETE FROM JH_WS02_FM_DEP_LIST\n                WHERE FM_DEP_TYPE \=\n                (\n                    SELECT TASK_ID\n                    FROM TASK_FLOW_MASTER\n                    WHERE TASK_IDX \= '$$TASK_IDX$$'\n                );\n                DELETE FROM TASK_FLOW_DETAIL\n                WHERE TASK_ID \=\n                (\n                    SELECT TASK_ID\n                    FROM TASK_FLOW_MASTER\n                    WHERE TASK_IDX \= '$$TASK_IDX$$'\n                );\n                DELETE TASK_FLOW_MASTER\n                WHERE TASK_IDX \= '$$TASK_IDX$$';\n            END;\n            ELSE\n            IF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'\n                BEGIN\n\n                    /* 3.1 DATA_CHANGE_LOG */\n\n                    INSERT INTO DATA_CHANGE_LOG\n                    (FUNC_ID, \n                     PROC_TYPE, \n                     USER_ID, \n                     DATA_NO, \n                     EVENT_DT, \n                     MEMO, \n\t\t\t\t\t ADD_USER_ID, \n\t\t\t\t\t ADD_USER_COMPANY_ID, \n\t\t\t\t\t ADD_DT,\n                     SessionID, \n                     ProcPK, \n                     PROC_TARGET\n                    )\n                    VALUES\n                    ('$$FunctionID$$', \n                     'update', \n                     '${PARAM_SOURCE_COMING}', \n                     '$$TASK_IDX$$' ,\n\n                     /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n                     CONVERT(VARCHAR(20), GETDATE(), 120), \n                     '$$MEMO$$', \n\t\t\t\t\t '${PARAM_SOURCE_COMING}', \n\t\t\t\t\t '${PARAM_COMPANY}', \n\t\t\t\t\t CONVERT(VARCHAR(20), GETDATE(), 120), \n                     '${PARAM_SESSION_ID}', \n                     '${LOGPK}', \n                     'TASK_FLOW_MASTER'\n\n                    /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 MASTER_TABLE_NAME \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n                    );\n                    IF EXISTS\n                    (\n                        SELECT *\n                        FROM TASK_FLOW_MASTER\n                        WHERE TASK_IDX \= '$$TASK_IDX$$'\n                              AND ISNULL(DATA_STATUS, 0) \= 0\n                    )\n                        BEGIN\n\n                            /* 3.2 DATA Detail LOG (before modified) */\n                            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n                            INSERT INTO LOG_TASK_FLOW_MASTER\n                            (FUNC_ID, \n                             CRUD_STATE, \n                             TASK_IDX, \n                             TASK_ID, \n                             TASK_NAME, \n                             TASK_TARGET, \n                             TASK_DESC, \n                             IS_DISABLED, \n                             ADD_USER_ID, \n                             ADD_USER_COMPANY_ID, \n                             ADD_DT, \n                             LAST_MOD_USER_ID, \n                             LAST_MOD_USER_COMPANY_ID, \n                             LAST_MOD_DT, \n                             DEL_USER_ID, \n                             DEL_USER_COMPANY_ID, \n                             DEL_DT, \n                             DATA_STATUS, \n                             DATA_CHANGE_LOG_ID\n                            )\n                                   SELECT '$$FunctionID$$' AS FUNC_ID, \n                                          'U' AS CRUD_STATE, \n                                          TASK_IDX, \n                                          TASK_ID, \n                                          TASK_NAME, \n                                          TASK_TARGET, \n                                          TASK_DESC, \n                                          IS_DISABLED, \n                                          ADD_USER_ID, \n                                          ADD_USER_COMPANY_ID, \n                                          ADD_DT, \n                                          LAST_MOD_USER_ID, \n                                          LAST_MOD_USER_COMPANY_ID, \n                                          LAST_MOD_DT, \n                                          DEL_USER_ID, \n                                          DEL_USER_COMPANY_ID, \n                                          DEL_DT, \n                                          DATA_STATUS, \n                                          IDENT_CURRENT('DATA_CHANGE_LOG') AS DATA_CHANGE_LOG_ID\n                                   FROM TASK_FLOW_MASTER\n                                   WHERE TASK_IDX \= '$$TASK_IDX$$';\n\n                            /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改 PK 流水號鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n                            /* 3.3 Action Return */\n\n                            INSERT INTO MEM_API_RESULT\n                            (ProcPK, \n                             hashValues, \n                             RETURN_CODE, \n                             RETURN_MSG, \n                             DATA_UNIQUE_KEY, \n                             DATA_ACTION_TYPE, \n                             MEMO\n                            )\n                            VALUES\n                            ('${LOGPK}', \n                             @FROM_OUTSIDE, \n                             '0', \n                             'SUCCESS', \n                             '$$TASK_IDX$$' ,\n\n                             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n                             'U', \n                             '$$MEMO$$'\n                            );\n                        END;\n                        ELSE\n                        BEGIN\n\n                            /* 3.4 Action Return */\n\n                            INSERT INTO MEM_API_RESULT\n                            (ProcPK, \n                             hashValues, \n                             RETURN_CODE, \n                             RETURN_MSG, \n                             DATA_UNIQUE_KEY, \n                             DATA_ACTION_TYPE, \n                             MEMO\n                            )\n                            VALUES\n                            ('${LOGPK}', \n                             @FROM_OUTSIDE, \n                             '-1', \n                             '資料正在審核流程中，無法修改', \n                             '$$TASK_IDX$$' ,\n\n                             /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改業務邏輯唯一鍵值 \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n                             'U', \n                             '$$MEMO$$'\n                            );\n                        END;\n\n                    /* 3.5 功能主要異動 Table */\n                    /* \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# 根據功能修改對應 Table、Column \#\#\#\#\#\#\#\#\#\#\#\#\#\#\# */\n\n                    UPDATE TASK_FLOW_MASTER\n                      SET \n                          TASK_ID \= (CASE\n                                         WHEN SUBSTRING('$$TASK_ID$$', 1, 50) \= SUBSTRING('\#NO_DATA\#', 1, 50)\n                                         THEN TASK_ID\n                                         ELSE SUBSTRING('$$TASK_ID$$', 1, 50)\n                                     END), \n                          TASK_NAME \= (CASE\n                                           WHEN SUBSTRING('$$TASK_NAME$$', 1, 200) \= SUBSTRING('\#NO_DATA\#', 1, 200)\n                                           THEN TASK_NAME\n                                           ELSE SUBSTRING('$$TASK_NAME$$', 1, 200)\n                                       END), \n                          TASK_TARGET \= (CASE\n                                             WHEN SUBSTRING('$$TASK_TARGET$$', 1, 100) \= SUBSTRING('\#NO_DATA\#', 1, 100)\n                                             THEN TASK_TARGET\n                                             ELSE SUBSTRING('$$TASK_TARGET$$', 1, 100)\n                                         END), \n                          TASK_DESC \= (CASE\n                                           WHEN SUBSTRING('$$TASK_DESC$$', 1, 200) \= SUBSTRING('\#NO_DATA\#', 1, 200)\n                                           THEN TASK_DESC\n                                           ELSE SUBSTRING('$$TASK_DESC$$', 1, 200)\n                                       END), \n                          IS_DISABLED \= (CASE\n                                             WHEN SUBSTRING('$$IS_DISABLED$$', 1, 1) \= SUBSTRING('\#NO_DATA\#', 1, 1)\n                                             THEN IS_DISABLED\n                                             ELSE SUBSTRING('$$IS_DISABLED$$', 1, 1)\n                                         END), \n                          LAST_MOD_USER_ID \= '${PARAM_SOURCE_COMING}', \n                          LAST_MOD_USER_COMPANY_ID \= '$$COMPANY_ID$$', \n                          LAST_MOD_DT \= CONVERT(VARCHAR(20), GETDATE(), 120), \n                          DATA_STATUS \= '0'\n                    WHERE TASK_IDX \= '$$TASK_IDX$$';\n                END;\n    SELECT @RETURN_CODE \= RETURN_CODE, \n           @RETURN_MSG \= RETURN_MSG, \n           @RETURN_TEST \=\n    (\n        SELECT ProcPK, \n               hashValues, \n               RETURN_CODE, \n               RETURN_MSG, \n               DATA_UNIQUE_KEY, \n               DATA_ACTION_TYPE, \n               MEMO\n        FROM MEM_API_RESULT\n        WHERE hashValues \= @FROM_OUTSIDE FOR JSON AUTO\n    )\n    FROM MEM_API_RESULT\n    WHERE hashValues \= @FROM_OUTSIDE;\nEND TRY\nBEGIN CATCH\n    SELECT @RETURN_CODE \= ERROR_NUMBER(), \n           @RETURN_MSG \= ERROR_MESSAGE(), \n           @RETURN_TEST \=\n    (\n        SELECT *\n        FROM\n        (\n            SELECT '${LOGPK}' AS ProcPK, \n                   @FROM_OUTSIDE AS hashValues, \n                   ERROR_NUMBER() AS RETURN_CODE, \n                   ERROR_MESSAGE() AS RETURN_MSG, \n                   '$$TASK_ID$$' AS DATA_UNIQUE_KEY, \n                   '$$PARAM_SWITCH_VALUE$$' AS DATA_ACTION_TYPE, \n                   '$$MEMO$$' AS MEMO\n        ) AS A FOR JSON AUTO\n    );\nEND CATCH;
SYS_TASK_FLOW_LIST=SELECT *\n ,(\n  SELECT COUNT(*)\n  FROM TASK_FLOW_MASTER WITH (NOLOCK)\n  WHERE ((TASK_ID LIKE '%$$TASK_ID$$%'\n   OR '$$TASK_ID$$' \= 'ALL')\n   AND (TASK_NAME LIKE '%$$TASK_NAME$$%'\n   OR '$$TASK_NAME$$'\='ALL'))\n   AND (\n   DATA_STATUS \= '$$DATA_STATUS$$'\n   OR '$$DATA_STATUS$$' \= 'ALL'\n   )) AS totalProperty\nFROM (\nSELECT ROW_NUMBER() OVER (\n   ORDER BY TASK_IDX) AS RowNum\n,TASK_IDX\n,TASK_ID\n,TASK_NAME\n,TASK_TARGET\n,TASK_DESC\n,IS_DISABLED\n,ADD_USER_ID --固定欄位必需取出\n,ADD_USER_COMPANY_ID --固定欄位必需取出\n,ADD_DT --固定欄位必需取出\n,LAST_MOD_USER_ID --固定欄位必需取出\n,LAST_MOD_USER_COMPANY_ID --固定欄位必需取出\n,LAST_MOD_DT --固定欄位必需取出\n,DEL_USER_ID --固定欄位必需取出\n,DEL_USER_COMPANY_ID --固定欄位必需取出\n,DEL_DT --固定欄位必需取出\n,DATA_STATUS --固定欄位必需取出\nFROM TASK_FLOW_MASTER WITH (NOLOCK)\nWHERE ((TASK_ID LIKE '%$$TASK_ID$$%'\n   OR '$$TASK_ID$$' \= 'ALL')\n   AND (TASK_NAME LIKE '%$$TASK_NAME$$%'\n   OR '$$TASK_NAME$$'\='ALL'))\n   AND (\n   DATA_STATUS \= '$$DATA_STATUS$$'\n   OR '$$DATA_STATUS$$' \= 'ALL'\n   )\n) AS new1\nWHERE RowNum > $$start$$\n AND RowNum <\= ($$start$$ + $$limit$$);
SYS_UI_CONFIG=SELECT *\n\t,(\n\t\tSELECT 1\n\t\t) AS totalProperty\nFROM (\n\tSELECT 1 AS RowNum,\n\t\t'$$requestTimeout$$' AS REQUEST_TIMEOUT,\n\t\t'$$storeTimeout$$' AS STORE_TIMEOUT,\n\t\t'$$UploadFileMaxSize$$' AS UPLOAD_FILE_MAX_SIZE,\n\t\t'$$UploadMaxCounter$$' AS UPLOAD_MAX_COUNTER,\n\t\t'$$DownloadMaxCounter$$' AS DOWNLOAD_MAX_COUNTER\n\tWHERE 1 \= 1\n\t) AS new1
SYS_UPDATE_PW=PLUGINS/SYS_UPDATE_PW/SYS_UPDATE_PW.kjb
SYS_USE_CMD_CHANGE_FILE=PLUGINS/SYS_REPORT2/USE_CMD_CHANGE_FILE_MAIN.kjb
SysCUD=BEGIN TRY DECLARE @CUD INTEGER; SET @CUD \= 0 ; BEGIN TRANSACTION ;  $$cmp01; SET @CUD \= @CUD + @@ROWCOUNT;COMMIT TRANSACTION ;  SELECT  0 AS 'RETURN_CODE',@CUD  AS RETURN_MSG; END TRY BEGIN CATCH  SELECT ERROR_NUMBER() AS RETURN_CODE,ERROR_MESSAGE() AS RETURN_MSG; ROLLBACK TRANSACTION ;  END CATCH;
SysCUD_1=BEGIN TRY DECLARE @CUD INTEGER; SET @CUD \= 0 ; BEGIN TRANSACTION ;  $$cmp01; SET @CUD \= @CUD + @@ROWCOUNT;COMMIT TRANSACTION ;  SELECT  0 AS 'RETURN_CODE',@CUD  AS RETURN_MSG; END TRY BEGIN CATCH  SELECT ERROR_NUMBER() AS RETURN_CODE,ERROR_MESSAGE() AS RETURN_MSG; ROLLBACK TRANSACTION ;  END CATCH;
SysTREE=SELECT ROW_NUMBER() OVER (\n\t\tORDER BY SEQ_ID\n\t\t\t,FUNC_ID ASC\n\t\t) AS RowNum\n\t,FUNC_ID AS id\n\t,FUNC_ID\n\t,PARENT_ID AS parentId\n\t,COMPANY_ID\n\t,SEQ_ID\n\t,FUNC_NAME AS TEXT\n\t,FUNC_NAME\n\t,DESC_FUNC_NAME\n\t,FUNC_EN_NAME\n\t,IS_LEAF\n\t,(\n\t\tCASE IS_LEAF\n\t\t\tWHEN 'Y'\n\t\t\t\tTHEN 'true'\n\t\t\tELSE 'false'\n\t\t\tEND\n\t\t) AS leaf\n\t,(\n\t\tCASE IS_LEAF\n\t\t\tWHEN 'Y'\n\t\t\t\tTHEN 'false'\n\t\t\tELSE 'true'\n\t\t\tEND\n\t\t) AS expanded\nFROM FUNCTIONS\nWHERE IS_DISABLED \= 'N'\n\tAND 1 \= 1\n\tAND FUNC_ID LIKE '%$$FUNC_ID$$%'\n\tAND (\n\t\tFUNC_ID IN (\n\t\t\tSELECT SUBSTRING(A.FUNC_ID, 1, 6)\n\t\t\tFROM (\n\t\t\t\tSELECT FUNC_ID\n\t\t\t\tFROM FUNCTIONS\n\t\t\t\tWHERE FUNC_ID LIKE '%$$FUNC_ID$$%'\n\t\t\t\t\tAND LEN(FUNC_ID) <> 4\n\t\t\t\t\tAND IS_DISABLED \= 'N'\n\t\t\t\t\tAND IS_LEAF \= 'Y'\n\t\t\t\t\tAND FUNC_ID IS NOT NULL\n\t\t\t\t) A\n\t\t\tLEFT OUTER JOIN (\n\t\t\t\tSELECT GROUPID\n\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t,QRY\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT A.GROUPID\n\t\t\t\t\t\t,A.FUNC_ID\n\t\t\t\t\t\t,(\n\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\tWHEN B.QRY IS NULL\n\t\t\t\t\t\t\t\t\tTHEN A.QRY\n\t\t\t\t\t\t\t\tELSE B.QRY\n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t) AS QRY\n\t\t\t\t\t\t,A.QRY AS GROUP_QRY\n\t\t\t\t\t\t,B.USER_ID\n\t\t\t\t\t\t,B.GROUPID AS USER_GROUP\n\t\t\t\t\t\t,B.FUNC_ID AS USER_FUNC_ID\n\t\t\t\t\t\t,B.QRY AS USER_QRY\n\t\t\t\t\tFROM GROUP_FUNC_AUTH A\n\t\t\t\t\tLEFT OUTER JOIN USER_FUNC_AUTH B ON A.GROUPID \= B.GROUPID\n\t\t\t\t\t\tAND A.FUNC_ID \= B.FUNC_ID\n\t\t\t\t\t\tAND B.USER_ID \= '$$SysUser$$'\n\t\t\t\t\t) FN_AUTH\n\t\t\t\tWHERE 1 \= 1\n\t\t\t\t\tAND QRY \= 1\n\t\t\t\t\tAND GROUPID \= '$$SysGroup$$'\n\t\t\t\t) B ON A.FUNC_ID \= B.FUNC_ID\n\t\t\tWHERE B.GROUPID \= '$$SysGroup$$'\n\t\t\t)\n\t\tOR FUNC_ID IN (\n\t\t\tSELECT A.FUNC_ID\n\t\t\tFROM (\n\t\t\t\tSELECT FUNC_ID\n\t\t\t\tFROM FUNCTIONS\n\t\t\t\tWHERE FUNC_ID LIKE '%$$FUNC_ID$$%'\n\t\t\t\t\tAND LEN(FUNC_ID) <> 4\n\t\t\t\t\tAND IS_DISABLED \= 'N'\n\t\t\t\t\tAND IS_LEAF \= 'Y'\n\t\t\t\t\tAND FUNC_ID IS NOT NULL\n\t\t\t\t) A\n\t\t\tLEFT OUTER JOIN (\n\t\t\t\tSELECT GROUPID\n\t\t\t\t\t,FUNC_ID\n\t\t\t\t\t,QRY\n\t\t\t\tFROM (\n\t\t\t\t\tSELECT A.GROUPID\n\t\t\t\t\t\t,A.FUNC_ID\n\t\t\t\t\t\t,(\n\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\tWHEN B.QRY IS NULL\n\t\t\t\t\t\t\t\t\tTHEN A.QRY\n\t\t\t\t\t\t\t\tELSE B.QRY\n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t) AS QRY\n\t\t\t\t\t\t,A.QRY AS GROUP_QRY\n\t\t\t\t\t\t,B.USER_ID\n\t\t\t\t\t\t,B.GROUPID AS USER_GROUP\n\t\t\t\t\t\t,B.FUNC_ID AS USER_FUNC_ID\n\t\t\t\t\t\t,B.QRY AS USER_QRY\n\t\t\t\t\tFROM GROUP_FUNC_AUTH A\n\t\t\t\t\tLEFT OUTER JOIN USER_FUNC_AUTH B ON A.GROUPID \= B.GROUPID\n\t\t\t\t\t\tAND A.FUNC_ID \= B.FUNC_ID\n\t\t\t\t\t\tAND B.USER_ID \= '$$SysUser$$'\n\t\t\t\t\t) FN_AUTH\n\t\t\t\tWHERE 1 \= 1\n\t\t\t\t\tAND QRY \= 1\n\t\t\t\t\tAND GROUPID \= '$$SysGroup$$'\n\t\t\t\t) B ON A.FUNC_ID \= B.FUNC_ID\n\t\t\tWHERE B.GROUPID \= '$$SysGroup$$'\n\t\t\t)\n\t\t)\n
T2T_00_RESET_IS00PF_STATE=Funs/ReSetIS00PFResult/Entrances.kjb
T2T_ALL_TO_TMP_ALL=Funs/TableCopy/Entrances.kjb
T2T_API_FLOW=Funs/FlowForAPI/Entrances.kjb
T2T_IS01PF_CHECK_IS00PF=SELECT * FROM IS00PF
T2T_IS01PF_TO_TMP_IS01PF=Funs/TableCopy/Entrances.kjb
T2T_IS02PF_TO_TMP_IS02PF=Funs/TableCopy/Entrances.kjb
T2T_IS03PF_TO_TMP_IS03PF=Funs/TableCopy/Entrances.kjb
T2T_IS04PF_TO_TMP_IS04PF=Funs/TableCopy/Entrances.kjb
T2T_IS11PF_TO_TMP_IS11PF=Funs/TableCopy/Entrances.kjb
T2T_IS12PF_TO_TMP_IS12PF=Funs/TableCopy/Entrances.kjb
T2T_IS13PF_TO_TMP_IS13PF=Funs/TableCopy/Entrances.kjb
T2T_IS14PF_TO_TMP_IS14PF=Funs/TableCopy/Entrances.kjb
T2T_IS15PF_TO_TMP_IS15PF=Funs/TableCopy/Entrances.kjb
T2T_IS21PF_TO_TMP_IS21PF=Funs/TableCopy/Entrances.kjb
T2T_IS22PF_TO_TMP_IS22PF=Funs/TableCopy/Entrances.kjb
T2T_IS31CPF_TO_TMP_IS31CPF=Funs/TableCopy/Entrances.kjb
T2T_IS31EPF_TO_TMP_IS31EPF=Funs/TableCopy/Entrances.kjb
T2T_IS31FPF_TO_TMP_IS31FPF=Funs/TableCopy/Entrances.kjb
T2T_IS31MPF_TO_TMP_IS31MPF=Funs/TableCopy/Entrances.kjb
T2T_IS32CPF_TO_TMP_IS32CPF=Funs/TableCopy/Entrances.kjb
T2T_IS32EPF_TO_TMP_IS32EPF=Funs/TableCopy/Entrances.kjb
T2T_IS32FPF_TO_TMP_IS32FPF=Funs/TableCopy/Entrances.kjb
T2T_IS32MPF_TO_TMP_IS32MPF=Funs/TableCopy/Entrances.kjb
T2T_IS33CPF_TO_TMP_IS33CPF=Funs/TableCopy/Entrances.kjb
T2T_IS33EPF_TO_TMP_IS33EPF=Funs/TableCopy/Entrances.kjb
T2T_IS33FPF_TO_TMP_IS33FPF=Funs/TableCopy/Entrances.kjb
T2T_IS33MPF_TO_TMP_IS33MPF=Funs/TableCopy/Entrances.kjb
T2T_IS41PF_TO_TMP_IS41PF=Funs/TableCopy/Entrances.kjb
T2T_IS42PF_TO_TMP_IS42PF=Funs/TableCopy/Entrances.kjb
T2T_IS43PF_TO_TMP_IS43PF=Funs/TableCopy/Entrances.kjb
T2T_IS61PF_TO_TMP_IS61PF=Funs/TableCopy/Entrances.kjb
T2T_IS62PF_TO_TMP_IS62PF=Funs/TableCopy/Entrances.kjb
T2T_IS63PF_TO_TMP_IS63PF=Funs/TableCopy/Entrances.kjb
T2T_IS64PF_TO_TMP_IS64PF=Funs/TableCopy/Entrances.kjb
T2T_IS65PF_TO_TMP_IS65PF=Funs/TableCopy/Entrances.kjb
T2T_IS71PF_TO_TMP_IS71PF=Funs/TableCopy/Entrances.kjb
T2T_IS72PF_TO_TMP_IS72PF=Funs/TableCopy/Entrances.kjb
T2T_IS73PF_TO_TMP_IS73PF=Funs/TableCopy/Entrances.kjb
T2T_IS74PF_TO_TMP_IS74PF=Funs/TableCopy/Entrances.kjb
T2T_MBA1PF_TO_TMP_MBA1PF=Funs/TableCopy/Entrances.kjb
T2T_MBASPF_TO_TMP_MBASPF=Funs/TableCopy/Entrances.kjb
T2T_MEG0SAP_TO_TMP_MEG0SAP=Funs/TableCopy/Entrances.kjb
T2T_PFDC_TO_TMP_PFDC=Funs/TableCopy/Entrances.kjb
T2T_RI01PF_TO_TMP_RI01PF=Funs/TableCopy/Entrances.kjb
T2T_RI02PF_TO_TMP_RI02PF=Funs/TableCopy/Entrances.kjb
T2T_ZS06PF_TO_TMP_ZS06PF=Funs/TableCopy/Entrances.kjb
TABLE_DATA_EXPORT_FILE=Funs/TableExportFile/Entrances.kjb
Test_API=/* \n\tLast Version Last Updated by Last Updated Date Comment；\n\t\tv2.2.3 Steve 20200720\n\t\t\t1. 以 COUNT(*) OVER() 方式解決 \n\t\t\t2 段子查詢問題\n\t\tv2.2.3 Min 20200828\n\t\t\t1. 增加 @R1_CONDITION 註解說明\n\t\tv2.2.3 Steve 20201016\n\t\t\t1. 調整註解*/\nIF '$$PARAM_CALENDAR_DT$$' \= 'ALL'\nBEGIN\n\tSELECT *\n\tFROM (\n\t\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t\t,ROW_NUMBER() OVER (\n\t\t\t\tORDER BY PK\n\t\t\t\t) AS RowNum\n\t\t\t,PK\n\t\t\t,WS_CODE\t\t\t\t\t\t\t\t\t\t\t\t/*主機代碼*/\n\t\t\t,PROXY_WS\t\t\t\t\t\t\t\t\t\t\t\t/*主機代碼(代理)*/\n\t\t\t,SG_PK\n\t\t\t,SG_NAME\t\t\t\t\t\t\t\t\t\t\t\t/*排程名稱*/\n\t\t\t,CONVERT(VARCHAR, SG_START_YMD, 120) AS SG_START_YMD\t/*起始日期*/\n\t\t\t,SG_START_HMS\t\t\t\t\t\t\t\t\t\t\t/*起始時間*/\n\t\t\t,CONVERT(VARCHAR, SG_ABORT_YMD, 120) AS SG_ABORT_YMD\t/*終止日期*/\n\t\t\t,SG_ABORT_HMS\t\t\t\t\t\t\t\t\t\t\t/*終止時間*/\n\t\t\t,SG_ABORT\t\t\t\t\t\t\t\t\t\t\t\t/*執行錯誤是否停止*/\n\t\t\t,SG_TEAM_NUM\t\t\t\t\t\t\t\t\t\t\t/*團隊編號*/\n\t\t\t,CONVERT(VARCHAR, SG_THIS_DT, 120) AS SG_THIS_DT\t\t/*表定本次執行時間*/\n\t\t\t,CONVERT(VARCHAR, SG_NEXT_DT, 120) AS SG_NEXT_DT\t\t/*表定下次執行時間*/\n\t\t\t,CONVERT(VARCHAR, SG_START_DT, 120) AS SG_START_DT\t\t/*本次執行時間(起)*/\n\t\t\t,CONVERT(VARCHAR, SG_END_DT, 120) AS SG_END_DT\t\t\t/*本次執行時間(迄)*/\n\t\t\t,CR_PROCESS\t\t\t\t\t\t\t\t\t\t\t\t/*工作流程(當前)*/\n\t\t\t,CR_PROCESS_RECORD\t\t\t\t\t\t\t\t\t\t/*工作流程*/\n\t\t\t,CR_PROCESS_HELP\t\t\t\t\t\t\t\t\t\t/*工作流程說明*/\n\t\t\t,TK_PK\n\t\t\t,TK_NAME\t\t\t\t\t\t\t\t\t\t\t\t/*Task名稱*/\n\t\t\t,TK_TYPE\t\t\t\t\t\t\t\t\t\t\t\t/*Task類型*/\n\t\t\t,TK_ABORT\t\t\t\t\t\t\t\t\t\t\t\t/*執行錯誤中只排程*/\n\t\t\t,TK_PAUSE\t\t\t\t\t\t\t\t\t\t\t\t/*暫停 / 執行*/\n\t\t\t,TK_SUCCEED_MAIL\t\t\t\t\t\t\t\t\t\t/*系統通知信(成功)*/\n\t\t\t,TK_FAIL_MAIL\t\t\t\t\t\t\t\t\t\t\t/*系統通知信(失敗)*/\n\t\t\t,LOG_PK\t\t\t\t\t\t\t\t\t\t\t\t\t/*PROCESS_LOG的PL*/\n\t\t\t,LOG_URL\t\t\t\t\t\t\t\t\t\t\t\t/*PROCESS_LOG的實體檔路徑*/\n\t\t\t,LOG_DETAIL_LIST\t\t\t\t\t\t\t\t\t\t/*FLOW則記錄所屬的API之LOG PK*/\n\t\t\t,SG_SLEEP_NUM\t\t\t\t\t\t\t\t\t\t\t/*每次排程執行結束後須停頓多久(秒)*/\n\t\t\t,SG_SKIP_CRDATE\t\t\t\t\t\t\t\t\t\t\t/*逾時是否略過*/\n\t\t\t,SG_CREATE_NUM\t\t\t\t\t\t\t\t\t\t\t/*預產行事曆筆數*/\n\t\t\t,SG_CREATE_UNIT\t\t\t\t\t\t\t\t\t\t\t/*預產行事曆單位，固定NUM*/\n\t\t\t,COMPANY_ID\t\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,ADD_USER_ID\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,ADD_USER_COMPANY_ID\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,LAST_MOD_USER_ID\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,LAST_MOD_USER_COMPANY_ID\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,DEL_USER_ID\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,DEL_USER_COMPANY_ID\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,DATA_STATUS\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\tFROM JH_WS02_SCHDL_CALENDAR WITH (NOLOCK)\n\t\tWHERE (\n\t\t\t\t(\n\t\t\t\t\tSG_NAME LIKE '%$$SG_NAME$$%'\n\t\t\t\t\tOR '$$SG_NAME$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tCR_PROCESS_HELP \= '$$CR_PROCESS_HELP$$'\n\t\t\t\t\tOR '$$CR_PROCESS_HELP$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tSG_START_DT \= '$$SG_START_DT$$'\n\t\t\t\t\tOR '$$SG_START_DT$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tSG_END_DT \= '$$SG_END_DT$$'\n\t\t\t\t\tOR '$$SG_END_DT$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t) AS new1\n\tWHERE RowNum > $$start$$\n\t\tAND RowNum <\= ($$start$$ + $$limit$$)\n\tORDER BY SG_START_YMD,SG_START_HMS DESC\nEND\nELSE\n\tSELECT *\n\tFROM (\n\t\tSELECT COUNT(*) OVER () AS totalProperty\n\t\t\t,ROW_NUMBER() OVER (\n\t\t\t\tORDER BY PK\n\t\t\t\t) AS RowNum\n\t\t\t,PK\n\t\t\t,WS_CODE\t\t\t\t\t\t\t\t\t\t\t\t/*主機代碼*/\n\t\t\t,PROXY_WS\t\t\t\t\t\t\t\t\t\t\t\t/*主機代碼(代理)*/\n\t\t\t,SG_PK\n\t\t\t,SG_NAME\t\t\t\t\t\t\t\t\t\t\t\t/*排程名稱*/\n\t\t\t,CONVERT(VARCHAR, SG_START_YMD, 120) AS SG_START_YMD\t/*起始日期*/\n\t\t\t,SG_START_HMS\t\t\t\t\t\t\t\t\t\t\t/*起始時間*/\n\t\t\t,CONVERT(VARCHAR, SG_ABORT_YMD, 120) AS SG_ABORT_YMD\t/*終止日期*/\n\t\t\t,SG_ABORT_HMS\t\t\t\t\t\t\t\t\t\t\t/*終止時間*/\n\t\t\t,SG_ABORT\t\t\t\t\t\t\t\t\t\t\t\t/*執行錯誤是否停止排程*/\n\t\t\t,SG_TEAM_NUM\t\t\t\t\t\t\t\t\t\t\t/*團隊編號*/\n\t\t\t,CONVERT(VARCHAR, SG_THIS_DT, 120) AS SG_THIS_DT\t\t/*表定本次執行時間*/\n\t\t\t,CONVERT(VARCHAR, SG_NEXT_DT, 120) AS SG_NEXT_DT\t\t/*表定下次執行時間*/\n\t\t\t,CONVERT(VARCHAR, SG_START_DT, 120) AS SG_START_DT\t\t/*本次執行時間(起)*/\n\t\t\t,CONVERT(VARCHAR, SG_END_DT, 120) AS SG_END_DT\t\t\t/*本次執行時間(迄)*/\n\t\t\t,TK_PK\n\t\t\t,TK_NAME\t\t\t\t\t\t\t\t\t\t\t\t/*Task名稱*/\n\t\t\t,TK_TYPE\t\t\t\t\t\t\t\t\t\t\t\t/*Task類型*/\n\t\t\t,TK_ABORT\t\t\t\t\t\t\t\t\t\t\t\t/*執行錯誤是否停止*/\n\t\t\t,TK_PAUSE\t\t\t\t\t\t\t\t\t\t\t\t/*執行 / 暫停*/\n\t\t\t,TK_SUCCEED_MAIL\t\t\t\t\t\t\t\t\t\t/*系統通知信(成功)*/\n\t\t\t,TK_FAIL_MAIL\t\t\t\t\t\t\t\t\t\t\t/*系統通知信(失敗)*/\n\t\t\t,SG_SLEEP_NUM\t\t\t\t\t\t\t\t\t\t\t/*每次排程執行結束須停頓多久(秒)*/\n\t\t\t,SG_SKIP_CRDATE\t\t\t\t\t\t\t\t\t\t\t/*逾時略過*/\n\t\t\t,SG_CREATE_NUM\t\t\t\t\t\t\t\t\t\t\t/*預產行事曆筆數，固定30*/\n\t\t\t,SG_CREATE_UNIT\t\t\t\t\t\t\t\t\t\t\t/*預產行事曆單位，固定NUM*/\n\t\t\t,COMPANY_ID\t\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,ADD_USER_ID\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,ADD_USER_COMPANY_ID\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,CONVERT(VARCHAR, ADD_DT, 120) AS ADD_DT\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,LAST_MOD_USER_ID\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,LAST_MOD_USER_COMPANY_ID\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,CONVERT(VARCHAR, LAST_MOD_DT, 120) AS LAST_MOD_DT\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,DEL_USER_ID\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,DEL_USER_COMPANY_ID\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,CONVERT(VARCHAR, DEL_DT, 120) AS DEL_DT\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\t\t,DATA_STATUS\t\t\t\t\t\t\t\t\t\t\t/*固定欄位必須輸出，不可移除*/\n\t\tFROM JH_WS02_SCHDL_RESERVATION WITH (NOLOCK)\n\t\tWHERE (\n\t\t\t\t(\n\t\t\t\t\tSG_NAME LIKE '%$$SG_NAME$$%'\n\t\t\t\t\tOR '$$SG_NAME$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tSG_THIS_DT \= '$$SG_THIS_DT$$'\n\t\t\t\t\tOR '$$SG_THIS_DT$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\tAND (\n\t\t\t\t\tSG_END_DT \= '$$SG_END_DT$$'\n\t\t\t\t\tOR '$$SG_END_DT$$' \= 'ALL'\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t) AS new1\n\tWHERE RowNum > $$start$$\n\t\tAND RowNum <\= ($$start$$ + $$limit$$)\n\tORDER BY SG_START_YMD,SG_START_HMS ASC\n
Test_API_1=SELECT * FROM USERS
TEST_CRUD_001=\   INSERT INTO JH_WS02_SCHDL_GROUP\n(WS_CODE,PROXY_WS,SG_NAME,SG_HELP\n,SG_START_YMD,SG_START_HMS\n,SG_ABORT_YMD,SG_ABORT_HMS,SG_ABORT\n,SG_TOTAL,SG_SUCCEED_COUNT,SG_ERROR_COUNT\n,SG_STATUS,SG_STATUS_HELP\n,SG_SLEEP_NUM\n,SG_SKIP_CRDATE\n,SG_CREATE_NUM,SG_CREATE_UNIT\n,SG_SUCCEED_MAIL,SG_FAIL_MAIL\n,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT)\nVALUES\n('WS02'\n,(CASE '' WHEN '' THEN NULL ELSE '' END)\n,'asaaaa','aaaaaaa'\n,'2000-02-29'\n,(CASE '09\:00\:00' WHEN '' THEN NULL ELSE '09\:00\:00' END)\n,(CASE '' WHEN '' THEN NULL ELSE '' END)\n,(CASE '' WHEN '' THEN NULL ELSE '' END),'N'\n,0,0,0\n,'QUIT','退出排程'\n,(CASE '1' WHEN '' THEN '1' ELSE '1' END)\n,(CASE 'Y' WHEN '' THEN 'N' ELSE 'Y' END)\n,'',''\n,'N','N'\n,'JH','Todd','JH',CONVERT(VARCHAR,GETDATE(),120))\n\nINSERT INTO JH_WS02_SCHDL_CYCLE_LIST \n(SG_PK,SC_VALUE_A,SC_UNIT_A,SC_VALUE_B,SC_UNIT_B,COMPANY_ID,ADD_USER_ID,ADD_USER_COMPANY_ID,ADD_DT) \nVALUES \n((SELECT SCOPE_IDENTITY())\n,'2','INTERVAL'\n,(CASE '' WHEN '' THEN NULL ELSE '' END)\n,(CASE '' WHEN '' THEN NULL ELSE '' END)\n,'JH','Todd','JH',CONVERT(VARCHAR,GETDATE(),120))
Test_DB_MVDATA2TIME=Test/MS2ORA/Entrance.kjb
TEST_SDD=SELECT '$$A$$' AS 'A'
TEST_SELECT_TABLE_THRESH=SELECT  top 1000 PK,\n       LOV_CATALOG_NAME,\n       LOV_SCHEMA_NAME,\n       LOV_TABLE_NAME,\n       LOV_COLUMN_NAME,\n       LOV_COLUMN_PK,\n       LOV_REPORT_SHEET_NAME,\n       LOV_COLUMN_VALUE,\n       LOV_COLUMN_REPEAT_NUM,\n       LOV_COLUMN_TOTAL,\n       LOV_COLUMN_LOV_VALUE,\n       LOV_COLUMN_LOV_VALUE_ANALYSIS,\n       LOV_COLUMN_VALUE_LEN,\n       LOV_COLUMN_LOV_VALUE_TOTAL,\n       LOV_COLUMN_LOV_VALUE_NULL_NUM,\n       LOV_COLUMN_LOV_VALUE_MAX,\n       LOV_COLUMN_LOV_VALUE_MIN,\n       LOV_COLUMN_LOV_VALUE_CALCULATOR,\n       LOV_COLUMN_GROUPBY,\n       LOV_COLUMN_FREE1,\n       LOV_COLUMN_FREE2,\n       LOV_COLUMN_FREE3,\n       LOV_LOT_NUM,\n       LOV_LOT_DT,\n       LOV_HELP,\n       ADD_USER_ID,\n       ADD_USER_COMPANY_ID,\n       ADD_DT,\n       LAST_MOD_USER_ID,\n       LAST_MOD_USER_COMPANY_ID,\n       LAST_MOD_DT,\n       DEL_USER_ID,\n       DEL_USER_COMPANY_ID,\n       DEL_DT,\n       DATA_STATUS\nFROM JH_WS02_LOV_TMP_INFO WITH(NOLOCK)
testBuildReport=PLUGINS/TEST_BUILD_REPORT/BUILD_REPORT_MAIN.kjb
TestOracle_DEPT_C=\n\t\tvRETURN_KEY_STR \:\= '$$DEPID$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='C';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M TABLE 新增*/\n\t\tINSERT INTO JH_CONF_DEPARTMENT("DEPID" ,"DEPARTNAME" ,"DEP_LEVEL_CODE" ,"MGR_USERID" ,"ADD_DT" ,"ADD_USER_ID" ,"ADD_USER_COMPANY_ID" ,"DATA_STATUS")\n\t\tVALUES ('$$DEPID$$' ,'$$DEPARTNAME$$' ,'$$DEP_LEVEL_CODE$$' ,'$$MGR_USERID$$' ,SYSDATE ,vPARAM_SOURCE_COMING ,vPARAM_COMPANY ,'$$DATA_STATUS$$')\n\t\tRETURNING CAST(DEPARTMENT_IDX AS varchar2(200))  INTO vPK; /*取得資料表PK值*/\n\t\tvMASTER_PK\:\=vPK;\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'INSERT',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'JH_CONF_DEPARTMENT' , i_LOG_IDENT); \n\n\t\t/*M- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_JH_CONF_DEPARTMENT\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'C',T.* \n\t\tFROM JH_CONF_DEPARTMENT T\n\t\tWHERE DEPARTMENT_IDX\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'C',vMEMO);
TestOracle_DEPT_D=\t\tvRETURN_KEY_STR \:\= '$$DEPID$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='D';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\tSELECT CAST('$$DEPARTMENT_IDX$$' AS VARCHAR2(200)) INTO vPK  FROM DUAL;\n\n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tJHSP_CHK_DATA_STATUS('JH_CONF_DEPARTMENT', 'DEPARTMENT_IDX','NUMBER', TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR));\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'DELETE',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'JH_CONF_DEPARTMENT' , i_LOG_IDENT); \n\n\t\t/*M- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_JH_CONF_DEPARTMENT\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'D',T.* \n\t\tFROM JH_CONF_DEPARTMENT T\n\t\tWHERE DEPARTMENT_IDX\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*M-刪除主檔及明細資料檔*/\n\t\tDELETE JH_CONF_DEPARTMENT  WHERE DEPARTMENT_IDX\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'D',vMEMO);
TestOracle_DEPT_U=\t\tvRETURN_KEY_STR \:\= '$$DEPID$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='U';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\tSELECT CAST('$$DEPARTMENT_IDX$$' AS VARCHAR2(200)) INTO vPK  FROM DUAL;\n\n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tJHSP_CHK_DATA_STATUS('JH_CONF_DEPARTMENT', 'DEPARTMENT_IDX','NUMBER', TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR));\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'UPDATE',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'JH_CONF_DEPARTMENT' , i_LOG_IDENT); \n\n\t\t/*M- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_JH_CONF_DEPARTMENT\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'U',T.* \n\t\tFROM JH_CONF_DEPARTMENT T\n\t\tWHERE DEPARTMENT_IDX\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*-修改M TABLE*/\n\t\tUPDATE JH_CONF_DEPARTMENT SET\n\t\t"DEPID"\= CASE WHEN '$$DEPID$$'\='\#NO_DATA\#'  THEN "DEPID" ELSE '$$DEPID$$' END\n\t\t ,"DEPARTNAME"\= CASE WHEN '$$DEPARTNAME$$'\='\#NO_DATA\#'  THEN "DEPARTNAME" ELSE TO_NCHAR('$$DEPARTNAME$$') END\n\t\t ,"DEP_LEVEL_CODE"\= CASE WHEN '$$DEP_LEVEL_CODE$$'\='\#NO_DATA\#'  THEN "DEP_LEVEL_CODE" ELSE '$$DEP_LEVEL_CODE$$' END\n\t\t ,"MGR_USERID"\= CASE WHEN '$$MGR_USERID$$'\='\#NO_DATA\#'  THEN "MGR_USERID" ELSE '$$MGR_USERID$$' END\n\t\t ,"LAST_MOD_DT"\= SYSDATE\n\t\t ,"LAST_MOD_USER_ID"\= vPARAM_SOURCE_COMING\n\t\t ,"LAST_MOD_USER_COMPANY_ID"\= vPARAM_COMPANY\n\t\t ,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE '$$DATA_STATUS$$' END\n\t\tWHERE DEPARTMENT_IDX\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'U',vMEMO); \n
TestOracle_MD1_C=vRETURN_KEY_STR \:\= '$$COLUMN1$$'; /*COLUMN1請填BUSINESS PK欄位值 */\n\n    /*產生M  TABLE新增語法***************************************************************************************************************************************/\n\tIF '$$PARAM_SWITCH_VALUE$$'\='LS_ADD' THEN\n\t    /*回傳值給執行此語法的sp*/\n\t    SELECT vRETURN_KEY_STR, '${LOGPK}', '$$MEMO$$' ,'C'  INTO \:1, \:2, \:3, \:4 FROM DUAL;\n\n\t    /*M-1.1 M TABLE 新增*/\n\t\tINSERT INTO TEST_M(\n\t\t             "M_DESC")\n\t\tVALUES (\n\t\t             '$$M_DESC$$')\n\t\tRETURNING CAST(M_PK AS varchar2(200))  INTO vMASTER_PK; /*取得資料表PK值*/\n\t    /*M-1.2DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'INSERT'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vMASTER_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_M')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*M-1.3 DATA Detail LOG for M Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_M("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"M_PK", "M_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','C'\n\t\t             ,"M_PK", "M_DESC"\n\t\tFROM TEST_M\n\t\tWHERE M_PK\=TO_NUMBER(vMASTER_PK);\n\n\t\t/*M-1.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vMASTER_PK\n\t\t\t\t\t,'C'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\n    /*產生D1  TABLE新增語法***************************************************************************************************************************************/\n\tIF '$$PARAM_SWITCH_VALUE$$'\='D1_ADD' THEN\n\t    /*D1-1.1 D1 TABLE 新增*/\n\t\tINSERT INTO TEST_D1(\n\t\t             "M1_PK"\n\t\t            ,"D1_DESC")\n\t\tVALUES (\n\t\t             TO_NUMBER(vMASTER_PK)\n\t\t            ,'$$D1_DESC$$')\n\t\tRETURNING CAST(D1_PK AS varchar2(200))  INTO vDETAIL_PK; /*取得資料表PK值*/\n\t    /*D1-1.2DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'INSERT'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vDETAIL_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_D1')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*D1-1.3 DATA Detail LOG for D1 Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_D1("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"D1_PK", "M1_PK"\n\t\t            ,"D1_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','C'\n\t\t             ,"D1_PK", "M1_PK"\n\t\t            ,"D1_DESC"\n\t\tFROM TEST_D1\n\t\tWHERE D1_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t\t/*D1-1.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vDETAIL_PK\n\t\t\t\t\t,'C'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\n
TestOracle_MD3=SELECT * \nFROM ( \n      SELECT COUNT(*) OVER () AS "totalProperty" \n        ,ROW_NUMBER() OVER (ORDER BY M_PK) AS "RowNum" \n        ,"M_PK"\n        ,"M_DESC"\n      FROM TEST_M\n      WHERE ( M_DESC LIKE '%$$M_DESC$$%' OR '$$M_DESC$$' \= 'ALL')\n      ) new1\nWHERE "RowNum" > $$start$$\n  AND "RowNum" <\= ($$start$$ + $$limit$$)
TestOracle_MD3_C=vRETURN_KEY_STR \:\= '$$COLUMN1$$'; /*COLUMN1請填BUSINESS PK欄位值 */\n\n    /*產生M  TABLE新增語法***************************************************************************************************************************************/\n\tIF '$$PARAM_SWITCH_VALUE$$'\='LS_ADD' THEN\n\t    /*回傳值給執行此語法的sp*/\n\t    SELECT vRETURN_KEY_STR, '${LOGPK}', '$$MEMO$$' ,'C'  INTO \:1, \:2, \:3, \:4 FROM DUAL;\n\n\t    /*M-1.1 M TABLE 新增*/\n\t\tINSERT INTO TEST_M(\n\t\t             "M_DESC")\n\t\tVALUES (\n\t\t             '$$M_DESC$$')\n\t\tRETURNING CAST(M_PK AS varchar2(200))  INTO vMASTER_PK; /*取得資料表PK值*/\n\t    /*M-1.2DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'INSERT'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vMASTER_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_M')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*M-1.3 DATA Detail LOG for M Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_M("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"M_PK", "M_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','C'\n\t\t             ,"M_PK", "M_DESC"\n\t\tFROM TEST_M\n\t\tWHERE M_PK\=TO_NUMBER(vMASTER_PK);\n\n\t\t/*M-1.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vMASTER_PK\n\t\t\t\t\t,'C'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\n    /*產生D1  TABLE新增語法***************************************************************************************************************************************/\n\tIF '$$PARAM_SWITCH_VALUE$$'\='D1_ADD' THEN\n\t    /*D1-1.1 D1 TABLE 新增*/\n\t\tINSERT INTO TEST_D1(\n\t\t             "M1_PK"\n\t\t            ,"D1_DESC")\n\t\tVALUES (\n\t\t             TO_NUMBER(vMASTER_PK)\n\t\t            ,'$$D1_DESC$$')\n\t\tRETURNING CAST(D1_PK AS varchar2(200))  INTO vDETAIL_PK; /*取得資料表PK值*/\n\t    /*D1-1.2DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'INSERT'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vDETAIL_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_D1')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*D1-1.3 DATA Detail LOG for D1 Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_D1("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"D1_PK", "M1_PK"\n\t\t            ,"D1_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','C'\n\t\t             ,"D1_PK", "M1_PK"\n\t\t            ,"D1_DESC"\n\t\tFROM TEST_D1\n\t\tWHERE D1_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t\t/*D1-1.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vDETAIL_PK\n\t\t\t\t\t,'C'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\n    /*產生D2  TABLE新增語法***************************************************************************************************************************************/\n\tIF '$$PARAM_SWITCH_VALUE$$'\='D2_ADD' THEN\n\t    /*D2-1.1 D2 TABLE 新增*/\n\t\tINSERT INTO TEST_D2(\n\t\t             "M2_PK"\n\t\t            ,"D2_DESC")\n\t\tVALUES (\n\t\t             TO_NUMBER(vMASTER_PK)\n\t\t            ,'$$D2_DESC$$')\n\t\tRETURNING CAST(D2_PK AS varchar2(200))  INTO vDETAIL_PK; /*取得資料表PK值*/\n\t    /*D2-1.2DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'INSERT'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vDETAIL_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_D2')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*D2-1.3 DATA Detail LOG for D2 Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_D2("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"D2_PK", "M2_PK"\n\t\t            ,"D2_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','C'\n\t\t             ,"D2_PK", "M2_PK"\n\t\t            ,"D2_DESC"\n\t\tFROM TEST_D2\n\t\tWHERE D2_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t\t/*D2-1.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vDETAIL_PK\n\t\t\t\t\t,'C'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\n    /*產生D3  TABLE新增語法***************************************************************************************************************************************/\n\tIF '$$PARAM_SWITCH_VALUE$$'\='D3_ADD' THEN\n\t    /*D3-1.1 D3 TABLE 新增*/\n\t\tINSERT INTO TEST_D3(\n\t\t             "M3_PK"\n\t\t            ,"D3_DESC")\n\t\tVALUES (\n\t\t             TO_NUMBER(vMASTER_PK)\n\t\t            ,'$$D3_DESC$$')\n\t\tRETURNING CAST(D3_PK AS varchar2(200))  INTO vDETAIL_PK; /*取得資料表PK值*/\n\t    /*D3-1.2DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'INSERT'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vDETAIL_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_D3')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*D3-1.3 DATA Detail LOG for D3 Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_D3("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"D3_PK", "M3_PK"\n\t\t            ,"D3_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','C'\n\t\t             ,"D3_PK", "M3_PK"\n\t\t            ,"D3_DESC"\n\t\tFROM TEST_D3\n\t\tWHERE D3_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t\t/*D3-1.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vDETAIL_PK\n\t\t\t\t\t,'C'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\n
TestOracle_MD3_D1_R=SELECT * \nFROM ( \n      SELECT COUNT(*) OVER () AS "totalProperty" \n        ,ROW_NUMBER() OVER (ORDER BY D1_PK) AS "RowNum" \n        ,"D1_PK"\n        ,"M1_PK"\n        ,"D1_DESC"\n        ,"M_PK"\n      FROM TEST_D1\n      WHERE  (M_PK \= TO_NUMBER('$$M_PK$$' DEFAULT NULL ON CONVERSION ERROR) OR '$$M_PK$$' \= 'ALL')\n      ) new1\nWHERE "RowNum" > $$start$$\n  AND "RowNum" <\= ($$start$$ + $$limit$$)
TestOracle_MD3_D2_R=SELECT * \nFROM ( \n      SELECT COUNT(*) OVER () AS "totalProperty" \n        ,ROW_NUMBER() OVER (ORDER BY D2_PK) AS "RowNum" \n        ,"D2_PK"\n        ,"M_PK"\n        ,"D2_DESC"\n       , "M2_PK"\n      FROM TEST_D2\n      WHERE  (M_PK \= TO_NUMBER('$$M_PK$$' DEFAULT NULL ON CONVERSION ERROR) OR '$$M_PK$$' \= 'ALL')\n      ) new1\nWHERE "RowNum" > $$start$$\n  AND "RowNum" <\= ($$start$$ + $$limit$$)
TestOracle_MD3_D3_R=SELECT * \nFROM ( \n      SELECT COUNT(*) OVER () AS "totalProperty" \n        ,ROW_NUMBER() OVER (ORDER BY D3_PK) AS "RowNum" \n        ,"D3_PK"\n        ,"M_PK"\n        ,"D3_DESC"\n        , "M3_PK"\n      FROM TEST_D3\n      WHERE  (M_PK \= TO_NUMBER('$$M_PK$$' DEFAULT NULL ON CONVERSION ERROR) OR '$$M_PK$$' \= 'ALL')\n      ) new1\nWHERE "RowNum" > $$start$$\n  AND "RowNum" <\= ($$start$$ + $$limit$$)
TestOracle_MD3_D=vRETURN_KEY_STR \:\= '$$COLUMN1$$'; /*COLUMN1請填BUSINESS PK欄位值 */\n\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_DEL'THEN\n\t    /*回傳值給執行此語法的sp*/\n\t    SELECT vRETURN_KEY_STR, '${LOGPK}', '$$MEMO$$' ,'D'  INTO \:1, \:2, \:3, \:4 FROM DUAL;\n\n\t   SELECT CAST('$$M_PK$$' AS VARCHAR2(200)) INTO vMASTER_PK FROM DUAL;\n\n\t   /*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t   SELECT D.APPLY_VARCHAR_01  INTO vChkDataStatus\n\t   FROM TEST_M T\n\t   INNER JOIN JH_REF_CODE_DETAIL D ON (D.CODE_TYPE\='DATA_STATUS' AND D.CODE_VALUE \= NVL(T.DATA_STATUS,'9') )/*DATA_STATUS\=9為無流程*/\n\t   WHERE M_PK\=TO_NUMBER(vMASTER_PK);\n\n\t   IF vChkDataStatus <> 'Y' THEN\n          raise_application_error(-20001,'資料正在審核流程中，無法刪除');\n\t   END IF;\n\n\t    /*M-2.1DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'DELETE'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vMASTER_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_M')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*M-2.2 DATA Detail LOG for M Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_M("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"M_PK", "M_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','D'\n\t\t             ,"M_PK", "M_DESC"\n\t\tFROM TEST_M\n\t\tWHERE M_PK\=TO_NUMBER(vMASTER_PK);\n\n\t    /*M-2.3 刪除主檔及明細資料檔*/\n\t     DELETE TEST_D1 WHERE M1_PK\=TO_NUMBER(vMASTER_PK);  DELETE TEST_D2 WHERE M2_PK\=TO_NUMBER(vMASTER_PK);  DELETE TEST_D3 WHERE M3_PK\=TO_NUMBER(vMASTER_PK); \n\t    DELETE TEST_M  WHERE M_PK\=TO_NUMBER(vMASTER_PK);\n\n\t\t/*M-2.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vMASTER_PK\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\n
TestOracle_MD3_R=SELECT * \nFROM ( \n      SELECT COUNT(*) OVER () AS "totalProperty" \n        ,ROW_NUMBER() OVER (ORDER BY M_PK) AS "RowNum" \n        ,"M_PK"\n        ,"M_DESC"\n      FROM TEST_M\n      WHERE ( M_DESC LIKE '%$$M_DESC$$%' OR '$$M_DESC$$' \= 'ALL')\n      ) new1\nWHERE "RowNum" > $$start$$\n  AND "RowNum" <\= ($$start$$ + $$limit$$)\n
TestOracle_MD3_U=vRETURN_KEY_STR \:\= '$$COLUMN1$$'; /*COLUMN1請填BUSINESS PK欄位值 */\n\nIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_MOD'THEN\n\t    /*回傳值給執行此語法的sp*/\n\t    SELECT vRETURN_KEY_STR, '${LOGPK}', '$$MEMO$$' ,'U'  INTO \:1, \:2, \:3, \:4 FROM DUAL;\n\n\t   SELECT CAST('$$M_PK$$' AS VARCHAR2(200)) INTO vMASTER_PK FROM DUAL;\n\n\t   /*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t   SELECT D.APPLY_VARCHAR_01  INTO vChkDataStatus\n\t   FROM TEST_M T\n\t   INNER JOIN JH_REF_CODE_DETAIL D ON (D.CODE_TYPE\='DATA_STATUS' AND D.CODE_VALUE \= NVL(T.DATA_STATUS,'9') )/*DATA_STATUS\=9為無流程*/\n\t   WHERE M_PK\=TO_NUMBER(vMASTER_PK);\n\n\t   IF vChkDataStatus <> 'Y' THEN\n          raise_application_error(-20001,'資料正在審核流程中，無法修改');\n\t   END IF;\n\n\t    /*M-3.1DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'UPDATE'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vMASTER_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_M')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*M-3.2 DATA Detail LOG for M Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_M("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"M_PK", "M_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','U'\n\t\t             ,"M_PK", "M_DESC"\n\t\tFROM TEST_M\n\t\tWHERE M_PK\=TO_NUMBER(vMASTER_PK);\n\n\t    /*M-3.3 修改M TABLE*/\n\t   UPDATE TEST_M SET\n\t              "M_DESC"\= CASE WHEN '$$M_DESC$$'\='\#NO_DATA\#'  THEN "M_DESC" ELSE '$$M_DESC$$' END\n\t   WHERE M_PK\=TO_NUMBER(vMASTER_PK);\n\n\t\t/*M-3.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vMASTER_PK\n\t\t\t\t\t,'U'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\n    /*產生D1  TABLE新增語法***************************************************************************************************************************************/\n\tIF '$$PARAM_SWITCH_VALUE$$'\='D1_ADD' THEN\n\t    /*D1-1.1 D1 TABLE 新增*/\n\t\tINSERT INTO TEST_D1(\n\t\t             "M1_PK"\n\t\t            ,"D1_DESC")\n\t\tVALUES (\n\t\t             TO_NUMBER(vMASTER_PK)\n\t\t            ,'$$D1_DESC$$')\n\t\tRETURNING CAST(D1_PK AS varchar2(200))  INTO vDETAIL_PK; /*取得資料表PK值*/\n\t    /*D1-1.2DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'INSERT'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vDETAIL_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_D1')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*D1-1.3 DATA Detail LOG for D1 Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_D1("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"D1_PK", "M1_PK"\n\t\t            ,"D1_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','C'\n\t\t             ,"D1_PK", "M1_PK"\n\t\t            ,"D1_DESC"\n\t\tFROM TEST_D1\n\t\tWHERE D1_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t\t/*D1-1.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vDETAIL_PK\n\t\t\t\t\t,'C'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\nIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_DEL'THEN\n\t   SELECT CAST('$$D1_PK$$' AS VARCHAR2(200)) INTO vDETAIL_PK FROM DUAL;\n\n\t    /*D1-2.1DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'DELETE'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vDETAIL_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_D1')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*D1-2.2 DATA Detail LOG for D1 Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_D1("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"D1_PK", "M1_PK"\n\t\t            ,"D1_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','D'\n\t\t             ,"D1_PK", "M1_PK"\n\t\t            ,"D1_DESC"\n\t\tFROM TEST_D1\n\t\tWHERE D1_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t    /*D1-2.3 刪除主檔及明細資料檔*/\n\t    DELETE TEST_D1  WHERE D1_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t\t/*D1-2.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vDETAIL_PK\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\nIF '$$PARAM_SWITCH_VALUE$$' \= 'D1_MOD'THEN\n\t   SELECT CAST('$$D1_PK$$' AS VARCHAR2(200)) INTO vDETAIL_PK FROM DUAL;\n\n\t    /*D1-3.1DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'UPDATE'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vDETAIL_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_D1')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*D1-3.2 DATA Detail LOG for D1 Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_D1("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"D1_PK", "M1_PK"\n\t\t            ,"D1_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','U'\n\t\t             ,"D1_PK", "M1_PK"\n\t\t            ,"D1_DESC"\n\t\tFROM TEST_D1\n\t\tWHERE D1_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t    /*D1-3.3 修改D1 TABLE*/\n\t   UPDATE TEST_D1 SET\n\t              "M1_PK"\= CASE WHEN '$$M1_PK$$'\='\#NO_DATA\#'  THEN "M1_PK" ELSE TO_NUMBER('$$M1_PK$$' DEFAULT NULL ON CONVERSION ERROR) END\n\t\t            ,"D1_DESC"\= CASE WHEN '$$D1_DESC$$'\='\#NO_DATA\#'  THEN "D1_DESC" ELSE '$$D1_DESC$$' END\n\t   WHERE D1_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t\t/*D1-3.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vDETAIL_PK\n\t\t\t\t\t,'U'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\n    /*產生D2  TABLE新增語法***************************************************************************************************************************************/\n\tIF '$$PARAM_SWITCH_VALUE$$'\='D2_ADD' THEN\n\t    /*D2-1.1 D2 TABLE 新增*/\n\t\tINSERT INTO TEST_D2(\n\t\t             "M2_PK"\n\t\t            ,"D2_DESC")\n\t\tVALUES (\n\t\t             TO_NUMBER(vMASTER_PK)\n\t\t            ,'$$D2_DESC$$')\n\t\tRETURNING CAST(D2_PK AS varchar2(200))  INTO vDETAIL_PK; /*取得資料表PK值*/\n\t    /*D2-1.2DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'INSERT'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vDETAIL_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_D2')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*D2-1.3 DATA Detail LOG for D2 Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_D2("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"D2_PK", "M2_PK"\n\t\t            ,"D2_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','C'\n\t\t             ,"D2_PK", "M2_PK"\n\t\t            ,"D2_DESC"\n\t\tFROM TEST_D2\n\t\tWHERE D2_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t\t/*D2-1.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vDETAIL_PK\n\t\t\t\t\t,'C'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\nIF '$$PARAM_SWITCH_VALUE$$' \= 'D2_DEL'THEN\n\t   SELECT CAST('$$D2_PK$$' AS VARCHAR2(200)) INTO vDETAIL_PK FROM DUAL;\n\n\t    /*D2-2.1DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'DELETE'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vDETAIL_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_D2')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*D2-2.2 DATA Detail LOG for D2 Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_D2("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"D2_PK", "M2_PK"\n\t\t            ,"D2_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','D'\n\t\t             ,"D2_PK", "M2_PK"\n\t\t            ,"D2_DESC"\n\t\tFROM TEST_D2\n\t\tWHERE D2_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t    /*D2-2.3 刪除主檔及明細資料檔*/\n\t    DELETE TEST_D2  WHERE D2_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t\t/*D2-2.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vDETAIL_PK\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\nIF '$$PARAM_SWITCH_VALUE$$' \= 'D2_MOD'THEN\n\t   SELECT CAST('$$D2_PK$$' AS VARCHAR2(200)) INTO vDETAIL_PK FROM DUAL;\n\n\t    /*D2-3.1DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'UPDATE'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vDETAIL_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_D2')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*D2-3.2 DATA Detail LOG for D2 Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_D2("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"D2_PK", "M2_PK"\n\t\t            ,"D2_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','U'\n\t\t             ,"D2_PK", "M2_PK"\n\t\t            ,"D2_DESC"\n\t\tFROM TEST_D2\n\t\tWHERE D2_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t    /*D2-3.3 修改D2 TABLE*/\n\t   UPDATE TEST_D2 SET\n\t              "M2_PK"\= CASE WHEN '$$M2_PK$$'\='\#NO_DATA\#'  THEN "M2_PK" ELSE TO_NUMBER('$$M2_PK$$' DEFAULT NULL ON CONVERSION ERROR) END\n\t\t            ,"D2_DESC"\= CASE WHEN '$$D2_DESC$$'\='\#NO_DATA\#'  THEN "D2_DESC" ELSE '$$D2_DESC$$' END\n\t   WHERE D2_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t\t/*D2-3.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vDETAIL_PK\n\t\t\t\t\t,'U'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\n    /*產生D3  TABLE新增語法***************************************************************************************************************************************/\n\tIF '$$PARAM_SWITCH_VALUE$$'\='D3_ADD' THEN\n\t    /*D3-1.1 D3 TABLE 新增*/\n\t\tINSERT INTO TEST_D3(\n\t\t             "M3_PK"\n\t\t            ,"D3_DESC")\n\t\tVALUES (\n\t\t             TO_NUMBER(vMASTER_PK)\n\t\t            ,'$$D3_DESC$$')\n\t\tRETURNING CAST(D3_PK AS varchar2(200))  INTO vDETAIL_PK; /*取得資料表PK值*/\n\t    /*D3-1.2DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'INSERT'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vDETAIL_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_D3')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*D3-1.3 DATA Detail LOG for D3 Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_D3("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"D3_PK", "M3_PK"\n\t\t            ,"D3_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','C'\n\t\t             ,"D3_PK", "M3_PK"\n\t\t            ,"D3_DESC"\n\t\tFROM TEST_D3\n\t\tWHERE D3_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t\t/*D3-1.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vDETAIL_PK\n\t\t\t\t\t,'C'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\nIF '$$PARAM_SWITCH_VALUE$$' \= 'D3_DEL'THEN\n\t   SELECT CAST('$$D3_PK$$' AS VARCHAR2(200)) INTO vDETAIL_PK FROM DUAL;\n\n\t    /*D3-2.1DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'DELETE'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vDETAIL_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_D3')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*D3-2.2 DATA Detail LOG for D3 Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_D3("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"D3_PK", "M3_PK"\n\t\t            ,"D3_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','D'\n\t\t             ,"D3_PK", "M3_PK"\n\t\t            ,"D3_DESC"\n\t\tFROM TEST_D3\n\t\tWHERE D3_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t    /*D3-2.3 刪除主檔及明細資料檔*/\n\t    DELETE TEST_D3  WHERE D3_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t\t/*D3-2.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vDETAIL_PK\n\t\t\t\t\t,'D'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\nIF '$$PARAM_SWITCH_VALUE$$' \= 'D3_MOD'THEN\n\t   SELECT CAST('$$D3_PK$$' AS VARCHAR2(200)) INTO vDETAIL_PK FROM DUAL;\n\n\t    /*D3-3.1DATA_CHANGE_LOG*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SESSIONID"\n\t\t             ,"PROCPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'UPDATE'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,vDETAIL_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'TEST_D3')\n\t\tRETURNING LOG_ID  INTO i_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*D3-3.2 DATA Detail LOG for D3 Table(before modified)*/\n\t\t INSERT INTO LOG_TEST_D3("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             ,"D3_PK", "M3_PK"\n\t\t            ,"D3_DESC")\n\t\tSELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','U'\n\t\t             ,"D3_PK", "M3_PK"\n\t\t            ,"D3_DESC"\n\t\tFROM TEST_D3\n\t\tWHERE D3_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t    /*D3-3.3 修改D3 TABLE*/\n\t   UPDATE TEST_D3 SET\n\t              "M3_PK"\= CASE WHEN '$$M3_PK$$'\='\#NO_DATA\#'  THEN "M3_PK" ELSE TO_NUMBER('$$M3_PK$$' DEFAULT NULL ON CONVERSION ERROR) END\n\t\t            ,"D3_DESC"\= CASE WHEN '$$D3_DESC$$'\='\#NO_DATA\#'  THEN "D3_DESC" ELSE '$$D3_DESC$$' END\n\t   WHERE D3_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t\t/*D3-3.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"PROCPK"\n\t\t\t\t\t,"HASHVALUES"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vDETAIL_PK\n\t\t\t\t\t,'U'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;\n
TestOracle_MDTEST=\t\tvRETURN_KEY_STR \:\= '$$M_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='C';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M TABLE 新增*/\n\t\tINSERT INTO TEST_M("M_DESC" ,"DATA_STATUS")\n\t\tVALUES ('$$M_DESC$$' ,'$$DATA_STATUS$$')\n\t\tRETURNING CAST(M_PK AS varchar2(200))  INTO vPK; /*取得資料表PK值*/\n\t\tvMASTER_PK\:\=vPK;\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'INSERT',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_M' , i_LOG_IDENT); \n\n\t\t/*M- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_M\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'C',T.* \n\t\tFROM TEST_M T\n\t\tWHERE M_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'C',vMEMO); \n\n/*SQLDelimiter*/\n\n\t\tvRETURN_KEY_STR \:\= '$$D1_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='C';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D1 TABLE 新增*/\n\t\tINSERT INTO TEST_D1("M1_PK" ,"D1_DESC" ,"DATA_STATUS" ,"M_PK")\n\t\tVALUES ('$$M1_PK$$' ,'$$D1_DESC$$' ,'$$DATA_STATUS$$' ,TO_NUMBER(NVL(vMASTER_PK,'$$M_PK$$')  DEFAULT NULL ON CONVERSION ERROR))\n\t\tRETURNING CAST(D1_PK AS varchar2(200))  INTO vPK; /*取得資料表PK值*/\n\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D1-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'INSERT',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_D1' , i_LOG_IDENT); \n\n\t\t/*D1- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_D1\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'C',T.* \n\t\tFROM TEST_D1 T\n\t\tWHERE D1_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*D1-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'C',vMEMO);
TestOracle_MDTEST_D1_ADD=\t\tvRETURN_KEY_STR \:\= '$$D1_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='C';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D1 TABLE 新增*/\n\t\tINSERT INTO TEST_D1("M1_PK" ,"D1_DESC" ,"DATA_STATUS" ,"M_PK")\n\t\tVALUES ('$$M1_PK$$' ,'$$D1_DESC$$' ,'$$DATA_STATUS$$' ,TO_NUMBER(NVL(vMASTER_PK,'$$M_PK$$')  DEFAULT NULL ON CONVERSION ERROR))\n\t\tRETURNING CAST(D1_PK AS varchar2(200))  INTO vPK; /*取得資料表PK值*/\n\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D1-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'INSERT',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_D1' , i_LOG_IDENT); \n\n\t\t/*D1- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_D1\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'C',T.* \n\t\tFROM TEST_D1 T\n\t\tWHERE D1_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*D1-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'C',vMEMO);\n\n\n
TestOracle_MDTEST_D1_DEL=\t\tvRETURN_KEY_STR \:\= '$$D1_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='D';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\tSELECT CAST('$$D1_PK$$' AS VARCHAR2(200)) INTO vPK  FROM DUAL;\n\n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tJHSP_CHK_DATA_STATUS('TEST_D1', 'D1_PK','NUMBER', TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR));\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D1-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'DELETE',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_D1' , i_LOG_IDENT); \n\n\t\t/*D1- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_D1\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'D',T.* \n\t\tFROM TEST_D1 T\n\t\tWHERE D1_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*D1-刪除主檔及明細資料檔*/\n\t\tDELETE TEST_D1  WHERE D1_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*D1-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'D',vMEMO);
TestOracle_MDTEST_D1_MOD=\t\tvRETURN_KEY_STR \:\= '$$D1_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='U';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\tSELECT CAST('$$D1_PK$$' AS VARCHAR2(200)) INTO vPK  FROM DUAL;\n\n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tJHSP_CHK_DATA_STATUS('TEST_D1', 'D1_PK','NUMBER', TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR));\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D1-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'UPDATE',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_D1' , i_LOG_IDENT); \n\n\t\t/*D1- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_D1\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'U',T.* \n\t\tFROM TEST_D1 T\n\t\tWHERE D1_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*-修改D1 TABLE*/\n\t\tUPDATE TEST_D1 SET\n\t\t"M1_PK"\= CASE WHEN '$$M1_PK$$'\='\#NO_DATA\#'  THEN "M1_PK" ELSE TO_NUMBER('$$M1_PK$$' DEFAULT NULL ON CONVERSION ERROR) END\n\t\t ,"D1_DESC"\= CASE WHEN '$$D1_DESC$$'\='\#NO_DATA\#'  THEN "D1_DESC" ELSE '$$D1_DESC$$' END\n\t\t ,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE '$$DATA_STATUS$$' END\n\t\t ,"M_PK"\= CASE WHEN '$$M_PK$$'\='\#NO_DATA\#'  THEN "M_PK" ELSE TO_NUMBER('$$M_PK$$' DEFAULT NULL ON CONVERSION ERROR) END\n\t\tWHERE D1_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*D1-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'U',vMEMO);
TestOracle_MDTEST_D2_ADD=\t\tvRETURN_KEY_STR \:\= '$$D2_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='C';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D2 TABLE 新增*/\n\t\tINSERT INTO TEST_D2("M2_PK" ,"D2_DESC" ,"DATA_STATUS" ,"M_PK")\n\t\tVALUES ('$$M2_PK$$' ,'$$D2_DESC$$' ,'$$DATA_STATUS$$' ,TO_NUMBER(NVL(vMASTER_PK,'$$M_PK$$')  DEFAULT NULL ON CONVERSION ERROR))\n\t\tRETURNING CAST(D2_PK AS varchar2(200))  INTO vPK; /*取得資料表PK值*/\n\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D2-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'INSERT',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_D2' , i_LOG_IDENT); \n\n\t\t/*D2- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_D2\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'C',T.* \n\t\tFROM TEST_D2 T\n\t\tWHERE D2_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*D2-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'C',vMEMO);
TestOracle_MDTEST_D2_DEL=\t\tvRETURN_KEY_STR \:\= '$$D2_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='D';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\tSELECT CAST('$$D2_PK$$' AS VARCHAR2(200)) INTO vPK  FROM DUAL;\n\n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tJHSP_CHK_DATA_STATUS('TEST_D2', 'D2_PK','NUMBER', TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR));\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D2-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'DELETE',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_D2' , i_LOG_IDENT); \n\n\t\t/*D2- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_D2\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'D',T.* \n\t\tFROM TEST_D2 T\n\t\tWHERE D2_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*D2-刪除主檔及明細資料檔*/\n\t\tDELETE TEST_D2  WHERE D2_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*D2-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'D',vMEMO);
TestOracle_MDTEST_D2_MOD=\t\tvRETURN_KEY_STR \:\= '$$D2_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='U';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\tSELECT CAST('$$D2_PK$$' AS VARCHAR2(200)) INTO vPK  FROM DUAL;\n\n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tJHSP_CHK_DATA_STATUS('TEST_D2', 'D2_PK','NUMBER', TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR));\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D2-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'UPDATE',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_D2' , i_LOG_IDENT); \n\n\t\t/*D2- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_D2\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'U',T.* \n\t\tFROM TEST_D2 T\n\t\tWHERE D2_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*-修改D2 TABLE*/\n\t\tUPDATE TEST_D2 SET\n\t\t"M2_PK"\= CASE WHEN '$$M2_PK$$'\='\#NO_DATA\#'  THEN "M2_PK" ELSE TO_NUMBER('$$M2_PK$$' DEFAULT NULL ON CONVERSION ERROR) END\n\t\t ,"D2_DESC"\= CASE WHEN '$$D2_DESC$$'\='\#NO_DATA\#'  THEN "D2_DESC" ELSE '$$D2_DESC$$' END\n\t\t ,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE '$$DATA_STATUS$$' END\n\t\t ,"M_PK"\= CASE WHEN '$$M_PK$$'\='\#NO_DATA\#'  THEN "M_PK" ELSE TO_NUMBER('$$M_PK$$' DEFAULT NULL ON CONVERSION ERROR) END\n\t\tWHERE D2_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*D2-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'U',vMEMO);
TestOracle_MDTEST_D3_ADD=\t\tvRETURN_KEY_STR \:\= '$$D3_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='C';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D3 TABLE 新增*/\n\t\tINSERT INTO TEST_D3("M3_PK" ,"D3_DESC" ,"DATA_STATUS" ,"M_PK")\n\t\tVALUES ('$$M3_PK$$' ,'$$D3_DESC$$' ,'$$DATA_STATUS$$' ,TO_NUMBER(NVL(vMASTER_PK,'$$M_PK$$')  DEFAULT NULL ON CONVERSION ERROR))\n\t\tRETURNING CAST(D3_PK AS varchar2(200))  INTO vPK; /*取得資料表PK值*/\n\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D3-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'INSERT',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_D3' , i_LOG_IDENT); \n\n\t\t/*D3- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_D3\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'C',T.* \n\t\tFROM TEST_D3 T\n\t\tWHERE D3_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*D3-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'C',vMEMO);
TestOracle_MDTEST_D3_DEL=\t\tvRETURN_KEY_STR \:\= '$$D3_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='D';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\tSELECT CAST('$$D3_PK$$' AS VARCHAR2(200)) INTO vPK  FROM DUAL;\n\n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tJHSP_CHK_DATA_STATUS('TEST_D3', 'D3_PK','NUMBER', TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR));\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D3-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'DELETE',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_D3' , i_LOG_IDENT); \n\n\t\t/*D3- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_D3\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'D',T.* \n\t\tFROM TEST_D3 T\n\t\tWHERE D3_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*D3-刪除主檔及明細資料檔*/\n\t\tDELETE TEST_D3  WHERE D3_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*D3-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'D',vMEMO);
TestOracle_MDTEST_D3_MOD=\t\tvRETURN_KEY_STR \:\= '$$D3_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='U';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\tSELECT CAST('$$D3_PK$$' AS VARCHAR2(200)) INTO vPK  FROM DUAL;\n\n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tJHSP_CHK_DATA_STATUS('TEST_D3', 'D3_PK','NUMBER', TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR));\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*D3-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'UPDATE',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_D3' , i_LOG_IDENT); \n\n\t\t/*D3- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_D3\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'U',T.* \n\t\tFROM TEST_D3 T\n\t\tWHERE D3_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*-修改D3 TABLE*/\n\t\tUPDATE TEST_D3 SET\n\t\t"M3_PK"\= CASE WHEN '$$M3_PK$$'\='\#NO_DATA\#'  THEN "M3_PK" ELSE TO_NUMBER('$$M3_PK$$' DEFAULT NULL ON CONVERSION ERROR) END\n\t\t ,"D3_DESC"\= CASE WHEN '$$D3_DESC$$'\='\#NO_DATA\#'  THEN "D3_DESC" ELSE '$$D3_DESC$$' END\n\t\t ,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE '$$DATA_STATUS$$' END\n\t\t ,"M_PK"\= CASE WHEN '$$M_PK$$'\='\#NO_DATA\#'  THEN "M_PK" ELSE TO_NUMBER('$$M_PK$$' DEFAULT NULL ON CONVERSION ERROR) END\n\t\tWHERE D3_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*D3-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'U',vMEMO);
TestOracle_MDTEST_LS_ADD=\t\tvRETURN_KEY_STR \:\= '$$M_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='C';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M TABLE 新增*/\n\t\tINSERT INTO TEST_M("M_DESC" ,"DATA_STATUS")\n\t\tVALUES ('$$M_DESC$$' ,'$$DATA_STATUS$$')\n\t\tRETURNING CAST(M_PK AS varchar2(200))  INTO vPK; /*取得資料表PK值*/\n\t\tvMASTER_PK\:\=vPK;\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'INSERT',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_M' , i_LOG_IDENT); \n\n\t\t/*M- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_M\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'C',T.* \n\t\tFROM TEST_M T\n\t\tWHERE M_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'C',vMEMO);
TestOracle_MDTEST_LS_ADDTT=/*開始點：此部份語法請填入【API_XXXXX_LS_ADD】\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t    \t    vRETURN_KEY_STR \:\= '$$COLUMN1$$'; /*COLUMN1請填BUSINESS PK欄位值 */\n\n\t    \t    /*回傳值給執行此語法的sp*/\n\t    \t    SELECT vRETURN_KEY_STR, '${LOGPK}', '$$MEMO$$' ,'C'  INTO \:1, \:2, \:3, \:4 FROM DUAL;\n\n\t    \t    /*M TABLE 新增*/\n\t    \t    INSERT INTO TEST_M(\n\t    \t    "M_DESC"\n\t\t            ,"DATA_STATUS")\n\t    \t    VALUES (\n\t    \t    '$$M_DESC$$'\n\t\t            ,'$$DATA_STATUS$$')\n\t    \t    RETURNING CAST(M_PK AS varchar2(200))  INTO vMASTER_PK; /*取得資料表PK值*/\n\n\t    \t    /*M-寫入DATA_CHANGE_LOG*/\n\t    \t    JHSP_INS_CHG_LOG('${PARAM_FUNC_ID}','INSERT','${PARAM_SOURCE_COMING}',vMASTER_PK,'$$MEMO$$','${PARAM_COMPANY}','${PARAM_SESSION_ID}', ${LOGPK} , 'TEST_M' , i_LOG_IDENT); \n\n\t    \t    /*M- 寫入 DATA Detail LOG Table(before modified)*/\n\t    \t    INSERT INTO LOG_TEST_M\n\t    \t    SELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','C',T.* \n\t    \t    FROM TEST_M T\n\t    \t    WHERE M_PK\=TO_NUMBER(vMASTER_PK);\n\n\t    \t    /*M-寫入MEM_API_RESULT - Action Return */\n\t    \t    JHSP_INS_API_RESULT(${LOGPK}, vFROM_OUTSIDE ,0, 'SUCCESS', vMASTER_PK,'C','$$MEMO$$'); \n/*結束點：【API_XXXXX_LS_ADD】\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n/*開始點：此部份語法請填入【API_XXXXX_D1_ADD】\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n\t    \t    vRETURN_KEY_STR \:\= '$$COLUMN1$$'; /*COLUMN1請填BUSINESS PK欄位值 */\n\n\t    \t    /*回傳值給執行此語法的sp*/\n\t    \t    SELECT vRETURN_KEY_STR, '${LOGPK}', '$$MEMO$$' ,'C'  INTO \:1, \:2, \:3, \:4 FROM DUAL;\n\n\t    \t    /*D1 TABLE 新增*/\n\t    \t    INSERT INTO TEST_D1(\n\t    \t    "M1_PK"\n\t\t            ,"D1_DESC"\n\t\t            ,"DATA_STATUS")\n\t    \t    VALUES (\n\t    \t    TO_NUMBER(vMASTER_PK)\n\t\t            ,'$$D1_DESC$$'\n\t\t            ,'$$DATA_STATUS$$')\n\t    \t    RETURNING CAST(D1_PK AS varchar2(200))  INTO vDETAIL_PK; /*取得資料表PK值*/\n\n\t    \t    /*D1-寫入DATA_CHANGE_LOG*/\n\t    \t    JHSP_INS_CHG_LOG('${PARAM_FUNC_ID}','INSERT','${PARAM_SOURCE_COMING}',vDETAIL_PK,'$$MEMO$$','${PARAM_COMPANY}','${PARAM_SESSION_ID}', ${LOGPK} , 'TEST_D1' , i_LOG_IDENT); \n\n\t    \t    /*D1- 寫入 DATA Detail LOG Table(before modified)*/\n\t    \t    INSERT INTO LOG_TEST_D1\n\t    \t    SELECT i_LOG_IDENT,'${PARAM_FUNC_ID}','C',T.* \n\t    \t    FROM TEST_D1 T\n\t    \t    WHERE D1_PK\=TO_NUMBER(vDETAIL_PK);\n\n\t    \t    /*D1-寫入MEM_API_RESULT - Action Return */\n\t    \t    JHSP_INS_API_RESULT(${LOGPK}, vFROM_OUTSIDE ,0, 'SUCCESS', vDETAIL_PK,'C','$$MEMO$$'); \n/*結束點：【API_XXXXX_D1_ADD】\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=*/\n
TestOracle_MDTEST_LS_DEL=\t\tvRETURN_KEY_STR \:\= '$$M_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='D';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\tSELECT CAST('$$M_PK$$' AS VARCHAR2(200)) INTO vPK  FROM DUAL;\n\n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tJHSP_CHK_DATA_STATUS('TEST_M', 'M_PK','NUMBER', TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR));\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'DELETE',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_M' , i_LOG_IDENT); \n\n\t\t/*M- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_M\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'D',T.* \n\t\tFROM TEST_M T\n\t\tWHERE M_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*M-刪除主檔及明細資料檔*/\n\t\t DELETE TEST_D1 WHERE M_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);  DELETE TEST_D2 WHERE M_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);  DELETE TEST_D3 WHERE M_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR); \n\t\tDELETE TEST_M  WHERE M_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'D',vMEMO);
TestOracle_MDTEST_LS_MOD=\t\tvRETURN_KEY_STR \:\= '$$M_PK$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='U';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\tSELECT CAST('$$M_PK$$' AS VARCHAR2(200)) INTO vPK  FROM DUAL;\n\n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tJHSP_CHK_DATA_STATUS('TEST_M', 'M_PK','NUMBER', TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR));\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'UPDATE',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'TEST_M' , i_LOG_IDENT); \n\n\t\t/*M- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_TEST_M\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'U',T.* \n\t\tFROM TEST_M T\n\t\tWHERE M_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*-修改M TABLE*/\n\t\tUPDATE TEST_M SET\n\t\t"M_DESC"\= CASE WHEN '$$M_DESC$$'\='\#NO_DATA\#'  THEN "M_DESC" ELSE '$$M_DESC$$' END\n\t\t ,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE '$$DATA_STATUS$$' END\n\t\tWHERE M_PK\=TO_NUMBER(vPK   DEFAULT NULL ON CONVERSION ERROR);\n\n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'U',vMEMO);
TestOracle_MDTEST_R=SELECT * \nFROM ( \n      SELECT COUNT(*) OVER () AS "totalProperty" \n        ,ROW_NUMBER() OVER (ORDER BY M_PK) AS "RowNum" \n        ,"M_PK"\n        ,"M_DESC"\n      FROM TEST_M\n      WHERE ( M_DESC LIKE '%$$M_DESC$$%' OR '$$M_DESC$$' \= 'ALL')\n      ) new1\nWHERE "RowNum" > $$start$$\n  AND "RowNum" <\= ($$start$$ + $$limit$$)
TestOracle_R=SELECT * \nFROM ( \n      SELECT COUNT(*) OVER () AS "totalProperty" \n        ,ROW_NUMBER() OVER (ORDER BY PK_TEST_CUD_M) AS "RowNum" \n        ,"PK_TEST_CUD_M"\n        ,"M_CHAR_COL"\n      FROM TEST_CUD_M\n      ) new1\nWHERE "RowNum" > $$start$$\n  AND "RowNum" <\= ($$start$$ + $$limit$$)\n
TestOracle_TIFCUD=vRETURN_KEY_STR \:\= '$$COLUMN1$$'; /*COLUMN1請填BUSINESS PK欄位值 */\n    /*產生新增語法***************************************************************************************************************************************/\n\tIF '$$PARAM_SWITCH_VALUE$$' \= 'LS_ADD' THEN\n\t    /*1.1 功能主要異動 MASTER_TABLE_NAME*/\n\t\tINSERT INTO JH_CONF_USERS(\n\t\t             "USERID"\n\t\t            ,"USERNAME"\n\t\t            ,"PASSWORD"\n\t\t            ,"COMPANY"\n\t\t            ,"DEPID"\n\t\t            ,"EMAIL"\n\t\t            ,"TEL1"\n\t\t            ,"TEL2"\n\t\t            ,"ISLOCK"\n\t\t            ,"EMP_NO"\n\t\t            ,"JOB_TITLE"\n\t\t            ,"JOB_GRADE"\n\t\t            ,"PRE_1_PASSWORD"\n\t\t            ,"PRE_2_PASSWORD"\n\t\t            ,"PRE_3_PASSWORD"\n\t\t            ,"ACTIVE_DATE"\n\t\t            ,"DEADLINE_DATE"\n\t\t            ,"WRONG_TIMES"\n\t\t            ,"LAST_PW_MOD_DT"\n\t\t            ,"ADD_DT"\n\t\t            ,"ADD_USER_ID"\n\t\t            ,"ADD_USER_COMPANY_ID"\n\t\t            ,"DATA_STATUS"\n\t\t            )\n\t\tVALUES (\n\t\t             '$$USERID$$'\n\t\t            ,'$$USERNAME$$'\n\t\t            ,'$$PASSWORD$$'\n\t\t            ,'$$COMPANY$$'\n\t\t            ,'$$DEPID$$'\n\t\t            ,'$$EMAIL$$'\n\t\t            ,'$$TEL1$$'\n\t\t            ,'$$TEL2$$'\n\t\t            ,'$$ISLOCK$$'\n\t\t            ,'$$EMP_NO$$'\n\t\t            ,'$$JOB_TITLE$$'\n\t\t            ,'$$JOB_GRADE$$'\n\t\t            ,'$$PRE_1_PASSWORD$$'\n\t\t            ,'$$PRE_2_PASSWORD$$'\n\t\t            ,'$$PRE_3_PASSWORD$$'\n\t\t            ,'$$ACTIVE_DATE$$'\n\t\t            ,'$$DEADLINE_DATE$$'\n\t\t            ,'$$WRONG_TIMES$$'\n\t\t            ,TO_DATE('$$LAST_PW_MOD_DT$$','YYYY-MM-DD')\n\t\t            ,SYSDATE\n\t\t            ,'${PARAM_SOURCE_COMING}'\n\t\t            ,'${PARAM_COMPANY}'\n\t\t            ,'$$DATA_STATUS$$'\n\t\t            )\n\t\tRETURNING CAST(USERID AS varchar2(200))  INTO vMASTER_PK; /*取得主檔資料表PK值*/\n\n\t    /*1.2DATA_CHANGE_LOG for 主檔*/\n\t    INSERT INTO DATA_CHANGE_LOG(\n\t\t             "FUNC_ID"\n\t\t             ,"PROC_TYPE"\n\t\t             ,"USER_ID"\n\t\t             ,"DATA_NO"\n\t\t             ,"EVENT_DT"\n\t\t             ,"MEMO"\n\t\t             ,"ADD_USER_COMPANY_ID"\n\t\t             ,"ADD_USER_ID"\n\t\t             ,"ADD_DT"\n\t\t             ,"SessionID"\n\t\t             ,"ProcPK"\n\t\t             ,"PROC_TARGET")\n\t\tVALUES (\n\t\t             '${PARAM_FUNC_ID}'\n\t\t             ,'INSERT'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             , vMASTER_PK\n\t\t             ,SYSDATE\n\t\t             ,'$$MEMO$$'\n\t\t             ,'${PARAM_COMPANY}'\n\t\t             ,'${PARAM_SOURCE_COMING}'\n\t\t             ,SYSDATE\n\t\t             ,'${PARAM_SESSION_ID}'\n\t\t             ,${LOGPK}\n\t\t             ,'JH_CONF_USERS')\n\t\tRETURNING LOG_ID  INTO iMASTER_LOG_IDENT; /*取得主檔寫入DATA_CHANGE_LOG資料表PK值*/\n\n\t\t/*1.3 DATA Detail LOG for Master Table(before modified)*/\n\t\t INSERT INTO LOG_JH_CONF_USERS("DATA_CHANGE_LOG_ID","FUNC_ID","CRUD_STATE"\n\t\t             , "USERID"\n\t\t            ,"USERNAME"\n\t\t            ,"PASSWORD"\n\t\t            ,"COMPANY"\n\t\t            ,"DEPID"\n\t\t            ,"EMAIL"\n\t\t            ,"TEL1"\n\t\t            ,"TEL2"\n\t\t            ,"ISLOCK"\n\t\t            ,"EMP_NO"\n\t\t            ,"JOB_TITLE"\n\t\t            ,"JOB_GRADE"\n\t\t            ,"PRE_1_PASSWORD"\n\t\t            ,"PRE_2_PASSWORD"\n\t\t            ,"PRE_3_PASSWORD"\n\t\t            ,"ACTIVE_DATE"\n\t\t            ,"DEADLINE_DATE"\n\t\t            ,"WRONG_TIMES"\n\t\t            ,"LAST_PW_MOD_DT"\n\t\t            ,"ADD_DT"\n\t\t            ,"ADD_USER_ID"\n\t\t            ,"ADD_USER_COMPANY_ID"\n\t\t            ,"DATA_STATUS"\n\t\t            )\n\t\tSELECT iMASTER_LOG_IDENT,'${PARAM_FUNC_ID}','C'\n\t\t             , "USERID"\n\t\t            ,"USERNAME"\n\t\t            ,"PASSWORD"\n\t\t            ,"COMPANY"\n\t\t            ,"DEPID"\n\t\t            ,"EMAIL"\n\t\t            ,"TEL1"\n\t\t            ,"TEL2"\n\t\t            ,"ISLOCK"\n\t\t            ,"EMP_NO"\n\t\t            ,"JOB_TITLE"\n\t\t            ,"JOB_GRADE"\n\t\t            ,"PRE_1_PASSWORD"\n\t\t            ,"PRE_2_PASSWORD"\n\t\t            ,"PRE_3_PASSWORD"\n\t\t            ,"ACTIVE_DATE"\n\t\t            ,"DEADLINE_DATE"\n\t\t            ,"WRONG_TIMES"\n\t\t            ,"LAST_PW_MOD_DT"\n\t\t            ,"ADD_DT"\n\t\t            ,"ADD_USER_ID"\n\t\t            ,"ADD_USER_COMPANY_ID"\n\t\t            ,"DATA_STATUS"\n\t\t            \n\t\tFROM JH_CONF_USERS\n\t\tWHERE USERID\= vMASTER_PK;\n\n\t\t/*1.4寫入MEM_API_RESULT - Action Return */\n\t\tINSERT INTO MEM_API_RESULT(\n\t\t\t\t\t"ProcPK"\n\t\t\t\t\t,"hashValues"\n\t\t\t\t\t,"RETURN_CODE"\n\t\t\t\t\t,"RETURN_MSG"\n\t\t\t\t\t,"DATA_UNIQUE_KEY"\n\t\t\t\t\t,"DATA_ACTION_TYPE"\n\t\t\t\t\t,"MEMO")\n\t\tVALUES (\n\t\t\t\t\t${LOGPK}\n\t\t\t\t\t, vFROM_OUTSIDE\n\t\t\t\t\t,0\n\t\t\t\t\t,'SUCCESS'\n\t\t\t\t\t, vMASTER_PK\n\t\t\t\t\t,'C'\n\t\t\t\t\t,'$$MEMO$$');\n\tEND IF;
TestOracle_USER_C=\t\tvRETURN_KEY_STR \:\= '$$USERID$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='C';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M TABLE 新增*/\n\t\tINSERT INTO JH_CONF_USERS("USERID" ,"USERNAME" ,"PASSWORD" ,"COMPANY" ,"DEPID" ,"EMAIL" ,"TEL1" ,"TEL2" ,"ISLOCK" ,"EMP_NO" ,"JOB_TITLE" ,"JOB_GRADE" ,"PRE_1_PASSWORD" ,"PRE_2_PASSWORD" ,"PRE_3_PASSWORD" ,"ACTIVE_DATE" ,"DEADLINE_DATE" ,"WRONG_TIMES" ,"LAST_PW_MOD_DT" ,"ADD_DT" ,"ADD_USER_ID" ,"ADD_USER_COMPANY_ID" ,"DATA_STATUS")\n\t\tVALUES ('$$USERID$$' ,'$$USERNAME$$' ,'$$PASSWORD$$' ,'$$COMPANY$$' ,'$$DEPID$$' ,'$$EMAIL$$' ,'$$TEL1$$' ,'$$TEL2$$' ,'$$ISLOCK$$' ,'$$EMP_NO$$' ,'$$JOB_TITLE$$' ,'$$JOB_GRADE$$' ,'$$PRE_1_PASSWORD$$' ,'$$PRE_2_PASSWORD$$' ,'$$PRE_3_PASSWORD$$' ,'$$ACTIVE_DATE$$' ,'$$DEADLINE_DATE$$' ,'$$WRONG_TIMES$$' ,TO_DATE('$$LAST_PW_MOD_DT$$','YYYY-MM-DD HH24\:MI\:SS') ,SYSDATE ,vPARAM_SOURCE_COMING ,vPARAM_COMPANY ,'$$DATA_STATUS$$')\n\t\tRETURNING CAST(USERID AS varchar2(200))  INTO vPK; /*取得資料表PK值*/\n\t\tvMASTER_PK\:\=vPK;\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'INSERT',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK) , 'JH_CONF_USERS' , i_LOG_IDENT); \n\n\t\t/*M- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_JH_CONF_USERS\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'C',T.* \n\t\tFROM JH_CONF_USERS T\n\t\tWHERE USERID\=vPK;\n\n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'C',vMEMO); \n
TestOracle_USER_D=\t\tvRETURN_KEY_STR \:\= '$$USERID$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='D';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\tSELECT CAST('$$USERID$$' AS VARCHAR2(200)) INTO vPK  FROM DUAL;\n\n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tJHSP_CHK_DATA_STATUS('JH_CONF_USERS', 'USERID','VARCHAR2', vPK);\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'DELETE',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK) , 'JH_CONF_USERS' , i_LOG_IDENT); \n\n\t\t/*M- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_JH_CONF_USERS\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'D',T.* \n\t\tFROM JH_CONF_USERS T\n\t\tWHERE USERID\=vPK;\n\n\t\t/*M-刪除主檔及明細資料檔*/\n\t\tDELETE JH_CONF_USERS  WHERE USERID\=vPK;\n\n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'D',vMEMO); \n
TestOracle_USER_U=\t\tvRETURN_KEY_STR \:\= '$$USERID$$'; /*BUSINESS PK欄位 */\n\t\tvLOGPK\:\='${LOGPK}';\n\t\tvMEMO\:\='$$MEMO$$';\n\t\tvProcType\:\='U';\n\t\tvPARAM_TASK_CODE\:\='$$PARAM_TASK_CODE$$';\n\t\tvPARAM_FUNC_ID\:\='${PARAM_FUNC_ID}';\n\t\tvPARAM_SOURCE_COMING\:\='${PARAM_SOURCE_COMING}';\n\t\tvPARAM_COMPANY\:\='${PARAM_COMPANY}';\n\t\tvPARAM_SESSION_ID\:\='${PARAM_SESSION_ID}';\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\tSELECT CAST('$$USERID$$' AS VARCHAR2(200)) INTO vPK  FROM DUAL;\n\n\t\t/*檢核該筆資料的DATA_STATUS,判斷該筆資料是否可修改*/\n\t\tJHSP_CHK_DATA_STATUS('JH_CONF_USERS', 'USERID','VARCHAR2', vPK);\n\n\t\t/*RTN_SP_STR*//*此段註解語法是為了回傳資料至sp,請勿刪除*/\n\n\t\t/*M-寫入DATA_CHANGE_LOG*/\n\t\tJHSP_INS_CHG_LOG(vPARAM_FUNC_ID,'UPDATE',vPARAM_SOURCE_COMING,vPK,vMEMO,vPARAM_COMPANY,vPARAM_SESSION_ID, TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR) , 'JH_CONF_USERS' , i_LOG_IDENT); \n\n\t\t/*M- 寫入 DATA Detail LOG Table(before modified)*/\n\t\tINSERT INTO LOG_JH_CONF_USERS\n\t\tSELECT i_LOG_IDENT,vPARAM_FUNC_ID,'U',T.* \n\t\tFROM JH_CONF_USERS T\n\t\tWHERE USERID\=vPK;\n\n\t\t/*-修改M TABLE*/\n\t\tUPDATE JH_CONF_USERS SET\n\t\t"USERNAME"\= CASE WHEN '$$USERNAME$$'\='\#NO_DATA\#'  THEN "USERNAME" ELSE TO_NCHAR('$$USERNAME$$') END\n\t\t ,"PASSWORD"\= CASE WHEN '$$PASSWORD$$'\='\#NO_DATA\#'  THEN "PASSWORD" ELSE '$$PASSWORD$$' END\n\t\t ,"COMPANY"\= CASE WHEN '$$COMPANY$$'\='\#NO_DATA\#'  THEN "COMPANY" ELSE '$$COMPANY$$' END\n\t\t ,"DEPID"\= CASE WHEN '$$DEPID$$'\='\#NO_DATA\#'  THEN "DEPID" ELSE '$$DEPID$$' END\n\t\t ,"EMAIL"\= CASE WHEN '$$EMAIL$$'\='\#NO_DATA\#'  THEN "EMAIL" ELSE '$$EMAIL$$' END\n\t\t ,"TEL1"\= CASE WHEN '$$TEL1$$'\='\#NO_DATA\#'  THEN "TEL1" ELSE '$$TEL1$$' END\n\t\t ,"TEL2"\= CASE WHEN '$$TEL2$$'\='\#NO_DATA\#'  THEN "TEL2" ELSE '$$TEL2$$' END\n\t\t ,"ISLOCK"\= CASE WHEN '$$ISLOCK$$'\='\#NO_DATA\#'  THEN "ISLOCK" ELSE '$$ISLOCK$$' END\n\t\t ,"EMP_NO"\= CASE WHEN '$$EMP_NO$$'\='\#NO_DATA\#'  THEN "EMP_NO" ELSE '$$EMP_NO$$' END\n\t\t ,"JOB_TITLE"\= CASE WHEN '$$JOB_TITLE$$'\='\#NO_DATA\#'  THEN "JOB_TITLE" ELSE TO_NCHAR('$$JOB_TITLE$$') END\n\t\t ,"JOB_GRADE"\= CASE WHEN '$$JOB_GRADE$$'\='\#NO_DATA\#'  THEN "JOB_GRADE" ELSE TO_NCHAR('$$JOB_GRADE$$') END\n\t\t ,"PRE_1_PASSWORD"\= CASE WHEN '$$PRE_1_PASSWORD$$'\='\#NO_DATA\#'  THEN "PRE_1_PASSWORD" ELSE '$$PRE_1_PASSWORD$$' END\n\t\t ,"PRE_2_PASSWORD"\= CASE WHEN '$$PRE_2_PASSWORD$$'\='\#NO_DATA\#'  THEN "PRE_2_PASSWORD" ELSE '$$PRE_2_PASSWORD$$' END\n\t\t ,"PRE_3_PASSWORD"\= CASE WHEN '$$PRE_3_PASSWORD$$'\='\#NO_DATA\#'  THEN "PRE_3_PASSWORD" ELSE '$$PRE_3_PASSWORD$$' END\n\t\t ,"ACTIVE_DATE"\= CASE WHEN '$$ACTIVE_DATE$$'\='\#NO_DATA\#'  THEN "ACTIVE_DATE" ELSE '$$ACTIVE_DATE$$' END\n\t\t ,"DEADLINE_DATE"\= CASE WHEN '$$DEADLINE_DATE$$'\='\#NO_DATA\#'  THEN "DEADLINE_DATE" ELSE '$$DEADLINE_DATE$$' END\n\t\t ,"WRONG_TIMES"\= CASE WHEN '$$WRONG_TIMES$$'\='\#NO_DATA\#'  THEN "WRONG_TIMES" ELSE TO_NUMBER('$$WRONG_TIMES$$' DEFAULT NULL ON CONVERSION ERROR) END\n\t\t ,"LAST_PW_MOD_DT"\= CASE WHEN '$$LAST_PW_MOD_DT$$'\='\#NO_DATA\#'  THEN "LAST_PW_MOD_DT" ELSE TO_DATE('$$LAST_PW_MOD_DT$$' DEFAULT NULL ON CONVERSION ERROR,'YYYY-MM-DD HH24\:MI\:SS') END\n\t\t ,"LAST_MOD_DT"\= SYSDATE\n\t\t ,"LAST_MOD_USER_ID"\= vPARAM_SOURCE_COMING\n\t\t ,"LAST_MOD_USER_COMPANY_ID"\= vPARAM_COMPANY\n\t\t ,"DATA_STATUS"\= CASE WHEN '$$DATA_STATUS$$'\='\#NO_DATA\#'  THEN "DATA_STATUS" ELSE '$$DATA_STATUS$$' END\n\t\tWHERE USERID\=vPK;\n\n\t\t/*M-寫入MEM_API_RESULT - Action Return */\n\t\tJHSP_INS_API_RESULT(TO_NUMBER(vLOGPK  DEFAULT NULL ON CONVERSION ERROR), vFROM_OUTSIDE ,0, 'SUCCESS', vPK,'U',vMEMO);
TestOracleDB2=SELECT USERID, USERNAME\nFROM JH_CONF_USERS
TestOracleDB=SELECT * \nFROM ( \n      SELECT COUNT(*) OVER () AS "totalProperty" \n        ,ROW_NUMBER() OVER (ORDER BY USERID) AS "RowNum" \n        ,"USERID"\n        ,"USERNAME"\n        ,"PASSWORD"\n        ,"COMPANY"\n        ,"DEPID"\n        ,"EMAIL"\n        ,"TEL1"\n        ,"TEL2"\n        ,"ISLOCK"\n        ,"EMP_NO"\n        ,"JOB_TITLE"\n        ,"JOB_GRADE"\n        ,"PRE_1_PASSWORD"\n        ,"PRE_2_PASSWORD"\n        ,"PRE_3_PASSWORD"\n        ,"ACTIVE_DATE"\n        ,"DEADLINE_DATE"\n        ,"WRONG_TIMES"\n        ,TO_CHAR("LAST_PW_MOD_DT",'YYYY-MM-DD HH24\:MI\:SS') "LAST_PW_MOD_DT"\n        ,TO_CHAR("ADD_DT",'YYYY-MM-DD HH24\:MI\:SS') "ADD_DT"/*固定欄位必須輸出，不可移除*/\n        ,"ADD_USER_ID"/*固定欄位必須輸出，不可移除*/\n        ,"ADD_USER_COMPANY_ID"/*固定欄位必須輸出，不可移除*/\n        ,TO_CHAR("LAST_MOD_DT",'YYYY-MM-DD HH24\:MI\:SS') "LAST_MOD_DT"/*固定欄位必須輸出，不可移除*/\n        ,"LAST_MOD_USER_ID"/*固定欄位必須輸出，不可移除*/\n        ,"LAST_MOD_USER_COMPANY_ID"/*固定欄位必須輸出，不可移除*/\n        ,TO_CHAR("DEL_DT",'YYYY-MM-DD HH24\:MI\:SS') "DEL_DT"/*固定欄位必須輸出，不可移除*/\n        ,"DEL_USER_ID"/*固定欄位必須輸出，不可移除*/\n        ,"DEL_USER_COMPANY_ID"/*固定欄位必須輸出，不可移除*/\n        ,"COMPANY_ID"/*固定欄位必須輸出，不可移除*/\n        ,"DATA_STATUS"/*固定欄位必須輸出，不可移除*/\n      FROM JH_CONF_USERS\n     WHERE ( DATA_STATUS \= '$$DATA_STATUS$$' OR '$$DATA_STATUS$$' \= 'ALL')\n      ) new1\nWHERE RowNum > $$start$$\nAND RowNum <\= ($$start$$ + $$limit$$)
THRESH_TEST=PLUGINS/SYS_REPORT2/FILE_TO_TABLE_MAIN.kjb
THRESH_TO_TABLE=PLUGINS/SYS_REPORT2/FILE_TO_TABLE_MAIN.kjb
TODD_TEST_JJ=SELECT COUNT(*) AS 'NUMS'  FROM PROCESS_LOG WITH(NOLOCK)
TODD_TEST_TOFLOW_01=SELECT TOP 3 * FROM JH_WS02_CODE_LIST
TODD_TEST_TOFLOW_02=SELECT * FROM JH_WS02_CODE_RANGE_ANALYSIS WHERE CODE_ID_PK \= '$$PK$$'
TODD_TEST_TOFLOW_03=SELECT * FROM JH_WS02_CODE_FORMAT_LIST WHERE CODE_ID_PK \= '$$CODE_ID_PK$$'
TT_TEST=SELECT A.CODE_ID,B.CODE_ID,* \nFROM JH_WS02_CODE_LIST AS A WITH(NOLOCK) \nLEFT JOIN \nJHDFM_DB_118.DBO.JH_WS02_CODE_LIST AS B WITH(NOLOCK) ON A.CODE_ID \= B.CODE_ID
UPDATE_IS00PF_STATE=Funs/UpdateS00PFState/Entrances.kjb
USERS_REPORT=
WriteRuleData=Funs/WriteRuleData/Entrances.kjb
